<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.6" created="2016-09-01 17:18" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>安德魯的部落格</title>
	<link>http://columns.chicken-house.net</link>
	<description>Software Architect / .NET / Azure / OOP / C#</description>
	<pubDate>Thu, 01 Sep 2016 17:18:51 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://columns.chicken-house.net</wp:base_site_url>
	<wp:base_blog_url>http://columns.chicken-house.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[chicken]]></wp:author_login><wp:author_email><![CDATA[chicken@chicken-house.net]]></wp:author_email><wp:author_display_name><![CDATA[Andrew Wu]]></wp:author_display_name><wp:author_first_name><![CDATA[Andrew]]></wp:author_first_name><wp:author_last_name><![CDATA[Wu]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[net]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[.NET]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>39</wp:term_id>
		<wp:category_nicename><![CDATA[net-core]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[.Net Core]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[aspnet]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[ASP.NET]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[azure]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[AZURE]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[beext]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[BlogEngine Extension]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[benet]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[BlogEngine.NET]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>10</wp:term_id>
		<wp:category_nicename><![CDATA[csharp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[C#]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[cs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Community Server]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>38</wp:term_id>
		<wp:category_nicename><![CDATA[docker]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Docker]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[html]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[HTML/CSS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[msdn]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[MSDN]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[runpc]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[RUN! PC]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[sql]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[SQL]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[tips]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Tips]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[txf]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Transactional NTFS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[wpf]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[WPF]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>33</wp:term_id>
		<wp:category_nicename><![CDATA[art]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[作品集]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[os]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[作業系統]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[thread]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[多執行緒]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[family]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[家人]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[columns]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[專欄]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>34</wp:term_id>
		<wp:category_nicename><![CDATA[writing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[技術隨筆]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>35</wp:term_id>
		<wp:category_nicename><![CDATA[buy]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[敗家]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[543]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[有的沒的]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[未分類]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>36</wp:term_id>
		<wp:category_nicename><![CDATA[diy]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[水電工]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[angry]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[火大]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[oo]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[物件導向]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[past]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[當年勇]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>40</wp:term_id>
		<wp:category_nicename><![CDATA[good_programmer]]></wp:category_nicename>
		<wp:category_parent><![CDATA[columns]]></wp:category_parent>
		<wp:cat_name><![CDATA[系列文章: 如何學好寫程式]]></wp:cat_name>
<wp:category_description><![CDATA["如何學好寫程式" 的系列文章。

說明成為好的軟體工程師必備的知識與技能，還有正確的學習態度。]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>41</wp:term_id>
		<wp:category_nicename><![CDATA[game_of_life]]></wp:category_nicename>
		<wp:category_parent><![CDATA[columns]]></wp:category_parent>
		<wp:cat_name><![CDATA[系列文章: 生命遊戲]]></wp:cat_name>
<wp:category_description><![CDATA[經典計算機科學的練習 "生命遊戲"
藉由這個模擬程式的設計，逐步說明物件導向的各種觀念及應用]]></wp:category_description>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[net]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[.NET]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[net-core]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[.Net Core]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[aspnet]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ASP.NET]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[azure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[AZURE]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[beext]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BlogEngine Extension]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[benet]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BlogEngine.NET]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[csharp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C#]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Community Server]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[docker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Docker]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[html]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[HTML/CSS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[msdn]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[MSDN]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[runpc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[RUN! PC]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SQL]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tips]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Tips]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[txf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Transactional NTFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wpf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[WPF]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[art]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[作品集]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[os]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[作業系統]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[thread]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[多執行緒]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[family]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[家人]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[columns]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[專欄]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[writing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[技術隨筆]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[buy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[敗家]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[543]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[有的沒的]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[未分類]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[diy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[水電工]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[angry]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[火大]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[oo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[物件導向]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[past]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[當年勇]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[good_programmer]]></wp:term_slug>
		<wp:term_parent><![CDATA[columns]]></wp:term_parent>
		<wp:term_name><![CDATA[系列文章: 如何學好寫程式]]></wp:term_name>
		<wp:term_description><![CDATA["如何學好寫程式" 的系列文章。

說明成為好的軟體工程師必備的知識與技能，還有正確的學習態度。]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[game_of_life]]></wp:term_slug>
		<wp:term_parent><![CDATA[columns]]></wp:term_parent>
		<wp:term_name><![CDATA[系列文章: 生命遊戲]]></wp:term_name>
		<wp:term_description><![CDATA[經典計算機科學的練習 "生命遊戲"
藉由這個模擬程式的設計，逐步說明物件導向的各種觀念及應用]]></wp:term_description>
	</wp:term>

	<generator>https://wordpress.org/?v=4.6</generator>

<image>
	<url>http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A-32x32.jpg</url>
	<title>安德魯的部落格</title>
	<link>http://columns.chicken-house.net</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>NETWORK</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/network/</link>
		<pubDate>Mon, 12 Oct 2015 16:52:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 00:52:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 16:52:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[network]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/NETWORK.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1459;s:6:"height";i:628;s:4:"file";s:19:"2015/10/NETWORK.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"NETWORK-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"NETWORK-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"NETWORK-1024x441.png";s:5:"width";i:1024;s:6:"height";i:441;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:19:"NETWORK-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"NETWORK-624x269.png";s:5:"width";i:624;s:6:"height";i:269;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>01</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/attachment/01/</link>
		<pubDate>Mon, 12 Oct 2015 17:03:51 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/01.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 01:03:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 17:03:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/01.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/01.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1025;s:6:"height";i:320;s:4:"file";s:14:"2015/10/01.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"01-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"01-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:15:"01-1024x320.png";s:5:"width";i:1024;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:14:"01-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:14:"01-624x195.png";s:5:"width";i:624;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>02</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/attachment/02/</link>
		<pubDate>Mon, 12 Oct 2015 17:16:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/02.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 01:16:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 17:16:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[02]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/02.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/02.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:651;s:6:"height";i:287;s:4:"file";s:14:"2015/10/02.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"02-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:14:"02-300x132.png";s:5:"width";i:300;s:6:"height";i:132;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:14:"02-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:14:"02-624x275.png";s:5:"width";i:624;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wp_ss_20151012_0002</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/wp_ss_20151012_0002/</link>
		<pubDate>Mon, 12 Oct 2015 17:22:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/wp_ss_20151012_0002.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 01:22:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 17:22:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wp_ss_20151012_0002]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/wp_ss_20151012_0002.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/wp_ss_20151012_0002.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:1280;s:4:"file";s:31:"2015/10/wp_ss_20151012_0002.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"wp_ss_20151012_0002-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"wp_ss_20151012_0002-180x300.png";s:5:"width";i:180;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:32:"wp_ss_20151012_0002-614x1024.png";s:5:"width";i:614;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:31:"wp_ss_20151012_0002-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:32:"wp_ss_20151012_0002-624x1040.png";s:5:"width";i:624;s:6:"height";i:1040;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>03</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/attachment/03/</link>
		<pubDate>Mon, 12 Oct 2015 17:34:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/03.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 01:34:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 17:34:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[03]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/03.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/03.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1178;s:6:"height";i:734;s:4:"file";s:14:"2015/10/03.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"03-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:14:"03-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:15:"03-1024x638.png";s:5:"width";i:1024;s:6:"height";i:638;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:14:"03-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:14:"03-624x389.png";s:5:"width";i:624;s:6:"height";i:389;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_8272 (Canon PowerShot S110) (Medium)</title>
		<link>http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/img_8272-canon-powershot-s110-medium/</link>
		<pubDate>Sat, 24 Oct 2015 11:20:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date><![CDATA[2015-10-24 19:20:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-24 11:20:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_8272-canon-powershot-s110-medium]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>375</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:48:"2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:48:"IMG_8272-Canon-PowerShot-S110-Medium-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:48:"IMG_8272-Canon-PowerShot-S110-Medium-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:49:"IMG_8272-Canon-PowerShot-S110-Medium-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:48:"IMG_8272-Canon-PowerShot-S110-Medium-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"IMG_8272-Canon-PowerShot-S110-Medium-624x468.jpg";s:5:"width";i:624;s:6:"height";i:468;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_8271 (Canon PowerShot S110) (Medium)</title>
		<link>http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/img_8271-canon-powershot-s110-medium/</link>
		<pubDate>Sat, 24 Oct 2015 11:20:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8271-Canon-PowerShot-S110-Medium.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>377</wp:post_id>
		<wp:post_date><![CDATA[2015-10-24 19:20:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-24 11:20:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_8271-canon-powershot-s110-medium]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>375</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:1024;s:4:"file";s:63:"2015/10/IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:63:"IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:63:"IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:64:"IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:63:"IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:63:"IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586-624x832.jpg";s:5:"width";i:624;s:6:"height";i:832;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:9:"full-orig";a:3:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:40:"IMG_8271-Canon-PowerShot-S110-Medium.jpg";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:48:"IMG_8271-Canon-PowerShot-S110-Medium-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:11:"medium-orig";a:4:{s:4:"file";s:48:"IMG_8271-Canon-PowerShot-S110-Medium-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:10:"large-orig";a:4:{s:4:"file";s:49:"IMG_8271-Canon-PowerShot-S110-Medium-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:48:"IMG_8271-Canon-PowerShot-S110-Medium-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:19:"post-thumbnail-orig";a:4:{s:4:"file";s:48:"IMG_8271-Canon-PowerShot-S110-Medium-624x468.jpg";s:5:"width";i:624;s:6:"height";i:468;s:9:"mime-type";s:10:"image/jpeg";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634cc306b7c5</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634cc306b7c5/</link>
		<pubDate>Sat, 31 Oct 2015 14:12:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc306b7c5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 22:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 14:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634cc306b7c5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc306b7c5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634cc306b7c5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:758;s:6:"height";i:383;s:4:"file";s:29:"2015/10/img_5634cc306b7c5.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634cc306b7c5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634cc306b7c5-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634cc306b7c5-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634cc306b7c5-624x315.png";s:5:"width";i:624;s:6:"height";i:315;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634cc50c552f</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634cc50c552f/</link>
		<pubDate>Sat, 31 Oct 2015 14:12:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc50c552f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 22:12:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 14:12:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634cc50c552f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc50c552f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634cc50c552f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:759;s:6:"height";i:378;s:4:"file";s:29:"2015/10/img_5634cc50c552f.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634cc50c552f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634cc50c552f-300x149.png";s:5:"width";i:300;s:6:"height";i:149;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634cc50c552f-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634cc50c552f-624x311.png";s:5:"width";i:624;s:6:"height";i:311;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634cc6325694</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634cc6325694/</link>
		<pubDate>Sat, 31 Oct 2015 14:12:51 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc6325694.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 22:12:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 14:12:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634cc6325694]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc6325694.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634cc6325694.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:757;s:6:"height";i:435;s:4:"file";s:29:"2015/10/img_5634cc6325694.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634cc6325694-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634cc6325694-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634cc6325694-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634cc6325694-624x359.png";s:5:"width";i:624;s:6:"height";i:359;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634db571dd81</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634db571dd81/</link>
		<pubDate>Sat, 31 Oct 2015 15:16:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634db571dd81.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:16:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:16:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634db571dd81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634db571dd81.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634db571dd81.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:704;s:6:"height";i:75;s:4:"file";s:29:"2015/10/img_5634db571dd81.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"img_5634db571dd81-150x75.png";s:5:"width";i:150;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634db571dd81-300x32.png";s:5:"width";i:300;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:28:"img_5634db571dd81-176x75.png";s:5:"width";i:176;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"img_5634db571dd81-624x66.png";s:5:"width";i:624;s:6:"height";i:66;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dbc969491</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dbc969491/</link>
		<pubDate>Sat, 31 Oct 2015 15:18:33 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dbc969491.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:18:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:18:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dbc969491]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dbc969491.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dbc969491.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:574;s:6:"height";i:196;s:4:"file";s:29:"2015/10/img_5634dbc969491.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dbc969491-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634dbc969491-300x102.png";s:5:"width";i:300;s:6:"height";i:102;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dbc969491-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dc9618794</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dc9618794/</link>
		<pubDate>Sat, 31 Oct 2015 15:21:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dc9618794.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:21:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:21:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dc9618794]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dc9618794.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dc9618794.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:781;s:6:"height";i:385;s:4:"file";s:29:"2015/10/img_5634dc9618794.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dc9618794-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634dc9618794-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dc9618794-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634dc9618794-624x308.png";s:5:"width";i:624;s:6:"height";i:308;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dcb340830</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dcb340830/</link>
		<pubDate>Sat, 31 Oct 2015 15:22:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dcb340830.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:22:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:22:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dcb340830]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dcb340830.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dcb340830.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:942;s:6:"height";i:213;s:4:"file";s:29:"2015/10/img_5634dcb340830.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dcb340830-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634dcb340830-300x68.png";s:5:"width";i:300;s:6:"height";i:68;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dcb340830-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634dcb340830-624x141.png";s:5:"width";i:624;s:6:"height";i:141;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dccf3aa6e</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dccf3aa6e/</link>
		<pubDate>Sat, 31 Oct 2015 15:22:55 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dccf3aa6e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:22:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:22:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dccf3aa6e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dccf3aa6e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dccf3aa6e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:316;s:4:"file";s:29:"2015/10/img_5634dccf3aa6e.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dccf3aa6e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634dccf3aa6e-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dccf3aa6e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634dccf3aa6e-624x305.png";s:5:"width";i:624;s:6:"height";i:305;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dd872b08f</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dd872b08f/</link>
		<pubDate>Sat, 31 Oct 2015 15:25:59 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dd872b08f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:25:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:25:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dd872b08f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dd872b08f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dd872b08f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:664;s:6:"height";i:181;s:4:"file";s:29:"2015/10/img_5634dd872b08f.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dd872b08f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634dd872b08f-300x82.png";s:5:"width";i:300;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dd872b08f-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634dd872b08f-624x170.png";s:5:"width";i:624;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634dde846dc0</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634dde846dc0/</link>
		<pubDate>Sat, 31 Oct 2015 15:27:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dde846dc0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:27:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:27:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634dde846dc0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dde846dc0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634dde846dc0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:136;s:4:"file";s:29:"2015/10/img_5634dde846dc0.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634dde846dc0-150x136.png";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634dde846dc0-300x64.png";s:5:"width";i:300;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634dde846dc0-176x136.png";s:5:"width";i:176;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634dde846dc0-624x133.png";s:5:"width";i:624;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634de4cad27c</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634de4cad27c/</link>
		<pubDate>Sat, 31 Oct 2015 15:29:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634de4cad27c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:29:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:29:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634de4cad27c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634de4cad27c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634de4cad27c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:674;s:6:"height";i:160;s:4:"file";s:29:"2015/10/img_5634de4cad27c.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634de4cad27c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634de4cad27c-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634de4cad27c-176x160.png";s:5:"width";i:176;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5634de4cad27c-624x148.png";s:5:"width";i:624;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634de8cbf38b</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634de8cbf38b/</link>
		<pubDate>Sat, 31 Oct 2015 15:30:20 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634de8cbf38b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:30:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:30:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634de8cbf38b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634de8cbf38b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634de8cbf38b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:685;s:6:"height";i:82;s:4:"file";s:29:"2015/10/img_5634de8cbf38b.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"img_5634de8cbf38b-150x82.png";s:5:"width";i:150;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634de8cbf38b-300x36.png";s:5:"width";i:300;s:6:"height";i:36;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:28:"img_5634de8cbf38b-176x82.png";s:5:"width";i:176;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"img_5634de8cbf38b-624x75.png";s:5:"width";i:624;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634ded3b054b</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634ded3b054b/</link>
		<pubDate>Sat, 31 Oct 2015 15:31:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634ded3b054b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:31:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:31:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634ded3b054b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634ded3b054b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/img_5634ded3b054b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:756;s:6:"height";i:118;s:4:"file";s:29:"2015/10/img_5634ded3b054b.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634ded3b054b-150x118.png";s:5:"width";i:150;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5634ded3b054b-300x47.png";s:5:"width";i:300;s:6:"height";i:47;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634ded3b054b-176x118.png";s:5:"width";i:176;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"img_5634ded3b054b-624x97.png";s:5:"width";i:624;s:6:"height";i:97;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634e751851db</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634e751851db/</link>
		<pubDate>Sat, 31 Oct 2015 16:07:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e751851db.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 00:07:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 16:07:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634e751851db]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e751851db.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5634e751851db.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:160;s:4:"file";s:29:"2015/11/img_5634e751851db.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634e751851db-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634e751851db-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634e751851db-176x160.png";s:5:"width";i:176;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634e7f47dca8</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634e7f47dca8/</link>
		<pubDate>Sat, 31 Oct 2015 16:10:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e7f47dca8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 00:10:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 16:10:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634e7f47dca8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e7f47dca8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5634e7f47dca8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:160;s:4:"file";s:29:"2015/11/img_5634e7f47dca8.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634e7f47dca8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634e7f47dca8-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634e7f47dca8-176x160.png";s:5:"width";i:176;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5634e81ed3baf</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/img_5634e81ed3baf/</link>
		<pubDate>Sat, 31 Oct 2015 16:11:10 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e81ed3baf.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 00:11:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 16:11:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5634e81ed3baf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e81ed3baf.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5634e81ed3baf.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:334;s:6:"height";i:159;s:4:"file";s:29:"2015/11/img_5634e81ed3baf.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5634e81ed3baf-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5634e81ed3baf-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5634e81ed3baf-176x159.png";s:5:"width";i:176;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358907f0c81</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358907f0c81/</link>
		<pubDate>Sun, 01 Nov 2015 03:37:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358907f0c81.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:37:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:37:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358907f0c81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358907f0c81.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358907f0c81.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:29:"2015/11/img_56358907f0c81.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358907f0c81-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358907f0c81-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563589e050a00</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_563589e050a00/</link>
		<pubDate>Sun, 01 Nov 2015 03:41:20 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563589e050a00.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:41:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:41:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563589e050a00]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563589e050a00.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563589e050a00.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:941;s:6:"height";i:653;s:4:"file";s:29:"2015/11/img_563589e050a00.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563589e050a00-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563589e050a00-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563589e050a00-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563589e050a00-624x433.png";s:5:"width";i:624;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358bc0803ca</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358bc0803ca/</link>
		<pubDate>Sun, 01 Nov 2015 03:49:20 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358bc0803ca.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:49:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:49:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358bc0803ca]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358bc0803ca.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358bc0803ca.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:748;s:6:"height";i:384;s:4:"file";s:29:"2015/11/img_56358bc0803ca.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358bc0803ca-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358bc0803ca-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358bc0803ca-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358bc0803ca-624x320.png";s:5:"width";i:624;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358c3594fc3</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358c3594fc3/</link>
		<pubDate>Sun, 01 Nov 2015 03:51:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358c3594fc3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:51:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:51:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358c3594fc3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358c3594fc3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358c3594fc3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:679;s:6:"height";i:222;s:4:"file";s:29:"2015/11/img_56358c3594fc3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358c3594fc3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56358c3594fc3-300x98.png";s:5:"width";i:300;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358c3594fc3-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358c3594fc3-624x204.png";s:5:"width";i:624;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358d04538dd</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358d04538dd/</link>
		<pubDate>Sun, 01 Nov 2015 03:54:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d04538dd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:54:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:54:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358d04538dd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d04538dd.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358d04538dd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:730;s:6:"height";i:323;s:4:"file";s:29:"2015/11/img_56358d04538dd.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358d04538dd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358d04538dd-300x133.png";s:5:"width";i:300;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358d04538dd-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358d04538dd-624x276.png";s:5:"width";i:624;s:6:"height";i:276;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358d6119b15</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358d6119b15/</link>
		<pubDate>Sun, 01 Nov 2015 03:56:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d6119b15.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:56:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:56:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358d6119b15]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d6119b15.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358d6119b15.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1084;s:6:"height";i:692;s:4:"file";s:29:"2015/11/img_56358d6119b15.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358d6119b15-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358d6119b15-300x192.png";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56358d6119b15-1024x654.png";s:5:"width";i:1024;s:6:"height";i:654;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358d6119b15-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358d6119b15-624x398.png";s:5:"width";i:624;s:6:"height";i:398;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358daad66a0</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358daad66a0/</link>
		<pubDate>Sun, 01 Nov 2015 03:57:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358daad66a0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:57:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:57:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358daad66a0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358daad66a0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358daad66a0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:849;s:6:"height";i:337;s:4:"file";s:29:"2015/11/img_56358daad66a0.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358daad66a0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358daad66a0-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358daad66a0-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358daad66a0-624x248.png";s:5:"width";i:624;s:6:"height";i:248;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358df03680e</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358df03680e/</link>
		<pubDate>Sun, 01 Nov 2015 03:58:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358df03680e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 11:58:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 03:58:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358df03680e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358df03680e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358df03680e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:884;s:6:"height";i:339;s:4:"file";s:29:"2015/11/img_56358df03680e.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358df03680e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358df03680e-300x115.png";s:5:"width";i:300;s:6:"height";i:115;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358df03680e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358df03680e-624x239.png";s:5:"width";i:624;s:6:"height";i:239;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358eedbc0ef</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358eedbc0ef/</link>
		<pubDate>Sun, 01 Nov 2015 04:02:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358eedbc0ef.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:02:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:02:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358eedbc0ef]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358eedbc0ef.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358eedbc0ef.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:412;s:6:"height";i:174;s:4:"file";s:29:"2015/11/img_56358eedbc0ef.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358eedbc0ef-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358eedbc0ef-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358eedbc0ef-176x174.png";s:5:"width";i:176;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56358ffb04358</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56358ffb04358/</link>
		<pubDate>Sun, 01 Nov 2015 04:07:23 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358ffb04358.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:07:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:07:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56358ffb04358]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358ffb04358.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56358ffb04358.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:708;s:6:"height";i:507;s:4:"file";s:29:"2015/11/img_56358ffb04358.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56358ffb04358-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56358ffb04358-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56358ffb04358-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56358ffb04358-624x447.png";s:5:"width";i:624;s:6:"height";i:447;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635903eddfbb</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_5635903eddfbb/</link>
		<pubDate>Sun, 01 Nov 2015 04:08:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635903eddfbb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:08:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:08:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635903eddfbb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635903eddfbb.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635903eddfbb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:509;s:4:"file";s:29:"2015/11/img_5635903eddfbb.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635903eddfbb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5635903eddfbb-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635903eddfbb-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5635903eddfbb-624x447.png";s:5:"width";i:624;s:6:"height";i:447;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635906e36809</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_5635906e36809/</link>
		<pubDate>Sun, 01 Nov 2015 04:09:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635906e36809.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:09:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:09:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635906e36809]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635906e36809.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635906e36809.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:707;s:6:"height";i:506;s:4:"file";s:29:"2015/11/img_5635906e36809.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635906e36809-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5635906e36809-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635906e36809-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5635906e36809-624x447.png";s:5:"width";i:624;s:6:"height";i:447;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563590c6f1c1e</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_563590c6f1c1e/</link>
		<pubDate>Sun, 01 Nov 2015 04:10:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563590c6f1c1e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:10:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:10:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563590c6f1c1e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563590c6f1c1e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563590c6f1c1e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:557;s:4:"file";s:29:"2015/11/img_563590c6f1c1e.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563590c6f1c1e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563590c6f1c1e-300x254.png";s:5:"width";i:300;s:6:"height";i:254;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563590c6f1c1e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563590c6f1c1e-624x527.png";s:5:"width";i:624;s:6:"height";i:527;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635921d6ac0d</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_5635921d6ac0d/</link>
		<pubDate>Sun, 01 Nov 2015 04:16:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635921d6ac0d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:16:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:16:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635921d6ac0d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635921d6ac0d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635921d6ac0d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1093;s:6:"height";i:342;s:4:"file";s:29:"2015/11/img_5635921d6ac0d.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635921d6ac0d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5635921d6ac0d-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5635921d6ac0d-1024x320.png";s:5:"width";i:1024;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635921d6ac0d-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5635921d6ac0d-624x195.png";s:5:"width";i:624;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56359288a4dad</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_56359288a4dad/</link>
		<pubDate>Sun, 01 Nov 2015 04:18:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56359288a4dad.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:18:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:18:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56359288a4dad]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56359288a4dad.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_56359288a4dad.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:936;s:6:"height";i:429;s:4:"file";s:29:"2015/11/img_56359288a4dad.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56359288a4dad-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56359288a4dad-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56359288a4dad-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56359288a4dad-624x286.png";s:5:"width";i:624;s:6:"height";i:286;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635964f0eb57</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_5635964f0eb57/</link>
		<pubDate>Sun, 01 Nov 2015 04:34:23 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635964f0eb57.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:34:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:34:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635964f0eb57]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635964f0eb57.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635964f0eb57.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:936;s:6:"height";i:363;s:4:"file";s:29:"2015/11/img_5635964f0eb57.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635964f0eb57-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5635964f0eb57-300x116.png";s:5:"width";i:300;s:6:"height";i:116;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635964f0eb57-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5635964f0eb57-624x242.png";s:5:"width";i:624;s:6:"height";i:242;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635968ced9be</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_5635968ced9be/</link>
		<pubDate>Sun, 01 Nov 2015 04:35:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635968ced9be.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:35:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:35:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635968ced9be]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635968ced9be.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635968ced9be.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:933;s:6:"height";i:308;s:4:"file";s:29:"2015/11/img_5635968ced9be.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635968ced9be-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5635968ced9be-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635968ced9be-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5635968ced9be-624x206.png";s:5:"width";i:624;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563596bc4c7a3</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_563596bc4c7a3/</link>
		<pubDate>Sun, 01 Nov 2015 04:36:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563596bc4c7a3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:36:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:36:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563596bc4c7a3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563596bc4c7a3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563596bc4c7a3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:937;s:6:"height";i:200;s:4:"file";s:29:"2015/11/img_563596bc4c7a3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563596bc4c7a3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_563596bc4c7a3-300x64.png";s:5:"width";i:300;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563596bc4c7a3-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563596bc4c7a3-624x133.png";s:5:"width";i:624;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563597c80e76a</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/img_563597c80e76a/</link>
		<pubDate>Sun, 01 Nov 2015 04:40:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563597c80e76a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:40:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:40:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563597c80e76a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>415</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563597c80e76a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563597c80e76a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:937;s:6:"height";i:435;s:4:"file";s:29:"2015/11/img_563597c80e76a.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563597c80e76a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563597c80e76a-300x139.png";s:5:"width";i:300;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563597c80e76a-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563597c80e76a-624x290.png";s:5:"width";i:624;s:6:"height";i:290;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635a1568329d</title>
		<link>http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/img_5635a1568329d/</link>
		<pubDate>Sun, 01 Nov 2015 05:21:26 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635a1568329d.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 13:21:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 05:21:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635a1568329d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>375</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635a1568329d.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635a1568329d.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:30:"2015/11/img_5635a1568329d.jpeg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"img_5635a1568329d-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:30:"img_5635a1568329d-176x176.jpeg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5635a15757f39</title>
		<link>http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/img_5635a15757f39/</link>
		<pubDate>Sun, 01 Nov 2015 05:21:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635a15757f39.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 13:21:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 05:21:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5635a15757f39]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>375</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635a15757f39.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5635a15757f39.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:29:"2015/11/img_5635a15757f39.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5635a15757f39-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5635a15757f39-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563b6edcdfe26</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563b6edcdfe26/</link>
		<pubDate>Thu, 05 Nov 2015 14:59:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b6edcdfe26.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 22:59:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 14:59:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563b6edcdfe26]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b6edcdfe26.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563b6edcdfe26.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:983;s:6:"height";i:462;s:4:"file";s:29:"2015/11/img_563b6edcdfe26.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563b6edcdfe26-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563b6edcdfe26-300x141.png";s:5:"width";i:300;s:6:"height";i:141;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563b6edcdfe26-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563b6edcdfe26-624x293.png";s:5:"width";i:624;s:6:"height";i:293;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563b717738e52</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563b717738e52/</link>
		<pubDate>Thu, 05 Nov 2015 15:10:47 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b717738e52.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 23:10:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 15:10:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563b717738e52]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b717738e52.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563b717738e52.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:480;s:4:"file";s:29:"2015/11/img_563b717738e52.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563b717738e52-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563b717738e52-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563b717738e52-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563b717738e52-624x468.png";s:5:"width";i:624;s:6:"height";i:468;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563b802e693b1</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563b802e693b1/</link>
		<pubDate>Thu, 05 Nov 2015 16:13:34 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b802e693b1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>512</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 00:13:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 16:13:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563b802e693b1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563b802e693b1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563b802e693b1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:536;s:6:"height";i:215;s:4:"file";s:29:"2015/11/img_563b802e693b1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563b802e693b1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563b802e693b1-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563b802e693b1-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563ca54e8f511</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563ca54e8f511/</link>
		<pubDate>Fri, 06 Nov 2015 13:04:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563ca54e8f511.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 21:04:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 13:04:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563ca54e8f511]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563ca54e8f511.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563ca54e8f511.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1045;s:6:"height";i:634;s:4:"file";s:29:"2015/11/img_563ca54e8f511.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563ca54e8f511-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563ca54e8f511-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_563ca54e8f511-1024x621.png";s:5:"width";i:1024;s:6:"height";i:621;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563ca54e8f511-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563ca54e8f511-624x379.png";s:5:"width";i:624;s:6:"height";i:379;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563cb0e81195b</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563cb0e81195b/</link>
		<pubDate>Fri, 06 Nov 2015 13:53:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563cb0e81195b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>516</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 21:53:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 13:53:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563cb0e81195b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563cb0e81195b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563cb0e81195b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:529;s:6:"height";i:234;s:4:"file";s:29:"2015/11/img_563cb0e81195b.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563cb0e81195b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563cb0e81195b-300x133.png";s:5:"width";i:300;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563cb0e81195b-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563cc12657693</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563cc12657693/</link>
		<pubDate>Fri, 06 Nov 2015 15:03:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563cc12657693.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>520</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 23:03:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 15:03:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563cc12657693]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563cc12657693.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563cc12657693.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:357;s:4:"file";s:29:"2015/11/img_563cc12657693.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563cc12657693-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563cc12657693-300x214.png";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563cc12657693-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wordpress-start-image[1]</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/wordpress-start-image1/</link>
		<pubDate>Fri, 06 Nov 2015 15:03:59 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/Wordpress-start-image1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>521</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 23:03:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 15:03:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-start-image1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/Wordpress-start-image1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/Wordpress-start-image1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:357;s:4:"file";s:34:"2015/11/Wordpress-start-image1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Wordpress-start-image1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"Wordpress-start-image1-300x214.jpg";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:34:"Wordpress-start-image1-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563f897aa394e</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563f897aa394e/</link>
		<pubDate>Sun, 08 Nov 2015 17:42:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f897aa394e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>523</wp:post_id>
		<wp:post_date><![CDATA[2015-11-09 01:42:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-08 17:42:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563f897aa394e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f897aa394e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563f897aa394e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:780;s:6:"height";i:793;s:4:"file";s:29:"2015/11/img_563f897aa394e.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563f897aa394e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563f897aa394e-295x300.png";s:5:"width";i:295;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563f897aa394e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_563f897aa394e-624x634.png";s:5:"width";i:624;s:6:"height";i:634;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_563f8aa579587</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_563f8aa579587/</link>
		<pubDate>Sun, 08 Nov 2015 17:47:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f8aa579587.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>524</wp:post_id>
		<wp:post_date><![CDATA[2015-11-09 01:47:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-08 17:47:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_563f8aa579587]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f8aa579587.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_563f8aa579587.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:539;s:6:"height";i:239;s:4:"file";s:29:"2015/11/img_563f8aa579587.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_563f8aa579587-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_563f8aa579587-300x133.png";s:5:"width";i:300;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_563f8aa579587-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5644cdd2c7b64</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_5644cdd2c7b64/</link>
		<pubDate>Thu, 12 Nov 2015 17:35:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644cdd2c7b64.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 01:35:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-12 17:35:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5644cdd2c7b64]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644cdd2c7b64.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5644cdd2c7b64.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:367;s:4:"file";s:29:"2015/11/img_5644cdd2c7b64.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5644cdd2c7b64-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5644cdd2c7b64-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5644cdd2c7b64-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5644cdd2c7b64-624x298.png";s:5:"width";i:624;s:6:"height";i:298;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5644ce3daf8b8</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_5644ce3daf8b8/</link>
		<pubDate>Thu, 12 Nov 2015 17:37:01 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644ce3daf8b8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 01:37:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-12 17:37:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5644ce3daf8b8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644ce3daf8b8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5644ce3daf8b8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:534;s:6:"height";i:229;s:4:"file";s:29:"2015/11/img_5644ce3daf8b8.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5644ce3daf8b8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5644ce3daf8b8-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5644ce3daf8b8-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5644ce9385107</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/img_5644ce9385107/</link>
		<pubDate>Thu, 12 Nov 2015 17:38:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644ce9385107.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>528</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 01:38:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-12 17:38:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5644ce9385107]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644ce9385107.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/img_5644ce9385107.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:540;s:6:"height";i:214;s:4:"file";s:29:"2015/11/img_5644ce9385107.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5644ce9385107-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5644ce9385107-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5644ce9385107-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>azure</title>
		<link>http://columns.chicken-house.net/2013/03/17/azure-multi-tenancy-application-2-%e8%b3%87%e6%96%99%e5%b1%a4%e7%9a%84%e9%81%b8%e6%93%87/azure/</link>
		<pubDate>Mon, 30 Nov 2015 17:22:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2013/03/azure.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>535</wp:post_id>
		<wp:post_date><![CDATA[2015-11-30 17:22:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-30 17:22:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[azure]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2013/03/azure.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/azure.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:17:"2013/03/azure.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"azure-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:17:"azure-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:15:"azure-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:17:"azure-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5660723bd1e09</title>
		<link>http://columns.chicken-house.net/2015/12/03/casestudy-nginx-as-reverseproxy/img_5660723bd1e09/</link>
		<pubDate>Thu, 03 Dec 2015 16:47:55 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5660723bd1e09.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date><![CDATA[2015-12-03 16:47:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-03 16:47:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5660723bd1e09]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>543</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5660723bd1e09.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5660723bd1e09.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:610;s:6:"height";i:201;s:4:"file";s:29:"2015/12/img_5660723bd1e09.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5660723bd1e09-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5660723bd1e09-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5660723bd1e09-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5660723bd1e09-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5660723bd1e09-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5660789d7b652</title>
		<link>http://columns.chicken-house.net/2015/12/03/casestudy-nginx-as-reverseproxy/img_5660789d7b652/</link>
		<pubDate>Thu, 03 Dec 2015 17:15:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5660789d7b652.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date><![CDATA[2015-12-03 17:15:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-03 17:15:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5660789d7b652]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>543</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5660789d7b652.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5660789d7b652.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1509;s:6:"height";i:838;s:4:"file";s:29:"2015/12/img_5660789d7b652.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5660789d7b652-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5660789d7b652-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5660789d7b652-1024x569.png";s:5:"width";i:1024;s:6:"height";i:569;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5660789d7b652-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5660789d7b652-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5660789d7b652-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5660789d7b652-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5660789d7b652-624x347.png";s:5:"width";i:624;s:6:"height";i:347;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nginx-logo</title>
		<link>http://columns.chicken-house.net/2015/12/03/casestudy-nginx-as-reverseproxy/nginx-logo/</link>
		<pubDate>Thu, 03 Dec 2015 18:02:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/nginx-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>550</wp:post_id>
		<wp:post_date><![CDATA[2015-12-03 18:02:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-03 18:02:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nginx-logo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>543</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/nginx-logo.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/nginx-logo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:22:"2015/12/nginx-logo.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"nginx-logo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"nginx-logo-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:22:"nginx-logo-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:20:"nginx-logo-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:22:"nginx-logo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:22:"nginx-logo-512x360.png";s:5:"width";i:512;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56608a1da440e</title>
		<link>http://columns.chicken-house.net/2015/12/03/casestudy-nginx-as-reverseproxy/img_56608a1da440e/</link>
		<pubDate>Thu, 03 Dec 2015 18:29:49 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56608a1da440e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>553</wp:post_id>
		<wp:post_date><![CDATA[2015-12-03 18:29:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-03 18:29:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56608a1da440e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>543</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56608a1da440e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56608a1da440e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1905;s:6:"height";i:1060;s:4:"file";s:29:"2015/12/img_56608a1da440e.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56608a1da440e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56608a1da440e-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56608a1da440e-1024x570.png";s:5:"width";i:1024;s:6:"height";i:570;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56608a1da440e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56608a1da440e-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56608a1da440e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56608a1da440e-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56608a1da440e-624x347.png";s:5:"width";i:624;s:6:"height";i:347;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Connect 2015</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/connect14/</link>
		<pubDate>Sat, 05 Dec 2015 09:46:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/connect14.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>563</wp:post_id>
		<wp:post_date><![CDATA[2015-12-05 09:46:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-05 09:46:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[connect14]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/connect14-e1449308872383.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/connect14-e1449308872383.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:297;s:6:"height";i:297;s:4:"file";s:36:"2015/12/connect14-e1449308872383.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"connect14-e1449308872383-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"connect14-300x170.jpg";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:36:"connect14-e1449308872383-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:34:"connect14-e1449308872383-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:36:"connect14-e1449308872383-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:9:"full-orig";a:3:{s:5:"width";i:525;s:6:"height";i:298;s:4:"file";s:13:"connect14.jpg";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:21:"connect14-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:11:"medium-orig";a:4:{s:4:"file";s:21:"connect14-300x170.jpg";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:10:"image/jpeg";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:21:"connect14-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:17:"latest-th-60-orig";a:4:{s:4:"file";s:19:"connect14-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:24:"related-post-th-150-orig";a:4:{s:4:"file";s:21:"connect14-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image_3</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/image_3/</link>
		<pubDate>Sat, 05 Dec 2015 09:49:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/image_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date><![CDATA[2015-12-05 09:49:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-05 09:49:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/image_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/image_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:155;s:4:"file";s:19:"2015/12/image_3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"image_3-300x78.png";s:5:"width";i:300;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:19:"image_3-176x155.png";s:5:"width";i:176;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:17:"image_3-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:19:"image_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dc4cc3f35</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dc4cc3f35/</link>
		<pubDate>Sun, 06 Dec 2015 06:57:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc4cc3f35.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 06:57:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 06:57:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dc4cc3f35]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc4cc3f35.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dc4cc3f35.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:827;s:6:"height";i:140;s:4:"file";s:29:"2015/12/img_5663dc4cc3f35.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dc4cc3f35-150x140.png";s:5:"width";i:150;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663dc4cc3f35-300x51.png";s:5:"width";i:300;s:6:"height";i:51;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dc4cc3f35-176x140.png";s:5:"width";i:176;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dc4cc3f35-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dc4cc3f35-150x140.png";s:5:"width";i:150;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663dc4cc3f35-720x140.png";s:5:"width";i:720;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663dc4cc3f35-624x106.png";s:5:"width";i:624;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dc8742088</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dc8742088/</link>
		<pubDate>Sun, 06 Dec 2015 06:58:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc8742088.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>577</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 06:58:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 06:58:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dc8742088]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc8742088.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dc8742088.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:704;s:6:"height";i:291;s:4:"file";s:29:"2015/12/img_5663dc8742088.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dc8742088-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5663dc8742088-300x124.png";s:5:"width";i:300;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dc8742088-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dc8742088-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dc8742088-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663dc8742088-624x258.png";s:5:"width";i:624;s:6:"height";i:258;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dcdf06f93</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dcdf06f93/</link>
		<pubDate>Sun, 06 Dec 2015 06:59:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dcdf06f93.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>578</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 06:59:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 06:59:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dcdf06f93]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dcdf06f93.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dcdf06f93.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:534;s:6:"height";i:674;s:4:"file";s:29:"2015/12/img_5663dcdf06f93.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dcdf06f93-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5663dcdf06f93-238x300.png";s:5:"width";i:238;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dcdf06f93-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dcdf06f93-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dcdf06f93-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663dcdf06f93-534x360.png";s:5:"width";i:534;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dd38b9c82</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dd38b9c82/</link>
		<pubDate>Sun, 06 Dec 2015 07:01:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd38b9c82.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:01:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:01:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dd38b9c82]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd38b9c82.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dd38b9c82.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:551;s:6:"height";i:138;s:4:"file";s:29:"2015/12/img_5663dd38b9c82.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dd38b9c82-150x138.png";s:5:"width";i:150;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663dd38b9c82-300x75.png";s:5:"width";i:300;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dd38b9c82-176x138.png";s:5:"width";i:176;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dd38b9c82-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dd38b9c82-150x138.png";s:5:"width";i:150;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dd60820d4</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dd60820d4/</link>
		<pubDate>Sun, 06 Dec 2015 07:01:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd60820d4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>580</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:01:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:01:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dd60820d4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd60820d4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dd60820d4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1053;s:6:"height";i:308;s:4:"file";s:29:"2015/12/img_5663dd60820d4.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dd60820d4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663dd60820d4-300x88.png";s:5:"width";i:300;s:6:"height";i:88;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5663dd60820d4-1024x300.png";s:5:"width";i:1024;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dd60820d4-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dd60820d4-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dd60820d4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663dd60820d4-720x308.png";s:5:"width";i:720;s:6:"height";i:308;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663dd60820d4-624x183.png";s:5:"width";i:624;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663dd8af0c94</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663dd8af0c94/</link>
		<pubDate>Sun, 06 Dec 2015 07:02:34 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd8af0c94.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>581</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:02:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:02:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663dd8af0c94]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd8af0c94.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663dd8af0c94.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:831;s:6:"height";i:365;s:4:"file";s:29:"2015/12/img_5663dd8af0c94.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-300x132.png";s:5:"width";i:300;s:6:"height";i:132;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663dd8af0c94-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663dd8af0c94-624x274.png";s:5:"width";i:624;s:6:"height";i:274;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663ddd168151</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663ddd168151/</link>
		<pubDate>Sun, 06 Dec 2015 07:03:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663ddd168151.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:03:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:03:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663ddd168151]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663ddd168151.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663ddd168151.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1168;s:6:"height";i:383;s:4:"file";s:29:"2015/12/img_5663ddd168151.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663ddd168151-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663ddd168151-300x98.png";s:5:"width";i:300;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5663ddd168151-1024x336.png";s:5:"width";i:1024;s:6:"height";i:336;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663ddd168151-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663ddd168151-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663ddd168151-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663ddd168151-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663ddd168151-624x205.png";s:5:"width";i:624;s:6:"height";i:205;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663de26333f3</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663de26333f3/</link>
		<pubDate>Sun, 06 Dec 2015 07:05:10 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de26333f3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:05:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:05:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663de26333f3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de26333f3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663de26333f3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:714;s:6:"height";i:241;s:4:"file";s:29:"2015/12/img_5663de26333f3.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663de26333f3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5663de26333f3-300x101.png";s:5:"width";i:300;s:6:"height";i:101;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663de26333f3-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663de26333f3-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663de26333f3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663de26333f3-624x211.png";s:5:"width";i:624;s:6:"height";i:211;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663de78d60d9</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663de78d60d9/</link>
		<pubDate>Sun, 06 Dec 2015 07:06:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de78d60d9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>584</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 07:06:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 07:06:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663de78d60d9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de78d60d9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663de78d60d9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:847;s:6:"height";i:138;s:4:"file";s:29:"2015/12/img_5663de78d60d9.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663de78d60d9-150x138.png";s:5:"width";i:150;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663de78d60d9-300x49.png";s:5:"width";i:300;s:6:"height";i:49;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663de78d60d9-176x138.png";s:5:"width";i:176;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663de78d60d9-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663de78d60d9-150x138.png";s:5:"width";i:150;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5663de78d60d9-720x138.png";s:5:"width";i:720;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5663de78d60d9-624x102.png";s:5:"width";i:624;s:6:"height";i:102;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5663f2a4df2fd</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/img_5663f2a4df2fd/</link>
		<pubDate>Sun, 06 Dec 2015 08:32:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663f2a4df2fd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 08:32:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 08:32:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5663f2a4df2fd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>560</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663f2a4df2fd.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5663f2a4df2fd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:155;s:4:"file";s:29:"2015/12/img_5663f2a4df2fd.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5663f2a4df2fd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5663f2a4df2fd-300x78.png";s:5:"width";i:300;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5663f2a4df2fd-176x155.png";s:5:"width";i:176;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5663f2a4df2fd-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5663f2a4df2fd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker_machine[1]</title>
		<link>http://columns.chicken-house.net/?attachment_id=601</link>
		<pubDate>Sat, 19 Dec 2015 08:08:56 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/docker_machine1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>601</wp:post_id>
		<wp:post_date><![CDATA[2015-12-19 16:08:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-19 08:08:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker_machine1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>600</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/docker_machine1-e1450512797959.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/docker_machine1-e1450512797959.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:699;s:6:"height";i:701;s:4:"file";s:42:"2015/12/docker_machine1-e1450512797959.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:40:"docker_machine1-e1450512797959-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-699x360.png";s:5:"width";i:699;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:42:"docker_machine1-e1450512797959-624x626.png";s:5:"width";i:624;s:6:"height";i:626;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:9:"full-orig";a:3:{s:5:"width";i:700;s:6:"height";i:830;s:4:"file";s:19:"docker_machine1.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:27:"docker_machine1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:27:"docker_machine1-253x300.png";s:5:"width";i:253;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:27:"docker_machine1-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:17:"latest-th-60-orig";a:4:{s:4:"file";s:25:"docker_machine1-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:24:"related-post-th-150-orig";a:4:{s:4:"file";s:27:"docker_machine1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"slider-recent-posts-orig";a:4:{s:4:"file";s:27:"docker_machine1-700x360.png";s:5:"width";i:700;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:19:"post-thumbnail-orig";a:4:{s:4:"file";s:27:"docker_machine1-624x740.png";s:5:"width";i:624;s:6:"height";i:740;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_567e9b3cb3f8f</title>
		<link>http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/img_567e9b3cb3f8f/</link>
		<pubDate>Sat, 26 Dec 2015 13:50:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567e9b3cb3f8f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date><![CDATA[2015-12-26 21:50:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-26 13:50:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_567e9b3cb3f8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567e9b3cb3f8f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_567e9b3cb3f8f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:738;s:6:"height";i:647;s:4:"file";s:29:"2015/12/img_567e9b3cb3f8f.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-300x263.png";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_567e9b3cb3f8f-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_567e9b3cb3f8f-624x547.png";s:5:"width";i:624;s:6:"height";i:547;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_567f9c9e811a9</title>
		<link>http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/img_567f9c9e811a9/</link>
		<pubDate>Sun, 27 Dec 2015 08:09:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567f9c9e811a9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date><![CDATA[2015-12-27 16:09:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 08:09:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_567f9c9e811a9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>620</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567f9c9e811a9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_567f9c9e811a9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:584;s:6:"height";i:607;s:4:"file";s:29:"2015/12/img_567f9c9e811a9.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_567f9c9e811a9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_567f9c9e811a9-289x300.png";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_567f9c9e811a9-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_567f9c9e811a9-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_567f9c9e811a9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_567f9c9e811a9-584x360.png";s:5:"width";i:584;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5680125668472</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_5680125668472/</link>
		<pubDate>Sun, 27 Dec 2015 16:31:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5680125668472.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>631</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 00:31:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 16:31:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5680125668472]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5680125668472.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5680125668472.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:480;s:4:"file";s:29:"2015/12/img_5680125668472.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5680125668472-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5680125668472-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5680125668472-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5680125668472-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5680125668472-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5680125668472-640x360.png";s:5:"width";i:640;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5680125668472-624x468.png";s:5:"width";i:624;s:6:"height";i:468;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568017243c37f</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_568017243c37f/</link>
		<pubDate>Sun, 27 Dec 2015 16:51:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568017243c37f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 00:51:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 16:51:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568017243c37f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568017243c37f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568017243c37f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:309;s:4:"file";s:29:"2015/12/img_568017243c37f.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568017243c37f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_568017243c37f-300x137.png";s:5:"width";i:300;s:6:"height";i:137;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568017243c37f-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568017243c37f-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568017243c37f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568017243c37f-624x285.png";s:5:"width";i:624;s:6:"height";i:285;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568018e727ab4</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_568018e727ab4/</link>
		<pubDate>Sun, 27 Dec 2015 16:59:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568018e727ab4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 00:59:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 16:59:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568018e727ab4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568018e727ab4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568018e727ab4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:213;s:4:"file";s:29:"2015/12/img_568018e727ab4.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568018e727ab4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_568018e727ab4-300x85.png";s:5:"width";i:300;s:6:"height";i:85;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568018e727ab4-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568018e727ab4-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568018e727ab4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_568018e727ab4-720x213.png";s:5:"width";i:720;s:6:"height";i:213;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568018e727ab4-624x177.png";s:5:"width";i:624;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568019519b820</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_568019519b820/</link>
		<pubDate>Sun, 27 Dec 2015 17:01:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568019519b820.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>636</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 01:01:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 17:01:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568019519b820]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568019519b820.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568019519b820.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:748;s:6:"height";i:606;s:4:"file";s:29:"2015/12/img_568019519b820.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568019519b820-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_568019519b820-300x243.png";s:5:"width";i:300;s:6:"height";i:243;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568019519b820-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568019519b820-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568019519b820-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_568019519b820-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568019519b820-624x506.png";s:5:"width";i:624;s:6:"height";i:506;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56801b3e2cc65</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_56801b3e2cc65/</link>
		<pubDate>Sun, 27 Dec 2015 17:09:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56801b3e2cc65.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 01:09:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 17:09:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56801b3e2cc65]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56801b3e2cc65.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56801b3e2cc65.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:562;s:6:"height";i:334;s:4:"file";s:29:"2015/12/img_56801b3e2cc65.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56801b3e2cc65-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56801b3e2cc65-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56801b3e2cc65-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56801b3e2cc65-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56801b3e2cc65-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56801dd7cd650</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_56801dd7cd650/</link>
		<pubDate>Sun, 27 Dec 2015 17:20:23 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56801dd7cd650.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>638</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 01:20:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 17:20:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56801dd7cd650]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56801dd7cd650.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56801dd7cd650.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:662;s:6:"height";i:209;s:4:"file";s:29:"2015/12/img_56801dd7cd650.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56801dd7cd650-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56801dd7cd650-300x95.png";s:5:"width";i:300;s:6:"height";i:95;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56801dd7cd650-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56801dd7cd650-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56801dd7cd650-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56801dd7cd650-624x197.png";s:5:"width";i:624;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815077450fc</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815077450fc/</link>
		<pubDate>Mon, 28 Dec 2015 15:08:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815077450fc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>641</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:08:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:08:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815077450fc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815077450fc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815077450fc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:782;s:6:"height";i:373;s:4:"file";s:29:"2015/12/img_56815077450fc.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815077450fc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815077450fc-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56815077450fc-768x366.png";s:5:"width";i:768;s:6:"height";i:366;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815077450fc-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815077450fc-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815077450fc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56815077450fc-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56815077450fc-624x298.png";s:5:"width";i:624;s:6:"height";i:298;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568155fc77896</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_568155fc77896/</link>
		<pubDate>Mon, 28 Dec 2015 15:32:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568155fc77896.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>642</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:32:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:32:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568155fc77896]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568155fc77896.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568155fc77896.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:715;s:6:"height";i:403;s:4:"file";s:29:"2015/12/img_568155fc77896.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568155fc77896-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_568155fc77896-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568155fc77896-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568155fc77896-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568155fc77896-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_568155fc77896-715x360.png";s:5:"width";i:715;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568155fc77896-624x352.png";s:5:"width";i:624;s:6:"height";i:352;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5681597f933de</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_5681597f933de/</link>
		<pubDate>Mon, 28 Dec 2015 15:47:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5681597f933de.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>644</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:47:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:47:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5681597f933de]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5681597f933de.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_5681597f933de.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:414;s:4:"file";s:29:"2015/12/img_5681597f933de.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5681597f933de-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5681597f933de-300x173.png";s:5:"width";i:300;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5681597f933de-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5681597f933de-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5681597f933de-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5681597f933de-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5681597f933de-624x359.png";s:5:"width";i:624;s:6:"height";i:359;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815ac57b4d8</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815ac57b4d8/</link>
		<pubDate>Mon, 28 Dec 2015 15:52:37 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815ac57b4d8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>645</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:52:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:52:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815ac57b4d8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815ac57b4d8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815ac57b4d8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:684;s:4:"file";s:29:"2015/12/img_56815ac57b4d8.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-300x257.png";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-768x657.png";s:5:"width";i:768;s:6:"height";i:657;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815ac57b4d8-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56815ac57b4d8-624x534.png";s:5:"width";i:624;s:6:"height";i:534;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815b172e548</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815b172e548/</link>
		<pubDate>Mon, 28 Dec 2015 15:53:59 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815b172e548.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>646</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:53:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:53:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815b172e548]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815b172e548.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815b172e548.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:812;s:6:"height";i:981;s:4:"file";s:29:"2015/12/img_56815b172e548.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815b172e548-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815b172e548-248x300.png";s:5:"width";i:248;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56815b172e548-768x928.png";s:5:"width";i:768;s:6:"height";i:928;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815b172e548-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815b172e548-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815b172e548-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56815b172e548-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56815b172e548-624x754.png";s:5:"width";i:624;s:6:"height";i:754;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815bf493500</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815bf493500/</link>
		<pubDate>Mon, 28 Dec 2015 15:57:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815bf493500.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:57:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:57:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815bf493500]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815bf493500.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815bf493500.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:497;s:6:"height";i:77;s:4:"file";s:29:"2015/12/img_56815bf493500.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"img_56815bf493500-150x77.png";s:5:"width";i:150;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56815bf493500-300x46.png";s:5:"width";i:300;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:28:"img_56815bf493500-176x77.png";s:5:"width";i:176;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815bf493500-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:28:"img_56815bf493500-150x77.png";s:5:"width";i:150;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815c3522859</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815c3522859/</link>
		<pubDate>Mon, 28 Dec 2015 15:58:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815c3522859.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>648</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 23:58:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 15:58:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815c3522859]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815c3522859.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815c3522859.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:447;s:6:"height";i:190;s:4:"file";s:29:"2015/12/img_56815c3522859.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815c3522859-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815c3522859-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815c3522859-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815c3522859-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815c3522859-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815d5d03a5d</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815d5d03a5d/</link>
		<pubDate>Mon, 28 Dec 2015 16:03:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815d5d03a5d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:03:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:03:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815d5d03a5d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815d5d03a5d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815d5d03a5d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:549;s:6:"height";i:585;s:4:"file";s:29:"2015/12/img_56815d5d03a5d.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815d5d03a5d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815d5d03a5d-282x300.png";s:5:"width";i:282;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815d5d03a5d-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815d5d03a5d-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815d5d03a5d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56815d5d03a5d-549x360.png";s:5:"width";i:549;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815eacb8182</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815eacb8182/</link>
		<pubDate>Mon, 28 Dec 2015 16:09:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815eacb8182.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:09:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:09:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815eacb8182]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815eacb8182.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815eacb8182.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:486;s:6:"height";i:136;s:4:"file";s:29:"2015/12/img_56815eacb8182.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815eacb8182-150x136.png";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56815eacb8182-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815eacb8182-176x136.png";s:5:"width";i:176;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815eacb8182-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815eacb8182-150x136.png";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815f3f91895</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815f3f91895/</link>
		<pubDate>Mon, 28 Dec 2015 16:11:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815f3f91895.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>651</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:11:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:11:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815f3f91895]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815f3f91895.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815f3f91895.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:624;s:6:"height";i:320;s:4:"file";s:29:"2015/12/img_56815f3f91895.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815f3f91895-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815f3f91895-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815f3f91895-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815f3f91895-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815f3f91895-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56815f3f91895-624x320.png";s:5:"width";i:624;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56815f4dc0bd9</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56815f4dc0bd9/</link>
		<pubDate>Mon, 28 Dec 2015 16:11:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815f4dc0bd9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>652</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:11:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:11:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56815f4dc0bd9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815f4dc0bd9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56815f4dc0bd9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:624;s:6:"height";i:320;s:4:"file";s:29:"2015/12/img_56815f4dc0bd9.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56815f4dc0bd9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56815f4dc0bd9-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56815f4dc0bd9-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56815f4dc0bd9-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56815f4dc0bd9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56815f4dc0bd9-624x320.png";s:5:"width";i:624;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hqdefault</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/hqdefault/</link>
		<pubDate>Mon, 28 Dec 2015 16:59:08 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/hqdefault.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:59:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:59:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hqdefault]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/hqdefault.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/hqdefault.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:480;s:6:"height";i:360;s:4:"file";s:21:"2015/12/hqdefault.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"hqdefault-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"hqdefault-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:21:"hqdefault-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:19:"hqdefault-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:21:"hqdefault-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:21:"hqdefault-480x360.jpg";s:5:"width";i:480;s:6:"height";i:360;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568170a978f0b</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_568170a978f0b/</link>
		<pubDate>Mon, 28 Dec 2015 17:26:01 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170a978f0b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>661</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 01:26:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 17:26:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568170a978f0b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170a978f0b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568170a978f0b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:660;s:6:"height";i:90;s:4:"file";s:29:"2015/12/img_568170a978f0b.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"img_568170a978f0b-150x90.png";s:5:"width";i:150;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_568170a978f0b-300x41.png";s:5:"width";i:300;s:6:"height";i:41;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:28:"img_568170a978f0b-176x90.png";s:5:"width";i:176;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568170a978f0b-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:28:"img_568170a978f0b-150x90.png";s:5:"width";i:150;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"img_568170a978f0b-624x85.png";s:5:"width";i:624;s:6:"height";i:85;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568170eb4fb85</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_568170eb4fb85/</link>
		<pubDate>Mon, 28 Dec 2015 17:27:07 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170eb4fb85.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>662</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 01:27:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 17:27:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568170eb4fb85]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170eb4fb85.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568170eb4fb85.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:697;s:6:"height";i:391;s:4:"file";s:29:"2015/12/img_568170eb4fb85.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568170eb4fb85-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_568170eb4fb85-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568170eb4fb85-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568170eb4fb85-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568170eb4fb85-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_568170eb4fb85-697x360.png";s:5:"width";i:697;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568170eb4fb85-624x350.png";s:5:"width";i:624;s:6:"height";i:350;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56817158e722c</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_56817158e722c/</link>
		<pubDate>Mon, 28 Dec 2015 17:28:56 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56817158e722c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>663</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 01:28:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 17:28:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56817158e722c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56817158e722c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56817158e722c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:397;s:6:"height";i:136;s:4:"file";s:29:"2015/12/img_56817158e722c.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56817158e722c-150x136.png";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56817158e722c-300x103.png";s:5:"width";i:300;s:6:"height";i:103;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56817158e722c-176x136.png";s:5:"width";i:176;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56817158e722c-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56817158e722c-150x136.png";s:5:"width";i:150;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_568171618a821</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/img_568171618a821/</link>
		<pubDate>Mon, 28 Dec 2015 17:29:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568171618a821.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>664</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 01:29:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 17:29:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_568171618a821]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568171618a821.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_568171618a821.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:624;s:6:"height";i:320;s:4:"file";s:29:"2015/12/img_568171618a821.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_568171618a821-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_568171618a821-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_568171618a821-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_568171618a821-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_568171618a821-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_568171618a821-624x320.png";s:5:"width";i:624;s:6:"height";i:320;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56840acc8bcc1</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_56840acc8bcc1/</link>
		<pubDate>Wed, 30 Dec 2015 16:48:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840acc8bcc1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>685</wp:post_id>
		<wp:post_date><![CDATA[2015-12-31 00:48:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 16:48:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56840acc8bcc1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840acc8bcc1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56840acc8bcc1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:654;s:6:"height";i:424;s:4:"file";s:29:"2015/12/img_56840acc8bcc1.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56840acc8bcc1-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-654x360.png";s:5:"width";i:654;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56840acc8bcc1-624x405.png";s:5:"width";i:624;s:6:"height";i:405;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56840bcd03c9b</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_56840bcd03c9b/</link>
		<pubDate>Wed, 30 Dec 2015 16:52:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840bcd03c9b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>695</wp:post_id>
		<wp:post_date><![CDATA[2015-12-31 00:52:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 16:52:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56840bcd03c9b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840bcd03c9b-e1451494393808.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56840bcd03c9b-e1451494393808.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:527;s:6:"height";i:324;s:4:"file";s:44:"2015/12/img_56840bcd03c9b-e1451494393808.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"img_56840bcd03c9b-e1451494393808-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"img_56840bcd03c9b-e1451494393808-300x184.png";s:5:"width";i:300;s:6:"height";i:184;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:44:"img_56840bcd03c9b-e1451494393808-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:42:"img_56840bcd03c9b-e1451494393808-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:44:"img_56840bcd03c9b-e1451494393808-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-569x360.png";s:5:"width";i:569;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:9:"full-orig";a:3:{s:5:"width";i:569;s:6:"height";i:419;s:4:"file";s:21:"img_56840bcd03c9b.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-300x221.png";s:5:"width";i:300;s:6:"height";i:221;s:9:"mime-type";s:9:"image/png";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:17:"latest-th-60-orig";a:4:{s:4:"file";s:27:"img_56840bcd03c9b-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:24:"related-post-th-150-orig";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"slider-recent-posts-orig";a:4:{s:4:"file";s:29:"img_56840bcd03c9b-569x360.png";s:5:"width";i:569;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56840f8bb211b</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/img_56840f8bb211b/</link>
		<pubDate>Wed, 30 Dec 2015 17:08:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840f8bb211b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>697</wp:post_id>
		<wp:post_date><![CDATA[2015-12-31 01:08:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 17:08:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56840f8bb211b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840f8bb211b-e1451495326913.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/img_56840f8bb211b-e1451495326913.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:520;s:6:"height";i:325;s:4:"file";s:44:"2015/12/img_56840f8bb211b-e1451495326913.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"img_56840f8bb211b-e1451495326913-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"img_56840f8bb211b-e1451495326913-300x188.png";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:44:"img_56840f8bb211b-e1451495326913-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:42:"img_56840f8bb211b-e1451495326913-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:44:"img_56840f8bb211b-e1451495326913-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56840f8bb211b-553x360.png";s:5:"width";i:553;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:9:"full-orig";a:3:{s:5:"width";i:553;s:6:"height";i:762;s:4:"file";s:21:"img_56840f8bb211b.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:29:"img_56840f8bb211b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:29:"img_56840f8bb211b-218x300.png";s:5:"width";i:218;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:29:"img_56840f8bb211b-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:17:"latest-th-60-orig";a:4:{s:4:"file";s:27:"img_56840f8bb211b-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:24:"related-post-th-150-orig";a:4:{s:4:"file";s:29:"img_56840f8bb211b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"slider-recent-posts-orig";a:4:{s:4:"file";s:29:"img_56840f8bb211b-553x360.png";s:5:"width";i:553;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A</title>
		<link>http://columns.chicken-house.net/a/</link>
		<pubDate>Thu, 07 Jan 2016 15:37:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/A.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>732</wp:post_id>
		<wp:post_date><![CDATA[2016-01-07 23:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-07 15:37:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/A.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/A.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:732;s:6:"height";i:710;s:4:"file";s:13:"2016/01/A.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"A-300x291.jpg";s:5:"width";i:300;s:6:"height";i:291;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:13:"A-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:11:"A-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:13:"A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:13:"A-720x360.jpg";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:13:"A-624x605.jpg";s:5:"width";i:624;s:6:"height";i:605;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-A.jpg</title>
		<link>http://columns.chicken-house.net/cropped-a-jpg/</link>
		<pubDate>Thu, 07 Jan 2016 15:39:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date><![CDATA[2016-01-07 23:39:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-07 15:39:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-a-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/cropped-A.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:21:"2016/01/cropped-A.jpg";s:5:"sizes";a:10:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"cropped-A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"cropped-A-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:21:"cropped-A-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:19:"cropped-A-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:21:"cropped-A-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:21:"cropped-A-512x360.jpg";s:5:"width";i:512;s:6:"height";i:360;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:21:"cropped-A-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:21:"cropped-A-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:21:"cropped-A-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:19:"cropped-A-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-A-1.jpg</title>
		<link>http://columns.chicken-house.net/cropped-a-1-jpg/</link>
		<pubDate>Thu, 07 Jan 2016 15:39:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>734</wp:post_id>
		<wp:post_date><![CDATA[2016-01-07 23:39:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-07 15:39:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-a-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-A-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/cropped-A-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:710;s:6:"height";i:710;s:4:"file";s:23:"2016/01/cropped-A-1.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"cropped-A-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"cropped-A-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:23:"cropped-A-1-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:21:"cropped-A-1-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:23:"cropped-A-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:23:"cropped-A-1-710x360.jpg";s:5:"width";i:710;s:6:"height";i:360;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"cropped-A-1-624x624.jpg";s:5:"width";i:624;s:6:"height";i:624;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>615381_3337454215270_575522206_o</title>
		<link>http://columns.chicken-house.net/615381_3337454215270_575522206_o/</link>
		<pubDate>Thu, 07 Jan 2016 15:40:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/615381_3337454215270_575522206_o.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>735</wp:post_id>
		<wp:post_date><![CDATA[2016-01-07 23:40:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-07 15:40:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[615381_3337454215270_575522206_o]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/615381_3337454215270_575522206_o.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/615381_3337454215270_575522206_o.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:780;s:4:"file";s:44:"2016/01/615381_3337454215270_575522206_o.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-300x146.jpg";s:5:"width";i:300;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-768x374.jpg";s:5:"width";i:768;s:6:"height";i:374;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:45:"615381_3337454215270_575522206_o-1024x499.jpg";s:5:"width";i:1024;s:6:"height";i:499;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:42:"615381_3337454215270_575522206_o-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-720x360.jpg";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:44:"615381_3337454215270_575522206_o-624x304.jpg";s:5:"width";i:624;s:6:"height";i:304;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
			<wp:meta_value><![CDATA[rubbersoul]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-615381_3337454215270_575522206_o.jpg</title>
		<link>http://columns.chicken-house.net/cropped-615381_3337454215270_575522206_o-jpg/</link>
		<pubDate>Thu, 07 Jan 2016 15:46:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-615381_3337454215270_575522206_o.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>736</wp:post_id>
		<wp:post_date><![CDATA[2016-01-07 23:46:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-07 15:46:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-615381_3337454215270_575522206_o-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/cropped-615381_3337454215270_575522206_o.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/cropped-615381_3337454215270_575522206_o.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:269;s:4:"file";s:52:"2016/01/cropped-615381_3337454215270_575522206_o.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:51:"cropped-615381_3337454215270_575522206_o-300x50.jpg";s:5:"width";i:300;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-768x129.jpg";s:5:"width";i:768;s:6:"height";i:129;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:53:"cropped-615381_3337454215270_575522206_o-1024x172.jpg";s:5:"width";i:1024;s:6:"height";i:172;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:50:"cropped-615381_3337454215270_575522206_o-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-720x269.jpg";s:5:"width";i:720;s:6:"height";i:269;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:52:"cropped-615381_3337454215270_575522206_o-624x105.jpg";s:5:"width";i:624;s:6:"height";i:105;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>102883301[1]</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/attachment/1028833011/</link>
		<pubDate>Wed, 13 Jan 2016 15:58:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/1028833011.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>740</wp:post_id>
		<wp:post_date><![CDATA[2016-01-13 23:58:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 15:58:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1028833011]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/1028833011.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/1028833011.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:289;s:6:"height";i:218;s:4:"file";s:22:"2016/01/1028833011.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"1028833011-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:22:"1028833011-176x176.jpg";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:10:"image/jpeg";}s:12:"latest-th-60";a:4:{s:4:"file";s:20:"1028833011-60x60.jpg";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:19:"related-post-th-150";a:4:{s:4:"file";s:22:"1028833011-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5696745c9161d</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5696745c9161d/</link>
		<pubDate>Wed, 13 Jan 2016 15:59:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5696745c9161d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date><![CDATA[2016-01-13 23:59:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 15:59:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5696745c9161d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5696745c9161d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5696745c9161d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:213;s:4:"file";s:29:"2016/01/img_5696745c9161d.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5696745c9161d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5696745c9161d-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5696745c9161d-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5696745c9161d-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5696745c9161d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56967d2029838</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56967d2029838/</link>
		<pubDate>Wed, 13 Jan 2016 16:36:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56967d2029838.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 00:36:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 16:36:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56967d2029838]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56967d2029838.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56967d2029838.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1236;s:6:"height";i:341;s:4:"file";s:29:"2016/01/img_56967d2029838.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56967d2029838-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56967d2029838-300x83.png";s:5:"width";i:300;s:6:"height";i:83;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56967d2029838-768x212.png";s:5:"width";i:768;s:6:"height";i:212;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56967d2029838-1024x283.png";s:5:"width";i:1024;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56967d2029838-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56967d2029838-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56967d2029838-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56967d2029838-720x341.png";s:5:"width";i:720;s:6:"height";i:341;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56967d2029838-624x172.png";s:5:"width";i:624;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968d2c3d153</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968d2c3d153/</link>
		<pubDate>Wed, 13 Jan 2016 17:45:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968d2c3d153.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>743</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:45:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:45:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968d2c3d153]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968d2c3d153.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968d2c3d153.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:833;s:6:"height";i:190;s:4:"file";s:29:"2016/01/img_56968d2c3d153.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968d2c3d153-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968d2c3d153-300x68.png";s:5:"width";i:300;s:6:"height";i:68;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968d2c3d153-768x175.png";s:5:"width";i:768;s:6:"height";i:175;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968d2c3d153-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968d2c3d153-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968d2c3d153-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968d2c3d153-720x190.png";s:5:"width";i:720;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968d2c3d153-624x142.png";s:5:"width";i:624;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968d3f83288</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968d3f83288/</link>
		<pubDate>Wed, 13 Jan 2016 17:45:35 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968d3f83288.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>744</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:45:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:45:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968d3f83288]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968d3f83288.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968d3f83288.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:838;s:6:"height";i:197;s:4:"file";s:29:"2016/01/img_56968d3f83288.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968d3f83288-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968d3f83288-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968d3f83288-768x181.png";s:5:"width";i:768;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968d3f83288-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968d3f83288-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968d3f83288-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968d3f83288-720x197.png";s:5:"width";i:720;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968d3f83288-624x147.png";s:5:"width";i:624;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968ead5dbc6</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968ead5dbc6/</link>
		<pubDate>Wed, 13 Jan 2016 17:51:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968ead5dbc6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>747</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:51:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:51:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968ead5dbc6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968ead5dbc6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968ead5dbc6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:838;s:6:"height";i:195;s:4:"file";s:29:"2016/01/img_56968ead5dbc6.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968ead5dbc6-300x70.png";s:5:"width";i:300;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-768x179.png";s:5:"width";i:768;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968ead5dbc6-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-720x195.png";s:5:"width";i:720;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968ead5dbc6-624x145.png";s:5:"width";i:624;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968eee469c0</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968eee469c0/</link>
		<pubDate>Wed, 13 Jan 2016 17:52:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968eee469c0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>748</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:52:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:52:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968eee469c0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968eee469c0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968eee469c0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:839;s:6:"height";i:197;s:4:"file";s:29:"2016/01/img_56968eee469c0.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968eee469c0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968eee469c0-300x70.png";s:5:"width";i:300;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968eee469c0-768x180.png";s:5:"width";i:768;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968eee469c0-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968eee469c0-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968eee469c0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968eee469c0-720x197.png";s:5:"width";i:720;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968eee469c0-624x147.png";s:5:"width";i:624;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968f205d03d</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968f205d03d/</link>
		<pubDate>Wed, 13 Jan 2016 17:53:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968f205d03d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>749</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:53:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:53:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968f205d03d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968f205d03d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968f205d03d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:838;s:6:"height";i:197;s:4:"file";s:29:"2016/01/img_56968f205d03d.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968f205d03d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968f205d03d-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968f205d03d-768x181.png";s:5:"width";i:768;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968f205d03d-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968f205d03d-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968f205d03d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968f205d03d-720x197.png";s:5:"width";i:720;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968f205d03d-624x147.png";s:5:"width";i:624;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968f4a5c0ba</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968f4a5c0ba/</link>
		<pubDate>Wed, 13 Jan 2016 17:54:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968f4a5c0ba.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>750</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:54:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:54:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968f4a5c0ba]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968f4a5c0ba.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968f4a5c0ba.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:837;s:6:"height";i:197;s:4:"file";s:29:"2016/01/img_56968f4a5c0ba.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968f4a5c0ba-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-768x181.png";s:5:"width";i:768;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968f4a5c0ba-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-720x197.png";s:5:"width";i:720;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968f4a5c0ba-624x147.png";s:5:"width";i:624;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56968fad5bee3</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56968fad5bee3/</link>
		<pubDate>Wed, 13 Jan 2016 17:55:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968fad5bee3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>751</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 01:55:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 17:55:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56968fad5bee3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968fad5bee3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56968fad5bee3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:840;s:6:"height";i:198;s:4:"file";s:29:"2016/01/img_56968fad5bee3.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56968fad5bee3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56968fad5bee3-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56968fad5bee3-768x181.png";s:5:"width";i:768;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56968fad5bee3-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56968fad5bee3-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56968fad5bee3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56968fad5bee3-720x198.png";s:5:"width";i:720;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56968fad5bee3-624x147.png";s:5:"width";i:624;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56969885d1767</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_56969885d1767/</link>
		<pubDate>Wed, 13 Jan 2016 18:33:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56969885d1767.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>753</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 02:33:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 18:33:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56969885d1767]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56969885d1767.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_56969885d1767.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:838;s:6:"height";i:195;s:4:"file";s:29:"2016/01/img_56969885d1767.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56969885d1767-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56969885d1767-300x70.png";s:5:"width";i:300;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56969885d1767-768x179.png";s:5:"width";i:768;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56969885d1767-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56969885d1767-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56969885d1767-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56969885d1767-720x195.png";s:5:"width";i:720;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56969885d1767-624x145.png";s:5:"width";i:624;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697bf0537be2</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697bf0537be2/</link>
		<pubDate>Thu, 14 Jan 2016 15:30:13 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697bf0537be2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>757</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:30:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:30:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697bf0537be2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697bf0537be2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697bf0537be2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:837;s:6:"height";i:367;s:4:"file";s:29:"2016/01/img_5697bf0537be2.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697bf0537be2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697bf0537be2-300x132.png";s:5:"width";i:300;s:6:"height";i:132;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697bf0537be2-768x337.png";s:5:"width";i:768;s:6:"height";i:337;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697bf0537be2-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697bf0537be2-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697bf0537be2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697bf0537be2-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697bf0537be2-624x274.png";s:5:"width";i:624;s:6:"height";i:274;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c01884e41</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c01884e41/</link>
		<pubDate>Thu, 14 Jan 2016 15:34:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c01884e41.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>758</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:34:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:34:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c01884e41]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c01884e41.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c01884e41.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:844;s:6:"height";i:512;s:4:"file";s:29:"2016/01/img_5697c01884e41.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c01884e41-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697c01884e41-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c01884e41-768x466.png";s:5:"width";i:768;s:6:"height";i:466;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c01884e41-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c01884e41-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c01884e41-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c01884e41-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c01884e41-624x379.png";s:5:"width";i:624;s:6:"height";i:379;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c15611c7e</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c15611c7e/</link>
		<pubDate>Thu, 14 Jan 2016 15:40:06 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c15611c7e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>760</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:40:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:40:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c15611c7e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c15611c7e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c15611c7e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:859;s:6:"height";i:451;s:4:"file";s:29:"2016/01/img_5697c15611c7e.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c15611c7e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697c15611c7e-300x158.png";s:5:"width";i:300;s:6:"height";i:158;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c15611c7e-768x403.png";s:5:"width";i:768;s:6:"height";i:403;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c15611c7e-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c15611c7e-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c15611c7e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c15611c7e-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c15611c7e-624x328.png";s:5:"width";i:624;s:6:"height";i:328;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c39e4b005</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c39e4b005/</link>
		<pubDate>Thu, 14 Jan 2016 15:49:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c39e4b005.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>762</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:49:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:49:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c39e4b005]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c39e4b005.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c39e4b005.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1318;s:6:"height";i:259;s:4:"file";s:29:"2016/01/img_5697c39e4b005.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c39e4b005-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5697c39e4b005-300x59.png";s:5:"width";i:300;s:6:"height";i:59;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c39e4b005-768x151.png";s:5:"width";i:768;s:6:"height";i:151;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c39e4b005-1024x201.png";s:5:"width";i:1024;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c39e4b005-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c39e4b005-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c39e4b005-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c39e4b005-720x259.png";s:5:"width";i:720;s:6:"height";i:259;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c39e4b005-624x123.png";s:5:"width";i:624;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c3e869f9c</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c3e869f9c/</link>
		<pubDate>Thu, 14 Jan 2016 15:51:04 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c3e869f9c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>763</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:51:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:51:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c3e869f9c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c3e869f9c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c3e869f9c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1153;s:6:"height";i:692;s:4:"file";s:29:"2016/01/img_5697c3e869f9c.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-768x461.png";s:5:"width";i:768;s:6:"height";i:461;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c3e869f9c-1024x615.png";s:5:"width";i:1024;s:6:"height";i:615;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c3e869f9c-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c3e869f9c-624x375.png";s:5:"width";i:624;s:6:"height";i:375;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c57aa738a</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c57aa738a/</link>
		<pubDate>Thu, 14 Jan 2016 15:57:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c57aa738a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:57:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:57:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c57aa738a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c57aa738a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c57aa738a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1319;s:6:"height";i:261;s:4:"file";s:29:"2016/01/img_5697c57aa738a.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c57aa738a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5697c57aa738a-300x59.png";s:5:"width";i:300;s:6:"height";i:59;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c57aa738a-768x152.png";s:5:"width";i:768;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c57aa738a-1024x203.png";s:5:"width";i:1024;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c57aa738a-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c57aa738a-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c57aa738a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c57aa738a-720x261.png";s:5:"width";i:720;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c57aa738a-624x123.png";s:5:"width";i:624;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c596917c0</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c596917c0/</link>
		<pubDate>Thu, 14 Jan 2016 15:58:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c596917c0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date><![CDATA[2016-01-14 23:58:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 15:58:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c596917c0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c596917c0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c596917c0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1148;s:6:"height";i:686;s:4:"file";s:29:"2016/01/img_5697c596917c0.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c596917c0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697c596917c0-300x179.png";s:5:"width";i:300;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c596917c0-768x459.png";s:5:"width";i:768;s:6:"height";i:459;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c596917c0-1024x612.png";s:5:"width";i:1024;s:6:"height";i:612;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c596917c0-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c596917c0-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c596917c0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c596917c0-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c596917c0-624x373.png";s:5:"width";i:624;s:6:"height";i:373;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c755b02c8</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c755b02c8/</link>
		<pubDate>Thu, 14 Jan 2016 16:05:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c755b02c8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date><![CDATA[2016-01-15 00:05:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 16:05:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c755b02c8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c755b02c8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c755b02c8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1318;s:6:"height";i:258;s:4:"file";s:29:"2016/01/img_5697c755b02c8.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c755b02c8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_5697c755b02c8-300x59.png";s:5:"width";i:300;s:6:"height";i:59;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c755b02c8-768x150.png";s:5:"width";i:768;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c755b02c8-1024x200.png";s:5:"width";i:1024;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c755b02c8-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c755b02c8-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c755b02c8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c755b02c8-720x258.png";s:5:"width";i:720;s:6:"height";i:258;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c755b02c8-624x122.png";s:5:"width";i:624;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5697c76a62687</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/img_5697c76a62687/</link>
		<pubDate>Thu, 14 Jan 2016 16:06:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c76a62687.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>767</wp:post_id>
		<wp:post_date><![CDATA[2016-01-15 00:06:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 16:06:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5697c76a62687]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>739</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c76a62687.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/img_5697c76a62687.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1390;s:6:"height";i:669;s:4:"file";s:29:"2016/01/img_5697c76a62687.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5697c76a62687-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5697c76a62687-300x144.png";s:5:"width";i:300;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5697c76a62687-768x370.png";s:5:"width";i:768;s:6:"height";i:370;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5697c76a62687-1024x493.png";s:5:"width";i:1024;s:6:"height";i:493;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_5697c76a62687-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_5697c76a62687-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_5697c76a62687-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_5697c76a62687-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_5697c76a62687-624x300.png";s:5:"width";i:624;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DC3217IYE-2[1]</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/dc3217iye-21/</link>
		<pubDate>Sat, 06 Feb 2016 19:34:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/DC3217IYE-21.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>799</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 03:34:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-06 19:34:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dc3217iye-21]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/DC3217IYE-21.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/DC3217IYE-21.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:24:"2016/02/DC3217IYE-21.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"DC3217IYE-21-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"DC3217IYE-21-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"widget-thumb";a:4:{s:4:"file";s:22:"DC3217IYE-21-80x50.jpg";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>敗家鬼附身--</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/9a14d7961/</link>
		<pubDate>Sat, 06 Feb 2016 19:39:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/9a14d7961.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 03:39:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-06 19:39:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[9a14d7961]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/9a14d7961.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/9a14d7961.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:350;s:6:"height";i:350;s:4:"file";s:21:"2016/02/9a14d7961.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"9a14d7961-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"9a14d7961-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"widget-thumb";a:4:{s:4:"file";s:19:"9a14d7961-80x50.jpg";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6c577d68e0</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6c577d68e0/</link>
		<pubDate>Sun, 07 Feb 2016 04:17:59 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c577d68e0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>806</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:17:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:17:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6c577d68e0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c577d68e0.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6c577d68e0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:29:"2016/02/img_56b6c577d68e0.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6c577d68e0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6c577d68e0-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6c83098513</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6c83098513/</link>
		<pubDate>Sun, 07 Feb 2016 04:29:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c83098513.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>808</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:29:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:29:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6c83098513]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c83098513.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6c83098513.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:475;s:6:"height";i:682;s:4:"file";s:29:"2016/02/img_56b6c83098513.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6c83098513-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6c83098513-209x300.png";s:5:"width";i:209;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6c83098513-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6c863756d6</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6c863756d6/</link>
		<pubDate>Sun, 07 Feb 2016 04:30:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c863756d6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>809</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:30:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:30:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6c863756d6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c863756d6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6c863756d6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:449;s:6:"height";i:343;s:4:"file";s:29:"2016/02/img_56b6c863756d6.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6c863756d6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6c863756d6-300x229.png";s:5:"width";i:300;s:6:"height";i:229;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6c863756d6-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6c9a525243</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6c9a525243/</link>
		<pubDate>Sun, 07 Feb 2016 04:35:49 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9a525243.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>810</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:35:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:35:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6c9a525243]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9a525243.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6c9a525243.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:544;s:6:"height";i:690;s:4:"file";s:29:"2016/02/img_56b6c9a525243.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6c9a525243-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6c9a525243-237x300.png";s:5:"width";i:237;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6c9a525243-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6c9ee79426</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6c9ee79426/</link>
		<pubDate>Sun, 07 Feb 2016 04:37:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9ee79426.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>811</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:37:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:37:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6c9ee79426]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9ee79426.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6c9ee79426.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:559;s:6:"height";i:637;s:4:"file";s:29:"2016/02/img_56b6c9ee79426.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6c9ee79426-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6c9ee79426-263x300.png";s:5:"width";i:263;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6c9ee79426-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6cb0124846</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6cb0124846/</link>
		<pubDate>Sun, 07 Feb 2016 04:41:37 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6cb0124846.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>813</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:41:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:41:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6cb0124846]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6cb0124846.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6cb0124846.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:661;s:6:"height";i:487;s:4:"file";s:29:"2016/02/img_56b6cb0124846.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6cb0124846-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6cb0124846-300x221.png";s:5:"width";i:300;s:6:"height";i:221;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6cb0124846-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b6cb8da6695</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b6cb8da6695/</link>
		<pubDate>Sun, 07 Feb 2016 04:43:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6cb8da6695.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>814</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 12:43:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 04:43:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b6cb8da6695]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6cb8da6695.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b6cb8da6695.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:644;s:6:"height";i:438;s:4:"file";s:29:"2016/02/img_56b6cb8da6695.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b6cb8da6695-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b6cb8da6695-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b6cb8da6695-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b75082a9db7</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b75082a9db7/</link>
		<pubDate>Sun, 07 Feb 2016 14:11:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b75082a9db7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>819</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 22:11:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 14:11:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b75082a9db7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b75082a9db7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b75082a9db7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:861;s:6:"height";i:400;s:4:"file";s:29:"2016/02/img_56b75082a9db7.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b75082a9db7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b75082a9db7-300x139.png";s:5:"width";i:300;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56b75082a9db7-768x357.png";s:5:"width";i:768;s:6:"height";i:357;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b75082a9db7-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b751361543d</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b751361543d/</link>
		<pubDate>Sun, 07 Feb 2016 14:14:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b751361543d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>822</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 22:14:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 14:14:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b751361543d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b751361543d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b751361543d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:875;s:6:"height";i:490;s:4:"file";s:29:"2016/02/img_56b751361543d.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b751361543d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b751361543d-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56b751361543d-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b751361543d-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b7550d10cbe</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b7550d10cbe/</link>
		<pubDate>Sun, 07 Feb 2016 14:30:37 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7550d10cbe.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>824</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 22:30:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 14:30:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b7550d10cbe]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7550d10cbe.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b7550d10cbe.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1022;s:6:"height";i:983;s:4:"file";s:29:"2016/02/img_56b7550d10cbe.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b7550d10cbe-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b7550d10cbe-300x289.png";s:5:"width";i:300;s:6:"height";i:289;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56b7550d10cbe-768x739.png";s:5:"width";i:768;s:6:"height";i:739;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b7550d10cbe-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56b7ec0d66a42</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/img_56b7ec0d66a42/</link>
		<pubDate>Mon, 08 Feb 2016 01:14:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7ec0d66a42.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>827</wp:post_id>
		<wp:post_date><![CDATA[2016-02-08 09:14:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-08 01:14:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56b7ec0d66a42]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>790</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7ec0d66a42.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56b7ec0d66a42.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:999;s:6:"height";i:659;s:4:"file";s:29:"2016/02/img_56b7ec0d66a42.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56b7ec0d66a42-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56b7ec0d66a42-300x198.png";s:5:"width";i:300;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56b7ec0d66a42-768x507.png";s:5:"width";i:768;s:6:"height";i:507;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56b7ec0d66a42-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>key-bw[1]</title>
		<link>http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/key-bw1/</link>
		<pubDate>Mon, 08 Feb 2016 15:06:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/key-bw1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>837</wp:post_id>
		<wp:post_date><![CDATA[2016-02-08 23:06:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-08 15:06:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[key-bw1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>833</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/key-bw1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/key-bw1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:19:"2016/02/key-bw1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"key-bw1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:17:"key-bw1-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c350dc74e6a</title>
		<link>http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/img_56c350dc74e6a/</link>
		<pubDate>Tue, 16 Feb 2016 16:39:56 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c350dc74e6a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>845</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 00:39:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 16:39:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c350dc74e6a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>833</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c350dc74e6a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c350dc74e6a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:360;s:4:"file";s:29:"2016/02/img_56c350dc74e6a.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c350dc74e6a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c350dc74e6a-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c350dc74e6a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c431d4ac75a</title>
		<link>http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/img_56c431d4ac75a/</link>
		<pubDate>Wed, 17 Feb 2016 08:39:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c431d4ac75a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>852</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 16:39:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-17 08:39:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c431d4ac75a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>833</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c431d4ac75a-e1455698460913.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c431d4ac75a-e1455698460913.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:320;s:4:"file";s:44:"2016/02/img_56c431d4ac75a-e1455698460913.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c431d4ac75a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c431d4ac75a-300x133.png";s:5:"width";i:300;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c431d4ac75a-768x341.png";s:5:"width";i:768;s:6:"height";i:341;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56c431d4ac75a-1024x455.png";s:5:"width";i:1024;s:6:"height";i:455;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c431d4ac75a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";i:1159;s:6:"height";i:515;s:4:"file";s:21:"img_56c431d4ac75a.png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c4990bb6686</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56c4990bb6686/</link>
		<pubDate>Wed, 17 Feb 2016 16:00:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c4990bb6686.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>856</wp:post_id>
		<wp:post_date><![CDATA[2016-02-18 00:00:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-17 16:00:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c4990bb6686]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c4990bb6686.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c4990bb6686.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1002;s:6:"height";i:424;s:4:"file";s:29:"2016/02/img_56c4990bb6686.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c4990bb6686-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c4990bb6686-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c4990bb6686-768x325.png";s:5:"width";i:768;s:6:"height";i:325;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c4990bb6686-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c49acfd56e7</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56c49acfd56e7/</link>
		<pubDate>Wed, 17 Feb 2016 16:07:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c49acfd56e7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>858</wp:post_id>
		<wp:post_date><![CDATA[2016-02-18 00:07:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-17 16:07:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c49acfd56e7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c49acfd56e7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c49acfd56e7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1034;s:6:"height";i:470;s:4:"file";s:29:"2016/02/img_56c49acfd56e7.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c49acfd56e7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c49acfd56e7-300x136.png";s:5:"width";i:300;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c49acfd56e7-768x349.png";s:5:"width";i:768;s:6:"height";i:349;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56c49acfd56e7-1024x465.png";s:5:"width";i:1024;s:6:"height";i:465;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c49acfd56e7-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c4a40001a60</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56c4a40001a60/</link>
		<pubDate>Wed, 17 Feb 2016 16:46:56 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c4a40001a60.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>859</wp:post_id>
		<wp:post_date><![CDATA[2016-02-18 00:46:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-17 16:46:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c4a40001a60]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c4a40001a60.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c4a40001a60.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:704;s:6:"height";i:543;s:4:"file";s:29:"2016/02/img_56c4a40001a60.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c4a40001a60-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c4a40001a60-300x231.png";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c4a40001a60-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c5dc721de9e</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56c5dc721de9e/</link>
		<pubDate>Thu, 18 Feb 2016 15:00:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c5dc721de9e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>861</wp:post_id>
		<wp:post_date><![CDATA[2016-02-18 23:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-18 15:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c5dc721de9e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c5dc721de9e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c5dc721de9e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:270;s:6:"height";i:400;s:4:"file";s:29:"2016/02/img_56c5dc721de9e.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c5dc721de9e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c5dc721de9e-203x300.png";s:5:"width";i:203;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c5dc721de9e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>digital-signature[1]</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/digital-signature1/</link>
		<pubDate>Thu, 18 Feb 2016 15:22:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/digital-signature1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>862</wp:post_id>
		<wp:post_date><![CDATA[2016-02-18 23:22:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-18 15:22:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[digital-signature1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/digital-signature1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/digital-signature1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:338;s:6:"height";i:259;s:4:"file";s:30:"2016/02/digital-signature1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"digital-signature1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:30:"digital-signature1-300x230.jpg";s:5:"width";i:300;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";}s:12:"widget-thumb";a:4:{s:4:"file";s:28:"digital-signature1-80x50.jpg";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c9625fc4d28</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/img_56c9625fc4d28/</link>
		<pubDate>Sun, 21 Feb 2016 07:08:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9625fc4d28.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>882</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 15:08:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 07:08:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c9625fc4d28]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>871</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9625fc4d28.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c9625fc4d28.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1085;s:6:"height";i:567;s:4:"file";s:29:"2016/02/img_56c9625fc4d28.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c9625fc4d28-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c9625fc4d28-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c9625fc4d28-768x401.png";s:5:"width";i:768;s:6:"height";i:401;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56c9625fc4d28-1024x535.png";s:5:"width";i:1024;s:6:"height";i:535;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c9625fc4d28-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c9629bc2f62</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/img_56c9629bc2f62/</link>
		<pubDate>Sun, 21 Feb 2016 07:09:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9629bc2f62.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>883</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 15:09:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 07:09:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c9629bc2f62]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>871</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9629bc2f62.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c9629bc2f62.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1241;s:6:"height";i:774;s:4:"file";s:29:"2016/02/img_56c9629bc2f62.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c9629bc2f62-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c9629bc2f62-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c9629bc2f62-768x479.png";s:5:"width";i:768;s:6:"height";i:479;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56c9629bc2f62-1024x639.png";s:5:"width";i:1024;s:6:"height";i:639;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c9629bc2f62-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56c9630d7d101</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/img_56c9630d7d101/</link>
		<pubDate>Sun, 21 Feb 2016 07:11:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9630d7d101.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 15:11:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 07:11:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56c9630d7d101]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>871</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9630d7d101.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56c9630d7d101.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1049;s:6:"height";i:592;s:4:"file";s:29:"2016/02/img_56c9630d7d101.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56c9630d7d101-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56c9630d7d101-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56c9630d7d101-768x433.png";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56c9630d7d101-1024x578.png";s:5:"width";i:1024;s:6:"height";i:578;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56c9630d7d101-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56cc8bac63709</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56cc8bac63709/</link>
		<pubDate>Tue, 23 Feb 2016 16:41:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8bac63709.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>892</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 00:41:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 16:41:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56cc8bac63709]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8bac63709-e1456245795442.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56cc8bac63709-e1456245795442.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:376;s:6:"height";i:363;s:4:"file";s:44:"2016/02/img_56cc8bac63709-e1456245795442.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"img_56cc8bac63709-e1456245795442-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"img_56cc8bac63709-e1456245795442-300x290.png";s:5:"width";i:300;s:6:"height";i:290;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56cc8bac63709-624x363.png";s:5:"width";i:624;s:6:"height";i:363;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:44:"img_56cc8bac63709-e1456245795442-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:42:"img_56cc8bac63709-e1456245795442-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:44:"img_56cc8bac63709-e1456245795442-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:44:"img_56cc8bac63709-e1456245795442-376x360.png";s:5:"width";i:376;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:9:"full-orig";a:3:{s:5:"width";i:640;s:6:"height";i:372;s:4:"file";s:21:"img_56cc8bac63709.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-300x174.png";s:5:"width";i:300;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}s:19:"post-thumbnail-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-624x363.png";s:5:"width";i:624;s:6:"height";i:363;s:9:"mime-type";s:9:"image/png";}s:29:"excerpt-thumbnail-zg-176-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:17:"latest-th-60-orig";a:4:{s:4:"file";s:27:"img_56cc8bac63709-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:24:"related-post-th-150-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:24:"slider-recent-posts-orig";a:4:{s:4:"file";s:29:"img_56cc8bac63709-640x360.png";s:5:"width";i:640;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56cc8c9caafc8</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/img_56cc8c9caafc8/</link>
		<pubDate>Tue, 23 Feb 2016 16:45:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8c9caafc8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 00:45:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 16:45:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56cc8c9caafc8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>855</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8c9caafc8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56cc8c9caafc8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:815;s:6:"height";i:451;s:4:"file";s:29:"2016/02/img_56cc8c9caafc8.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-300x166.png";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-768x425.png";s:5:"width";i:768;s:6:"height";i:425;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-624x345.png";s:5:"width";i:624;s:6:"height";i:345;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56cc8c9caafc8-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:19:"slider-recent-posts";a:4:{s:4:"file";s:29:"img_56cc8c9caafc8-720x360.png";s:5:"width";i:720;s:6:"height";i:360;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56cc8f1dbca43</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/img_56cc8f1dbca43/</link>
		<pubDate>Tue, 23 Feb 2016 16:55:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8f1dbca43.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>896</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 00:55:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 16:55:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56cc8f1dbca43]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>871</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8f1dbca43.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56cc8f1dbca43.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:448;s:6:"height";i:217;s:4:"file";s:29:"2016/02/img_56cc8f1dbca43.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56cc8f1dbca43-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56cc8f1dbca43-300x145.png";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}s:24:"excerpt-thumbnail-zg-176";a:4:{s:4:"file";s:29:"img_56cc8f1dbca43-176x176.png";s:5:"width";i:176;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"latest-th-60";a:4:{s:4:"file";s:27:"img_56cc8f1dbca43-60x60.png";s:5:"width";i:60;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:19:"related-post-th-150";a:4:{s:4:"file";s:29:"img_56cc8f1dbca43-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d32fa7d612e</title>
		<link>http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/img_56d32fa7d612e/</link>
		<pubDate>Sun, 28 Feb 2016 17:34:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d32fa7d612e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>916</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 01:34:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-28 17:34:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d32fa7d612e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>915</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d32fa7d612e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d32fa7d612e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:530;s:6:"height";i:230;s:4:"file";s:29:"2016/02/img_56d32fa7d612e.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d32fa7d612e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d32fa7d612e-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d32fa7d612e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d335959b5d9</title>
		<link>http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/img_56d335959b5d9/</link>
		<pubDate>Sun, 28 Feb 2016 17:59:49 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d335959b5d9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>918</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 01:59:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-28 17:59:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d335959b5d9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>915</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d335959b5d9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d335959b5d9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1475;s:6:"height";i:491;s:4:"file";s:29:"2016/02/img_56d335959b5d9.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d335959b5d9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d335959b5d9-300x100.png";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d335959b5d9-768x256.png";s:5:"width";i:768;s:6:"height";i:256;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d335959b5d9-1024x341.png";s:5:"width";i:1024;s:6:"height";i:341;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d335959b5d9-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d339b7403b6</title>
		<link>http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/img_56d339b7403b6/</link>
		<pubDate>Sun, 28 Feb 2016 18:17:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d339b7403b6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>919</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 02:17:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-28 18:17:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d339b7403b6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>915</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d339b7403b6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d339b7403b6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1475;s:6:"height";i:702;s:4:"file";s:29:"2016/02/img_56d339b7403b6.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d339b7403b6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d339b7403b6-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d339b7403b6-768x366.png";s:5:"width";i:768;s:6:"height";i:366;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d339b7403b6-1024x487.png";s:5:"width";i:1024;s:6:"height";i:487;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d339b7403b6-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3ec187fa12</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3ec187fa12/</link>
		<pubDate>Mon, 29 Feb 2016 06:58:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec187fa12.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>926</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 14:58:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 06:58:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3ec187fa12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec187fa12.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3ec187fa12.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1298;s:6:"height";i:705;s:4:"file";s:29:"2016/02/img_56d3ec187fa12.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3ec187fa12-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3ec187fa12-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3ec187fa12-768x417.png";s:5:"width";i:768;s:6:"height";i:417;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3ec187fa12-1024x556.png";s:5:"width";i:1024;s:6:"height";i:556;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3ec187fa12-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3ec9c9a41f</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3ec9c9a41f/</link>
		<pubDate>Mon, 29 Feb 2016 07:00:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec9c9a41f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>927</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:00:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:00:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3ec9c9a41f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec9c9a41f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3ec9c9a41f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1239;s:6:"height";i:647;s:4:"file";s:29:"2016/02/img_56d3ec9c9a41f.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3ec9c9a41f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3ec9c9a41f-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3ec9c9a41f-768x401.png";s:5:"width";i:768;s:6:"height";i:401;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3ec9c9a41f-1024x535.png";s:5:"width";i:1024;s:6:"height";i:535;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3ec9c9a41f-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3ecf8a9fc9</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3ecf8a9fc9/</link>
		<pubDate>Mon, 29 Feb 2016 07:02:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ecf8a9fc9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>928</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:02:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:02:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3ecf8a9fc9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ecf8a9fc9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3ecf8a9fc9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:832;s:6:"height";i:331;s:4:"file";s:29:"2016/02/img_56d3ecf8a9fc9.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3ecf8a9fc9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3ecf8a9fc9-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3ecf8a9fc9-768x306.png";s:5:"width";i:768;s:6:"height";i:306;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3ecf8a9fc9-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3ede830a79</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3ede830a79/</link>
		<pubDate>Mon, 29 Feb 2016 07:06:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ede830a79.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>929</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:06:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:06:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3ede830a79]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ede830a79.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3ede830a79.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:973;s:6:"height";i:391;s:4:"file";s:29:"2016/02/img_56d3ede830a79.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3ede830a79-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3ede830a79-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3ede830a79-768x309.png";s:5:"width";i:768;s:6:"height";i:309;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3ede830a79-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3eecb7485b</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3eecb7485b/</link>
		<pubDate>Mon, 29 Feb 2016 07:10:03 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3eecb7485b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>930</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3eecb7485b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3eecb7485b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3eecb7485b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1307;s:6:"height";i:454;s:4:"file";s:29:"2016/02/img_56d3eecb7485b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3eecb7485b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3eecb7485b-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3eecb7485b-768x267.png";s:5:"width";i:768;s:6:"height";i:267;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3eecb7485b-1024x356.png";s:5:"width";i:1024;s:6:"height";i:356;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3eecb7485b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3ef3149f4f</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3ef3149f4f/</link>
		<pubDate>Mon, 29 Feb 2016 07:11:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ef3149f4f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>931</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:11:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:11:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3ef3149f4f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ef3149f4f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3ef3149f4f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1264;s:6:"height";i:646;s:4:"file";s:29:"2016/02/img_56d3ef3149f4f.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3ef3149f4f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3ef3149f4f-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3ef3149f4f-768x393.png";s:5:"width";i:768;s:6:"height";i:393;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3ef3149f4f-1024x523.png";s:5:"width";i:1024;s:6:"height";i:523;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3ef3149f4f-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f08476c87</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f08476c87/</link>
		<pubDate>Mon, 29 Feb 2016 07:17:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f08476c87.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>932</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:17:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:17:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f08476c87]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f08476c87.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f08476c87.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1105;s:6:"height";i:462;s:4:"file";s:29:"2016/02/img_56d3f08476c87.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f08476c87-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f08476c87-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f08476c87-768x321.png";s:5:"width";i:768;s:6:"height";i:321;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f08476c87-1024x428.png";s:5:"width";i:1024;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f08476c87-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f2084c3f1</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f2084c3f1/</link>
		<pubDate>Mon, 29 Feb 2016 07:23:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f2084c3f1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>933</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:23:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:23:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f2084c3f1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f2084c3f1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f2084c3f1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1129;s:6:"height";i:580;s:4:"file";s:29:"2016/02/img_56d3f2084c3f1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f2084c3f1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f2084c3f1-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f2084c3f1-768x395.png";s:5:"width";i:768;s:6:"height";i:395;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f2084c3f1-1024x526.png";s:5:"width";i:1024;s:6:"height";i:526;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f2084c3f1-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f378625ea</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f378625ea/</link>
		<pubDate>Mon, 29 Feb 2016 07:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f378625ea.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>934</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f378625ea]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f378625ea.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f378625ea.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1288;s:6:"height";i:613;s:4:"file";s:29:"2016/02/img_56d3f378625ea.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f378625ea-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f378625ea-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f378625ea-768x366.png";s:5:"width";i:768;s:6:"height";i:366;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f378625ea-1024x487.png";s:5:"width";i:1024;s:6:"height";i:487;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f378625ea-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f3e2ab525</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f3e2ab525/</link>
		<pubDate>Mon, 29 Feb 2016 07:31:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f3e2ab525.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>935</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:31:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:31:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f3e2ab525]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f3e2ab525.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f3e2ab525.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:968;s:6:"height";i:322;s:4:"file";s:29:"2016/02/img_56d3f3e2ab525.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f3e2ab525-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f3e2ab525-300x100.png";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f3e2ab525-768x255.png";s:5:"width";i:768;s:6:"height";i:255;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f3e2ab525-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f41c2ef84</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f41c2ef84/</link>
		<pubDate>Mon, 29 Feb 2016 07:32:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f41c2ef84.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>936</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:32:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:32:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f41c2ef84]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f41c2ef84.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f41c2ef84.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:967;s:6:"height";i:329;s:4:"file";s:29:"2016/02/img_56d3f41c2ef84.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f41c2ef84-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f41c2ef84-300x102.png";s:5:"width";i:300;s:6:"height";i:102;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f41c2ef84-768x261.png";s:5:"width";i:768;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f41c2ef84-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f471ce466</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f471ce466/</link>
		<pubDate>Mon, 29 Feb 2016 07:34:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f471ce466.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>937</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:34:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:34:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f471ce466]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f471ce466.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f471ce466.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1029;s:6:"height";i:376;s:4:"file";s:29:"2016/02/img_56d3f471ce466.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f471ce466-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f471ce466-300x110.png";s:5:"width";i:300;s:6:"height";i:110;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f471ce466-768x281.png";s:5:"width";i:768;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f471ce466-1024x374.png";s:5:"width";i:1024;s:6:"height";i:374;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f471ce466-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f4da11d1b</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f4da11d1b/</link>
		<pubDate>Mon, 29 Feb 2016 07:35:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f4da11d1b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>938</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:35:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:35:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f4da11d1b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f4da11d1b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f4da11d1b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1025;s:6:"height";i:861;s:4:"file";s:29:"2016/02/img_56d3f4da11d1b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f4da11d1b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f4da11d1b-300x252.png";s:5:"width";i:300;s:6:"height";i:252;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f4da11d1b-768x645.png";s:5:"width";i:768;s:6:"height";i:645;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f4da11d1b-1024x860.png";s:5:"width";i:1024;s:6:"height";i:860;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f4da11d1b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f501f1a68</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f501f1a68/</link>
		<pubDate>Mon, 29 Feb 2016 07:36:33 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f501f1a68.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:36:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:36:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f501f1a68]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f501f1a68.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f501f1a68.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1208;s:6:"height";i:622;s:4:"file";s:29:"2016/02/img_56d3f501f1a68.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f501f1a68-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f501f1a68-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f501f1a68-768x395.png";s:5:"width";i:768;s:6:"height";i:395;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f501f1a68-1024x527.png";s:5:"width";i:1024;s:6:"height";i:527;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f501f1a68-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f5d4b39b5</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f5d4b39b5/</link>
		<pubDate>Mon, 29 Feb 2016 07:40:04 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f5d4b39b5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>940</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:40:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:40:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f5d4b39b5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f5d4b39b5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f5d4b39b5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1212;s:6:"height";i:386;s:4:"file";s:29:"2016/02/img_56d3f5d4b39b5.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f5d4b39b5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56d3f5d4b39b5-300x96.png";s:5:"width";i:300;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f5d4b39b5-768x245.png";s:5:"width";i:768;s:6:"height";i:245;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f5d4b39b5-1024x326.png";s:5:"width";i:1024;s:6:"height";i:326;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f5d4b39b5-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f61ec1c0e</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f61ec1c0e/</link>
		<pubDate>Mon, 29 Feb 2016 07:41:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f61ec1c0e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>941</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:41:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:41:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f61ec1c0e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f61ec1c0e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f61ec1c0e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1220;s:6:"height";i:700;s:4:"file";s:29:"2016/02/img_56d3f61ec1c0e.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f61ec1c0e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f61ec1c0e-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f61ec1c0e-768x441.png";s:5:"width";i:768;s:6:"height";i:441;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f61ec1c0e-1024x588.png";s:5:"width";i:1024;s:6:"height";i:588;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f61ec1c0e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f76672a62</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f76672a62/</link>
		<pubDate>Mon, 29 Feb 2016 07:46:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f76672a62.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>942</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:46:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:46:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f76672a62]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f76672a62.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f76672a62.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1212;s:6:"height";i:552;s:4:"file";s:29:"2016/02/img_56d3f76672a62.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f76672a62-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f76672a62-300x137.png";s:5:"width";i:300;s:6:"height";i:137;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f76672a62-768x350.png";s:5:"width";i:768;s:6:"height";i:350;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f76672a62-1024x466.png";s:5:"width";i:1024;s:6:"height";i:466;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f76672a62-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f7e2a6ca2</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f7e2a6ca2/</link>
		<pubDate>Mon, 29 Feb 2016 07:48:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f7e2a6ca2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>943</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:48:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:48:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f7e2a6ca2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f7e2a6ca2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f7e2a6ca2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1224;s:6:"height";i:553;s:4:"file";s:29:"2016/02/img_56d3f7e2a6ca2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f7e2a6ca2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f7e2a6ca2-300x136.png";s:5:"width";i:300;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f7e2a6ca2-768x347.png";s:5:"width";i:768;s:6:"height";i:347;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f7e2a6ca2-1024x463.png";s:5:"width";i:1024;s:6:"height";i:463;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f7e2a6ca2-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f82f4f94a</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f82f4f94a/</link>
		<pubDate>Mon, 29 Feb 2016 07:50:07 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f82f4f94a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>944</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:50:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:50:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f82f4f94a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f82f4f94a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f82f4f94a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1222;s:6:"height";i:511;s:4:"file";s:29:"2016/02/img_56d3f82f4f94a.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f82f4f94a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f82f4f94a-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f82f4f94a-768x321.png";s:5:"width";i:768;s:6:"height";i:321;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f82f4f94a-1024x428.png";s:5:"width";i:1024;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f82f4f94a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f8e7821dd</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f8e7821dd/</link>
		<pubDate>Mon, 29 Feb 2016 07:53:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f8e7821dd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>945</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:53:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:53:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f8e7821dd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f8e7821dd.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f8e7821dd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1057;s:6:"height";i:881;s:4:"file";s:29:"2016/02/img_56d3f8e7821dd.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f8e7821dd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f8e7821dd-300x250.png";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f8e7821dd-768x640.png";s:5:"width";i:768;s:6:"height";i:640;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f8e7821dd-1024x853.png";s:5:"width";i:1024;s:6:"height";i:853;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f8e7821dd-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f915456de</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f915456de/</link>
		<pubDate>Mon, 29 Feb 2016 07:53:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f915456de.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>946</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:53:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:53:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f915456de]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f915456de.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f915456de.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1302;s:6:"height";i:877;s:4:"file";s:29:"2016/02/img_56d3f915456de.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f915456de-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f915456de-300x202.png";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f915456de-768x517.png";s:5:"width";i:768;s:6:"height";i:517;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f915456de-1024x690.png";s:5:"width";i:1024;s:6:"height";i:690;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f915456de-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3f93be6559</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3f93be6559/</link>
		<pubDate>Mon, 29 Feb 2016 07:54:35 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f93be6559.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>947</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 15:54:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 07:54:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3f93be6559]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f93be6559.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3f93be6559.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1282;s:6:"height";i:792;s:4:"file";s:29:"2016/02/img_56d3f93be6559.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3f93be6559-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3f93be6559-300x185.png";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3f93be6559-768x474.png";s:5:"width";i:768;s:6:"height";i:474;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3f93be6559-1024x633.png";s:5:"width";i:1024;s:6:"height";i:633;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3f93be6559-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3faf11839a</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3faf11839a/</link>
		<pubDate>Mon, 29 Feb 2016 08:01:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3faf11839a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>948</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:01:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:01:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3faf11839a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3faf11839a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3faf11839a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1212;s:6:"height";i:548;s:4:"file";s:29:"2016/02/img_56d3faf11839a.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3faf11839a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3faf11839a-300x136.png";s:5:"width";i:300;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3faf11839a-768x347.png";s:5:"width";i:768;s:6:"height";i:347;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3faf11839a-1024x463.png";s:5:"width";i:1024;s:6:"height";i:463;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3faf11839a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3fb1e773ca</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3fb1e773ca/</link>
		<pubDate>Mon, 29 Feb 2016 08:02:38 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fb1e773ca.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>949</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:02:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:02:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3fb1e773ca]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fb1e773ca.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3fb1e773ca.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1199;s:6:"height";i:550;s:4:"file";s:29:"2016/02/img_56d3fb1e773ca.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3fb1e773ca-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3fb1e773ca-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3fb1e773ca-768x352.png";s:5:"width";i:768;s:6:"height";i:352;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3fb1e773ca-1024x470.png";s:5:"width";i:1024;s:6:"height";i:470;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3fb1e773ca-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3fb84d41ad</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3fb84d41ad/</link>
		<pubDate>Mon, 29 Feb 2016 08:04:20 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fb84d41ad.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>950</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:04:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:04:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3fb84d41ad]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fb84d41ad.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3fb84d41ad.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:121;s:6:"height";i:47;s:4:"file";s:29:"2016/02/img_56d3fb84d41ad.png";s:5:"sizes";a:1:{s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3fb84d41ad-80x47.png";s:5:"width";i:80;s:6:"height";i:47;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3fc58e48b4</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3fc58e48b4/</link>
		<pubDate>Mon, 29 Feb 2016 08:07:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fc58e48b4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>951</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:07:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:07:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3fc58e48b4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fc58e48b4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3fc58e48b4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1274;s:6:"height";i:548;s:4:"file";s:29:"2016/02/img_56d3fc58e48b4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3fc58e48b4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3fc58e48b4-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3fc58e48b4-768x330.png";s:5:"width";i:768;s:6:"height";i:330;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3fc58e48b4-1024x440.png";s:5:"width";i:1024;s:6:"height";i:440;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3fc58e48b4-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d3feb916696</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d3feb916696/</link>
		<pubDate>Mon, 29 Feb 2016 08:18:01 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3feb916696.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>952</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:18:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:18:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d3feb916696]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3feb916696.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d3feb916696.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1214;s:6:"height";i:620;s:4:"file";s:29:"2016/02/img_56d3feb916696.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d3feb916696-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d3feb916696-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d3feb916696-768x392.png";s:5:"width";i:768;s:6:"height";i:392;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d3feb916696-1024x523.png";s:5:"width";i:1024;s:6:"height";i:523;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d3feb916696-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d400a80e17c</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d400a80e17c/</link>
		<pubDate>Mon, 29 Feb 2016 08:26:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d400a80e17c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>954</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:26:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:26:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d400a80e17c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d400a80e17c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d400a80e17c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1220;s:6:"height";i:630;s:4:"file";s:29:"2016/02/img_56d400a80e17c.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d400a80e17c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d400a80e17c-300x155.png";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d400a80e17c-768x397.png";s:5:"width";i:768;s:6:"height";i:397;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d400a80e17c-1024x529.png";s:5:"width";i:1024;s:6:"height";i:529;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d400a80e17c-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d400b6d128b</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d400b6d128b/</link>
		<pubDate>Mon, 29 Feb 2016 08:26:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d400b6d128b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>955</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:26:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:26:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d400b6d128b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d400b6d128b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d400b6d128b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1220;s:6:"height";i:630;s:4:"file";s:29:"2016/02/img_56d400b6d128b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d400b6d128b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d400b6d128b-300x155.png";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d400b6d128b-768x397.png";s:5:"width";i:768;s:6:"height";i:397;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d400b6d128b-1024x529.png";s:5:"width";i:1024;s:6:"height";i:529;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d400b6d128b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d40770622c5</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d40770622c5/</link>
		<pubDate>Mon, 29 Feb 2016 08:55:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40770622c5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>956</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:55:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:55:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d40770622c5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40770622c5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d40770622c5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1212;s:6:"height";i:449;s:4:"file";s:29:"2016/02/img_56d40770622c5.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d40770622c5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d40770622c5-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d40770622c5-768x285.png";s:5:"width";i:768;s:6:"height";i:285;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d40770622c5-1024x379.png";s:5:"width";i:1024;s:6:"height";i:379;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d40770622c5-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d407bda230e</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d407bda230e/</link>
		<pubDate>Mon, 29 Feb 2016 08:56:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407bda230e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>957</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:56:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:56:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d407bda230e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407bda230e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d407bda230e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1206;s:6:"height";i:831;s:4:"file";s:29:"2016/02/img_56d407bda230e.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d407bda230e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d407bda230e-300x207.png";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d407bda230e-768x529.png";s:5:"width";i:768;s:6:"height";i:529;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d407bda230e-1024x706.png";s:5:"width";i:1024;s:6:"height";i:706;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d407bda230e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d407ffa638c</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d407ffa638c/</link>
		<pubDate>Mon, 29 Feb 2016 08:57:35 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407ffa638c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>958</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 16:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 08:57:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d407ffa638c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407ffa638c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d407ffa638c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1105;s:6:"height";i:715;s:4:"file";s:29:"2016/02/img_56d407ffa638c.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d407ffa638c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d407ffa638c-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d407ffa638c-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d407ffa638c-1024x663.png";s:5:"width";i:1024;s:6:"height";i:663;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d407ffa638c-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Icon-Cloud-white[1]</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/icon-cloud-white1/</link>
		<pubDate>Mon, 29 Feb 2016 09:03:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/Icon-Cloud-white1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>960</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 17:03:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 09:03:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[icon-cloud-white1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/Icon-Cloud-white1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/Icon-Cloud-white1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:983;s:6:"height";i:1024;s:4:"file";s:29:"2016/02/Icon-Cloud-white1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"Icon-Cloud-white1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"Icon-Cloud-white1-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"Icon-Cloud-white1-768x800.png";s:5:"width";i:768;s:6:"height";i:800;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"Icon-Cloud-white1-983x1024.png";s:5:"width";i:983;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"Icon-Cloud-white1-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d40b3783dce</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d40b3783dce/</link>
		<pubDate>Mon, 29 Feb 2016 09:11:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40b3783dce.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>961</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 17:11:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 09:11:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d40b3783dce]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40b3783dce.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d40b3783dce.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:716;s:6:"height";i:165;s:4:"file";s:29:"2016/02/img_56d40b3783dce.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d40b3783dce-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56d40b3783dce-300x69.png";s:5:"width";i:300;s:6:"height";i:69;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d40b3783dce-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d40dede7117</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d40dede7117/</link>
		<pubDate>Mon, 29 Feb 2016 09:22:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40dede7117.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>962</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 17:22:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 09:22:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d40dede7117]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40dede7117.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/img_56d40dede7117.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1057;s:6:"height";i:880;s:4:"file";s:29:"2016/02/img_56d40dede7117.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d40dede7117-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d40dede7117-300x250.png";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d40dede7117-768x639.png";s:5:"width";i:768;s:6:"height";i:639;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56d40dede7117-1024x853.png";s:5:"width";i:1024;s:6:"height";i:853;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d40dede7117-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2000px-Naruto_Shiki_Fujin.svg[1]</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/2000px-naruto_shiki_fujin-svg1/</link>
		<pubDate>Mon, 29 Feb 2016 19:36:42 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/02/2000px-Naruto_Shiki_Fujin.svg1_.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>969</wp:post_id>
		<wp:post_date><![CDATA[2016-03-01 03:36:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 19:36:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2000px-naruto_shiki_fujin-svg1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>871</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/02/2000px-Naruto_Shiki_Fujin.svg1_.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/2000px-Naruto_Shiki_Fujin.svg1_.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2000;s:6:"height";i:2258;s:4:"file";s:43:"2016/02/2000px-Naruto_Shiki_Fujin.svg1_.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"2000px-Naruto_Shiki_Fujin.svg1_-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"2000px-Naruto_Shiki_Fujin.svg1_-266x300.png";s:5:"width";i:266;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"2000px-Naruto_Shiki_Fujin.svg1_-768x867.png";s:5:"width";i:768;s:6:"height";i:867;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:44:"2000px-Naruto_Shiki_Fujin.svg1_-907x1024.png";s:5:"width";i:907;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:41:"2000px-Naruto_Shiki_Fujin.svg1_-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56d67b3e02814</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/img_56d67b3e02814/</link>
		<pubDate>Wed, 02 Mar 2016 05:33:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56d67b3e02814.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>970</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 13:33:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 05:33:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56d67b3e02814]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>923</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56d67b3e02814.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56d67b3e02814.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:420;s:4:"file";s:29:"2016/03/img_56d67b3e02814.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56d67b3e02814-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56d67b3e02814-300x131.png";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56d67b3e02814-768x336.png";s:5:"width";i:768;s:6:"height";i:336;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56d67b3e02814-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56dee24543173</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56dee24543173/</link>
		<pubDate>Tue, 08 Mar 2016 14:31:33 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee24543173.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>974</wp:post_id>
		<wp:post_date><![CDATA[2016-03-08 22:31:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 14:31:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56dee24543173]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee24543173.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56dee24543173.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1111;s:6:"height";i:190;s:4:"file";s:29:"2016/03/img_56dee24543173.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56dee24543173-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_56dee24543173-300x51.png";s:5:"width";i:300;s:6:"height";i:51;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56dee24543173-768x131.png";s:5:"width";i:768;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_56dee24543173-1024x175.png";s:5:"width";i:1024;s:6:"height";i:175;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56dee24543173-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56dee4e3127bd</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56dee4e3127bd/</link>
		<pubDate>Tue, 08 Mar 2016 14:42:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee4e3127bd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>975</wp:post_id>
		<wp:post_date><![CDATA[2016-03-08 22:42:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 14:42:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56dee4e3127bd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee4e3127bd.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56dee4e3127bd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:422;s:6:"height";i:291;s:4:"file";s:29:"2016/03/img_56dee4e3127bd.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56dee4e3127bd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56dee4e3127bd-300x207.png";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56dee4e3127bd-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56dee59fc2080</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56dee59fc2080/</link>
		<pubDate>Tue, 08 Mar 2016 14:45:51 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee59fc2080.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>976</wp:post_id>
		<wp:post_date><![CDATA[2016-03-08 22:45:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 14:45:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56dee59fc2080]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee59fc2080.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56dee59fc2080.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:349;s:4:"file";s:29:"2016/03/img_56dee59fc2080.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56dee59fc2080-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56dee59fc2080-300x241.png";s:5:"width";i:300;s:6:"height";i:241;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56dee59fc2080-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56dee7228dd76</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56dee7228dd76/</link>
		<pubDate>Tue, 08 Mar 2016 14:52:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee7228dd76.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>977</wp:post_id>
		<wp:post_date><![CDATA[2016-03-08 22:52:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 14:52:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56dee7228dd76]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee7228dd76.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56dee7228dd76.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:402;s:6:"height";i:288;s:4:"file";s:29:"2016/03/img_56dee7228dd76.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56dee7228dd76-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56dee7228dd76-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56dee7228dd76-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56df08efaf750</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56df08efaf750/</link>
		<pubDate>Tue, 08 Mar 2016 17:16:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df08efaf750.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>980</wp:post_id>
		<wp:post_date><![CDATA[2016-03-09 01:16:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 17:16:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56df08efaf750]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df08efaf750.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56df08efaf750.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:785;s:6:"height";i:290;s:4:"file";s:29:"2016/03/img_56df08efaf750.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56df08efaf750-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56df08efaf750-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56df08efaf750-768x284.png";s:5:"width";i:768;s:6:"height";i:284;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56df08efaf750-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56df091909176</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56df091909176/</link>
		<pubDate>Tue, 08 Mar 2016 17:17:13 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df091909176.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date><![CDATA[2016-03-09 01:17:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 17:17:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56df091909176]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df091909176.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56df091909176.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:397;s:6:"height";i:287;s:4:"file";s:29:"2016/03/img_56df091909176.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56df091909176-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56df091909176-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56df091909176-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56df09c11c17b</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56df09c11c17b/</link>
		<pubDate>Tue, 08 Mar 2016 17:20:01 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df09c11c17b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date><![CDATA[2016-03-09 01:20:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 17:20:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56df09c11c17b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56df09c11c17b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56df09c11c17b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:457;s:6:"height";i:291;s:4:"file";s:29:"2016/03/img_56df09c11c17b.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56df09c11c17b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56df09c11c17b-300x191.png";s:5:"width";i:300;s:6:"height";i:191;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56df09c11c17b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e2e08a51087</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e2e08a51087/</link>
		<pubDate>Fri, 11 Mar 2016 15:13:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2e08a51087.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>987</wp:post_id>
		<wp:post_date><![CDATA[2016-03-11 23:13:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 15:13:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e2e08a51087]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2e08a51087.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e2e08a51087.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:466;s:4:"file";s:29:"2016/03/img_56e2e08a51087.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e2e08a51087-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e2e08a51087-300x218.png";s:5:"width";i:300;s:6:"height";i:218;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e2e08a51087-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e2e918afcd9</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e2e918afcd9/</link>
		<pubDate>Fri, 11 Mar 2016 15:49:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2e918afcd9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>988</wp:post_id>
		<wp:post_date><![CDATA[2016-03-11 23:49:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 15:49:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e2e918afcd9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2e918afcd9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e2e918afcd9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:510;s:6:"height";i:323;s:4:"file";s:29:"2016/03/img_56e2e918afcd9.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e2e918afcd9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e2e918afcd9-300x190.png";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e2e918afcd9-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e2ecf83bddb</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e2ecf83bddb/</link>
		<pubDate>Fri, 11 Mar 2016 16:06:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2ecf83bddb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>989</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 00:06:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 16:06:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e2ecf83bddb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2ecf83bddb.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e2ecf83bddb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:288;s:6:"height";i:437;s:4:"file";s:29:"2016/03/img_56e2ecf83bddb.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e2ecf83bddb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e2ecf83bddb-198x300.png";s:5:"width";i:198;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e2ecf83bddb-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hire_me400x320png24[1]</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/hire_me400x320png241/</link>
		<pubDate>Fri, 11 Mar 2016 17:18:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/hire_me400x320png241.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>992</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 01:18:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 17:18:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hire_me400x320png241]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/hire_me400x320png241.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/hire_me400x320png241.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:320;s:4:"file";s:32:"2016/03/hire_me400x320png241.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"hire_me400x320png241-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"hire_me400x320png241-300x240.png";s:5:"width";i:300;s:6:"height";i:240;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:30:"hire_me400x320png241-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e2ff344f051</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e2ff344f051/</link>
		<pubDate>Fri, 11 Mar 2016 17:24:04 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2ff344f051.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>993</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 01:24:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 17:24:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e2ff344f051]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2ff344f051.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e2ff344f051.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:280;s:4:"file";s:29:"2016/03/img_56e2ff344f051.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e2ff344f051-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e2ff344f051-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e2ff344f051-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e385cf5a90e</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e385cf5a90e/</link>
		<pubDate>Sat, 12 Mar 2016 02:58:23 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e385cf5a90e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>996</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 10:58:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-12 02:58:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e385cf5a90e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e385cf5a90e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e385cf5a90e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:270;s:6:"height";i:415;s:4:"file";s:29:"2016/03/img_56e385cf5a90e.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e385cf5a90e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e385cf5a90e-195x300.png";s:5:"width";i:195;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e385cf5a90e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e39ce8bab6d</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e39ce8bab6d/</link>
		<pubDate>Sat, 12 Mar 2016 04:36:56 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39ce8bab6d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>997</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 12:36:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-12 04:36:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e39ce8bab6d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39ce8bab6d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e39ce8bab6d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1007;s:6:"height";i:742;s:4:"file";s:29:"2016/03/img_56e39ce8bab6d.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e39ce8bab6d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e39ce8bab6d-300x221.png";s:5:"width";i:300;s:6:"height";i:221;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56e39ce8bab6d-768x566.png";s:5:"width";i:768;s:6:"height";i:566;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e39ce8bab6d-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e39f73d83e3</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e39f73d83e3/</link>
		<pubDate>Sat, 12 Mar 2016 04:47:47 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39f73d83e3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>998</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 12:47:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-12 04:47:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e39f73d83e3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39f73d83e3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e39f73d83e3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:849;s:6:"height";i:445;s:4:"file";s:29:"2016/03/img_56e39f73d83e3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e39f73d83e3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e39f73d83e3-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56e39f73d83e3-768x403.png";s:5:"width";i:768;s:6:"height";i:403;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e39f73d83e3-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_56e82e4177266</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/img_56e82e4177266/</link>
		<pubDate>Tue, 15 Mar 2016 15:46:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e82e4177266.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1002</wp:post_id>
		<wp:post_date><![CDATA[2016-03-15 23:46:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-15 15:46:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_56e82e4177266]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>973</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e82e4177266.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/img_56e82e4177266.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:944;s:6:"height";i:362;s:4:"file";s:29:"2016/03/img_56e82e4177266.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_56e82e4177266-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_56e82e4177266-300x115.png";s:5:"width";i:300;s:6:"height";i:115;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_56e82e4177266-768x295.png";s:5:"width";i:768;s:6:"height";i:295;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_56e82e4177266-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker_toolbox_banner_icon[1]</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/docker_toolbox_banner_icon1/</link>
		<pubDate>Sat, 02 Apr 2016 17:39:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/docker_toolbox_banner_icon1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1017</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 01:39:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 17:39:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker_toolbox_banner_icon1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/docker_toolbox_banner_icon1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/docker_toolbox_banner_icon1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:420;s:6:"height";i:340;s:4:"file";s:39:"2016/04/docker_toolbox_banner_icon1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"docker_toolbox_banner_icon1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:39:"docker_toolbox_banner_icon1-300x243.png";s:5:"width";i:300;s:6:"height";i:243;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:37:"docker_toolbox_banner_icon1-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570005710d26e</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_570005710d26e/</link>
		<pubDate>Sat, 02 Apr 2016 17:46:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570005710d26e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1018</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 01:46:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 17:46:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570005710d26e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570005710d26e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570005710d26e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:504;s:4:"file";s:29:"2016/04/img_570005710d26e.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570005710d26e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_570005710d26e-300x158.png";s:5:"width";i:300;s:6:"height";i:158;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570005710d26e-768x403.png";s:5:"width";i:768;s:6:"height";i:403;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570005710d26e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570008bbbbc0b</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_570008bbbbc0b/</link>
		<pubDate>Sat, 02 Apr 2016 18:00:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570008bbbbc0b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1019</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:00:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:00:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570008bbbbc0b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570008bbbbc0b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570008bbbbc0b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:772;s:6:"height";i:470;s:4:"file";s:29:"2016/04/img_570008bbbbc0b.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570008bbbbc0b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_570008bbbbc0b-300x183.png";s:5:"width";i:300;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570008bbbbc0b-768x468.png";s:5:"width";i:768;s:6:"height";i:468;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570008bbbbc0b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57000bc9912e2</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_57000bc9912e2/</link>
		<pubDate>Sat, 02 Apr 2016 18:13:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000bc9912e2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1020</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:13:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:13:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57000bc9912e2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000bc9912e2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57000bc9912e2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:823;s:6:"height";i:336;s:4:"file";s:29:"2016/04/img_57000bc9912e2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57000bc9912e2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57000bc9912e2-300x122.png";s:5:"width";i:300;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57000bc9912e2-768x314.png";s:5:"width";i:768;s:6:"height";i:314;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57000bc9912e2-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57000cba58b2c</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_57000cba58b2c/</link>
		<pubDate>Sat, 02 Apr 2016 18:17:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000cba58b2c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1021</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:17:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:17:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57000cba58b2c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000cba58b2c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57000cba58b2c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:506;s:6:"height";i:397;s:4:"file";s:29:"2016/04/img_57000cba58b2c.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57000cba58b2c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57000cba58b2c-300x235.png";s:5:"width";i:300;s:6:"height";i:235;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57000cba58b2c-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57000daeae26e</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_57000daeae26e/</link>
		<pubDate>Sat, 02 Apr 2016 18:21:34 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000daeae26e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1022</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:21:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:21:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57000daeae26e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000daeae26e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57000daeae26e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:651;s:6:"height";i:596;s:4:"file";s:29:"2016/04/img_57000daeae26e.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57000daeae26e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57000daeae26e-300x275.png";s:5:"width";i:300;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57000daeae26e-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57000f4120a6a</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_57000f4120a6a/</link>
		<pubDate>Sat, 02 Apr 2016 18:28:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f4120a6a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1023</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:28:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:28:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57000f4120a6a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f4120a6a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57000f4120a6a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:942;s:6:"height";i:202;s:4:"file";s:29:"2016/04/img_57000f4120a6a.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57000f4120a6a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57000f4120a6a-300x64.png";s:5:"width";i:300;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57000f4120a6a-768x165.png";s:5:"width";i:768;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57000f4120a6a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57000f651308d</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_57000f651308d/</link>
		<pubDate>Sat, 02 Apr 2016 18:28:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f651308d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1024</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:28:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:28:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57000f651308d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f651308d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57000f651308d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:889;s:6:"height";i:605;s:4:"file";s:29:"2016/04/img_57000f651308d.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57000f651308d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57000f651308d-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57000f651308d-768x523.png";s:5:"width";i:768;s:6:"height";i:523;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57000f651308d-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5700122b1c142</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_5700122b1c142/</link>
		<pubDate>Sat, 02 Apr 2016 18:40:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5700122b1c142.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1025</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:40:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:40:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5700122b1c142]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5700122b1c142.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5700122b1c142.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:983;s:6:"height";i:387;s:4:"file";s:29:"2016/04/img_5700122b1c142.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5700122b1c142-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5700122b1c142-300x118.png";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5700122b1c142-768x302.png";s:5:"width";i:768;s:6:"height";i:302;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5700122b1c142-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5700124ea57ca</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_5700124ea57ca/</link>
		<pubDate>Sat, 02 Apr 2016 18:41:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5700124ea57ca.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1026</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:41:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:41:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5700124ea57ca]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5700124ea57ca.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5700124ea57ca.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:983;s:6:"height";i:387;s:4:"file";s:29:"2016/04/img_5700124ea57ca.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5700124ea57ca-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5700124ea57ca-300x118.png";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5700124ea57ca-768x302.png";s:5:"width";i:768;s:6:"height";i:302;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5700124ea57ca-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570012eaeeb95</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_570012eaeeb95/</link>
		<pubDate>Sat, 02 Apr 2016 18:43:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570012eaeeb95.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1027</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:43:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:43:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570012eaeeb95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570012eaeeb95.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570012eaeeb95.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1234;s:6:"height";i:566;s:4:"file";s:29:"2016/04/img_570012eaeeb95.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570012eaeeb95-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_570012eaeeb95-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570012eaeeb95-768x352.png";s:5:"width";i:768;s:6:"height";i:352;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_570012eaeeb95-1024x470.png";s:5:"width";i:1024;s:6:"height";i:470;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570012eaeeb95-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570014665a7e3</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_570014665a7e3/</link>
		<pubDate>Sat, 02 Apr 2016 18:50:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014665a7e3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1028</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:50:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:50:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570014665a7e3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014665a7e3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570014665a7e3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:656;s:6:"height";i:151;s:4:"file";s:29:"2016/04/img_570014665a7e3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570014665a7e3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_570014665a7e3-300x69.png";s:5:"width";i:300;s:6:"height";i:69;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570014665a7e3-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570014b3b1c69</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/img_570014b3b1c69/</link>
		<pubDate>Sat, 02 Apr 2016 18:51:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014b3b1c69.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1029</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 02:51:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 18:51:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570014b3b1c69]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1015</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014b3b1c69.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570014b3b1c69.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:784;s:6:"height";i:663;s:4:"file";s:29:"2016/04/img_570014b3b1c69.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570014b3b1c69-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_570014b3b1c69-300x254.png";s:5:"width";i:300;s:6:"height";i:254;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570014b3b1c69-768x649.png";s:5:"width";i:768;s:6:"height";i:649;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570014b3b1c69-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5707dbccb3191</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_5707dbccb3191/</link>
		<pubDate>Fri, 08 Apr 2016 16:26:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707dbccb3191.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1042</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 00:26:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-08 16:26:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5707dbccb3191]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707dbccb3191.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5707dbccb3191.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:29:"2016/04/img_5707dbccb3191.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5707dbccb3191-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5707dbccb3191-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5707dbccb3191-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5707dbccb3191-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5707dbccb3191-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5707e232050f3</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_5707e232050f3/</link>
		<pubDate>Fri, 08 Apr 2016 16:54:10 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707e232050f3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1046</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 00:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-08 16:54:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5707e232050f3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707e232050f3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5707e232050f3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:367;s:4:"file";s:29:"2016/04/img_5707e232050f3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5707e232050f3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5707e232050f3-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5707e232050f3-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5707f180d508b</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_5707f180d508b/</link>
		<pubDate>Fri, 08 Apr 2016 17:59:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707f180d508b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1047</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 01:59:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-08 17:59:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5707f180d508b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707f180d508b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5707f180d508b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:367;s:4:"file";s:29:"2016/04/img_5707f180d508b.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5707f180d508b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5707f180d508b-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5707f180d508b-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>csharp[1]</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/csharp1/</link>
		<pubDate>Fri, 08 Apr 2016 20:07:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/csharp1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1050</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 04:07:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-08 20:07:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[csharp1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/csharp1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/csharp1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:281;s:6:"height";i:244;s:4:"file";s:19:"2016/04/csharp1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"csharp1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"widget-thumb";a:4:{s:4:"file";s:17:"csharp1-80x50.jpg";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57088a511fe94</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_57088a511fe94/</link>
		<pubDate>Sat, 09 Apr 2016 04:51:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57088a511fe94.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1051</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 12:51:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-09 04:51:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57088a511fe94]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57088a511fe94.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57088a511fe94.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:702;s:6:"height";i:346;s:4:"file";s:29:"2016/04/img_57088a511fe94.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57088a511fe94-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57088a511fe94-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_57088a511fe94-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570894d83cf17</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_570894d83cf17/</link>
		<pubDate>Sat, 09 Apr 2016 05:36:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570894d83cf17.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1052</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 13:36:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-09 05:36:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570894d83cf17]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570894d83cf17.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570894d83cf17.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1368;s:6:"height";i:337;s:4:"file";s:29:"2016/04/img_570894d83cf17.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570894d83cf17-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_570894d83cf17-300x74.png";s:5:"width";i:300;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570894d83cf17-768x189.png";s:5:"width";i:768;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_570894d83cf17-1024x252.png";s:5:"width";i:1024;s:6:"height";i:252;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570894d83cf17-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5708950c6a29a</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_5708950c6a29a/</link>
		<pubDate>Sat, 09 Apr 2016 05:37:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5708950c6a29a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1053</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 13:37:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-09 05:37:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5708950c6a29a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5708950c6a29a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5708950c6a29a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:777;s:6:"height";i:292;s:4:"file";s:29:"2016/04/img_5708950c6a29a.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5708950c6a29a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5708950c6a29a-300x113.png";s:5:"width";i:300;s:6:"height";i:113;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5708950c6a29a-768x289.png";s:5:"width";i:768;s:6:"height";i:289;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_5708950c6a29a-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_570895657bebe</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/img_570895657bebe/</link>
		<pubDate>Sat, 09 Apr 2016 05:38:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570895657bebe.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1054</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 13:38:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-09 05:38:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_570895657bebe]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1041</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570895657bebe.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_570895657bebe.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:841;s:6:"height";i:368;s:4:"file";s:29:"2016/04/img_570895657bebe.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_570895657bebe-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_570895657bebe-300x131.png";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_570895657bebe-768x336.png";s:5:"width";i:768;s:6:"height";i:336;s:9:"mime-type";s:9:"image/png";}s:12:"widget-thumb";a:4:{s:4:"file";s:27:"img_570895657bebe-80x50.png";s:5:"width";i:80;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5720ee2b5a792</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5720ee2b5a792/</link>
		<pubDate>Wed, 27 Apr 2016 16:51:55 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee2b5a792.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1162</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 00:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-27 16:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5720ee2b5a792]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee2b5a792.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5720ee2b5a792.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:360;s:4:"file";s:29:"2016/04/img_5720ee2b5a792.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5720ee2b5a792-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5720ee2b5a792-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5720ee2b5a792-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5720ee2b5a792-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5720ee2b5a792-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5720ee43d57b5</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5720ee43d57b5/</link>
		<pubDate>Wed, 27 Apr 2016 16:52:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee43d57b5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1163</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 00:52:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-27 16:52:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5720ee43d57b5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee43d57b5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5720ee43d57b5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1378;s:6:"height";i:596;s:4:"file";s:29:"2016/04/img_5720ee43d57b5.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5720ee43d57b5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5720ee43d57b5-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5720ee43d57b5-768x332.png";s:5:"width";i:768;s:6:"height";i:332;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5720ee43d57b5-1024x443.png";s:5:"width";i:1024;s:6:"height";i:443;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5720ee43d57b5-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5720ee43d57b5-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5720ee43d57b5-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57221f673affc</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57221f673affc/</link>
		<pubDate>Thu, 28 Apr 2016 14:34:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57221f673affc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1168</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 22:34:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 14:34:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57221f673affc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57221f673affc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57221f673affc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1071;s:6:"height";i:720;s:4:"file";s:29:"2016/04/img_57221f673affc.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57221f673affc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57221f673affc-300x202.png";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57221f673affc-768x516.png";s:5:"width";i:768;s:6:"height";i:516;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57221f673affc-1024x688.png";s:5:"width";i:1024;s:6:"height";i:688;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57221f673affc-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57221f673affc-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57221f673affc-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222434871bf</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222434871bf/</link>
		<pubDate>Thu, 28 Apr 2016 14:54:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222434871bf.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1169</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 22:54:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 14:54:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222434871bf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222434871bf.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222434871bf.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:469;s:6:"height";i:144;s:4:"file";s:29:"2016/04/img_57222434871bf.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222434871bf-150x144.png";s:5:"width";i:150;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57222434871bf-300x92.png";s:5:"width";i:300;s:6:"height";i:92;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222434871bf-218x144.png";s:5:"width";i:218;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222434871bf-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222434871bf-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572224eb7eda3</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572224eb7eda3/</link>
		<pubDate>Thu, 28 Apr 2016 14:57:47 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572224eb7eda3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1170</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 22:57:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 14:57:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572224eb7eda3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572224eb7eda3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572224eb7eda3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1071;s:6:"height";i:834;s:4:"file";s:29:"2016/04/img_572224eb7eda3.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572224eb7eda3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572224eb7eda3-300x234.png";s:5:"width";i:300;s:6:"height";i:234;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572224eb7eda3-768x598.png";s:5:"width";i:768;s:6:"height";i:598;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572224eb7eda3-1024x797.png";s:5:"width";i:1024;s:6:"height";i:797;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572224eb7eda3-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572224eb7eda3-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572224eb7eda3-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722253db5c6e</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722253db5c6e/</link>
		<pubDate>Thu, 28 Apr 2016 14:59:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722253db5c6e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1171</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 22:59:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 14:59:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722253db5c6e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722253db5c6e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722253db5c6e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1210;s:6:"height";i:984;s:4:"file";s:29:"2016/04/img_5722253db5c6e.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722253db5c6e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722253db5c6e-300x244.png";s:5:"width";i:300;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722253db5c6e-768x625.png";s:5:"width";i:768;s:6:"height";i:625;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5722253db5c6e-1024x833.png";s:5:"width";i:1024;s:6:"height";i:833;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722253db5c6e-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722253db5c6e-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722253db5c6e-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572225fa8eeb3</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572225fa8eeb3/</link>
		<pubDate>Thu, 28 Apr 2016 15:02:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572225fa8eeb3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1172</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:02:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:02:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572225fa8eeb3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572225fa8eeb3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572225fa8eeb3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:738;s:6:"height";i:424;s:4:"file";s:29:"2016/04/img_572225fa8eeb3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572225fa8eeb3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572225fa8eeb3-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572225fa8eeb3-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572225fa8eeb3-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572225fa8eeb3-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722269a33cb6</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722269a33cb6/</link>
		<pubDate>Thu, 28 Apr 2016 15:04:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722269a33cb6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:04:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:04:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722269a33cb6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722269a33cb6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722269a33cb6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1210;s:6:"height";i:894;s:4:"file";s:29:"2016/04/img_5722269a33cb6.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722269a33cb6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722269a33cb6-300x222.png";s:5:"width";i:300;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722269a33cb6-768x567.png";s:5:"width";i:768;s:6:"height";i:567;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5722269a33cb6-1024x757.png";s:5:"width";i:1024;s:6:"height";i:757;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722269a33cb6-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722269a33cb6-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722269a33cb6-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222755ed594</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222755ed594/</link>
		<pubDate>Thu, 28 Apr 2016 15:08:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222755ed594.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1174</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:08:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:08:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222755ed594]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222755ed594.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222755ed594.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:1280;s:4:"file";s:29:"2016/04/img_57222755ed594.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222755ed594-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222755ed594-240x300.png";s:5:"width";i:240;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222755ed594-768x960.png";s:5:"width";i:768;s:6:"height";i:960;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222755ed594-819x1024.png";s:5:"width";i:819;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222755ed594-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222755ed594-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222755ed594-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572227ef0fa06</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572227ef0fa06/</link>
		<pubDate>Thu, 28 Apr 2016 15:10:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572227ef0fa06.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1175</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:10:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:10:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572227ef0fa06]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572227ef0fa06.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572227ef0fa06.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1181;s:6:"height";i:1030;s:4:"file";s:29:"2016/04/img_572227ef0fa06.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572227ef0fa06-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572227ef0fa06-300x262.png";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572227ef0fa06-768x670.png";s:5:"width";i:768;s:6:"height";i:670;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572227ef0fa06-1024x893.png";s:5:"width";i:1024;s:6:"height";i:893;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572227ef0fa06-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572227ef0fa06-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572227ef0fa06-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722283f5022e</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722283f5022e/</link>
		<pubDate>Thu, 28 Apr 2016 15:11:59 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722283f5022e.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1176</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722283f5022e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722283f5022e.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722283f5022e.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:831;s:6:"height";i:639;s:4:"file";s:29:"2016/04/img_5722283f5022e.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722283f5022e-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722283f5022e-300x231.png";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722283f5022e-768x591.png";s:5:"width";i:768;s:6:"height";i:591;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722283f5022e-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722283f5022e-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722283f5022e-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722285abac2c</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722285abac2c/</link>
		<pubDate>Thu, 28 Apr 2016 15:12:26 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722285abac2c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1177</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:12:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:12:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722285abac2c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722285abac2c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722285abac2c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:683;s:6:"height";i:608;s:4:"file";s:29:"2016/04/img_5722285abac2c.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722285abac2c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722285abac2c-300x267.png";s:5:"width";i:300;s:6:"height";i:267;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722285abac2c-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722285abac2c-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722285abac2c-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722286ce0af1</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722286ce0af1/</link>
		<pubDate>Thu, 28 Apr 2016 15:12:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722286ce0af1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1178</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:12:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:12:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722286ce0af1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722286ce0af1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722286ce0af1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:698;s:6:"height";i:607;s:4:"file";s:29:"2016/04/img_5722286ce0af1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722286ce0af1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722286ce0af1-300x261.png";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722286ce0af1-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722286ce0af1-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722286ce0af1-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722287ce9238</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722287ce9238/</link>
		<pubDate>Thu, 28 Apr 2016 15:13:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722287ce9238.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1179</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:13:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:13:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722287ce9238]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722287ce9238.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722287ce9238.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:926;s:6:"height";i:596;s:4:"file";s:29:"2016/04/img_5722287ce9238.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722287ce9238-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722287ce9238-300x193.png";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722287ce9238-768x494.png";s:5:"width";i:768;s:6:"height";i:494;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722287ce9238-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722287ce9238-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722287ce9238-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222899d6dc6</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222899d6dc6/</link>
		<pubDate>Thu, 28 Apr 2016 15:13:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222899d6dc6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1180</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:13:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:13:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222899d6dc6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222899d6dc6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222899d6dc6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:780;s:6:"height";i:449;s:4:"file";s:29:"2016/04/img_57222899d6dc6.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222899d6dc6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222899d6dc6-300x173.png";s:5:"width";i:300;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222899d6dc6-768x442.png";s:5:"width";i:768;s:6:"height";i:442;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222899d6dc6-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222899d6dc6-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222899d6dc6-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222bf24eb00</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222bf24eb00/</link>
		<pubDate>Thu, 28 Apr 2016 15:27:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222bf24eb00.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1182</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:27:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:27:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222bf24eb00]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222bf24eb00.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222bf24eb00.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1046;s:6:"height";i:631;s:4:"file";s:29:"2016/04/img_57222bf24eb00.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222bf24eb00-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222bf24eb00-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222bf24eb00-768x463.png";s:5:"width";i:768;s:6:"height";i:463;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222bf24eb00-1024x618.png";s:5:"width";i:1024;s:6:"height";i:618;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222bf24eb00-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222bf24eb00-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222bf24eb00-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222ce1d6a74</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222ce1d6a74/</link>
		<pubDate>Thu, 28 Apr 2016 15:31:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222ce1d6a74.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1183</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:31:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:31:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222ce1d6a74]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222ce1d6a74.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222ce1d6a74.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1604;s:6:"height";i:225;s:4:"file";s:29:"2016/04/img_57222ce1d6a74.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222ce1d6a74-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57222ce1d6a74-300x42.png";s:5:"width";i:300;s:6:"height";i:42;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222ce1d6a74-768x108.png";s:5:"width";i:768;s:6:"height";i:108;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222ce1d6a74-1024x144.png";s:5:"width";i:1024;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222ce1d6a74-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222ce1d6a74-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222ce1d6a74-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222d3b27ac3</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222d3b27ac3/</link>
		<pubDate>Thu, 28 Apr 2016 15:33:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222d3b27ac3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1184</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:33:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:33:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222d3b27ac3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222d3b27ac3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222d3b27ac3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1427;s:6:"height";i:482;s:4:"file";s:29:"2016/04/img_57222d3b27ac3.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222d3b27ac3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222d3b27ac3-300x101.png";s:5:"width";i:300;s:6:"height";i:101;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222d3b27ac3-768x259.png";s:5:"width";i:768;s:6:"height";i:259;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222d3b27ac3-1024x346.png";s:5:"width";i:1024;s:6:"height";i:346;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222d3b27ac3-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222d3b27ac3-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222d3b27ac3-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222da8cce29</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222da8cce29/</link>
		<pubDate>Thu, 28 Apr 2016 15:35:04 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222da8cce29.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1185</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:35:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:35:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222da8cce29]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222da8cce29.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222da8cce29.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:887;s:6:"height";i:365;s:4:"file";s:29:"2016/04/img_57222da8cce29.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222da8cce29-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222da8cce29-300x123.png";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222da8cce29-768x316.png";s:5:"width";i:768;s:6:"height";i:316;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222da8cce29-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222da8cce29-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222da8cce29-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222dbf32386</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222dbf32386/</link>
		<pubDate>Thu, 28 Apr 2016 15:35:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1186</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:35:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:35:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222dbf32386]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222dbf32386.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:888;s:6:"height";i:358;s:4:"file";s:29:"2016/04/img_57222dbf32386.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222dbf32386-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222dbf32386-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222dbf32386-768x310.png";s:5:"width";i:768;s:6:"height";i:310;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222dbf32386-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222dbf32386-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222dbf32386-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222dd6387ea</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222dd6387ea/</link>
		<pubDate>Thu, 28 Apr 2016 15:35:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dd6387ea.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1187</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:35:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:35:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222dd6387ea]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dd6387ea.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222dd6387ea.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:895;s:6:"height";i:365;s:4:"file";s:29:"2016/04/img_57222dd6387ea.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222dd6387ea-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222dd6387ea-300x122.png";s:5:"width";i:300;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222dd6387ea-768x313.png";s:5:"width";i:768;s:6:"height";i:313;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222dd6387ea-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222dd6387ea-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222dd6387ea-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222e40753c8</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222e40753c8/</link>
		<pubDate>Thu, 28 Apr 2016 15:37:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e40753c8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1188</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:37:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:37:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222e40753c8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e40753c8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222e40753c8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1181;s:6:"height";i:314;s:4:"file";s:29:"2016/04/img_57222e40753c8.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222e40753c8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57222e40753c8-300x80.png";s:5:"width";i:300;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222e40753c8-768x204.png";s:5:"width";i:768;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222e40753c8-1024x272.png";s:5:"width";i:1024;s:6:"height";i:272;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222e40753c8-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222e40753c8-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222e40753c8-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222e6614ecf</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222e6614ecf/</link>
		<pubDate>Thu, 28 Apr 2016 15:38:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e6614ecf.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1189</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:38:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:38:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222e6614ecf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e6614ecf.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222e6614ecf.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1203;s:6:"height";i:784;s:4:"file";s:29:"2016/04/img_57222e6614ecf.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222e6614ecf-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222e6614ecf-300x196.png";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222e6614ecf-768x501.png";s:5:"width";i:768;s:6:"height";i:501;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57222e6614ecf-1024x667.png";s:5:"width";i:1024;s:6:"height";i:667;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222e6614ecf-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222e6614ecf-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222e6614ecf-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222efa89b05</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222efa89b05/</link>
		<pubDate>Thu, 28 Apr 2016 15:40:42 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222efa89b05.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1190</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:40:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:40:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222efa89b05]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222efa89b05.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222efa89b05.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:896;s:6:"height";i:367;s:4:"file";s:29:"2016/04/img_57222efa89b05.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222efa89b05-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222efa89b05-300x123.png";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222efa89b05-768x315.png";s:5:"width";i:768;s:6:"height";i:315;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222efa89b05-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222efa89b05-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222efa89b05-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222f0e3fe62</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222f0e3fe62/</link>
		<pubDate>Thu, 28 Apr 2016 15:41:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f0e3fe62.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1191</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:41:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:41:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222f0e3fe62]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f0e3fe62.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222f0e3fe62.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:896;s:6:"height";i:358;s:4:"file";s:29:"2016/04/img_57222f0e3fe62.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222f0e3fe62-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222f0e3fe62-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222f0e3fe62-768x307.png";s:5:"width";i:768;s:6:"height";i:307;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222f0e3fe62-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222f0e3fe62-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222f0e3fe62-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57222f1f04992</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57222f1f04992/</link>
		<pubDate>Thu, 28 Apr 2016 15:41:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f1f04992.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1192</wp:post_id>
		<wp:post_date><![CDATA[2016-04-28 23:41:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 15:41:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57222f1f04992]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f1f04992.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57222f1f04992.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:885;s:6:"height";i:356;s:4:"file";s:29:"2016/04/img_57222f1f04992.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57222f1f04992-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57222f1f04992-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57222f1f04992-768x309.png";s:5:"width";i:768;s:6:"height";i:309;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57222f1f04992-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57222f1f04992-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57222f1f04992-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572245251ccec</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572245251ccec/</link>
		<pubDate>Thu, 28 Apr 2016 17:15:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572245251ccec.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1193</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:15:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:15:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572245251ccec]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572245251ccec.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572245251ccec.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1574;s:6:"height";i:569;s:4:"file";s:29:"2016/04/img_572245251ccec.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572245251ccec-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572245251ccec-300x108.png";s:5:"width";i:300;s:6:"height";i:108;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572245251ccec-768x278.png";s:5:"width";i:768;s:6:"height";i:278;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572245251ccec-1024x370.png";s:5:"width";i:1024;s:6:"height";i:370;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572245251ccec-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572245251ccec-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572245251ccec-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722456271099</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722456271099/</link>
		<pubDate>Thu, 28 Apr 2016 17:16:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722456271099.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1194</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:16:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:16:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722456271099]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722456271099.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722456271099.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1524;s:6:"height";i:959;s:4:"file";s:29:"2016/04/img_5722456271099.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722456271099-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722456271099-300x189.png";s:5:"width";i:300;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722456271099-768x483.png";s:5:"width";i:768;s:6:"height";i:483;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5722456271099-1024x644.png";s:5:"width";i:1024;s:6:"height";i:644;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722456271099-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722456271099-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722456271099-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57224612a9f8f</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57224612a9f8f/</link>
		<pubDate>Thu, 28 Apr 2016 17:19:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224612a9f8f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1195</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:19:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:19:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57224612a9f8f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224612a9f8f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57224612a9f8f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1561;s:6:"height";i:596;s:4:"file";s:29:"2016/04/img_57224612a9f8f.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57224612a9f8f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57224612a9f8f-300x115.png";s:5:"width";i:300;s:6:"height";i:115;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57224612a9f8f-768x293.png";s:5:"width";i:768;s:6:"height";i:293;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57224612a9f8f-1024x391.png";s:5:"width";i:1024;s:6:"height";i:391;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57224612a9f8f-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57224612a9f8f-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57224612a9f8f-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572246be623eb</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572246be623eb/</link>
		<pubDate>Thu, 28 Apr 2016 17:22:06 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572246be623eb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1196</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:22:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:22:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572246be623eb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572246be623eb.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572246be623eb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1558;s:6:"height";i:570;s:4:"file";s:29:"2016/04/img_572246be623eb.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572246be623eb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572246be623eb-300x110.png";s:5:"width";i:300;s:6:"height";i:110;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572246be623eb-768x281.png";s:5:"width";i:768;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572246be623eb-1024x375.png";s:5:"width";i:1024;s:6:"height";i:375;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572246be623eb-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572246be623eb-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572246be623eb-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572247110c81d</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572247110c81d/</link>
		<pubDate>Thu, 28 Apr 2016 17:23:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572247110c81d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1197</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:23:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:23:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572247110c81d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572247110c81d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572247110c81d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1564;s:6:"height";i:568;s:4:"file";s:29:"2016/04/img_572247110c81d.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572247110c81d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572247110c81d-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572247110c81d-768x279.png";s:5:"width";i:768;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572247110c81d-1024x372.png";s:5:"width";i:1024;s:6:"height";i:372;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572247110c81d-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572247110c81d-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572247110c81d-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57224769ae0e1</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57224769ae0e1/</link>
		<pubDate>Thu, 28 Apr 2016 17:24:57 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224769ae0e1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1198</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:24:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:24:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57224769ae0e1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224769ae0e1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57224769ae0e1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1563;s:6:"height";i:569;s:4:"file";s:29:"2016/04/img_57224769ae0e1.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57224769ae0e1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57224769ae0e1-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57224769ae0e1-768x280.png";s:5:"width";i:768;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57224769ae0e1-1024x373.png";s:5:"width";i:1024;s:6:"height";i:373;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57224769ae0e1-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57224769ae0e1-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57224769ae0e1-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572248b74e84a</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_572248b74e84a/</link>
		<pubDate>Thu, 28 Apr 2016 17:30:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572248b74e84a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1199</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:30:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:30:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572248b74e84a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572248b74e84a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_572248b74e84a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1559;s:6:"height";i:568;s:4:"file";s:29:"2016/04/img_572248b74e84a.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572248b74e84a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572248b74e84a-300x109.png";s:5:"width";i:300;s:6:"height";i:109;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572248b74e84a-768x280.png";s:5:"width";i:768;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_572248b74e84a-1024x373.png";s:5:"width";i:1024;s:6:"height";i:373;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572248b74e84a-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572248b74e84a-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572248b74e84a-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5722490655b73</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_5722490655b73/</link>
		<pubDate>Thu, 28 Apr 2016 17:31:50 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722490655b73.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1200</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:31:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:31:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5722490655b73]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722490655b73.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_5722490655b73.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1552;s:6:"height";i:549;s:4:"file";s:29:"2016/04/img_5722490655b73.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5722490655b73-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5722490655b73-300x106.png";s:5:"width";i:300;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5722490655b73-768x272.png";s:5:"width";i:768;s:6:"height";i:272;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5722490655b73-1024x362.png";s:5:"width";i:1024;s:6:"height";i:362;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5722490655b73-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5722490655b73-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5722490655b73-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57224961c4cab</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57224961c4cab/</link>
		<pubDate>Thu, 28 Apr 2016 17:33:21 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224961c4cab.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1201</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 01:33:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 17:33:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57224961c4cab]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224961c4cab.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57224961c4cab.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1556;s:6:"height";i:460;s:4:"file";s:29:"2016/04/img_57224961c4cab.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57224961c4cab-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57224961c4cab-300x89.png";s:5:"width";i:300;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57224961c4cab-768x227.png";s:5:"width";i:768;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57224961c4cab-1024x303.png";s:5:"width";i:1024;s:6:"height";i:303;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57224961c4cab-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57224961c4cab-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57224961c4cab-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57225073588ee</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57225073588ee/</link>
		<pubDate>Thu, 28 Apr 2016 18:03:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225073588ee.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1203</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 02:03:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 18:03:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57225073588ee]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225073588ee.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57225073588ee.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1025;s:6:"height";i:251;s:4:"file";s:29:"2016/04/img_57225073588ee.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57225073588ee-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_57225073588ee-300x73.png";s:5:"width";i:300;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57225073588ee-768x188.png";s:5:"width";i:768;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57225073588ee-1024x251.png";s:5:"width";i:1024;s:6:"height";i:251;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57225073588ee-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57225073588ee-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57225073588ee-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x245[1]</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451/</link>
		<pubDate>Thu, 28 Apr 2016 18:08:07 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1204</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 02:08:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 18:08:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:490;s:6:"height";i:245;s:4:"file";s:95:"2016/04/rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:95:"rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:95:"rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451-300x150.jpg";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:8:"featured";a:4:{s:4:"file";s:95:"rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451-218x181.jpg";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:10:"image/jpeg";}s:5:"small";a:4:{s:4:"file";s:95:"rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451-120x120.jpg";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:10:"image/jpeg";}s:4:"tiny";a:4:{s:4:"file";s:93:"rancher-labs-docker-open-source-containers-infrastructure-security-storage-490x2451-70x70.jpg";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_57225211158dd</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/img_57225211158dd/</link>
		<pubDate>Thu, 28 Apr 2016 18:10:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225211158dd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1205</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 02:10:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-28 18:10:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_57225211158dd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225211158dd.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/img_57225211158dd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:512;s:4:"file";s:29:"2016/04/img_57225211158dd.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_57225211158dd-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_57225211158dd-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_57225211158dd-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_57225211158dd-1024x512.png";s:5:"width";i:1024;s:6:"height";i:512;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_57225211158dd-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_57225211158dd-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_57225211158dd-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_5728e4415f238</title>
		<link>http://columns.chicken-house.net/2016/05/05/archview-net-open-source/img_5728e4415f238/</link>
		<pubDate>Tue, 03 May 2016 17:47:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/05/img_5728e4415f238.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1224</wp:post_id>
		<wp:post_date><![CDATA[2016-05-04 01:47:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-03 17:47:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_5728e4415f238]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1218</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/05/img_5728e4415f238.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/img_5728e4415f238.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1162;s:6:"height";i:587;s:4:"file";s:29:"2016/05/img_5728e4415f238.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_5728e4415f238-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_5728e4415f238-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_5728e4415f238-768x388.png";s:5:"width";i:768;s:6:"height";i:388;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_5728e4415f238-1024x517.png";s:5:"width";i:1024;s:6:"height";i:517;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_5728e4415f238-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_5728e4415f238-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_5728e4415f238-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>microsoft-linux-100615479-primary.idge[1]</title>
		<link>http://columns.chicken-house.net/2016/05/05/archview-net-open-source/microsoft-linux-100615479-primary-idge1/</link>
		<pubDate>Wed, 04 May 2016 17:08:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/05/microsoft-linux-100615479-primary.idge1_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1229</wp:post_id>
		<wp:post_date><![CDATA[2016-05-05 01:08:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-04 17:08:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-linux-100615479-primary-idge1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1218</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/05/microsoft-linux-100615479-primary.idge1_.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/microsoft-linux-100615479-primary.idge1_.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:620;s:6:"height";i:413;s:4:"file";s:52:"2016/05/microsoft-linux-100615479-primary.idge1_.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"microsoft-linux-100615479-primary.idge1_-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:52:"microsoft-linux-100615479-primary.idge1_-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:8:"featured";a:4:{s:4:"file";s:52:"microsoft-linux-100615479-primary.idge1_-218x181.jpg";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:10:"image/jpeg";}s:5:"small";a:4:{s:4:"file";s:52:"microsoft-linux-100615479-primary.idge1_-120x120.jpg";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:10:"image/jpeg";}s:4:"tiny";a:4:{s:4:"file";s:50:"microsoft-linux-100615479-primary.idge1_-70x70.jpg";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_572b734171d80</title>
		<link>http://columns.chicken-house.net/2016/05/05/archview-net-open-source/img_572b734171d80/</link>
		<pubDate>Thu, 05 May 2016 16:22:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/05/img_572b734171d80.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1233</wp:post_id>
		<wp:post_date><![CDATA[2016-05-06 00:22:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-05 16:22:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_572b734171d80]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1218</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/05/img_572b734171d80.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/img_572b734171d80.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:957;s:6:"height";i:665;s:4:"file";s:29:"2016/05/img_572b734171d80.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_572b734171d80-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_572b734171d80-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_572b734171d80-768x534.png";s:5:"width";i:768;s:6:"height";i:534;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_572b734171d80-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_572b734171d80-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_572b734171d80-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>icon</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/icon/</link>
		<pubDate>Fri, 10 Jun 2016 12:54:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/icon.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1241</wp:post_id>
		<wp:post_date><![CDATA[2016-06-10 20:54:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 12:54:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[icon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/icon.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/icon.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:322;s:6:"height";i:274;s:4:"file";s:16:"2016/06/icon.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"icon-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"icon-300x255.png";s:5:"width";i:300;s:6:"height";i:255;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:16:"icon-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:16:"icon-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:14:"icon-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575ab939ed9ca</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575ab939ed9ca/</link>
		<pubDate>Fri, 10 Jun 2016 12:57:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575ab939ed9ca.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date><![CDATA[2016-06-10 20:57:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 12:57:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575ab939ed9ca]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575ab939ed9ca.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575ab939ed9ca.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:353;s:4:"file";s:29:"2016/06/img_575ab939ed9ca.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575ab939ed9ca-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575ab939ed9ca-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575ab939ed9ca-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575ab939ed9ca-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575ab939ed9ca-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575ac7c6e166c</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575ac7c6e166c/</link>
		<pubDate>Fri, 10 Jun 2016 13:59:34 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575ac7c6e166c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1243</wp:post_id>
		<wp:post_date><![CDATA[2016-06-10 21:59:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 13:59:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575ac7c6e166c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575ac7c6e166c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575ac7c6e166c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:803;s:6:"height";i:243;s:4:"file";s:29:"2016/06/img_575ac7c6e166c.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575ac7c6e166c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575ac7c6e166c-300x91.png";s:5:"width";i:300;s:6:"height";i:91;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575ac7c6e166c-768x232.png";s:5:"width";i:768;s:6:"height";i:232;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575ac7c6e166c-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575ac7c6e166c-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575ac7c6e166c-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575aef16a8b5a</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575aef16a8b5a/</link>
		<pubDate>Fri, 10 Jun 2016 16:47:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575aef16a8b5a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1245</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 00:47:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 16:47:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575aef16a8b5a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575aef16a8b5a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575aef16a8b5a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:721;s:6:"height";i:387;s:4:"file";s:29:"2016/06/img_575aef16a8b5a.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575aef16a8b5a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575aef16a8b5a-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575aef16a8b5a-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575aef16a8b5a-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575aef16a8b5a-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af1cebe972</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af1cebe972/</link>
		<pubDate>Fri, 10 Jun 2016 16:58:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af1cebe972.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1246</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 00:58:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 16:58:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af1cebe972]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af1cebe972.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af1cebe972.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:742;s:6:"height";i:423;s:4:"file";s:29:"2016/06/img_575af1cebe972.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575af1cebe972-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575af1cebe972-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575af1cebe972-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575af1cebe972-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575af1cebe972-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af7faa3098</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af7faa3098/</link>
		<pubDate>Fri, 10 Jun 2016 17:25:14 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af7faa3098.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1247</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:25:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:25:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af7faa3098]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af7faa3098.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af7faa3098.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1;s:6:"height";i:1;s:4:"file";s:29:"2016/06/img_575af7faa3098.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af80225e5d</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af80225e5d/</link>
		<pubDate>Fri, 10 Jun 2016 17:25:22 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af80225e5d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:25:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:25:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af80225e5d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af80225e5d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af80225e5d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:612;s:6:"height";i:414;s:4:"file";s:29:"2016/06/img_575af80225e5d.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575af80225e5d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575af80225e5d-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575af80225e5d-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575af80225e5d-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575af80225e5d-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af8c46977b</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af8c46977b/</link>
		<pubDate>Fri, 10 Jun 2016 17:28:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af8c46977b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1250</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:28:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:28:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af8c46977b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af8c46977b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af8c46977b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:753;s:6:"height";i:281;s:4:"file";s:29:"2016/06/img_575af8c46977b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575af8c46977b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575af8c46977b-300x112.png";s:5:"width";i:300;s:6:"height";i:112;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575af8c46977b-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575af8c46977b-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575af8c46977b-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af908356cf</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af908356cf/</link>
		<pubDate>Fri, 10 Jun 2016 17:29:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af908356cf.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1251</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:29:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:29:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af908356cf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af908356cf.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af908356cf.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1161;s:6:"height";i:680;s:4:"file";s:29:"2016/06/img_575af908356cf.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575af908356cf-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575af908356cf-300x176.png";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575af908356cf-768x450.png";s:5:"width";i:768;s:6:"height";i:450;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_575af908356cf-1024x600.png";s:5:"width";i:1024;s:6:"height";i:600;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575af908356cf-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575af908356cf-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575af908356cf-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] 生命遊戲 #7, 多型 (Polymorphism)</title>
		<link>http://columns.chicken-house.net/?p=26</link>
		<pubDate>Tue, 06 Oct 2009 02:07:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/10/06/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b2-7-e5a49ae59e8b-(Polymorphism).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<ol>
 	<li>草: 每隔五秒鐘，只要前後左右四個位子是空的，就會往外繁衍。</li>
 	<li>草: 壽命20秒，沒被吃掉就會死掉。</li>
 	<li>羊: 每隔三秒鐘，只要前後左右有草，牠就會走過去吃掉。</li>
 	<li>羊: 隔30秒沒草吃就會餓死。</li>
 	<li>虎: 每隔五秒鐘，只要距離三格內有羊，牠就會衝過去把羊吃掉。</li>
 	<li>虎: 隔60秒沒羊吃就會餓死。</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2009-10-06 02:07:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-06 02:07:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-7-%e5%a4%9a%e5%9e%8b-polymorphism]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Docker-Machine, 跨越 Azure, Hyper-V, AWS, VirtualBox 的 Docker-Host 管理工具</title>
		<link>http://columns.chicken-house.net/?p=600</link>
		<pubDate>Sat, 19 Dec 2015 08:10:38 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=600</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://columns.chicken-house.net/wp-content/uploads/2015/12/docker_machine1.png" rel="attachment wp-att-601"><img class="wp-image-601 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2015/12/docker_machine1.png" alt="docker_machine[1]" width="204" height="242" /></a>原本這篇打算比較 .net core 程式，在不同的平台 (Windows / Linux, 我手邊沒 MacOS 可以測，不然就加進來了) 的表現，包含執行效能，還有不同的 OS 一定會有影響的記憶體管理等等我在意的議題。然而要比較這些差異，要控制好執行環境是必要的，比如我總不能拿同樣的程式，在 NAS 上的 Docker 跑得很慢，在 PC 上的 windows 10 跑的就飛快，然後做出 windows 比 linux 好這種結論吧 ? XD

也因為這樣，我開始用同樣的環境，用我的桌機 (windows 10 enterprise + hyper-v, i7-2600, 24G ram), 開同樣規格的 VM, 分別跑 windows 2012 r2 / linux 來比較才客觀。這時開始面臨到我需要在不同環境來管理 docker-host, 而非之前只管理 docker-container 那種情境，因此就多了這篇: Docker-Machine 的介紹。

Docker-Machine 官方介紹在<a href="https://www.docker.com/docker-machine" target="_blank">這邊</a>，我摘要貼一下重點:
<h2 style="padding-left: 30px;"><em>Docker Machine</em></h2>
<p style="padding-left: 30px;"><em>To get started with Docker, first you need to setup a Docker Engine. Docker Machine automatically sets up Docker on your computer, on cloud providers, and inside your data center. Docker Machine provisions the hosts, installs Docker Engine on them, and then configures the Docker client to talk to the Docker Engines.</em></p>
<p style="padding-left: 30px;">(中間略)</p>

<h3 style="padding-left: 30px;"><em>Create Hosts Anywhere</em></h3>
<p style="padding-left: 30px;"><em>Docker Machine can create hosts on most major virtualization hypervisors and in cloud service providers. Docker Machine has driver support for <span style="color: #ff0000;">AWS, Digital Ocean, Google Cloud Platform, IBM Softlayer, <strong>Microsoft Azure and Hyper-V</strong>, OpenStack, Rackspace, VirtualBox, VMware Fusion®, vCloud® Air™ and vSphere®</span>.</em></p>
<p style="padding-left: 30px;"><em>Simply add the credentials for your environment:</em></p>
簡單的來說，Docker-Machine 把在各種平台上建立 Docker-Host 的機制操作方式給統一了。提供一致的 docker-machine 指令，底層則提供了各種不同平台的 docker-driver, 讓你可以在所有支援的平台上，用一樣的方式管理能夠執行 docker-engine 的 VM。

看了一下，支援的平台還不少 (見上面引言我標紅字的部分)，Windows 派的當然是挑 Hyper-V 及 Microsoft Azure 這兩個平台，也在支援的清單內。往後的操作也都會以我熟悉的環境為主，本機的環境當然就是 Hyper-V, 雲端環境則以 Azure 為首選。

&nbsp;
<h1>從 Docker Toolbox 套件，安裝 Docker-Machine</h1>
<img class="alignleft" src="https://www.docker.com/sites/default/files/products/tbox.jpg" alt="" width="257" height="200" />這算是最簡單的一個步驟了。其實 Docker-Toolbox 整包套件裡面，就已經包含所有你必要的工具了。Docker Toolbox 收集了你要入門使用 Docker 的常用工具，整在一個套件裡方便大家使用。官方網站在<a href="https://www.docker.com/docker-toolbox" target="_blank">這邊</a>，裡面就包括了 Docker-Machine, 甚至連 Oracle 的 VirtualBox 虛擬化工具都幫你包進去了。不過我既然都已經有 Hyper-V 了，何必再去用 Virtual Box ? 很無奈這是必裝的項目之一，我又懶得個別去找這些東西... 安裝完成後再去控制台移除 Virtual Box 就好了

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>600</wp:post_id>
		<wp:post_date><![CDATA[2015-12-19 16:10:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-19 08:10:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-machine-%e8%b7%a8%e8%b6%8a-azure-hyper-v-aws-virtualbox-%e7%9a%84-docker-host-%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[601]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_56d262b957913c7ae6c1ceed23534e9b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_76e49ae4383d26988a68e40929d07e12]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_44444c09c8403f983ca094d2f8367485]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3529436dc2c37c1c9cd8bd7710a8099b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575af99d5c5ec</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575af99d5c5ec/</link>
		<pubDate>Fri, 10 Jun 2016 17:32:13 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af99d5c5ec.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:32:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:32:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575af99d5c5ec]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af99d5c5ec.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575af99d5c5ec.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:957;s:6:"height";i:468;s:4:"file";s:29:"2016/06/img_575af99d5c5ec.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575af99d5c5ec-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575af99d5c5ec-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575af99d5c5ec-768x376.png";s:5:"width";i:768;s:6:"height";i:376;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575af99d5c5ec-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575af99d5c5ec-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575af99d5c5ec-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575afea2eb1ff</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575afea2eb1ff/</link>
		<pubDate>Fri, 10 Jun 2016 17:53:38 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575afea2eb1ff.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:53:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:53:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575afea2eb1ff]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575afea2eb1ff.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575afea2eb1ff.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:585;s:6:"height";i:216;s:4:"file";s:29:"2016/06/img_575afea2eb1ff.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575afea2eb1ff-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575afea2eb1ff-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575afea2eb1ff-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575afea2eb1ff-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575afea2eb1ff-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575aff4482e69</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575aff4482e69/</link>
		<pubDate>Fri, 10 Jun 2016 17:56:20 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575aff4482e69.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1254</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 01:56:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 17:56:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575aff4482e69]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575aff4482e69.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575aff4482e69.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:811;s:6:"height";i:497;s:4:"file";s:29:"2016/06/img_575aff4482e69.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575aff4482e69-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575aff4482e69-300x184.png";s:5:"width";i:300;s:6:"height";i:184;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575aff4482e69-768x471.png";s:5:"width";i:768;s:6:"height";i:471;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575aff4482e69-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575aff4482e69-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575aff4482e69-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b089b8c29b</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b089b8c29b/</link>
		<pubDate>Fri, 10 Jun 2016 18:36:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b089b8c29b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1256</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 02:36:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 18:36:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b089b8c29b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b089b8c29b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b089b8c29b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:790;s:6:"height";i:556;s:4:"file";s:29:"2016/06/img_575b089b8c29b.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b089b8c29b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b089b8c29b-300x211.png";s:5:"width";i:300;s:6:"height";i:211;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b089b8c29b-768x541.png";s:5:"width";i:768;s:6:"height";i:541;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b089b8c29b-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b089b8c29b-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b089b8c29b-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b0b396d834</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b0b396d834/</link>
		<pubDate>Fri, 10 Jun 2016 18:47:21 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0b396d834.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1257</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 02:47:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 18:47:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b0b396d834]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0b396d834.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b0b396d834.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1097;s:6:"height";i:363;s:4:"file";s:29:"2016/06/img_575b0b396d834.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b0b396d834-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575b0b396d834-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b0b396d834-768x254.png";s:5:"width";i:768;s:6:"height";i:254;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_575b0b396d834-1024x339.png";s:5:"width";i:1024;s:6:"height";i:339;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b0b396d834-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b0b396d834-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b0b396d834-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b0bc5070d2</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b0bc5070d2/</link>
		<pubDate>Fri, 10 Jun 2016 18:49:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0bc5070d2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1258</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 02:49:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 18:49:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b0bc5070d2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0bc5070d2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b0bc5070d2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1182;s:6:"height";i:341;s:4:"file";s:29:"2016/06/img_575b0bc5070d2.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b0bc5070d2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575b0bc5070d2-300x87.png";s:5:"width";i:300;s:6:"height";i:87;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b0bc5070d2-768x222.png";s:5:"width";i:768;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_575b0bc5070d2-1024x295.png";s:5:"width";i:1024;s:6:"height";i:295;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b0bc5070d2-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b0bc5070d2-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b0bc5070d2-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b0d99245e2</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b0d99245e2/</link>
		<pubDate>Fri, 10 Jun 2016 18:57:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0d99245e2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1259</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 02:57:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 18:57:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b0d99245e2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0d99245e2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b0d99245e2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:702;s:6:"height";i:171;s:4:"file";s:29:"2016/06/img_575b0d99245e2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b0d99245e2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575b0d99245e2-300x73.png";s:5:"width";i:300;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b0d99245e2-218x171.png";s:5:"width";i:218;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b0d99245e2-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b0d99245e2-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b0e501d7a1</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b0e501d7a1/</link>
		<pubDate>Fri, 10 Jun 2016 19:00:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0e501d7a1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1261</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:00:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:00:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b0e501d7a1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0e501d7a1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b0e501d7a1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1362;s:6:"height";i:375;s:4:"file";s:29:"2016/06/img_575b0e501d7a1.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b0e501d7a1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575b0e501d7a1-300x83.png";s:5:"width";i:300;s:6:"height";i:83;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b0e501d7a1-768x211.png";s:5:"width";i:768;s:6:"height";i:211;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_575b0e501d7a1-1024x282.png";s:5:"width";i:1024;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b0e501d7a1-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b0e501d7a1-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b0e501d7a1-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b0f6f7001d</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b0f6f7001d/</link>
		<pubDate>Fri, 10 Jun 2016 19:05:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0f6f7001d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1262</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:05:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:05:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b0f6f7001d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0f6f7001d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b0f6f7001d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1028;s:6:"height";i:359;s:4:"file";s:29:"2016/06/img_575b0f6f7001d.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b0f6f7001d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b0f6f7001d-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b0f6f7001d-768x268.png";s:5:"width";i:768;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"img_575b0f6f7001d-1024x358.png";s:5:"width";i:1024;s:6:"height";i:358;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b0f6f7001d-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b0f6f7001d-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b0f6f7001d-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b105bea9e7</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b105bea9e7/</link>
		<pubDate>Fri, 10 Jun 2016 19:09:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b105bea9e7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1263</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:09:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:09:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b105bea9e7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b105bea9e7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b105bea9e7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:975;s:6:"height";i:517;s:4:"file";s:29:"2016/06/img_575b105bea9e7.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b105bea9e7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b105bea9e7-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b105bea9e7-768x407.png";s:5:"width";i:768;s:6:"height";i:407;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b105bea9e7-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b105bea9e7-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b105bea9e7-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b10ad9bf2c</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b10ad9bf2c/</link>
		<pubDate>Fri, 10 Jun 2016 19:10:37 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b10ad9bf2c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1264</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b10ad9bf2c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b10ad9bf2c.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b10ad9bf2c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:807;s:6:"height";i:493;s:4:"file";s:29:"2016/06/img_575b10ad9bf2c.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b10ad9bf2c-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b10ad9bf2c-300x183.png";s:5:"width";i:300;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b10ad9bf2c-768x469.png";s:5:"width";i:768;s:6:"height";i:469;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b10ad9bf2c-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b10ad9bf2c-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b10ad9bf2c-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b10e847a6d</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b10e847a6d/</link>
		<pubDate>Fri, 10 Jun 2016 19:11:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b10e847a6d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:11:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:11:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b10e847a6d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b10e847a6d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b10e847a6d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:809;s:6:"height";i:231;s:4:"file";s:29:"2016/06/img_575b10e847a6d.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b10e847a6d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575b10e847a6d-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b10e847a6d-768x219.png";s:5:"width";i:768;s:6:"height";i:219;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b10e847a6d-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b10e847a6d-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b10e847a6d-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b11002573f</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b11002573f/</link>
		<pubDate>Fri, 10 Jun 2016 19:12:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11002573f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1266</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b11002573f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11002573f.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b11002573f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:797;s:6:"height";i:296;s:4:"file";s:29:"2016/06/img_575b11002573f.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b11002573f-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b11002573f-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b11002573f-768x285.png";s:5:"width";i:768;s:6:"height";i:285;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b11002573f-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b11002573f-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b11002573f-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b114157a49</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b114157a49/</link>
		<pubDate>Fri, 10 Jun 2016 19:13:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b114157a49.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1267</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:13:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:13:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b114157a49]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b114157a49.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b114157a49.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:930;s:6:"height";i:369;s:4:"file";s:29:"2016/06/img_575b114157a49.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b114157a49-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b114157a49-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b114157a49-768x305.png";s:5:"width";i:768;s:6:"height";i:305;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b114157a49-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b114157a49-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b114157a49-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b11959e3c8</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b11959e3c8/</link>
		<pubDate>Fri, 10 Jun 2016 19:14:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11959e3c8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1268</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:14:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:14:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b11959e3c8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11959e3c8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b11959e3c8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:925;s:6:"height";i:369;s:4:"file";s:29:"2016/06/img_575b11959e3c8.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b11959e3c8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b11959e3c8-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b11959e3c8-768x306.png";s:5:"width";i:768;s:6:"height";i:306;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b11959e3c8-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b11959e3c8-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b11959e3c8-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575b11cc48af7</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575b11cc48af7/</link>
		<pubDate>Fri, 10 Jun 2016 19:15:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11cc48af7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1269</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 03:15:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-10 19:15:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575b11cc48af7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11cc48af7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575b11cc48af7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:902;s:6:"height";i:509;s:4:"file";s:29:"2016/06/img_575b11cc48af7.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575b11cc48af7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575b11cc48af7-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"img_575b11cc48af7-768x433.png";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575b11cc48af7-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575b11cc48af7-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575b11cc48af7-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575bac318bc22</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575bac318bc22/</link>
		<pubDate>Sat, 11 Jun 2016 06:14:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bac318bc22.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1272</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 14:14:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-11 06:14:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575bac318bc22]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bac318bc22.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575bac318bc22.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:726;s:6:"height";i:395;s:4:"file";s:29:"2016/06/img_575bac318bc22.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575bac318bc22-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"img_575bac318bc22-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575bac318bc22-218x181.png";s:5:"width";i:218;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575bac318bc22-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575bac318bc22-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>img_575bb0070b9c4</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/img_575bb0070b9c4/</link>
		<pubDate>Sat, 11 Jun 2016 06:30:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bb0070b9c4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1273</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 14:30:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-11 06:30:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_575bb0070b9c4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bb0070b9c4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/img_575bb0070b9c4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:727;s:6:"height";i:135;s:4:"file";s:29:"2016/06/img_575bb0070b9c4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"img_575bb0070b9c4-150x135.png";s:5:"width";i:150;s:6:"height";i:135;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"img_575bb0070b9c4-300x56.png";s:5:"width";i:300;s:6:"height";i:56;s:9:"mime-type";s:9:"image/png";}s:8:"featured";a:4:{s:4:"file";s:29:"img_575bb0070b9c4-218x135.png";s:5:"width";i:218;s:6:"height";i:135;s:9:"mime-type";s:9:"image/png";}s:5:"small";a:4:{s:4:"file";s:29:"img_575bb0070b9c4-120x120.png";s:5:"width";i:120;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:4:"tiny";a:4:{s:4:"file";s:27:"img_575bb0070b9c4-70x70.png";s:5:"width";i:70;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>新片上檔 - 小皮 VCR</title>
		<link>http://columns.chicken-house.net/2004/12/27/%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e5%b0%8f%e7%9a%ae-vcr/</link>
		<pubDate>Mon, 27 Dec 2004 02:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/27/e696b0e78987e4b88ae6aa94-e5b08fe79aae-VCR.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img src="/wp-content/be-files/video04.jpg" alt="" width="360" height="240" /><br />
<a href="mms://www.chicken-house.net/blog/毛巾小皮.wmv">跟媽咪玩毛巾的小皮</a> ( 0&#39; 40&#39;&#39;, Nov 4, 2004 )
</p>
<p>
<img src="/wp-content/be-files/video05.jpg" alt="" width="28" height="30" /><br />
<a href="mms://www.chicken-house.net/blog/搖頭小皮.wmv">吃米粉猛搖頭的小皮</a> (4&#39; 34&#39;&#39;, Dev 2, 2004)
</p>
<p>
<img src="/wp-content/be-files/video06.jpg" alt="" width="28" height="30" /> <br />
<a href="mms://www.chicken-house.net/blog/飛人小皮.wmv">飛天小皮</a> (1&#39; 33&#39;&#39;, Dec 12, 2004)
</p>
<p>
<img src="/wp-content/be-files/video07.jpg" alt="" width="360" height="240" /> <br />
<a href="mms://www.chicken-house.net/blog/躲貓貓小皮.wmv">躲貓貓小皮</a> (1&#39; 37&#39;&#39;, Dec 12, 2004)
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2004-12-27 02:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-27 02:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e5%b0%8f%e7%9a%ae-vcr]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>602</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-31 01:52:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-31 01:52:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[又再偷懶了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>603</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-31 23:49:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-31 23:49:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新片上檔 - 麥當勞 超人寶寶爬行比賽</title>
		<link>http://columns.chicken-house.net/2004/12/26/%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e9%ba%a5%e7%95%b6%e5%8b%9e-%e8%b6%85%e4%ba%ba%e5%af%b6%e5%af%b6%e7%88%ac%e8%a1%8c%e6%af%94%e8%b3%bd/</link>
		<pubDate>Sun, 26 Dec 2004 04:54:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/26/e696b0e78987e4b88ae6aa94-e9baa5e795b6e58b9e-e8b685e4babae5afb6e5afb6e788ace8a18ce6af94e8b3bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/video03.jpg" alt="" width="360" height="240" /><br />
<a href="mms://www.chicken-house.net/blog/爬行比賽.wmv">一開始爬就猛哭的小皮</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2004-12-26 04:54:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-26 04:54:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e9%ba%a5%e7%95%b6%e5%8b%9e-%e8%b6%85%e4%ba%ba%e5%af%b6%e5%af%b6%e7%88%ac%e8%a1%8c%e6%af%94%e8%b3%bd]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>604</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-26 10:23:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-26 10:23:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不會吧…就停在原地不動哦~小皮…你太遜了啦~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>當年勇之二: 高中的一堆獎狀 :D~~~</title>
		<link>http://columns.chicken-house.net/2004/12/25/%e7%95%b6%e5%b9%b4%e5%8b%87%e4%b9%8b%e4%ba%8c-%e9%ab%98%e4%b8%ad%e7%9a%84%e4%b8%80%e5%a0%86%e7%8d%8e%e7%8b%80-d/</link>
		<pubDate>Sat, 25 Dec 2004 04:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/25/e795b6e5b9b4e58b87e4b98be4ba8c-e9ab98e4b8ade79a84e4b880e5a086e78d8ee78b80-D7e7e7e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/award/a20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/b20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/c20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/d20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/e20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/f20.jpg" alt="" width="161" height="116" /> <img src="/wp-content/be-files/award/g20.jpg" alt="" width="161" height="116" /> 
<p>
升學的過程, 國小 so so, 國中慘不忍睹, 一直到唸了延平之後才風光起來, 高中三年也騙了幾張獎狀, 哈哈, 又要提當年勇了 (H)... 
</p>
<ul>
	<li><a href="/wp-content/be-files/articles/204.aspx">高一: 物理/總成績 全校第一名</a> </li>
	<li><a href="/wp-content/be-files/articles/205.aspx">高二: 物理/化學 全校第一名</a> </li>
	<li><a href="/wp-content/be-files/articles/206.aspx">高三: 物理 全校第一名</a> </li>
	<li><a href="/wp-content/be-files/articles/206.aspx">高三: 模範生</a><br />
	</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date><![CDATA[2004-12-25 04:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-25 04:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%95%b6%e5%b9%b4%e5%8b%87%e4%b9%8b%e4%ba%8c-%e9%ab%98%e4%b8%ad%e7%9a%84%e4%b8%80%e5%a0%86%e7%8d%8e%e7%8b%80-d]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>92&#039; 美研: 手染布,  93&#039; 美研: 絹印</title>
		<link>http://columns.chicken-house.net/2004/12/25/92-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83-93-%e7%be%8e%e7%a0%94-%e7%b5%b9%e5%8d%b0/</link>
		<pubDate>Sat, 25 Dec 2004 04:39:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/25/92-e7be8ee7a094-e6898be69f93e5b8832c-93-e7be8ee7a094-e7b5b9e58db0.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/artefact/92art-icon.jpg" alt="" width="159" height="126" />___ <img src="/wp-content/be-files/artefact/93art-icon1.jpg" alt="" width="102" height="168" /> <img src="/wp-content/be-files/artefact/93art-icon2.jpg" alt="" width="102" height="168" /> 
<p>
這次又是把以前的網頁整理一下放上來. 有十多年的歷史了... 咳咳... 
</p>
<p>
全文網址: <a href="/wp-content/be-files/articles/197.aspx">92&#39; 美研: 手染布</a><br />
全文網址: <a href="/wp-content/be-files/articles/198.aspx">93&#39; 美研: 絹印</a> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2004-12-25 04:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-25 04:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[92-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83-93-%e7%be%8e%e7%a0%94-%e7%b5%b9%e5%8d%b0]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>大學時代的作品: Gundam 0083</title>
		<link>http://columns.chicken-house.net/2004/12/22/%e5%a4%a7%e5%ad%b8%e6%99%82%e4%bb%a3%e7%9a%84%e4%bd%9c%e5%93%81-gundam-0083/</link>
		<pubDate>Wed, 22 Dec 2004 00:41:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/22/gundam-overview.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/artefact/gun030.jpg" alt="" width="218" height="185" /><br />
這張畫歷史很久了... 喜歡看Gundam(機動戰士)是高中的事情, 機動戰士系列的作品...... <a href="/wp-content/be-files/articles/193.aspx">[全文網址]</a> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date><![CDATA[2004-12-22 00:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-22 00:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%a7%e5%ad%b8%e6%99%82%e4%bb%a3%e7%9a%84%e4%bd%9c%e5%93%81-gundam-0083]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>當年勇之一: 國小香包比賽</title>
		<link>http://columns.chicken-house.net/2004/12/21/%e7%95%b6%e5%b9%b4%e5%8b%87%e4%b9%8b%e4%b8%80-%e5%9c%8b%e5%b0%8f%e9%a6%99%e5%8c%85%e6%af%94%e8%b3%bd/</link>
		<pubDate>Tue, 21 Dec 2004 02:38:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/21/e795b6e5b9b4e58b87e4b98be4b880-e59c8be5b08fe9a699e58c85e6af94e8b3bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/award/award20.jpg" alt="" width="163" height="114" /> <br />
國小六年級拿到的獎狀...<a href="/wp-content/be-files/articles/202.aspx">全文網址</a> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2004-12-21 02:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-21 02:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%95%b6%e5%b9%b4%e5%8b%87%e4%b9%8b%e4%b8%80-%e5%9c%8b%e5%b0%8f%e9%a6%99%e5%8c%85%e6%af%94%e8%b3%bd]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>高三: 物理 全校第一名</title>
		<link>http://columns.chicken-house.net/2004/12/20/%e9%ab%98%e4%b8%89-%e7%89%a9%e7%90%86-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d/</link>
		<pubDate>Mon, 20 Dec 2004 02:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/20/e9ab98e4b889-e789a9e79086-e585a8e6a0a1e7acace4b880e5908d.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<A href="/wp-content/be-files/award/d100.jpg"><IMG src="/wp-content/be-files/award/d20.jpg"></A> <BR>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2004-12-20 02:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-20 02:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ab%98%e4%b8%89-%e7%89%a9%e7%90%86-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>高二: 物理/化學 全校第一名</title>
		<link>http://columns.chicken-house.net/2004/12/20/%e9%ab%98%e4%ba%8c-%e7%89%a9%e7%90%86%e5%8c%96%e5%ad%b8-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d/</link>
		<pubDate>Mon, 20 Dec 2004 02:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/20/e9ab98e4ba8c-e789a9e79086e58c96e5adb8-e585a8e6a0a1e7acace4b880e5908d.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="/wp-content/be-files/award/a100.jpg"><img src="/wp-content/be-files/award/a20.jpg" alt="" width="161" height="116" /></a> <a href="/wp-content/be-files/award/b100.jpg"><img src="/wp-content/be-files/award/b20.jpg" alt="" width="161" height="116" /></a> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2004-12-20 02:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-20 02:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ab%98%e4%ba%8c-%e7%89%a9%e7%90%86%e5%8c%96%e5%ad%b8-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>高一: 物理/總成績 全校第一名</title>
		<link>http://columns.chicken-house.net/2004/12/20/%e9%ab%98%e4%b8%80-%e7%89%a9%e7%90%86%e7%b8%bd%e6%88%90%e7%b8%be-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d/</link>
		<pubDate>Mon, 20 Dec 2004 02:06:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/20/e9ab98e4b880-e789a9e79086e7b8bde68890e7b8be-e585a8e6a0a1e7acace4b880e5908d.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<A href="/wp-content/be-files/award/c100.jpg"><IMG src="/wp-content/be-files/award/c20.jpg"></A> <A href="/wp-content/be-files/award/e100.jpg"><IMG src="/wp-content/be-files/award/e20.jpg"></A> <BR>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2004-12-20 02:06:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-20 02:06:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ab%98%e4%b8%80-%e7%89%a9%e7%90%86%e7%b8%bd%e6%88%90%e7%b8%be-%e5%85%a8%e6%a0%a1%e7%ac%ac%e4%b8%80%e5%90%8d]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>高三: 模範生</title>
		<link>http://columns.chicken-house.net/2004/12/20/%e9%ab%98%e4%b8%89-%e6%a8%a1%e7%af%84%e7%94%9f/</link>
		<pubDate>Mon, 20 Dec 2004 01:58:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/20/e9ab98e4b889-e6a8a1e7af84e7949f.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="/admin/Pages/wp-content/be-files/award/f100.jpg"><img src="/admin/Pages/wp-content/be-files/award/f20.jpg" alt="" width="161" height="116" /></a> <a href="/admin/Pages/wp-content/be-files/award/g100.jpg"><img src="/admin/Pages/wp-content/be-files/award/g20.jpg" alt="" width="161" height="116" /></a> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2004-12-20 01:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-20 01:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ab%98%e4%b8%89-%e6%a8%a1%e7%af%84%e7%94%9f]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>小六: 香包比賽</title>
		<link>http://columns.chicken-house.net/2004/12/20/%e5%b0%8f%e5%85%ad-%e9%a6%99%e5%8c%85%e6%af%94%e8%b3%bd/</link>
		<pubDate>Mon, 20 Dec 2004 01:33:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/20/e5b08fe585ad-e9a699e58c85e6af94e8b3bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/award/award100.jpg"><img src="/wp-content/be-files/award/award20.jpg" /></a><font color="#ffa500"><br /><br />( 哈, 挖出之前研究所時代做的網頁, 就直接貼上來了 ... )</font></p>
<p>小學時後沒得過什麼獎, 唯一一次上台 (升旗時上台領的喔....) 是在 國小六年級吧! 領的是「香包製做比賽」的獎, 第二名咧!!不過拿回家又是 被笑一噸... 哈哈哈!!說什麼男孩子這麼會拿針線做什麼??到現在過年回南 部, 那些老喜歡開我玩笑的姑姑們還老是記得這件事..老問我現在是不是還 常拿針線啊? 衣服褲子破了是不是都自己縫啊? 嘖嘖嘖... </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2004-12-20 01:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-20 01:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e5%85%ad-%e9%a6%99%e5%8c%85%e6%af%94%e8%b3%bd]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>609</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-22 01:20:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-22 01:20:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是怎樣, 年紀已經大到開始回顧以前的風光與成功嘛?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>610</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-22 01:32:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-22 01:32:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[現在一事無成, 只好把當年勇拿出來說嘴..
<br />
<br />嘖, 只是把舊網頁的東西移過來而以..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>93&#039; 美研: 手染布</title>
		<link>http://columns.chicken-house.net/2004/12/18/93-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83/</link>
		<pubDate>Sat, 18 Dec 2004 03:09:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/18/93-e7be8ee7a094-e6898be69f93e5b883.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P align=left><A href="/wp-content/be-files/artefact/93art-1.jpg"><IMG height=168 hspace=0 src="/wp-content/be-files/artefact/93art-icon1.jpg" width=102 align=left vspace=5></A><A href="/wp-content/be-files/artefact/93art-2.jpg"><IMG height=168 hspace=0 src="/wp-content/be-files/artefact/93art-icon2.jpg" width=102 align=left vspace=5></A>跟上面的手染布一樣, 這個也是美研的作品. 不過已經是一年以後 的事了. 這個絹印比較大, 大概有 A3 攤開那麼大塊, 掃描器 一次塞不下, 所以我就切成兩半了. 93年的美研一樣是當工作人員, 但是不向前一年一樣只是個小組輔... 可以玩的時間更少了 :~~~ 不過這 次是早有準備, 要拿來簽名紀念用的, 所以老早就弄了這一大塊布來印, 前一晚就跟阿信 (ps: 美術社的同學) 一起蹲在工四館 (ps: 上課教室在交大的工四館) 拿鍋子煮了一鍋漂白水在漂白隔天要用的布... 一樣, 只有右下角的那個 woodstock是絹印印出來的, 其它的都是別人 簽名. 這次的 "版面" 大好多, 除了簽名還有一堆留言... 嗯嗯, 別問我那些話是什麼意思, 不知道就算了... </P>
<P>這個圖案不是自己設計的, 在製版的當天, 身上穿著的 T恤就是這 個圖案, 一時興起就照著畫下來了, 開始畫才發現真辛苦... 要看自己肚子上的圖案還真是不輕鬆... 不過一個版只能印單色的, 為了印出這 個彩色的圖案, 花了好大的力氣才做出這個三色套色的版 (黃黑綠) . 上面簽名的人一部份是工作伙伴, 另一部份是我小 隊的學員... </P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2004-12-18 03:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-18 03:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[93-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>92&#039; 美研: 手染布</title>
		<link>http://columns.chicken-house.net/2004/12/18/92-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83/</link>
		<pubDate>Sat, 18 Dec 2004 03:07:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/18/92-e7be8ee7a094-e6898be69f93e5b883.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/artefact/92art.jpg"><img height="126" hspace="5" src="/wp-content/be-files/artefact/92art-icon.jpg" width="159" align="left" vspace="5" /></a>這塊手染布... 是我大一暑假參加美研的時後做的. 才手帕大小而以, 其實也沒什麼, 就是一塊布, 用繩子綁一綁, 再丟下去染料裡頭染 一染, 撈出來就有花樣了. 其實這個作品當時是做好玩的, 真正有東西的只有左下角那個楓葉. 那時因為當工作人員, 所以上課也沒多少時間 可以玩... 但是後來想到這塊布可以拿來簽名留念, 就是因為有了紀念 的價值, 這塊布才會就這樣的保存下來... <br /><br /><br /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date><![CDATA[2004-12-18 03:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-18 03:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[92-%e7%be%8e%e7%a0%94-%e6%89%8b%e6%9f%93%e5%b8%83]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>鹿</title>
		<link>http://columns.chicken-house.net/2004/12/18/%e9%b9%bf/</link>
		<pubDate>Sat, 18 Dec 2004 03:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/18/e9b9bf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/artefact/deer300.jpg"><img height="265" hspace="5" src="/wp-content/be-files/artefact/deer100.jpg" width="156" align="left" vspace="5" /></a><br />以前畫很多小卡片, 大概就是名片 size, 用水彩畫的. 對水彩的控制能力不大好, 越大張畫的越不好看, 所以都只挑小 size 的來畫... 另外還有一個原因就是省時間, 哈哈.. 之前貼了張 A4 size 的機動戰士, 太大張了, 拖了兩年才畫完, 結果前面跟後面的畫法風格就不大一樣..</p>
<p>這張“鹿”是古早以前, 有一件 NET 的保育野生動物的 T-Shirt, 上面就是印這張圖, 看了很喜歡就順手拿張小卡片畫了下來.<br /><br /><br /><br /><br /><br /><br /><br /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date><![CDATA[2004-12-18 03:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-18 03:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%b9%bf]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>歹竹出好筍?</title>
		<link>http://columns.chicken-house.net/2004/12/18/%e6%ad%b9%e7%ab%b9%e5%87%ba%e5%a5%bd%e7%ad%8d/</link>
		<pubDate>Sat, 18 Dec 2004 01:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/18/e6adb9e7abb9e587bae5a5bde7ad8d.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>從我家小皮出生後, 每個人看到小皮的第一句話就是:</p>
<p><strong><font color="#008000">“哇~~~ 好可愛~~~”</font></strong></p>
<p>不過比較機車的<a href="http://www.fomokka.net/aceray/">那幾個</a>, 接著就會補一句..</p>
<p><strong><font color="#008000">“真是歹竹出好筍...”</font></strong></p>
<p>嘖嘖嘖, 真是的, 雖然長的不是頂帥, 眼睛又小, 不過我小時後也是每個人看的都想抱... 眼睛也是又大又亮的... 哈哈, 擺張照片讓大家看看..</p><img alt="小皮的爹" src="/wp-content/be-files/chicken.jpg" /> <img alt="小皮" src="/wp-content/be-files/peter.jpg" /> 
<p>總算證明我家小皮可愛真的是遺傳吧? :D, 不過小皮還是比我小時後可愛, 看來小皮的媽的遺傳也貢獻不少 :D~~</p>
<p>我老媽沒事就翻以前的照片來看, 直嚷嚷小皮跟我小時後一模一樣... :D~~~</p>
<p>講到這我倒是比較好奇, 那我爸小時後到底長什麼樣? 哈哈...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2004-12-18 01:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-18 01:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%b9%e7%ab%b9%e5%87%ba%e5%a5%bd%e7%ad%8d]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>612</wp:comment_id>
			<wp:comment_author><![CDATA[小皮媽]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-18 02:45:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-18 02:45:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. 為什麼那麼大的眼睛長大後會變的那麼小呢? 
<br />2. 希望小皮長大後不會跟他老爸一樣...:P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>613</wp:comment_id>
			<wp:comment_author><![CDATA[小楓]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-20 09:08:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-20 09:08:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雞排，你兒子真是一模一個樣，不過他的下巴較為
<br />圓潤，可能比你還有福氣哦~~~~~~~~~
<br />這也是當然的啦，有你這個老爸，就是天大的福氣囉
<br />
<br />恭喜啦，為我們國家的國民素質提高了水平]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>614</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-20 19:47:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-20 19:47:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多謝誇獎啦, 怎麼你結完婚都沒消息了?
<br />那個爽兵年底會回來, 看看要不要吃個飯..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>615</wp:comment_id>
			<wp:comment_author><![CDATA[鴻志]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-21 22:02:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-21 22:02:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好可憐喔. 小皮以後長大要和小雞看起來很像了..哇哇哇...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新片上檔</title>
		<link>http://columns.chicken-house.net/2004/12/17/%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94/</link>
		<pubDate>Fri, 17 Dec 2004 02:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/17/e696b0e78987e4b88ae6aa94.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img src="/wp-content/be-files/video01.jpg" /> <br /><a href="mms://www.chicken-house.net/blog/菊花小皮.wmv">菊花小皮</a></p>
<p></p>
<hr />

<p><img src="/wp-content/be-files/video02.jpg" /><br /><a href="mms://www.chicken-house.net/blog/吹口琴小皮.wmv">吹口琴小皮</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2004-12-17 02:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-17 02:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>XBMC</title>
		<link>http://columns.chicken-house.net/2004/12/14/xbmc/</link>
		<pubDate>Tue, 14 Dec 2004 01:26:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/14/XBMC.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="/wp-content/be-files/xbmc_logo.gif" alt="" />

XBMC 又出新版了  :D~~~

新版的 XBMC 支援 TTF 字型看來成熟多了, 中文檔名 &amp; 中文字幕總算是正常了. 擺在家裡看看網路抓來的片子還真不錯, 偶爾還可以拍拍DV, 放在XBOX給老媽看..

Microsoft 真是惠我良多啊.. 哈哈..

有 Media Player 9 的可以試試這個:  [<a href="mms://www.chicken-house.net/blog/搖頭小皮.wmv">搖頭小皮</a>]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date><![CDATA[2004-12-14 01:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-14 01:26:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xbmc]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>無名小站</title>
		<link>http://columns.chicken-house.net/2004/12/13/%e7%84%a1%e5%90%8d%e5%b0%8f%e7%ab%99/</link>
		<pubDate>Mon, 13 Dec 2004 03:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/13/e784a1e5908de5b08fe7ab99.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>無名小站最近頻頻停機, 就花了點時間把 sea 的 blog 搬回來了, 好險文章跟留言還不多..&nbsp; 現在架在自己家裡就方便多了&nbsp; :D</P>
<P>以後歡迎各位多多光臨啦!</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2004-12-13 03:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-13 03:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%84%a1%e5%90%8d%e5%b0%8f%e7%ab%99]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>637</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-14 02:41:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-14 02:41:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇哈哈...身為老婆大人當然要來搶攻第一篇留言囉!:D
<br>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>638</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-14 11:47:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-14 11:47:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雖說無名真的常當，且最近這一次當得挺久時..有出現一篇公告....就是...應該會步向商業化。不過還是為無名拍拍手鼓勵一下~除了bbs站之外，提供了那麼多人使用免費的相本、blog以及留言板，雖然它真的挺常當，不過也算撐很久啦~算厲害的囉~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>639</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-14 11:53:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-14 11:53:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[剛留完言想來補一篇建議一下...
<br>那個回應的部份 例如是  
<br>re: 無名小站 (Huei, 12/14/2004 11:47 AM)
<br>，在回應title跟回應的人跟時間等資訊部份緊連在一起，感覺很難被focus到，要看了幾秒才會意會到&quot;啊~這是誰誰誰留的喔...&quot; 覺得資訊不明朗吧....小小小建議嚕~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>640</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-14 22:31:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-14 22:31:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳, 剛架好的 blog, 還在摸索該怎麼調版面...
<br>這樣稍微好一點了吧? 我沒啥美感 (H)
<br>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>641</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-15 02:57:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-15 02:57:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我覺得還不錯啦...因為是照老婆大人的御令改的嘛..
<br>哈哈...:P
<br>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>branch</title>
		<link>http://columns.chicken-house.net/?p=778</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=778</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

&nbsp;

&nbsp;
<h1 class="title">Branch strategically</h1>
https://msdn.microsoft.com/en-us/library/ee782536.aspx

&nbsp;
<h1 class="title">Chapter 5 – Defining Your Branching and Merging Strategy</h1>
https://msdn.microsoft.com/en-us/library/bb668955.aspx

&nbsp;
<h1 class="general">Microsoft’s Branching and Merging Guidelines</h1>
http://www.infoq.com/news/2012/04/Branching-Guide

&nbsp;
<h1>A successful Git branching model</h1>
http://nvie.com/posts/a-successful-git-branching-model/

&nbsp;

&nbsp;
<h1 class="Entry-ttl">Topic分支和integration分支的運用實例</h1>
http://backlogtool.com/git-guide/tw/stepup/stepup1_5.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>778</wp:post_id>
		<wp:post_date><![CDATA[2016-04-14 19:13:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ce8351e15542f8c684b2b1ae3405577c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5ab837c81e4631e3ddb4ad03838f4c3e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_732e2730fd830be8f466efcc2616c80b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e8bc79f4c7e41ce4c7c8c52109e5541f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_95aee03ceb810ae3d25f23c9938ab27d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Azure] 該如何規劃在 Azure 上架設有大量儲存需求的 SVN Service ?</title>
		<link>http://columns.chicken-house.net/?p=1011</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1011</guid>
		<description></description>
		<content:encoded><![CDATA[本來這篇我又想從架構面慢慢講起的，不過這次換個方式好了，先把實作面交代完，再回頭來看看從架構規劃的角度來看為何要這樣進行?

這次的案例需求很簡單，我手上的開發 project 正好有這需求: XXX 系統的後端需要有個可靠的 file repository, 要有良好的版本控制能力，也要夠成熟可靠。同時這有可能大量部屬在 Azure 上面，儲存的空間也要妥善的控制，免的費用暴漲...，經過評估之後，在系統後端架設 SVN server，就變成我們首選的解決方案。

根本篇無關的技術考量，我就直接跳過了。SVN (subversion) 的確是個夠成熟的產品，也足以擔起這個大任。既然是在後端，把它當作像是 content / document repository 來使用，不需直接面對前端的 user，應該架起來就沒事了。但是要把它佈署到 Azure，成本的考量上就碰到難題了...

主要的困難在於，用 VM 架設 SVN 很容易，但是配置 HDD 就頭痛了，這服務需要的儲存空間變化很大，很難預估啊...，

&nbsp;

&nbsp;

&nbsp;

&nbsp;

先講一下為什麼會有這篇文章吧。起因源自工作上有碰到這個需求，某個系統有大量的數位內容需要處理，包含大量的儲存需求 (上 TB，需要有嚴格的版本控制)；要能有效率的使用儲存空間 (最好只存差異的部分，節省雲端的儲存費用)；同時要兼顧儲存異動時的可靠性 (交易處理，符合 ACID 的要求)，也要顧及分散式的狀況下，能達到有效可靠的差異更新機制。當然 protocol 能有多種選擇更好，最好是有高效的專屬 protocol，或是用的 http 可以任意挑選；最後是這個 solution 最好夠成熟，能有眾多的維護工具，及廣放的 API / SDK 支援，方便我們開發...。

有沒有這麼好的事情?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1011</wp:post_id>
		<wp:post_date><![CDATA[2016-04-14 19:13:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>電腦被關機 :~</title>
		<link>http://columns.chicken-house.net/2005/07/16/%e9%9b%bb%e8%85%a6%e8%a2%ab%e9%97%9c%e6%a9%9f/</link>
		<pubDate>Sat, 16 Jul 2005 14:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/16/e99bbbe885a6e8a2abe9979ce6a99f-7e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>咳, 我的電腦命中註定, 老是會被無緣無故關機... <img src="/Emoticons/emotion-9.gif" /></p>
		<p>十年前有個<a href="http://www.fomokka.net/aceray">傢伙</a>開了先例, 把我寫到一半的畢業論文程式給毀了之後, 現在換小皮.... 小皮看到按鈕都會去按一按, 於是他媽媽的電腦 RESET 三不五時就按一下, 我的 SERVER 也是, 嘖嘖... 還好到目前沒什麼大損失... 該是考慮把 reset 的鈕拔掉的時後了, 嘖...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date><![CDATA[2005-07-16 14:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-16 14:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%bb%e8%85%a6%e8%a2%ab%e9%97%9c%e6%a9%9f]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>561</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-25 00:16:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-25 00:16:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[果然十年前的先例不是意外,世上天注定的.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>恭喜斯嫂斯董!</title>
		<link>http://columns.chicken-house.net/2005/07/12/%e6%81%ad%e5%96%9c%e6%96%af%e5%ab%82%e6%96%af%e8%91%a3/</link>
		<pubDate>Tue, 12 Jul 2005 13:10:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/12/e681ade5969ce696afe5ab82e696afe891a3!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>努力終於有成果了, 喔呵呵呵呵...</p>
		<p>恭喜恭喜 <img src="/Emoticons/emotion-19.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2005-07-12 13:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-12 13:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%81%ad%e5%96%9c%e6%96%af%e5%ab%82%e6%96%af%e8%91%a3]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Happy Birthday</title>
		<link>http://columns.chicken-house.net/2005/07/08/happy-birthday/</link>
		<pubDate>Fri, 08 Jul 2005 14:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/08/Happy-Birthday.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>喔呵呵呵呵, 孩子的娘妳辛苦了 <img src="/Emoticons/emotion-49.gif" /></p>
		<p>Happy Birthday <img src="/Emoticons/emotion-10.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2005-07-08 14:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-08 14:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[happy-birthday]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>小皮哥哥</title>
		<link>http://columns.chicken-house.net/2005/06/08/%e5%b0%8f%e7%9a%ae%e5%93%a5%e5%93%a5/</link>
		<pubDate>Wed, 08 Jun 2005 03:14:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/08/e5b08fe79aaee593a5e593a5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我家小皮快要當哥哥了, 喔呵呵呵.. <img src="/Emoticons/emotion-2.gif" /></p>
		<p>兩個恰恰好, 看來當老爸的我得更努力賺錢養家了 <img src="/Emoticons/emotion-9.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2005-06-08 03:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-08 03:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%9a%ae%e5%93%a5%e5%93%a5]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-23 01:21:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-23 01:21:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[台灣的未來靠兩位了

恭喜呀~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[video] 洗澡玩丟球的小皮</title>
		<link>http://columns.chicken-house.net/2005/05/16/video-%e6%b4%97%e6%be%a1%e7%8e%a9%e4%b8%9f%e7%90%83%e7%9a%84%e5%b0%8f%e7%9a%ae/</link>
		<pubDate>Mon, 16 May 2005 03:16:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/05/16/video-e6b497e6bea1e78ea9e4b89fe79083e79a84e5b08fe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
				<a class="" title="" href="mms://www.chicken-house.net/blog/洗澡丟球小皮.wmv" target="">
						<img height="240" alt="video16.jpg" src="/wp-content/be-files/video16.jpg" width="360" border="0" />
				</a>
		</p>
		<p>小皮洗澡玩丟球, 片長: 30 sec</p>
		<p>現在小皮洗澡已經轉移陣地, 到有浴缸的浴室去了. 為了幫他克服對另一間浴室的恐懼, 我都會在浴缸裡陪他一起洗澡 &amp; 玩球. 玩了幾次他就上癮了, 看到球就會瘋狂的往裡面丟.. <img src="/Emoticons/emotion-2.gif" /></p>
		<p>這段片子我看了幾次, 應該沒有露點吧? 哈哈 <img src="/Emoticons/emotion-11.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2005-05-16 03:16:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-16 03:16:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e6%b4%97%e6%be%a1%e7%8e%a9%e4%b8%9f%e7%90%83%e7%9a%84%e5%b0%8f%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>577</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-05-18 22:13:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-05-18 22:13:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小皮爸有露兩點哦!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[video] 小皮吃醃黃瓜</title>
		<link>http://columns.chicken-house.net/2005/05/16/video-%e5%b0%8f%e7%9a%ae%e5%90%83%e9%86%83%e9%bb%83%e7%93%9c/</link>
		<pubDate>Mon, 16 May 2005 03:14:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/05/16/video-e5b08fe79aaee59083e98683e9bb83e7939c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
				<a class="" title="" href="mms://www.chicken-house.net/blog/吃黃瓜小皮.wmv" target="">
						<img height="240" alt="video15.jpg" src="/wp-content/be-files/video15.jpg" width="360" border="0" />
				</a>
		</p>
		<p>小皮吃醃黃瓜, 片長: 30 sec</p>
		<p>我家小皮吃到酸的東西都是這種表情... 哈哈, 沒想到他連醃黃瓜都愛吃.. <img src="/Emoticons/emotion-2.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2005-05-16 03:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-16 03:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e5%b0%8f%e7%9a%ae%e5%90%83%e9%86%83%e9%bb%83%e7%93%9c]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>[video] 小皮自己吃東西</title>
		<link>http://columns.chicken-house.net/2005/05/16/video-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e5%90%83%e6%9d%b1%e8%a5%bf/</link>
		<pubDate>Mon, 16 May 2005 03:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/05/16/video-e5b08fe79aaee887aae5b7b1e59083e69db1e8a5bf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>好久沒放新的 video 了... 來補一下 <img src="/Emoticons/emotion-11.gif" /></p>
		<p>
				<a href="mms://www.chicken-house.net/blog/自己吃東西.wmv">
						<img height="240" alt="video14.jpg" src="/wp-content/be-files/video14.jpg" width="360" border="0" />
				</a>
		</p>
		<p>小皮自己吃麥粉, 片長: 40 sec</p>
		<p>小皮的娘準備了一點點泡好的麥粉, 放在碗裡給他自己吃, 不過怎麼看他都只是在玩麥粉而以.. <img src="/Emoticons/emotion-8.gif" /></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2005-05-16 03:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-16 03:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e5%90%83%e6%9d%b1%e8%a5%bf]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>新片上檔! 酸溜溜的小皮</title>
		<link>http://columns.chicken-house.net/2005/03/14/%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e9%85%b8%e6%ba%9c%e6%ba%9c%e7%9a%84%e5%b0%8f%e7%9a%ae/</link>
		<pubDate>Mon, 14 Mar 2005 03:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/14/e696b0e78987e4b88ae6aa94!-e985b8e6ba9ce6ba9ce79a84e5b08fe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video13.jpg" /></p>
<p><a href="mms://www.chicken-house.net/blog/酸溜溜小皮.wmv">酸溜溜小皮</a></p>
<p>小皮又有新把戲了, 不知那裡學來的, 會突然裝出一付吃到酸梅, 很用力吸的表情... 哈哈.. <img src="/Emoticons/teeth_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2005-03-14 03:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-14 03:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e9%85%b8%e6%ba%9c%e6%ba%9c%e7%9a%84%e5%b0%8f%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>583</wp:comment_id>
			<wp:comment_author><![CDATA[小皮媽]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-17 02:59:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-17 02:59:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈!
<br />不免的又要來講一下小皮真的好可愛唷~~~~呵呵...
<br />]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Master Peter, my light saber...</title>
		<link>http://columns.chicken-house.net/2005/03/07/master-peter-my-light-saber/</link>
		<pubDate>Mon, 07 Mar 2005 02:47:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/07/Master-Peter2c-my-light-saber.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/master-peter2.jpg" /></p>
<p>我家小皮開始練習絕地武士另一項技能: 光劍! 嗡... 嗡...<br />哈哈, 看來等五月中 StarWars Episode 3 出來時, 他就出師了.. <img src="/Emoticons/shades_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2005-03-07 02:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-07 02:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[master-peter-my-light-saber]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>電暖爐...</title>
		<link>http://columns.chicken-house.net/2005/03/06/%e9%9b%bb%e6%9a%96%e7%88%90/</link>
		<pubDate>Sun, 06 Mar 2005 02:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/06/e99bbbe69a96e78890.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/heater.jpg" /></p>
<p>本以為這幾年台灣的冬天都熱的要命, 就沒事先準備電暖爐讓小皮過冬了... 不過這陣子寒流不但爆冷, 還一個接著一個來 <img src="/Emoticons/confused_smile.gif" />, 大賣場的暖爐都賣到缺貨... 看到我家小皮洗完澡出來在玩的時後, 講話都在發抖.. <img src="/Emoticons/cry_smile.gif" />? 真是心疼啊..</p>
<p>除了心疼, 也被老婆唸到臭頭了.. 哈哈, 今天從我媽那邊搬來了台家裡不用的電暖爐, 用起來真是舒服啊 ... 我家小皮終於可以不用再受凍了 <img src="/Emoticons/shades_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2005-03-06 02:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 02:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%bb%e6%9a%96%e7%88%90]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>灌籃小皮</title>
		<link>http://columns.chicken-house.net/2005/02/24/%e7%81%8c%e7%b1%83%e5%b0%8f%e7%9a%ae/</link>
		<pubDate>Thu, 24 Feb 2005 03:37:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/24/e7818ce7b183e5b08fe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video12.jpg" /></p>
<p><a href="mms://www.chicken-house.net/blog/灌籃小皮.wmv">灌籃小皮</a></p>
<p>沒想到小皮剛滿一歲就會灌籃了耶... <img src="/Emoticons/shades_smile.gif" /><br />有個沒啥運動細胞的老爸, 沒想到他還挺有天份的. 那個籃框可是花了我<br />不少功夫才裝上去的... 看到他玩的那麼樂, 還挺值得的... <img src="/Emoticons/red_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date><![CDATA[2005-02-24 03:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-24 03:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%81%8c%e7%b1%83%e5%b0%8f%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>588</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-02-24 04:06:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-02-24 04:06:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不免的還是要老王賣瓜,自賣自誇一下...小皮好可愛喔!!!呵呵....
<br />]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>小皮耍猴戲</title>
		<link>http://columns.chicken-house.net/2005/02/24/%e5%b0%8f%e7%9a%ae%e8%80%8d%e7%8c%b4%e6%88%b2/</link>
		<pubDate>Thu, 24 Feb 2005 03:33:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/24/e5b08fe79aaee8808de78cb4e688b2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video11.jpg" /></p>
<p><a href="mms://www.chicken-house.net/blog/小皮耍猴戲.wmv">耍猴戲的小皮</a> 嘖, 小皮真聽他媽媽的話, 邊洗澡還會邊聽指令做動作... <img src="/Emoticons/dog.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2005-02-24 03:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-24 03:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%9a%ae%e8%80%8d%e7%8c%b4%e6%88%b2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>Master Peter, use the force....</title>
		<link>http://columns.chicken-house.net/2005/02/17/master-peter-use-the-force/</link>
		<pubDate>Thu, 17 Feb 2005 03:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/17/Master-Peter2c-use-the-force.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/master-peter.jpg" /></p>
<p>我家小皮為了完成絕地武士的訓練, 正在努力的練習用原力讓玩具飄起來...<br />剛好被我拍到 <img src="/Emoticons/teeth_smile.gif" /></p>
<p>練成以後就可以叫他 Master Peter 了... 應該買一把光劍給他玩的 <img src="/Emoticons/shades_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2005-02-17 03:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-17 03:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[master-peter-use-the-force]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>589</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-02-17 07:25:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-02-17 07:25:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[在這裡有光劍的介紹
<br /><a target="_new" href="http://www.mobile01.com/topicdetail.php?f=116&amp;t=59528#414689">http://www.mobile01.com/topicdetail.php?f=116&amp;t=59528#414689</a>
<br />
<br />:p]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>雜誌 model</title>
		<link>http://columns.chicken-house.net/2005/02/10/%e9%9b%9c%e8%aa%8c-model/</link>
		<pubDate>Thu, 10 Feb 2005 02:15:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/10/e99b9ce8aa8c-model.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>大年初一, 大家恭喜發財好運來,雞年行大運 <img src="/Emoticons/teeth_smile.gif" /></p>
<p>今年二月份的“嬰兒與母親”有刊出小皮跟媽媽的照片喔 <img src="/Emoticons/teeth_smile.gif" />, 好奇的人可以去書店翻一翻, 就在第 234 頁... 之前小皮的娘有寄照片去應徵, 後來一月初雜誌社就派攝影師跟化粧師來家裡拍照, 二月份的雜誌就刊出來了. 雖然刊出來的樣子跟想像的有點差距, 不過有這難得的經驗也是不錯啦...</p>
<p>貼一頁給大家瞧瞧.. 另外雜誌社也有把其它照片寄給我們, 放在 [<a href="http://www.chicken-house.net/baby/photo/2005/Jan/model/index.html">這裡</a>]..</p>
<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/mamihood.jpg" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2005-02-10 02:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-10 02:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%9c%e8%aa%8c-model]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>590</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-02-12 20:51:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-02-12 20:51:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳咳...是"嬰兒與母親"好唄...
<br />媽媽與寶寶永遠也翻不到的,切~
<br />]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新片上檔: 玩水小皮</title>
		<link>http://columns.chicken-house.net/2005/01/15/%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e7%8e%a9%e6%b0%b4%e5%b0%8f%e7%9a%ae/</link>
		<pubDate>Sat, 15 Jan 2005 00:55:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/15/e696b0e78987e4b88ae6aa94-e78ea9e6b0b4e5b08fe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video10.jpg" /><br /><a href="mms://www.chicken-house.net/blog/玩水小皮.wmv">玩水小皮</a> - 每次洗澡都像在打水仗... <img src="/Emoticons/what_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2005-01-15 00:55:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-15 00:55:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%89%87%e4%b8%8a%e6%aa%94-%e7%8e%a9%e6%b0%b4%e5%b0%8f%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>大不敬的小皮</title>
		<link>http://columns.chicken-house.net/2005/01/11/%e5%a4%a7%e4%b8%8d%e6%95%ac%e7%9a%84%e5%b0%8f%e7%9a%ae/</link>
		<pubDate>Tue, 11 Jan 2005 02:51:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/11/e5a4a7e4b88de695ace79a84e5b08fe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video09.jpg" /></p>
<p>2005/01/06 <a href="mms://www.chicken-house.net/blog/大不敬小皮.wmv">大不敬的小皮</a>.... 我果然是家裡最沒地位的一個 <img src="/Emoticons/cry_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2005-01-11 02:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-11 02:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%a7%e4%b8%8d%e6%95%ac%e7%9a%84%e5%b0%8f%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>593</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-12 02:20:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-12 02:20:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[由此可知小皮爸在家中的地位就跟"灰姑娘"一樣...
<br />還不快去掃地! :p
<br />
<br />]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>594</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-13 06:41:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-13 06:41:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大師真是能屈能伸啊~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>595</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-19 22:46:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-19 22:46:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[讚! 承諺幹得好!
<br />(h5)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>小皮在 SOGO 騎跳跳馬</title>
		<link>http://columns.chicken-house.net/2005/01/09/%e5%b0%8f%e7%9a%ae%e5%9c%a8-sogo-%e9%a8%8e%e8%b7%b3%e8%b7%b3%e9%a6%ac/</link>
		<pubDate>Sun, 09 Jan 2005 18:29:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/09/e5b08fe79aaee59ca8-SOGO-e9a88ee8b7b3e8b7b3e9a6ac.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid" src="/wp-content/be-files/video08.jpg" /></p>
<p><a href="mms://www.chicken-house.net/blog/騎馬小皮.wmv">2005/01/08 SOGO 5F 騎馬小皮</a><img src="/Emoticons/teeth_smile.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2005-01-09 18:29:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-09 18:29:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%9a%ae%e5%9c%a8-sogo-%e9%a8%8e%e8%b7%b3%e8%b7%b3%e9%a6%ac]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>唸研究所時的作品: 鹿</title>
		<link>http://columns.chicken-house.net/2005/01/04/%e5%94%b8%e7%a0%94%e7%a9%b6%e6%89%80%e6%99%82%e7%9a%84%e4%bd%9c%e5%93%81-%e9%b9%bf/</link>
		<pubDate>Tue, 04 Jan 2005 01:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/04/e594b8e7a094e7a9b6e68980e69982e79a84e4bd9ce59381-e9b9bf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/artefact/deer100.jpg" alt="" width="156" height="265" /><br />
研究所時代畫的作品... 就一般名片大小的卡片<br />
<a href="/wp-content/be-files/articles/196.aspx">全文網址</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2005-01-04 01:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-04 01:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%94%b8%e7%a0%94%e7%a9%b6%e6%89%80%e6%99%82%e7%9a%84%e4%bd%9c%e5%93%81-%e9%b9%bf]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>93&#039; 美研聘書</title>
		<link>http://columns.chicken-house.net/2005/01/04/93-%e7%be%8e%e7%a0%94%e8%81%98%e6%9b%b8/</link>
		<pubDate>Tue, 04 Jan 2005 01:22:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/04/93-e7be8ee7a094e88198e69bb8.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<a href="/wp-content/be-files/artcamp93_offer_letter_fullsize.jpg"><img src="/wp-content/be-files/artcamp93_offer_letter.jpg" alt="" width="350" height="240" /> </a><br />
<br />
交大美術社每年暑假都會舉辦的美術研習營... 大二那年被推去做社長這個苦差事, 到了暑假只好扛下總召集人的任務, 咳咳... 歷年來 (我辦的那屆好像是 19th or 20th 屆), 每年暑假都有六個社團會一起辦營隊, 美研, 土研, 羅服, 另外三個就忘光了, 全部加起來就是竹湖夏令營, 聲勢倒還挺浩大的...<br />
<br />
不過沒想到還有聘書耶 :D, 雖然現在找工作派不上啥用處, 不過看起來也挺爽的.. (H) 哈哈..
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2005-01-04 01:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-04 01:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[93-%e7%be%8e%e7%a0%94%e8%81%98%e6%9b%b8]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>明星臉?</title>
		<link>http://columns.chicken-house.net/2005/01/01/%e6%98%8e%e6%98%9f%e8%87%89/</link>
		<pubDate>Sat, 01 Jan 2005 21:38:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/01/e6988ee6989fe88789.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>常有人寄名人小時後的照片, 什麼林志玲國中畢業紀念冊的照片, 或是蕭亞軒... etc. 沒想到前一陣子我翻我國小畢業紀念冊, 竟然也發現一張眼熟的照片... 哈哈!</p>
<p>實在太意外了, 哈哈, 不過各位看看就好, 就不用轉寄了. 本人對轉寄這些五四三的很反感...</p>
<p><img src="/wp-content/be-files/pic.jpg" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2005-01-01 21:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-01 21:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%98%8e%e6%98%9f%e8%87%89]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>3D 實景賽車遊戲 - 在家裡開車兜風</title>
		<link>http://columns.chicken-house.net/2008/02/12/3d-%e5%af%a6%e6%99%af%e8%b3%bd%e8%bb%8a%e9%81%8a%e6%88%b2-%e5%9c%a8%e5%ae%b6%e8%a3%a1%e9%96%8b%e8%bb%8a%e5%85%9c%e9%a2%a8/</link>
		<pubDate>Tue, 12 Feb 2008 05:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/12/3D-e5afa6e699afe8b3bde8bb8ae9818ae688b2-e59ca8e5aeb6e8a3a1e9968be8bb8ae5859ce9a2a8.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[這可不是什麼新的 3D 電動... 純脆是老爸不想一直買新玩具給小孩, 所以一直想辦法讓舊玩具有新玩法的點子而以 [H]

這輛遙控車是小皮的第二個遙控玩具車. 之前他還小不懂得愛惜, 加上現在玩具都在拼 cost down... 第一輛雖然加裝了防撞泡綿, 還是撞壞了, 前輪輪軸直接撞斷, 連修都沒得修. 後來這台是他乖乖當花童的禮物, 他寶貝的很. 還發生過他發現上面有掉漆等等小損傷, 我又沒空幫他裝防撞泡綿... 寧願在桌上當一搬玩具車用手推著玩, 而不願意放到地上用遙控器讓它跑著玩的事件...

不過也因為這樣, 小皮更愛惜他的遙控車了, 不但會更小心的玩, 壞了也會要求我幫他修... 幫他前後粘了兩片泡棉, 也幫他拆開重新焊好車尾燈... 小皮現在開車技術進步多了, 除了會甩尾 (這應該是車子馬力好... 哈哈), 也會會更小心的開, 不會讓他的愛車去撞牆了. 好事一件 [Y], 也因為這樣開始有新的玩法了... 除了孩子的娘教他把車子開到指定的地墊停好之外, 我也很無聊的拿積木在地上排 S 型, 路邊停車, 倒車入庫等等格子, 跟他玩考駕照的遊戲... 嚇, 這些玩意還難不倒他...

這次玩的其實是我小時後很想玩的方式, 就是在車上裝個攝影機, 然後就可以對著電視拿搖控器開車, 就像在玩賽車一樣. 不過小時後那有這些設備? 光是一台遙控車要價就是現在的十倍以上... 這次我把以前買的桌上型小角架, 綁在小皮的遙控車上面, 再把孩子的娘的相機 Canon IXUS 55 裝上去, 開始錄 VIDEO 後叫小皮開始玩... 拍下來的 video 放給他看, 就好像他以前在看我玩賽車電動給他看一樣...

看小皮看的津津有味, 不但玩具耐玩, 看看這樣能不能激發他的想像力 &amp; 創造力... 以後能自己想出新玩法也不錯... 總之就是不要讓他養成只有新玩具才能滿足他的壞習慣就好. 這好像是現在小孩的通病? 物資不缺乏就不曉得愛惜...

最後補個照片, 這就是改裝後的遙控車, 還有錄下來的 video. 可惜缺了 WIFI, 不然就可以把 video 直接傳回 PC 看 LIVE video ... 施工時小皮還很寶貝的吩附我不要用黏的, 他不要車頂永遠都粘著腳架, 直到我說用橡皮筋綁, 不要的話還可以拿下來, 他才放心讓我施工 @_@, 底下有裝好的照片, 跟錄好的 video 片段:

&nbsp;

<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/3D_4D6F/IMG_4153%20(Canon%20PowerShot%20G9)_1.jpg" alt="IMG_4153 (Canon PowerShot G9)" width="420" height="320" border="0" />
配備五百萬像素數位相機的高級遙控車... 前後還有高級防撞橘色泡棉一組...

&nbsp;

<a href="http://www.chicken-house.net/files/chicken/race.wmv"><img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/3D_4D6F/snapshot20080212052149.bmp_3.jpg" alt="snapshot20080212052149.bmp" width="420" height="320" border="0" /></a>
Live Video: 家裡大到可以開車兜風... Orz]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2008-02-12 05:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-12 05:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3d-%e5%af%a6%e6%99%af%e8%b3%bd%e8%bb%8a%e9%81%8a%e6%88%b2-%e5%9c%a8%e5%ae%b6%e8%a3%a1%e9%96%8b%e8%bb%8a%e5%85%9c%e9%a2%a8]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>297</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-14 01:43:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-14 01:43:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[VIDEO檔案打不開耶?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>298</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-14 03:52:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-14 03:52:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你跟 HONGA 一樣用 Media Player 9 以前的版本嘛? [H]

哈哈, 開了 MMS 就 OK 了，try again]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>自助出差 Day 3 - 4小時遊北京 &#038; Go Home</title>
		<link>http://columns.chicken-house.net/2007/10/21/%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-3-4%e5%b0%8f%e6%99%82%e9%81%8a%e5%8c%97%e4%ba%ac-go-home/</link>
		<pubDate>Sun, 21 Oct 2007 17:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/21/e887aae58aa9e587bae5b7ae-Day-3-4e5b08fe69982e9818ae58c97e4baac-amp3b-Go-Home.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
同事們直接去機場了, 又剩我一個人, 回到飯店後, 本想開電腦上網查查有啥好逛的, shit... 網路不通... LAN ok, 不過看來 gateway 掛了, 出不去... 殘念, 看來連問人 or google 的機會都沒有, 出去散散步找吃的吧. 
</p>
<p>
之前聽同事說這附近有個地鐵站剛通車, 想說走去看看, cow, 說轉角隔個 block 就到, 走起來又是一公里... [:@], 五點多天還亮的, 走到那邊剛好天黑... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9129(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9129(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
後來看一看時間不多, 六點了... 我計劃九點得回來, 一來太晚危險, 二來隔天五點前得起床趕飛機... 於是就招了出租車... 
</p>
<p>
&quot;<font color="#ff0000">師傅 (那邊的司機都叫師傅), 天安門附近是不是有家全聚德?</font>&quot; 
</p>
<p>
&quot;<font color="#ff0000">是啊, o!@#%34jx834@#$%%3...</font>&quot; 
</p>
<p>
&quot;<font color="#ff0000">喔, 那帶我去那家店</font>&quot; 
</p>
<p>
後面那串其實我聽不大懂, 就像聽到老芋頭講話那樣, 明明都是講中文, 就是聽不懂... 感覺挺怪的, 在台灣會講這種口音的都是七八十歲的老先生, 這裡連放學的年輕小伙子都講這種聽不懂的北京話... Orz... 當時碰到下班時間, 大塞車, 到了目的地就快七點了, 花了 26 RMB. 有一段路交通管制只能走公交車(公共汽車), 他放我下來跟我講怎麼走... 我就自己過去了. 
</p>
<p>
真是晴天霹靂 (again), 那家店關了, 正在整修... 白來一趟, 不過路人跟我講附近有另一家分店, 就在和平門 (北京城有好幾個門, 天安門是其中一個) 那邊而以... 好吧, 路也問到了, 路人也指引我過兩個路口左拐就到, 都來了當然要去逛逛... 
</p>
<p>
真是它ㄨㄨㄨㄨ... 這一走又是兩公里... 一個 block 大概就有 1000m ... 我當晚走了一堆的路... 總算到了全聚德, 知名全球的烤鴨餐廳... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9132(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9132(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
不過看看錶, 實在沒時間吃了, 一來我只有一個人也不好點菜, 二來時間不夠, 三來這樣吃也沒意思, 算了, 有緣的話下次再吃. 買了兩隻真空包裝的帶回家跟家人一起享用好了. 
</p>
<p>
在來的路上有碰到地鐵站, 就決定搭地鐵站回去, 體驗一下... 還真便宜, 像台北捷運一樣好幾線, 隨你搭, 統一票價 2RMB, 不論你搭多遠... 看了一下路線圖, 耶? 有天安門站耶! 還剛好分兩段, 天安門西, 天安門東... 剛剛好, 我想兩站間的距離應該差不多也是 1 km 吧? 就搭到東出站走到西再進站, 該逛的應該都逛到了, 就可以回去了... 
</p>
<p>
北京的地鐵有五個路線, 不過只有 (5) 是新的, 就像台北捷運一樣看起來又新又漂亮, (1) ~ (4) 就都舊舊的, 有點像鄉下地方的台鐵火車站... 雖然都在市中心, 離天安門不遠, 不過路線不順, 轉了三班車才到... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9140(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9140(Canon IXY DIGITAL 55)" width="420" height="320" /> <img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9139(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9139(Canon IXY DIGITAL 55)" width="420" height="320" /><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9144(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9144(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
總算到了傳說中的天安門... 十多年前就是在這裡有坦克碾過一堆學生... 沒多停留, 邊走邊逛邊拍照... 往西站前進. 從地圖上知道, 天安門後面直直走就是故宮, 不過想也知道, 北京地圖的一小步, 是我的一大大大大步... 真的走下去應該就天亮了, 反正故宮晚上也進不去, 下次有緣再來逛... 這個禮拜正好碰上十七大, 盛大的很, 不過除了一堆燈跟一堆啥國家民族大團結萬歲之類的標語之外, 也沒有啥其它的... 倒是公安特別多就是了... 
</p>
<p>
&nbsp;<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9148(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9148(Canon IXY DIGITAL 55)" width="420" height="320" /> <img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9154(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9154(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
最後總算順利回飯店了, 兩趟地鐵花了 4RMB, 比去的時後塞半天的 26RMB Taxi 便宜多了... 奇怪, 我到底在省什麼... 不過第一次到的地方, 有辦法自己找交通工具回來, 倒也蠻有意思的, 這是跟團所沒有的體驗啊... 發現我幾次出國玩好像都是這樣... 關島也是, 加拿大也是.. 這次也是.. 
</p>
<p>
不過過程中還是迷了點小路, 提著兩隻快三公斤重的烤鴨, 多走了一大段冤枉路... 快十點了, 總算回到飯店... 
</p>
<p>
隔天早上五點, 收好行李穿好衣服就上路了, 一樓櫃台都還黑呀呀的... 臨走前照張相... 早上有夠冷, 我看連十度都不到... 全部衣服 (衛生衣+襯衫+毛衣+西裝外套) 都套上了還是很冷... 問了問櫃台可不可以幫忙叫車? 我的意思是電話叫車而以, 結果服務生出去外面幫我叫 (飯店在巷子裡, 要走出去到馬路才叫的到車), 真是感謝... [:D] 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9170(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9170(Canon IXY DIGITAL 55)" width="420" height="553" /> 
</p>
<p>
又是個滿口京片子, 講啥都聽不懂的運將... 一路飛快就飆到北京首都機場. 他問我是不是首都機場? 我那曉得, 我只知道是北京的機場... 哈哈. 還好北京沒有第二個機場... 
</p>
<p>
本來想八點的飛機, 五點四十就到機場會不會太早? 沒想到檢查的手續這麼多, 等到最後一步等著登機時也已經七點出頭了... 這兩天都沒空買紀念品, 只好在機場內的 Starbucks 買個城市紀念杯. Starbucks 在世界各大都市都會賣印著 city name 的馬克杯. 我有一個溫哥華的, 這次多買了個北京的... 68RMB, 以當地的 $$ 來說還真不便宜... 還沒吃早餐肚子空空的, 就多買了杯熱拿鐵, 25RMB... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9172(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9172(Canon IXY DIGITAL 55)" width="420" height="320" /> <img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9192(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9192(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
終於到香港了, 快中午了, 辦完轉機的手續, 正好又逛見 Starbucks, 又去買了個香港的城市紀念杯, 這裡更貴, 88 港幣... 香港機場兩個航站間有電車, 也是像捷運那樣, 很快, 兩分鐘就一班車... 到了回台北的班機 ( Gates 33 ), 看到隔壁 34 號門, 那班往廣州的班機就是我當天訂不到票的班機啊 :~~ 照張相怨恨一下... 底下那張飛機就是我等等要搭的華航班機... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9199(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9199(Canon IXY DIGITAL 55)" width="420" height="320" />&nbsp;<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9208(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9208(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9210(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9210(Canon IXY DIGITAL 55)" width="420" height="553" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
這次一趟旅途搭下來, 還是台北來回香港搭的華航班機最舒服, 一樣經濟艙, 位置就是大一點, 每個坐位也有自己的小LCD可以看, 觸控營幕... 其它搭過中國國繼航空, 也搭過南方航空, 空服員沒有華航有禮貌, 飛機起降也比較不穩... 
</p>
<p>
飛到台南的外海時 (左邊有GPS資訊可以看), 往窗外看到小島, 還看的到長長的跑道, 台灣外海有機場的島應該就是澎湖吧? 天氣還不錯, 肉眼就看的到機場... 用 google map 對了一下, 還真的是澎湖耶! 一模一樣... (廢話) 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9228(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9228(Canon IXY DIGITAL 55)" width="420" height="320" /> <img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9227(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9227(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
Google Map: <a href="http://maps.google.com/maps?f=q&amp;hl=zh-TW&amp;time=&amp;date=&amp;ttype=&amp;q=%E5%8F%B0%E5%8C%97%E5%B8%82&amp;ie=UTF8&amp;cd=1&amp;geocode=0,25.085320,121.561499&amp;ll=23.586643,119.576912&amp;spn=0.188155,0.239983&amp;t=k&amp;z=12&amp;om=1" title="連結至此網頁">連結至此網頁</a><br />
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/image_5.png" border="0" alt="image" width="420" height="344" />&nbsp; 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
最後總算回到台灣了... 一路上我只耽心行李裡面的烤鴨過不過的了關? sophie 說不行, 飯店小弟說可以, 全聚德店員說可以 (廢話), 北京機場 check in 時小姐說可以, google 查網頁一堆人說不行... 管它的, 闖看看... 最後當然是帶出來了 [H]. 
</p>
<p>
已經辦完所有手續, 在機場外等長榮的巴士回家.. finally... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day34GoHome_30BF/IMG_9232(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9232(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
&nbsp;
</p>
<p>
Orz, 總算回家了, 真是辛苦的自助出差啊... 親愛的老闆, 下次不要再臨時才說要出差了... 自助出差很辛苦的... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2007-10-21 17:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-21 17:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-3-4%e5%b0%8f%e6%99%82%e9%81%8a%e5%8c%97%e4%ba%ac-go-home]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>371</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-22 09:34:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-22 09:34:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇塞，應該偷笑了吧，一宇什麼時候發了，還可以出差到北京哦，看來我當初應該撐久一點哦!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>372</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-23 12:52:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-23 12:52:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我想看 starbucks 的杯子大集合照片，還要用 G9 拍哦]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>373</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-23 13:56:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-23 13:56:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不用 G9 了, 你來直接擺給你看... [:D]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>374</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-27 01:25:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-27 01:25:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[烤鴨可以啊, 我自己就帶過, 你問錯人了!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>375</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-27 01:27:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-27 01:27:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[話說回來, 你的遊記還蠻有趣的, 我都快忘記我第一次遇到那些狀況時的感受了~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>376</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-27 05:41:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-27 05:41:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你下次出國到機場, 把護照丟到垃圾筒, 就可以重新體會看看了 [H]...
當天有要 msn 問你, 不過你不在, 只好到處找人問...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>自助出差 Day 2 &#038; 3 - 拜訪客戶</title>
		<link>http://columns.chicken-house.net/2007/10/21/%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-2-3-%e6%8b%9c%e8%a8%aa%e5%ae%a2%e6%88%b6/</link>
		<pubDate>Sun, 21 Oct 2007 16:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/21/e887aae58aa9e587bae5b7ae-Day-2-amp3b-3-e68b9ce8a8aae5aea2e688b6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
中間兩天的早上都有安排會議, 當然, 這是出差的主要目的, 不過這內容就沒啥好提的了... 貼這篇只是為了補補照片而以...
</p>
<p>
&nbsp;
</p>
<p>
這兩天的行程真的有點無聊... 10/17 早上到廣州ㄨ軟開會, 它們的辦公室是在一棟 75F 高的大樓, 會議室在 65F, view 真不錯... 不過在那邊時間很緊湊, 也怕拿出來到處照像觀光客, 影響公司形像, 就沒多照了...&nbsp; 一早起床, 就從酒店的房間 (14F) 往外照張像做個記念...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9101(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9101(Canon IXY DIGITAL 55)" width="420" height="320" />
</p>
<p>
&nbsp;
</p>
<p>
早餐直接到酒店樓下的餐廳吃, my god, 沒有普通一點的早餐嘛? @_@, 真是傻眼, 完全是標準的港式飲茶... 同事一講才知道, 廣東人早餐都這樣吃, 慢慢悠閒的吃完才懶懶的去上班, 早餐吃啥河粉還有茶點, 叉燒包... 真不習慣, 我只要麵包跟豆漿就好啊...
</p>
<p>
當天中午, 客戶請我們到他們大樓 B1 吃飯, 大概就像百貨公司底下的美食街那樣, 一客 28rmb 的日式套餐, 吃起來普普, 不過看的出來是當地不錯的餐廳, 價位應該也算貴的了... 不過我倒寧願吃好吃的小吃... 哈哈.
</p>
<p>
另外提一下, 當地一堆叫 &quot;真功夫&quot; 的店, 到處都有, 好像都賣蒸的東西, 我也不曉得好不好吃... 一堆其它店台灣也看的到, 不過都取了怪怪的中譯名... 像 &quot;賽百味&quot;, 這是那家? 哈哈.. 猜看看, 答案在底下...
</p>
<p>
吃完就直接趕去廣州白雲機場了, 照張像當紀念...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9106(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9106(Canon IXY DIGITAL 55)" width="420" height="320" />
</p>
<p>
&nbsp;
</p>
<p>
搭了三個小時的飛機, 才到北京, 有點冷, 不過還好, 跟台北沒差太多, 18&#39;C... 當天住的飯店還可以, 不過已經比第一天的像樣多了... 服務soso, 沒有啥遊泳池SPA之類的, 不過倒是很替出差的人著想, 商務取向的小飯店... 有間小客廳, 有網路孔 (還知道要挑AMP的插座...), 插頭還有提供UPS... 不過沒停電, 也不曉得是真的假的...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9112(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9112(Canon IXY DIGITAL 55)" width="260" height="200" /><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9111(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9111(Canon IXY DIGITAL 55)" width="260" height="200" />
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9113(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9113(Canon IXY DIGITAL 55)" width="260" height="200" /><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9120(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9120(Canon IXY DIGITAL 55)" width="260" height="200" />
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9126(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9126(Canon IXY DIGITAL 55)" width="260" height="200" /><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day23_43/IMG_9125(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9125(Canon IXY DIGITAL 55)" width="260" height="200" /> 
</p>
<p>
不知為何, 這邊飯店都不提供刮鬍刀... 沒辦法, 只好自己去超商買了... 吉利牌一把 10 RMB, 頓時覺的好貴... 其它東西都是個位數而以啊, 哈哈... 順手買了罐 600cc 小保特瓶的coca cola, 2.7RMB, 真便宜...
</p>
<p>
當晚沒出去逛, 一天下來累死了, 晚餐直接吃飛機上的, 就沒再出去吃東西了. 晚上跟同事準備隔天的會議內容. 隔天原本預定早上半天的會議, 誰知道會議延長到下午五點, 害我預定去逛逛的行程也泡湯了, Orz..
</p>
<p>
因為同事是下午七點的機票, 因此又得我一個人冒險了, 沒人當地陪... 沒差, 第一天都混過來了, 有啥好怕的? [H]
</p>
<p>
&nbsp;
</p>
<p>
--<br />
賽百味: SubWay ... 就是賣潛水艇三明治的那家... Orz
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2007-10-21 16:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-21 16:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-2-3-%e6%8b%9c%e8%a8%aa%e5%ae%a2%e6%88%b6]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>自助出差 Day 1 (2007/10/16) - 香港廣州大冒險</title>
		<link>http://columns.chicken-house.net/2007/10/20/%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-1-20071016-%e9%a6%99%e6%b8%af%e5%bb%a3%e5%b7%9e%e5%a4%a7%e5%86%92%e9%9a%aa/</link>
		<pubDate>Sat, 20 Oct 2007 16:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/20/e887aae58aa9e587bae5b7ae-Day-1-(20071016)-e9a699e6b8afe5bba3e5b79ee5a4a7e58692e99aaa.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
沒想到從來不需要出國出差的我, 最近因為種種關係, 開始要到對岸去拜訪客戶了... 上周四才決定日期, 這周二就得前往廣州 &amp; 北京... 為什麼叫 &quot;自助&quot; ? 因為沒有秘書幫我訂機票, 行程只好自己安排... 時間很趕, 機票不大好訂, 上網一看傻眼, 香港到廣州的機票通通訂光光... 看來連後補都沒機會, Orz... 不過日期又沒辦法改, 只好硬著頭皮想別的辦法...
</p>
<p>
查了半天, 看到了一線曙光... 找到了 &quot;廣九直通車&quot; ... 類似台灣高鐵, 200km/hr, 一個多小時就到, 直達的.. 不過上網訂票有點麻煩, 到了再買票就好... 就這樣在台灣訂了三張票 (台北-&gt;香港, 北京-&gt;香港, 香港-&gt;台北), 請大陸的同事訂了票 &amp; 飯店 (廣州-&gt;北京), 就直接出發了...
</p>
<p>
第一次自己出國, 第一次去大陸, 什麼都不知道, 這樣就敢出門, 我也蠻配服自己的, 上網看了看, 香港交通很發達, 自己去應該不成問題... 機票帶著, 港幣帶著, 證件行李帶著, 就出發了... [:D]
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9034(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9034(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 10:55 在長榮機場巴士裡面照的... 我媽帶著芸妹來送行...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9040(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9040(Canon IXY DIGITAL 55)" width="420" height="320" /> <br />
2007/10/16 13:22 我搭的是華航 CI679 ...
</p>
<p>
<br />
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9044(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9044(Canon IXY DIGITAL 55)" width="420" height="320" /> 
</p>
<p>
2007/10/16 13:39 等著登機時照的, 這台就是等等要搭的飛機... 一堆水果.. [:D]
</p>
<p>
到香港後, 辦好出境就直接去找機場快線... 之前查到的是香港地鐵很發達, 可以直接從機場搭到九龍, 再轉接駁公車可以到紅堪火車站搭直通車到廣州... 很好找, 機場裡到處都有指標, 很快就找到了... 不過票價有夠貴, 到九龍站約20min, 一張票要 90 港幣... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9051(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9051(Canon IXY DIGITAL 55)" width="420" height="320" />&nbsp;<br />
2007/10/16 16:21 排隊買票去九龍...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9056(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9056(Canon IXY DIGITAL 55)" width="420" height="320" /> <br />
2007/10/16 16:29 班車蠻多的, 12min 一班
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9057(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9057(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 16:39 列車裡的電視, 會有地鐵相關資訊, 當然中間也有一堆廣告... 還有李安的色戒.. [Y]
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9066(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9066(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 16:58 站名及目前位置, 中間那條藍色的燈會漸漸的變長, 就像 progress bar 一樣 [Y]
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9071(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9071(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 17:03 到九龍站了. 機場快線的票可以換免費的接駁車票... 旁邊有 7-11, 買了罐礦泉水, 有夠貴...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9073(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9073(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 17:09 要搭的就是這輛: K1
</p>
<p>
&nbsp;
</p>
<p>
接下來大約搭了半小時就到紅堪車站, 不過一直到廣州就都沒心情拍照了, 為什麼? 因為...
</p>
<p align="center">
<strong><font size="5" color="#ff0000">九龍直達廣州的直通車沒票了!!!</font></strong>
</p>
<p>
真是晴天霹靂啊, 難道要我在火車站過夜嘛... 問了一下, 原來剛好碰到 &quot;<a href="http://www.cantonfair.org.cn/cn/index.asp" target="_blank">廣交會</a>&quot;, 所以到廣州的票啊飯店啊通通被訂光光, 連買隔天的都要等到中午才有票, 直通車看來是比較高級的列車, 也沒有賣站票... My god...
</p>
<p>
沒辦法, 只好提著行李到處問人, 還好不大有耐心的售票員指點了我一條路, 我可以搭一般火車到深圳, 辦好出關手續後可以再轉車到廣州... 聽起來好像還不難, 就買了票進去... 紅堪-&gt;深圳, 33RMB.
</p>
<p>
當時急都急死了, 就沒多拍照. 另一方面也聽說治安不大好, 手機相機拿出來容易被盯上... 到時就麻煩了. 跑去搭車, 每一站的站名通通沒看過 @_@, 進列車後有夠擠, 剛好是下班時間, 就像在擠台鐵的通勤列車一樣... ~_~ 站內及車內沒空調, 穿著西裝真的是快悶死了...
</p>
<p>
不過進去後抬頭一看, 那有到深圳? 最後一站還分岔 (就像捷運北投站一樣...), 一個是羅湖, 另一個忘了... 搭了一站趕緊跳出來問站務人員... 她用廣東腔跟我講搭到羅湖就對了... 另外我發現有 &quot;頭等車箱&quot;, 原來票價貴一倍, 剛才(已經回台灣了) <a href="http://www.kcrc.com/html/tch/services/services/east_rail/fare/index.asp" target="_blank">查了一下</a>才知道... 售票員沒問我, 不然我就買頭等票了, 當時嚇都嚇死了, 貴三倍我也願意...
</p>
<p>
跟著一般民眾, 有上班族, 有學生, 有工人... 擠完車約 30min 終於到了, 大陸就是地大, 隨便一個車站也弄的很大一片... 走路就要半天... 還要出關驗護照啥的, 弄了半天總算出車站了, 到了深圳...
</p>
<p>
原來這就是傳說中的深圳, 不過我的問題還沒解決, 沒空到處晃晃 &amp; 照相, 繼續靠一張嘴問路... 同樣一個深圳車站也是, 出站後到售票口要走個十來分鐘, 真是... 地太多也不用這樣... 還好後面這段容易多了, 十分鐘就有一班車到廣州, 買了票就去等車了.
</p>
<p>
這裡的車就比剛才好一些, 深圳到廣州票價 75RMB, 大概要搭80min, 原來這就是廣深鐵路啊... 以前地理沒唸好, 看到一堆站名跟鐵路完全沒印象... 不過這些資訊跟以前唸的也應該完全不同吧? 哈哈...
</p>
<p>
上了車才發現, 原來這列車也有分等級, 有位子較大較舒服的頭等, 售票員沒問我 ~_~, 我看起來這麼陸嘛? 哈哈... 沒關係, 這也算優點, 至少有位子坐了. 仔細看看車子還不錯, 蠻新的, 等級不比自強號差. 也有餐車, 不過我只有一個人, 不放心丟下行李去吃, 就算了. 車速也不慢, 最快飆到 200km/h ... 不過不知是車子 or 鐵路的問題, 飆過 150km/h 就開始車震... 算算距離跟速度, 大概相當於台北到雲林的距離吧... 
</p>
<p>
因為我知道出車站後只要叫 taxi (他們叫: 出租車) 到飯店, 我的冒險生涯就結束了, 輕鬆多了, 就開始照照片 &amp; 打電話回家報平安. 當然我不趕講上面這段, 怕家人耽心, 我只是很簡單講原本要搭的火車誤點, 現在快到了... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9090(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9090(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 20:02 好不容易有心情繼續照相... 車箱內的資訊看板
</p>
<p>
&nbsp;
</p>
<p>
出車站叫了 taxi, 到了酒店就 check-in, 真是... 爛爛的飯店, 3F ~ 5F 還是夜總會之類的聲色場所... 樓下還兩個穿很少的小姐在招呼客人... 沒辦法, 又是該死的廣交會, 像樣的飯店都訂不到, 我還得跟大陸的同事兩個人擠一間. 一晚要價 750RMB... [N]
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9094(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9094(Canon IXY DIGITAL 55)" width="420" height="320" /><br />
2007/10/16 22:06 跟同事會合後出來吃飯照的... 已經 10:00 了... Orz
</p>
<p>
同事是南京人, 不過我們分公司在上海, 他也是八點多才從上海搭飛機到廣州... 路也不熟, 逛了半天最後是去麥當勞吃 ~_~... 到目前為止, 都沒吃到啥當地的食物, 中午吃飛機上的, 晚餐吃麥當勞, 嗯... 反正新聞看多了我也不敢亂吃. 總算結束第一天的冒險...
</p>
<p>
看來這酒店應該是有特別服務的, 不過沒人鳥我們... 哈哈, 大概我看起來又是一副很陸的樣子, 加上兩個男的住一間, 大概也沒啥搞頭就沒人鳥我們了... 浴室裡除了擺毛巾肥皂等盥洗用品外, 還擺了個架子, 有各式各樣的保險套, 還有啥神油的... ~_~ 當然要照一下...
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Day120071016_D08A/IMG_9099(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_9099(Canon IXY DIGITAL 55)" width="420" height="553" /><br />
2007/10/17&nbsp; 01:48&nbsp; Health Care Product ??? Hmm...
</p>
<p>
&nbsp;
</p>
<p>
晚上睡覺時的唯一想法只有一個, 我終於活下來了... 哈哈, 早知道這麼多意外, 我就不來了... 各位還看的到這篇都算三生有幸吧 [H], 雖然只不過是換個車搭而以, 不過對於很少出國, 第一次到香港及大陸, 加上一堆人都跟我提醒治安不大好要注意... 還沒地方上網 or 打電話求救, 其實心理的壓力是很大的. 這樣一天下來雖然很狼狽, 不過事後想想也蠻有意思的, 看來到香港大陸自助旅行也不難嘛... 何況我看起來這麼陸... 總之第一天平安的過去了, 接下來隔天一早要到廣州微軟去開會, 下午趕飛機去北京... 請期待續集.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2007-10-20 16:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-20 16:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%87%aa%e5%8a%a9%e5%87%ba%e5%b7%ae-day-1-20071016-%e9%a6%99%e6%b8%af%e5%bb%a3%e5%b7%9e%e5%a4%a7%e5%86%92%e9%9a%aa]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>377</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-21 11:56:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-21 11:56:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[勇!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>378</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-22 13:22:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-22 13:22:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[呵呵，幾乎是相同的時間我也在廣州，很雷同的遭遇是我回程的時候，最後一張廣九鐵路的票在我前面被買走，所以我也是很可憐的提著行李過羅湖關擠火車到香港，差一點還趕不上飛機。

不過以第一次出差來看，你的經驗足以驚天動地，鬼神哭嚎，眾神皆感敬佩。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[Alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-27 01:18:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-27 01:18:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[所以沒事應該多多帶妻小出國演練, 免得臨時要出國, 又遇到這樣的鳥事.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>家庭帳號啟用...</title>
		<link>http://columns.chicken-house.net/2007/10/09/%e5%ae%b6%e5%ba%ad%e5%b8%b3%e8%99%9f%e5%95%9f%e7%94%a8/</link>
		<pubDate>Tue, 09 Oct 2007 03:43:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/09/e5aeb6e5baade5b8b3e8999fe5959fe794a8.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
之前就申請了 windows live custom domain, 不過一直沒在用, 現在看到它多了些新的服務, 就重新整理了一下... 很多人都不喜歡免費的 email, 因為看起來就很遜, 名字又常跟別人打架, 加上用了以後要換 email address 就很頭痛... 不過 gmail (google) 跟 hotmail (microsoft) 都提供用你自己的 domain 來用它們的 mail service, 例如我自己註冊了 chicken-house.net 這個網域, 我就可以用它們的 webmail, 用它們的 mail 空間, 用 <a href="mailto:chicken@chicken-house.net">chicken@chicken-house.net</a> 這 email address 來收發信件... 我想用 webmail, 也不需要打 <a href="http://mail.live.com">http://mail.live.com</a>, 可以直接打 <a href="http://mail.chicken-house.net">http://mail.chicken-house.net</a> ... 如果我願意的話, 連 <a href="mailto:XXX@chicken-house.net">XXX@chicken-house.net</a> 都可以開放免費申請... 貼一下圖... 下圖就是用 mail.live.com 收發我自己的 email address (<a href="mailto:chicken@chicken-house.net">chicken@chicken-house.net</a>) 的樣子, 右上角寫的 mail address 正是 <a href="mailto:chicken@chicken-house.net">chicken@chicken-house.net</a>, 不是 @hotmail.com 或是 @msn.com.
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/270e9852b4ec_2F71/image_2.png"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/270e9852b4ec_2F71/image_thumb.png" border="0" alt="image" width="420" height="240" /></a> 
</p>
<p>
Microsoft 也為了這系列服務, 提供 SDK, 我可以自己開發一些 AP, 來管理我專屬 domain 的服務, 看來 Microsoft 真的是跟 Google 槓上了... 其它還有一些額外的應用, 不過我就沒啥興趣了... 像是 <a href="http://space.chicken-house.net">http://space.chicken-house.net</a>, http://s<a href="mailto:search@chicken-house.net">earch.chicken-house.net</a> ... 等等.
</p>
<p>
雖然這年頭自己架 mail server 不是啥難事, 不過全要弄到好, 還要包含 web mail, 加上維護, 還真有點囉唆... 看到 hotmail 改版, 空間變 5G, outlook express 也升級為 windows live mail, 可以直接收發 live mail, 加上 domain 是我自己的, 以後要換成 gmail 的服務或是自己搬回家 hosting 都不是問題 (<strong><font color="#ff0000">這才是重點</font></strong>)... 可以用免費的服務, 以後不用也不會被迫要換 email address 等, 不會有被綁架在它們服務上的感覺, 真的是一舉數得. 就先用免費的吧 [:D]
</p>
<p>
看起來挺方便的, 以後我們全家都有統一的 email address 了 
</p>
<p>
我的: <a href="mailto:chicken@chicken-house.net">chicken@chicken-house.net</a>, <a href="mailto:andrew@chicken-house.net">andrew@chicken-house.net</a><br />
大人: <a href="mailto:sea@chicken-house.net">sea@chicken-house.net</a>, <a href="mailto:nancy@chicken-house.net">nancy@chicken-house.net</a><br />
皮哥: <a href="mailto:peter@chicken-house.net">peter@chicken-house.net</a><br />
芸妹: <a href="mailto:annie@chicken-house.net">annie@chicken-house.net</a>
</p>
<p>
過一陣子我大概連 msn 都會換掉, 以後看到我們家的人把你加到 msn, 請不要封鎖我們啊... 謝謝各位 [:D]
</p>
<p>
&nbsp;
</p>
<p>
--<br />
PS. 怎辦? 我開始想在我家門牌上面打 chicken-house.net 了... 哈哈<br />
PS2. 以後郵局會不會有這種服務? 收件者地址打 chicken-house.net 也寄的到? Orz..
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2007-10-09 03:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-09 03:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%b6%e5%ba%ad%e5%b8%b3%e8%99%9f%e5%95%9f%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-09 11:03:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-09 11:03:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[要給我一個kevin@chicken-house.net的帳號嗎?嘻嘻!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>381</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-09 11:24:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-09 11:24:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你準備好要叫我爸爸的時後, 我就幫你開家庭帳號... [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>382</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-12 15:04:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-12 15:04:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[等你要開始分我家產的時候,我就開始叫你爸爸]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>被拒絕了...</title>
		<link>http://columns.chicken-house.net/2007/08/26/%e8%a2%ab%e6%8b%92%e7%b5%95%e4%ba%86/</link>
		<pubDate>Sun, 26 Aug 2007 04:09:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/26/e8a2abe68b92e7b595e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P><IMG style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px" src="/wp-content/be-files/WindowsLiveWriter/12976b5ab86f_3A84/IMG_6968(Canon%20IXY%20DIGITAL%2055)%20(Small)%5B4%5D.jpg" border=0 mce_src="/wp-content/be-files/WindowsLiveWriter/12976b5ab86f_3A84/IMG_6968(Canon%20IXY%20DIGITAL%2055)%20(Small)%5B4%5D.jpg"> </P>
<P>皮: 給我吃一片...<BR>芸: 想都別想...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2007-08-26 04:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-26 04:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a2%ab%e6%8b%92%e7%b5%95%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>前輩英明...</title>
		<link>http://columns.chicken-house.net/2007/08/24/%e5%89%8d%e8%bc%a9%e8%8b%b1%e6%98%8e/</link>
		<pubDate>Fri, 24 Aug 2007 02:59:26 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/24/e5898de8bca9e88bb1e6988e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img height="415" src="/wp-content/be-files/WindowsLiveWriter/f46d67701164_2A0C/image%7B0%7D%5B5%5D.png" width="748"> </p> <p>當年前輩推薦的 G2 真是讚啊, 現在堂堂邁入第七年了... [Y]</p> <p>再來就是等 G9 上市了... [:D]</p> <p>剛好逛到這篇, 一定要貼一下, 哈哈..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2007-08-24 02:59:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-24 02:59:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%89%8d%e8%bc%a9%e8%8b%b1%e6%98%8e]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>415</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-24 07:09:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-24 07:09:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇賽!這這這...
這哪年來著呀~嚇~~
當時同事們真的一堆用G2，
不過我自葛兒可是沒買哩~哈哈!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>被開單...</title>
		<link>http://columns.chicken-house.net/2007/08/15/%e8%a2%ab%e9%96%8b%e5%96%ae/</link>
		<pubDate>Wed, 15 Aug 2007 01:38:42 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/15/e8a2abe9968be596ae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>被開單的人, 當然不是我... 哈哈... 無意間翻到這張照片就直覺的聯想到下面的對話... [H]</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="480" src="/wp-content/be-files/WindowsLiveWriter/2ca047fc2e6b_1721/IMG_6143(Canon%20IXY%20DIGITAL%2055)%5B7%5D.jpg" width="640" border="0"> </p> <p>皮: 你的駕照咧?<br>芸: .......</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2007-08-15 01:38:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-15 01:38:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a2%ab%e9%96%8b%e5%96%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>420</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-15 13:20:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-15 13:20:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[皮: 你的駕照咧?
芸: 不是我開的.是史瑞克開的..

皮: 別騙我..
芸: ..........告訴你..我爸是867 !?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>421</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-15 15:15:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-15 15:15:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[皮: 妳贏了.... 我媽是 864 ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>我的手機上電視了, 哈哈...</title>
		<link>http://columns.chicken-house.net/2007/06/22/%e6%88%91%e7%9a%84%e6%89%8b%e6%a9%9f%e4%b8%8a%e9%9b%bb%e8%a6%96%e4%ba%86-%e5%93%88%e5%93%88/</link>
		<pubDate>Fri, 22 Jun 2007 23:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/06/22/e68891e79a84e6898be6a99fe4b88ae99bbbe8a696e4ba862c-e59388e59388.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" width="425" height="350">
	<param name="width" value="425" />
	<param name="height" value="350" />
	<param name="wmode" value="transparent" />
	<param name="src" value="http://www.youtube.com/v/kr1O917o4jI" />
	<embed type="application/x-shockwave-flash" width="425" height="350" wmode="transparent" src="http://www.youtube.com/v/kr1O917o4jI"></embed>
</object>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2007-06-22 23:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-22 23:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%88%91%e7%9a%84%e6%89%8b%e6%a9%9f%e4%b8%8a%e9%9b%bb%e8%a6%96%e4%ba%86-%e5%93%88%e5%93%88]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>追焦攝影 - 失敗作品</title>
		<link>http://columns.chicken-house.net/2007/06/20/%e8%bf%bd%e7%84%a6%e6%94%9d%e5%bd%b1-%e5%a4%b1%e6%95%97%e4%bd%9c%e5%93%81/</link>
		<pubDate>Wed, 20 Jun 2007 03:07:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/06/20/e8bfbde784a6e6949de5bdb1-e5a4b1e69597e4bd9ce59381.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
吳小皮, 原諒老爸沒把你拍好... [:&#39;(] 
</p>
<p>
連續兩天帶著吳小皮去騎腳踏車, 剛好帶著 G2 就試看看追焦, 哈哈, 拍起來果然很糟糕, 不能老怪相機爛, 自己技術也是要練.. 看起來換了 G7 也不會改善多少... [:&#39;(] 
</p>
<p>
拍了四五張, 主體也是糊掉了, 看來快門調 1/15 sec 還是太長了, 就算追焦追的再準, 主體的人物也是會動到... 
</p>
<p>
既然是失敗作品就不多廢話了, 貼上來作個記錄... [:D] 
</p>
<p>
<img src="/wp-content/be-files/track-001.jpg" alt="" width="448" height="264" /> 
</p>
<p>
<img src="/wp-content/be-files/track-003.jpg" alt="" width="448" height="328" /> 
</p>
<p>
<img src="/wp-content/be-files/track-002.jpg" alt="" width="363" height="249" /> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2007-06-20 03:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-20 03:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%bd%e7%84%a6%e6%94%9d%e5%bd%b1-%e5%a4%b1%e6%95%97%e4%bd%9c%e5%93%81]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>429</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 17:29:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 17:29:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[吳小皮都長這麼大了!看來一點都沒有過去某條棉被所造成的陰影在.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>430</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://che.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-21 17:59:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-21 17:59:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[追焦的基本快門大約是 40~60 之間
別太慢，會搞不清楚是手震還是失焦]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Cars DVD / Poster ...</title>
		<link>http://columns.chicken-house.net/2006/11/14/cars-dvd-poster/</link>
		<pubDate>Tue, 14 Nov 2006 00:31:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/14/Cars-DVD-Poster-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我家小皮不知道為什麼, 就是很迷車子, 各種車子他都愛, 自從半年前帶他去電影院看了 Cars 之後..&nbsp;他每天晚上都要看完一段 Cars 的 video (當然是從&nbsp;<a href="mailto:!@#%#$">!@#%#$</a> copy 來的...) 才肯睡, 睡前還要拿著麥當勞的 cars 玩具車上床..</p> <p>不過抓下來的 video 畫質實在不怎麼樣, 加上聲音也很鳥, 11/8 才發行 DVD, 上周末就帶小皮去買了, 路上問他:</p> <p>"買 dvd 回阿媽家看好不好?"</p> <p>"好!!"</p> <p>想也知道是這答案, 買的時後順便問了老闆有沒有多的海報, 嚇... 真的有耶!! :D</p> <p>我家小皮可樂壞了, 當然我也很樂 :D, 頓時覺的買原版的真是值得, 那張海報在小皮心中的份量大概超過十罐養樂多吧.. 現在那張海報就貼在木馬旁的牆上, 沒想到他年紀這麼小就有偶像了, 還有偶像的海報... 哈哈...</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="318" src="http://community.chicken-house.net/blogs/images/CarsDVDPoster_FE85/98753.jpg" width="300" border="0"> </p> <p>[跟閃電麥坤的海報合照]</p> <p>&nbsp;</p> <p><a href="/wp-content/be-files/peter-draft.wmv" atomicselection="true"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="240" src="http://community.chicken-house.net/blogs/images/CarsDVDPoster_FE85/peterdraft.bmp3.jpg" width="320" border="0"></a> </p> <p>[迷車子迷到練甩尾的小皮]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2006-11-14 00:31:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-14 00:31:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cars-dvd-poster]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>頭髮畫...</title>
		<link>http://columns.chicken-house.net/2006/09/29/%e9%a0%ad%e9%ab%ae%e7%95%ab/</link>
		<pubDate>Fri, 29 Sep 2006 01:49:43 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/29/e9a0ade9abaee795ab.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="180" src="http://community.chicken-house.net/blogs/images/6bf5a27421b5_19BB/IMG_74812.jpg" width="240" border="0"> <img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="180" src="http://community.chicken-house.net/blogs/images/6bf5a27421b5_19BB/IMG_74882.jpg" width="240" border="0"> </p> <p>這是啥? 不就是浴室的瓷磚嘛... 幫小皮洗澡時照的... 放大一點看看...</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="240" src="http://community.chicken-house.net/blogs/images/6bf5a27421b5_19BB/image04.png" width="240" border="0"> <img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="156" src="http://community.chicken-house.net/blogs/images/6bf5a27421b5_19BB/image05.png" width="240" border="0"> </p> <p>哈哈, 我真是太無聊了, 幫小皮洗澡時, 他常賴著玩水不肯出來, 陪他窩在浴缸裡又沒事做, 看到沾水黏在牆上的頭髮, 就開始拿頭髮排起圖案來了</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="365" src="http://community.chicken-house.net/blogs/images/6bf5a27421b5_19BB/image010.png" width="294" border="0"> </p> <p>沒想到吳小皮不大領情, 看了一下就繼續玩他的水... [:@]</p> <p>結果畫過狗 &amp; 貓後, 就再也沒畫過了... 嘖嘖...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2006-09-29 01:49:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-29 01:49:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a0%ad%e9%ab%ae%e7%95%ab]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>514</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-11 23:18:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-11 23:18:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[右邊的是貓嗎? 有點像鼠耶~ (逃)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>515</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-12 10:37:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-12 10:37:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳, 這叫畫虎不成... :'(]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>516</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-10 01:45:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-10 01:45:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[陪自己的兒子洗澡這麼無聊嗎?

那可是你的兒子啊!!!

你老婆懷胎十月辛苦生下的，你爹娘捧在手心的金孫啊！！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>517</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-11 02:14:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-11 02:14:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖, 我這是在討好他... 沒想到他不領情 :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[VCR] 芸妹爬行比賽</title>
		<link>http://columns.chicken-house.net/2006/09/19/vcr-%e8%8a%b8%e5%a6%b9%e7%88%ac%e8%a1%8c%e6%af%94%e8%b3%bd/</link>
		<pubDate>Tue, 19 Sep 2006 04:05:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/19/VCR-e88ab8e5a6b9e788ace8a18ce6af94e8b3bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/2006-0916-AnnieRace.wmv" atomicselection="true"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="225" src="http://community.chicken-house.net/blogs/images/VCR_39A8/snapshot200609190400375.png" width="300" border="0"></a> </p> <p>妹妹真強, 幫哥哥出了一口氣... (Y)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date><![CDATA[2006-09-19 04:05:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-19 04:05:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vcr-%e8%8a%b8%e5%a6%b9%e7%88%ac%e8%a1%8c%e6%af%94%e8%b3%bd]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>[VCR] 芸妹在車上玩躲貓貓</title>
		<link>http://columns.chicken-house.net/2006/09/19/vcr-%e8%8a%b8%e5%a6%b9%e5%9c%a8%e8%bb%8a%e4%b8%8a%e7%8e%a9%e8%ba%b2%e8%b2%93%e8%b2%93/</link>
		<pubDate>Tue, 19 Sep 2006 04:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/19/VCR-e88ab8e5a6b9e59ca8e8bb8ae4b88ae78ea9e8bab2e8b293e8b293.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P><A href="/wp-content/be-files/2006-0916-AnnieHideAndSeek.wmv" atomicselection="true"><IMG style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px" height=225 alt=躲貓貓!! src="/blogs/images/VCR_3902/snapshot200609190358397.png" width=300 border=0></A> </P>
<P>真可愛啊... :D~~~</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date><![CDATA[2006-09-19 04:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-19 04:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vcr-%e8%8a%b8%e5%a6%b9%e5%9c%a8%e8%bb%8a%e4%b8%8a%e7%8e%a9%e8%ba%b2%e8%b2%93%e8%b2%93]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>[VCR] 小皮自己買多多</title>
		<link>http://columns.chicken-house.net/2006/09/12/vcr-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e8%b2%b7%e5%a4%9a%e5%a4%9a/</link>
		<pubDate>Tue, 12 Sep 2006 22:43:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/12/VCR-e5b08fe79aaee887aae5b7b1e8b2b7e5a49ae5a49a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>沒想到我家小皮已經會自己拿錢去買多多了... 真是令人感動啊, 原來小孩子學新東西是這麼的快...</p> <p><a href="/wp-content/be-files/2006-0911-buy.wmv" atomicselection="true"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="240" alt="小皮買多多" src="http://community.chicken-house.net/blogs/images/f39a19c4ccd0_13F7C/snapshot200609122240256.jpg" width="320" border="0"></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2006-09-12 22:43:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-12 22:43:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vcr-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e8%b2%b7%e5%a4%9a%e5%a4%9a]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>519</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-09-14 01:21:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-09-14 01:21:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[了不起, 果然一代比一代強, HAHA~

該開始把錢藏起來了.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>520</wp:comment_id>
			<wp:comment_author><![CDATA[Alan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-09-16 00:57:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-09-16 00:57:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我還在泡咩咩的時候
有人已經要開始傷筋要開始藏錢了喔]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>博命演出... 人仰馬翻皮</title>
		<link>http://columns.chicken-house.net/2006/03/14/%e5%8d%9a%e5%91%bd%e6%bc%94%e5%87%ba-%e4%ba%ba%e4%bb%b0%e9%a6%ac%e7%bf%bb%e7%9a%ae/</link>
		<pubDate>Tue, 14 Mar 2006 03:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/03/14/e58d9ae591bde6bc94e587ba-e4babae4bbb0e9a6ace7bfbbe79aae.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>[:'(]</P>
<P>小皮翻了過去, 他媽媽竟然還很穩的繼續拍 video ... [:@]</P>
<P>不過看到小皮沒怎樣後, 我也笑翻了 [H]</P>
<P>哈哈, 真是博命演出啊...</P>
<P><BR><A href="mms://community.chicken-house.net/blog/人仰馬翻皮.wmv"><IMG src="/wp-content/be-files/人仰馬翻皮.jpg"></A></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date><![CDATA[2006-03-14 03:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-14 03:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%91%bd%e6%bc%94%e5%87%ba-%e4%ba%ba%e4%bb%b0%e9%a6%ac%e7%bf%bb%e7%9a%ae]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>530</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-03-25 04:33:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-03-25 04:33:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳,我離小皮的距離比你還遠好唄? 要救也是你救,何況,人都已經摔下去了,難得拍到如此精彩的鏡頭,豈是說收手就收手?
看到這個短片就覺得小皮好像在表演"志村大爆笑"或是"歡樂一籮筐"...:P

小皮真是太有搞笑天份,很適合走周星馳路線...^ ^
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>531</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-04-12 02:09:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-04-12 02:09:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HAHA!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>心痛的感覺...</title>
		<link>http://columns.chicken-house.net/2006/02/10/%e5%bf%83%e7%97%9b%e7%9a%84%e6%84%9f%e8%a6%ba/</link>
		<pubDate>Fri, 10 Feb 2006 03:20:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/02/10/e5bf83e7979be79a84e6849fe8a6ba.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P><IMG src="/wp-content/be-files/satrun-mirror.JPG"></P>
<P>對, 就是這個後照鏡... 副廠的, 換一個要 4500 (零件費用) + 300 (工本費) ... [:'(]</P>
<P>果然車子是得砸錢下去養的...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2006-02-10 03:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-10 03:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bf%83%e7%97%9b%e7%9a%84%e6%84%9f%e8%a6%ba]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>532</wp:comment_id>
			<wp:comment_author><![CDATA[Eason]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-02-10 16:39:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-02-10 16:39:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[長輩車，當然是很貴啦 ～

雞爸的車... 簡稱...
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[video] 口水泡泡...</title>
		<link>http://columns.chicken-house.net/2005/10/10/video-%e5%8f%a3%e6%b0%b4%e6%b3%a1%e6%b3%a1/</link>
		<pubDate>Mon, 10 Oct 2005 02:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/10/10/video-e58fa3e6b0b4e6b3a1e6b3a1.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>
				<a class="" title="" href="mms://www.chicken-house.net/blog/口水泡泡皮.wmv" target="">
						<img src="/wp-content/be-files/video19.jpg" />
				</a>
		</p>
		<p>長度: 90 sec</p>
		<p>這小子又有新把戲了, 拿口水吹泡泡 -_-|||</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2005-10-10 02:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-10 02:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e5%8f%a3%e6%b0%b4%e6%b3%a1%e6%b3%a1]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<wp:comment>
			<wp:comment_id>545</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-10-10 02:11:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-10-10 02:11:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小皮真的手腳超級靈活了...

希望小樂過半年也能這樣..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>546</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-10-16 08:34:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-10-16 08:34:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你們家也是看非凡新聞台呀~
我們家也是哦~少了許多社會新聞，多些長智慧，長口水(美食)的新聞]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>547</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-10-17 13:53:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-10-17 13:53:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳, 是在玩 "大家來找碴" 嘛... 哈哈...

來猜看看我喝的是啥飲料好了, 還有, DV 跟光碟機的牌子是啥... (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>548</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-10-19 04:07:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-10-19 04:07:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[非凡的好看呀! 不會沒事就在SNG現場連線,八卦也不會一直重覆的疲勞轟炸,播的都是以消費,時尚,流行,科技,美食,財經...etc居多,算是難得的一股清流吧...
小皮媽尤愛看吃的報導過過乾癮也是很美爽爽...:D~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[video] 小皮自己吃東西 II</title>
		<link>http://columns.chicken-house.net/2005/08/07/video-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e5%90%83%e6%9d%b1%e8%a5%bf-ii/</link>
		<pubDate>Sun, 07 Aug 2005 22:55:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/08/07/video-e5b08fe79aaee887aae5b7b1e59083e69db1e8a5bf-II.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>
				<a class="" title="" href="mms://www.chicken-house.net/blog/自己吃東西-II.wmv" target="">
						<img height="240" alt="video18.jpg" src="/wp-content/be-files/video18.jpg" width="320" border="0" />
				</a>
		</p>
		<p>這小子湯匙越拿越好了, 拍 video 時旁邊的阿媽跟姑姑都嘖嘖稱奇... 嘖嘖嘖, 都沒有人想到小皮的手巧, 其實是從他爸爸那邊遺傳過來的 <img src="/Emoticons/emotion-11.gif" /></p>
		<p> </p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2005-08-07 22:55:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-07 22:55:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e5%b0%8f%e7%9a%ae%e8%87%aa%e5%b7%b1%e5%90%83%e6%9d%b1%e8%a5%bf-ii]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
	</item>
	<item>
		<title>[video] 小皮答數! 一.. 二.. 三.. 四..</title>
		<link>http://columns.chicken-house.net/2005/07/16/video-%e5%b0%8f%e7%9a%ae%e7%ad%94%e6%95%b8-%e4%b8%80-%e4%ba%8c-%e4%b8%89-%e5%9b%9b/</link>
		<pubDate>Sat, 16 Jul 2005 15:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/16/video-e5b08fe79aaee7ad94e695b8!-e4b880-e4ba8c-e4b889-e59b9b.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
				<a class="" title="小皮: 一! 二! 三! 四! 五! ..." href="mms://www.chicken-house.net/blog/小皮一二三.wmv" target="">
						<img height="240" alt="video17.jpg" src="/wp-content/be-files/video17.jpg" width="360" border="1" />
				</a>
		</p>
		<p>嘖, 這小子... 沒當過兵跟人家學什麼精神答數... <img src="/Emoticons/emotion-8.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date><![CDATA[2005-07-16 15:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-16 15:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[video-%e5%b0%8f%e7%9a%ae%e7%ad%94%e6%95%b8-%e4%b8%80-%e4%ba%8c-%e4%b8%89-%e5%9b%9b]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>560</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-17 09:11:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-17 09:11:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可愛到不行阿]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[廣告] Easy Phone 2</title>
		<link>http://columns.chicken-house.net/2008/04/20/%e5%bb%a3%e5%91%8a-easy-phone-2/</link>
		<pubDate>Sun, 20 Apr 2008 23:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/04/20/e5bba3e5918a-Easy-Phone-2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
今天來點特別的，替朋友打個廣告: <a href="http://software.felinsoft.com/">Easy Phone 2</a>
</p>
<p>
&nbsp;
</p>
<p>
用過 Smart Phone / PocketPC Phone 都知道，上百個聯絡人要靠幾個按鍵就找的到還真不簡單。雖然 Microsoft 很貼心的讓你很快的就跳到各字母開頭的聯絡人 (一直按住上下鍵不放)，不過對於中文的使用者來說，這功能真是一點用都沒有...
</p>
<p>
<img src="http://www.felinsoft.com/MemberData/5/1028/Product/EasyPhone2Beta.gif" alt="" width="240" height="320" /> 
</p>
<p>
排序對中文來說也是沒什麼用，一般軟體就是用 unicode 排序 (懶人 programmer 都是這樣用，哈哈) ... 有誰知道張三會排前面，還是李四會排前面? 咳咳... 而 Easy Phone 就是解決這種問題的 PocketPC Phone 工具，照姓氏等規則排序，而排序是照筆劃這類比較容易理解的方式，單鍵就選的到。
</p>
<p>
<a href="http://software.felinsoft.com/">網站上有試用版</a>，如果你剛好用 PocketPC Phone，又覺的聯絡人很難選，就抓來試用看看吧.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2008-04-20 23:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-20 23:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bb%a3%e5%91%8a-easy-phone-2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>分家了!</title>
		<link>http://columns.chicken-house.net/2008/02/29/%e5%88%86%e5%ae%b6%e4%ba%86/</link>
		<pubDate>Fri, 29 Feb 2008 03:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/29/e58886e5aeb6e4ba86!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
因為種種原因，我的部落格被逐出家門了... 以後我的部落格會換到新的網址，若有訂閱的也請一起改一下訂閱網址。
</p>
<p>
目前 *暫時* 只是網址換掉而以，實際網站的目錄，檔案，資料庫，通通都還是同一個，不過既然分家了就是代表以後會真正的切開，跟原本的網站完全獨立，所以現在只是過渡期...
</p>
<p>
未來我想把這裡變的像 XX 專欄這樣，漸漸的從講些五四三的型態換成有主題的專欄，所以網址就取了 columns.chicken-house.net .. 未來請大家改用這個網址繼續看我的五四三吧 [:D]
</p>
<p>
新網址: <a href="/blogs/">http://<strong><font color="#ff0000">columns</font></strong>.chicken-house.net/blogs/</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2008-02-29 03:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-29 03:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%ae%b6%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>289</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-01 01:21:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-01 01:21:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[什麼是被逐出家門啊? 我是怕你未來會太紅,光芒太閃耀,所以才不要跟你的放在一起...:P
人怕出名豬怕肥,我已經當豬很久了,哈....
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>290</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-04 01:37:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-04 01:37:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[話說~紅透透的精英份子獨立門戶，
那個外面的版面上可以安排一下每一篇show一下發文時間日期嗎:D

ps.嗯~改成年年行大運真聰明!可以不用顧慮期限地用下去了~哈哈~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>291</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-05 20:00:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-05 20:00:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[發文日期? 這個樣版剛好就漏掉... [:S]
我來改看看

--
哈哈, 家裡大人的命令, 說要改成 "年年行大運" .. 當然要奉命行事]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>晶片卡讀卡機</title>
		<link>http://columns.chicken-house.net/2005/03/06/%e6%99%b6%e7%89%87%e5%8d%a1%e8%ae%80%e5%8d%a1%e6%a9%9f/</link>
		<pubDate>Sun, 06 Mar 2005 02:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/06/e699b6e78987e58da1e8ae80e58da1e6a99f.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/smartcardreader.jpg" alt="" width="240" height="180" />
</p>
<p>
(圖是直接從 yahoo bid 貼過來的, 懶的重新照一次了 <img src="/Emoticons/shades_smile.gif" alt="" width="28" height="30" />)
</p>
<p>
本來轉帳我都直接去ATM轉, 後來試用網路銀行後, 越用越火 <img src="/Emoticons/angry_smile.gif" alt="" width="28" height="30" />, 我用的是中ㄨ信託... 真是昏了, 登入要身份證字號, 自己取一個代號, 登入密碼, SSL 密碼... 每個資訊都要八位以上, 英數交錯, 不能跟個人資訊任一欄位相同, SSL 密碼還要用 mouse 點一個隨機排列的數字鍵盤...
</p>
<p>
雖然一切都是為了安全啦, 不過我這年紀實再是記不得這麼多密碼代號... 真的要用的話, 只能把密碼貼在 monitor 旁邊...
</p>
<p>
剛好在奇摩拍賣看到這款讀卡機, 就標了下來... 至少換了 IC 晶片卡就不用再受這堆密碼的折磨, 除了領錢以外, 其它 ATM 能做的都可以在網頁上做掉... 東西不錯又便宜, 就找了同事一起買來攤運費, 哈哈, 攤下來兩百七一台...
</p>
<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/simedit.jpg" alt="" width="800" height="600" />
</p>
<p>
這台另一個附帶的功能, 就是可以讀手機的 SIM 卡, 讀卡機附的卡片就是讓你裝 sim card 用的... 算是不錯的附加功能啦, 偶爾拿來改一改手機通訓錄也是蠻好用的..
</p>
<p>
不過現在是萬事俱備, 只欠東風... 我的提款卡還沒去換成晶片卡, 嘖...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2005-03-06 02:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 02:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%99%b6%e7%89%87%e5%8d%a1%e8%ae%80%e5%8d%a1%e6%a9%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-06 09:06:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-06 09:06:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[唉呀~沒找我… :~~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>585</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-06 14:03:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-06 14:03:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[本來是要找你團購的啦 :D
<br />不過東西小, 運費也不貴, 太多也沒比較便宜 (七盒內運費69), 就直接同事湊一湊就有了.. :D
<br />
<br />這個人專門在賣讀卡機, 看看你們公司有沒要一起買.. 晚上下標轉帳, 隔天就送到公司了..
<br />
<br /><a target="_new" href="http://tw.user.bid.yahoo.com/tw/user/rexy909">http://tw.user.bid.yahoo.com/tw/user/rexy909</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新 17&quot; LCD monitor</title>
		<link>http://columns.chicken-house.net/2005/03/06/%e6%96%b0-17-lcd-monitor/</link>
		<pubDate>Sun, 06 Mar 2005 02:05:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/06/e696b0-17-LCD-monitor.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/monitor.jpg" alt="" width="400" height="300" />
</p>
<p>
過完年, 終於去買了台笑想很久的 LCD monitor 來用... 平常用 notebook, LCD 小的可憐, 才會想買個 17&rdquo;LCD 來用用, 用雙螢幕看起來是挺爽的, 桌面空間馬上大了一倍多... window 往旁邊一拉, 就跑到另一個營幕去了 <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />
</p>
<p>
以後要寫 code, 寫文件, 看文章就方便多了, 轉成直的看起來真過癮啊.. <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />
</p>
<p>
也許有人會對這個牌子反感, 就別教訓我了... 只因為這台的規格跟價錢我最滿意而以.. <img src="/Emoticons/dog.gif" alt="" width="28" height="30" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2005-03-06 02:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 02:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0-17-lcd-monitor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>586</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-06 09:03:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-06 09:03:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看樣子好像是 三星 的，我最討厭用這個牌子的東西了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>587</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-06 13:59:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-06 13:59:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳, 看來照片還是太大張了..
<br />已經很多個人跟我講不喜歡這個牌子 :S]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>USB BlueTooth Dongle...</title>
		<link>http://columns.chicken-house.net/2005/02/21/usb-bluetooth-dongle/</link>
		<pubDate>Mon, 21 Feb 2005 02:22:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/21/USB-BlueTooth-Dongle.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
昨天去光華晃了晃, 買了支想了很久的藍芽接收器. 之前會想很久是因為在猶豫該買那一個, 是要挑便宜的 USB (但是要拔來拔去很麻煩, 千元以內), 還是買 PCMCIA, 有天線伸出來的這片 (約一千六), 或是大手筆, 買 IBM 內接的藍芽子卡 (兩千七)...
</p>
<p>
最後總是敵不過便宜的誘惑, 買了支 NTD 750 的便宜 USB ... 雖然事後才知道有 399 一支的... <img src="/Emoticons/angry_smile.gif" alt="" width="28" height="30" />, 搞了半天終於可以用 BT 跟 PDA 同步了, 果然用起來爽多了.. <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />
</p>
<p>
到底碰到啥鳥事? 因為手賤, 就裝了再移掉再裝, 重複了幾次, COM port 就變成 COM25, 結果 ActiveSync 跟本不能選到 COM25.. <img src="/Emoticons/angry_smile.gif" alt="" width="28" height="30" />, 搞了半天終於弄回 COM3 才解決...
</p>
<p>
果然電腦的東西做的再簡單都會讓人搞的很頭大... 難怪總是有人覺的有進入障礙...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date><![CDATA[2005-02-21 02:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-21 02:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[usb-bluetooth-dongle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Community Server</title>
		<link>http://columns.chicken-house.net/2005/02/12/community-server/</link>
		<pubDate>Sat, 12 Feb 2005 03:59:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/02/12/Community-Server.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
現在用的這套 blog, 就是 .Text 架的, 不過不會有更新版了... 因為作者跑去跟另外兩套軟體 ( ASPNET Forum, nGallery ) 的作者合作, 開了家公司, 直接把這三套軟體併成一套 <a href="http://www.communityserver.org/">community server</a>...
</p>
<p>
community server 現在已經到了 RC2 版了, 看來相當不錯, 我抓測試版回來試用了一下... 放在<a href="http://demo.chicken-house.net/cs/">這裡</a>, 到時再來升級現在的 blog 跟 forum 吧, 我那個未完成的討論區也可以退休了 <img src="/Emoticons/shades_smile.gif" alt="" width="28" height="30" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2005-02-12 03:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-02-12 03:59:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[community-server]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>古董 12X CDRW 終於壽終正寢...</title>
		<link>http://columns.chicken-house.net/2005/01/25/%e5%8f%a4%e8%91%a3-12x-cdrw-%e7%b5%82%e6%96%bc%e5%a3%bd%e7%b5%82%e6%ad%a3%e5%af%a2/</link>
		<pubDate>Tue, 25 Jan 2005 00:43:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/25/e58fa4e891a3-12X-CDRW-e7b582e696bce5a3bde7b582e6ada3e5afa2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
自從開始用 notebook 之後, 就很少再添購電腦的配備了... 反正 notebook 也沒什麼配備好加的, 所以現在用的電腦都是古董配備...
</p>
<p>
不過這批設備大概都開始討錢了, 用了好幾年的 12x CDRW ( 哈哈, 某年 Honga 帶回台灣燒, 燒完懶的丟回美國就送我 ), 昨天用 RW 試燒&ldquo;霍爾的移動城堡&rdquo;之後就再起不能... 咳...
</p>
<p>
枉費這台 Liteon-1210B 還是當代的名機, 還是逃不過雷射頭老化的命運.. <img src="/Emoticons/cry_smile.gif" alt="" width="28" height="30" />
</p>
<p>
題外話, 另一台 DVD-RW, 之前手賤, 抓破解的 firmware, 把它從 4x 升級成 8x, 但是很多新的加強片子相容性的升級 firmware 就不能用了, 連想換回原本的 4x 也換不回來.. <img src="/Emoticons/cry_smile.gif" alt="" width="28" height="30" />
</p>
<p>
好在 Honga 提供爛招一枚, 哇哈哈, 現在又恢復原本的 4x DVDRW 了 <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />, 反正我的 notebook 也不能穩定的用 8x 來燒...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2005-01-25 00:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-25 00:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%a4%e8%91%a3-12x-cdrw-%e7%b5%82%e6%96%bc%e5%a3%bd%e7%b5%82%e6%ad%a3%e5%af%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-02-17 03:35:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-02-17 03:35:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[爛招一"枚"...不知道是我國文比較差..還是..我的腦袋退化了...
<br />
<br />爛招一枚..爛招一枚..爛招一枚..爛招一枚..爛招一枚.
<br />
<br />總共有幾枚欄招?
<br />]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>592</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-02-17 19:55:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-02-17 19:55:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你回的 comment 裡總共有七枚爛招...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>.TEXT 的編輯介面補強 (自己爽一下)..</title>
		<link>http://columns.chicken-house.net/2005/01/09/text-%e7%9a%84%e7%b7%a8%e8%bc%af%e4%bb%8b%e9%9d%a2%e8%a3%9c%e5%bc%b7-%e8%87%aa%e5%b7%b1%e7%88%bd%e4%b8%80%e4%b8%8b/</link>
		<pubDate>Sun, 09 Jan 2005 12:37:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/09/TEXT-e79a84e7b7a8e8bcafe4bb8be99da2e8a39ce5bcb7-(e887aae5b7b1e788bde4b880e4b88b).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<a href="http://scottwater.com/blog">.TEXT</a> 就是現在在用的 BLOG 系統, 相當簡單好用, 不過它內建的 editor (就是<a href="/post/FreeTextBox-30-Released-!.aspx">前幾篇</a>介紹的 FreeTextBox, 只不過內建的是 v1.6) 雖然可以像word一樣的方式來編HTML, 不過就是少了插入圖片跟表情符號的功能... 
</p>
<p>
我平常都是自己切到HTML source mode自己加tag, 不過實在是麻煩了點, 昨天就花了點時間自己改一下 code.. 現在多加了一排工具列可以用了 <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />!! 底下是改好後的使用畫面, 留個紀念自己爽一下 <img src="/Emoticons/shades_smile.gif" alt="" width="28" height="30" /> 
</p>
<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/dottext_editor.jpg" alt="" width="627" height="184" /> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date><![CDATA[2005-01-09 12:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-09 12:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[text-%e7%9a%84%e7%b7%a8%e8%bc%af%e4%bb%8b%e9%9d%a2%e8%a3%9c%e5%bc%b7-%e8%87%aa%e5%b7%b1%e7%88%bd%e4%b8%80%e4%b8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>596</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-13 06:39:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-13 06:39:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看不慣，用不慣時，可以動手改的感覺真好~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>597</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-13 22:26:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-13 22:26:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是啊 :D
<br />真有成就感..
<br />
<br />這個 blog 也是用 .text, 改的很不錯呢.. 還有專門貼 source code 的編輯器, 貼上去的 source code 會加上 syntax hightlight
<br />URL: <a target="_new" href="http://www.techblog.idv.tw/blog/">http://www.techblog.idv.tw/blog/</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>垃圾資訊...</title>
		<link>http://columns.chicken-house.net/2005/01/08/%e5%9e%83%e5%9c%be%e8%b3%87%e8%a8%8a/</link>
		<pubDate>Sat, 08 Jan 2005 17:31:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/01/08/e59e83e59cbee8b387e8a88a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
沒想到垃圾資訊已經氾濫成這樣了... 不只垃圾郵件, 連 BLOG 的回應都有... <img src="/Emoticons/angry_smile.gif" alt="" width="28" height="30" />
</p>
<p>
剛剛才刪掉一封廣告的回應, 內容就如同一般的垃圾信一樣... 看來我的 blog 已經被外面的 search engine 撈到了, 然後也被加到名單裡賣掉了 <img src="/Emoticons/cry_smile.gif" alt="" width="28" height="30" />
</p>
<p>
真是防不勝防, 要來開始研究該怎樣防堵這種 spam comment?了, 嘖嘖...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2005-01-08 17:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-01-08 17:31:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9e%83%e5%9c%be%e8%b3%87%e8%a8%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>598</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://michadel.dyndns.org/netblog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-08 21:15:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-08 21:15:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[將每一頁最下面的圖片連結拿掉就好囉]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>鐵弗龍膠帶</title>
		<link>http://columns.chicken-house.net/2004/12/31/%e9%90%b5%e5%bc%97%e9%be%8d%e8%86%a0%e5%b8%b6/</link>
		<pubDate>Fri, 31 Dec 2004 23:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/31/e990b5e5bc97e9be8de886a0e5b8b6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>這個禮拜跟了某 BBS 的團購 --- 鐵弗龍膠帶, 哈哈, 還真是不錯用呢 (Y)</p>
<p>鐵弗龍, 就是不沾鍋的那層材料, 特性就是耐熱, 磨擦係數低, 摸起來滑滑的, 做成膠帶能幹嘛? 就是拿來貼滑鼠的墊子... :D</p>
<p>果然貼起來, 滑鼠就像腳底抹了油一樣, 用起來真順手啊, 哈哈... 附上抹油前跟抹油後的照片:</p><img title="使用前" src="/wp-content/be-files/mouse-1.jpg" /> <img title="使用後" src="/wp-content/be-files/mouse-2.jpg" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2004-12-31 23:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-31 23:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%90%b5%e5%bc%97%e9%be%8d%e8%86%a0%e5%b8%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>599</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-03 03:32:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-03 03:32:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘩 這類玩意ㄦ哪能買得到??
<br />之前看生活魔法家有個號稱世界第二滑的東西：氟素樹脂，滑度僅次於冰，利用這個東西搭配木板，可讓櫃子內的東西好拿好放且充份利用空間，但不知道這些東西哪有賣啊～哈哈～]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>600</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-03 16:22:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-03 16:22:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, BBS 團購的, 只知道有好心人士去工廠訂的, 寬度 13mm, 厚度 0.18mm, 一捲 10m, 聽說市價要三四百吧, 我也不清楚 (H)
<br />
<br />前輩有興趣的話, 還有團購再通知妳 :D, 或是到鳥窩BBS的 FleaMarket 版..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>601</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-01-06 12:57:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-01-06 12:57:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[對了~
<br />我突然想到之前我曾貼過滑鼠底的一物是...
<br />3M的那種半透明膠帶
<br />(就是撕起來不會傷害或留殘餘黏渣的那種，完稿帶嗎 忘記了...)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>3D Studio 作品: 跳動的檯燈</title>
		<link>http://columns.chicken-house.net/2004/12/26/3d-studio-%e4%bd%9c%e5%93%81-%e8%b7%b3%e5%8b%95%e7%9a%84%e6%aa%af%e7%87%88/</link>
		<pubDate>Sun, 26 Dec 2004 04:11:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/26/3D-Studio-e4bd9ce59381-e8b7b3e58b95e79a84e6aaafe78788.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img src="/wp-content/be-files/artefact/LIGHT-160x120.gif" alt="" width="160" height="120" /><br />
這是大四去修資科系的&ldquo;電腦圖學&rdquo;的作業... 
</p>
<p>
<a href="/wp-content/be-files/articles/195.aspx">全文網址</a> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2004-12-26 04:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-26 04:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3d-studio-%e4%bd%9c%e5%93%81-%e8%b7%b3%e5%8b%95%e7%9a%84%e6%aa%af%e7%87%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Paint.NET 2.0</title>
		<link>http://columns.chicken-house.net/2004/12/22/paint-net-2-0/</link>
		<pubDate>Wed, 22 Dec 2004 02:13:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/22/PaintNET-20.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[Paint.NET 是個用 C# 開發的 Open Source 影像處理軟體, 他並不是取代 Photoshop 的東西, 不過對於用 C# 的開發人員來說, 它是個很好的參考工具, 有完整的 source code 可以參考, 真是不錯... (Y) 
<p>
雖然是OpenSource, 但是基本的功能一個都不缺, 幾種影像處理軟體的工具都有, 像套索, 噴槍, 滴管... etc, 也支援一些濾鏡, 甚至連 layer 跟 command history 也有了!! 另一點我覺的很棒的是, 這些符動的工具視窗, 在沒取得 focus 時, 會切換到半透明的模式, 哇哈哈... 真是不錯, 平常用這些軟體最頭痛的就是照片放大一點, 就被那些工具視窗遮住...
</p>
<p>
整套軟體的架構相當不錯, 設計也支援了特效外掛, 想要研究這種 Plug-Ins 的功能該怎麼開發的人也可以試試看. 其實開發這種支援外掛的軟體, 能用 C# 或是 Java 寫是最快樂的了,? .NET 出來沒兩年就有很多 project 在進行中... 成長的速度還真快... :D
</p>
<p>
官方網頁: <a href="http://www.eecs.wsu.edu/paint.net/downloads.html">http://www.eecs.wsu.edu/paint.net/downloads.html</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2004-12-22 02:13:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-22 02:13:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paint-net-2-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>605</wp:comment_id>
			<wp:comment_author><![CDATA[kk]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-24 18:37:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-24 18:37:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這個跟photo impact 還有photo shop 有什麼不一樣啊?
<br />
<br />其實我的重點是, 我留言區的帳號不能用了...:D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>606</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-25 04:34:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-25 04:34:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒辦法聯絡BLOG主人耶
<br />"Your message could not be sent, most likely due to a problem with the mail server. "]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>607</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-25 04:42:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-25 04:42:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, mail service 被我關掉了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-25 04:59:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-25 04:59:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[豬頭王:
<br />
<br />嘖, 都一樣, 是影像處理軟體. 不過我會介紹的重點是他有 source code, 想學 .net 的人可以參考它的 code, 它也比內建的小畫家好用的多..
<br />
<br />妳是忘了密碼嘛? (H) 我剛試一下, 可以用啊]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>靠 CSS , 除掉討厭的廣告</title>
		<link>http://columns.chicken-house.net/2004/12/19/%e9%9d%a0-css-%e9%99%a4%e6%8e%89%e8%a8%8e%e5%8e%ad%e7%9a%84%e5%bb%a3%e5%91%8a/</link>
		<pubDate>Sun, 19 Dec 2004 00:47:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/19/css-overview.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
繼上次 CSS 可以放大縮小網頁的文章後, 這次再來一篇, 就是如何用一樣的方式去掉討人厭的廣告... 
</p>
<p>
我最討厭的廣告就是那種會上下跑的, 或是直接跳出來 (不是 popup window) 檔在網頁正中央的.. 碰到這種網頁, 也是可以用 CSS 來對付它啦! 
</p>
<p>
全文網址: <a href="/post/css-remove-ads.aspx">http://columns.chicken-house.net/post/css-remove-ads.aspx</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date><![CDATA[2004-12-19 00:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-19 00:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9d%a0-css-%e9%99%a4%e6%8e%89%e8%a8%8e%e5%8e%ad%e7%9a%84%e5%bb%a3%e5%91%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML/CSS]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>3D Studio 作品</title>
		<link>http://columns.chicken-house.net/2004/12/18/3d-studio-%e4%bd%9c%e5%93%81/</link>
		<pubDate>Sat, 18 Dec 2004 02:50:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/18/3D-Studio-e4bd9ce59381.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/artefact/light.jpg"><img src="/wp-content/be-files/artefact/light-icon.jpg" align="left" /></a> <img src="/wp-content/be-files/artefact/LIGHT-160x120.gif" align="left" />這是大四去修資科系的“電腦圖學”的作業... 期中的作業是左邊靜態的 3D 電腦, 期末的作業才是右邊的 3D 動畫.</p>
<p>當年我的電腦是 386DX-33 + 8mb RAM, 為了這個作業, 晚上電腦的娛樂功能完全沒了, 作這個作業, 改完檔案後, 只能看到那種一堆線條的預覽畫面. 要真的看到照片 (640x480), 得跑一整個晚上才跑的完... 動畫就更不用說了, 拜五下課給它開始跑, 拜日晚上回學校還沒跑完... 還真不能小看這短短四秒的動畫, 當時可是花了一個月換來的. 其實建立模型並不難, 只要基本的幾何圖型 and / or / xor 基本的運算就可以湊出來了. 真正難的是這裡面的動作要自然... 一來生動的動作不好調, 二來調好要看成果得等很久, 不然就只能看一堆線條的預覽, 一格一格的看... 一開始調的動作怎麼看都像生鏽的機器人, 從樓上跌下來... 後來是花了很多時間, 才把它的動作調的生動一點...</p>
<p>後來也另外做過幾段動畫, 但是這個是最滿意的作品... 現在只剩這個檔案有留下來了 :~</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2004-12-18 02:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-18 02:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3d-studio-%e4%bd%9c%e5%93%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>任意放大/縮小網頁的內容</title>
		<link>http://columns.chicken-house.net/2004/12/17/%e4%bb%bb%e6%84%8f%e6%94%be%e5%a4%a7%e7%b8%ae%e5%b0%8f%e7%b6%b2%e9%a0%81%e7%9a%84%e5%85%a7%e5%ae%b9/</link>
		<pubDate>Fri, 17 Dec 2004 01:09:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/17/zoom-overview.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[平時工作時, 常上 MSDN 查資料, 無意間剛好看到一個很有趣的 CSS Attribute: ZOOM.. 一般網頁都只能針對字體, 或是圖片等分別指定大小, 但是當你想把某個區塊整個一起放大或縮小, 就不是那麼簡單. 這個 CSS 正好可以解決這個問題. 只要在任何 html element 加上這個 style 就可以達成目的........ 
<p>
全文: <a href="/wp-content/be-files/articles/188.aspx">http://community.chicken-house.net/wp-content/be-files/articles/188.aspx</a> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date><![CDATA[2004-12-17 01:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-17 01:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%bb%e6%84%8f%e6%94%be%e5%a4%a7%e7%b8%ae%e5%b0%8f%e7%b6%b2%e9%a0%81%e7%9a%84%e5%85%a7%e5%ae%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML/CSS]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>FreeTextBox 3.0 Released !</title>
		<link>http://columns.chicken-house.net/2004/12/16/freetextbox-3-0-released/</link>
		<pubDate>Thu, 16 Dec 2004 03:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/16/FreeTextBox-30-Released-!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>挺好用的 ASP.NET Web Control, 可以直接在網頁上放一個 HTML Editor, 相當好用 :D</p>
<p>這個 BLOG (.TEXT) 就是採用 FreeTextBox?來編輯 POST / ARTICLE. 不過是較舊的 1.6 版. 3.0 版已經有非常多的改進, 甚至還有內建 Image Gallery, 方便在編輯時能挑選 server 現有的圖檔...</p>
<p>官方網站在<a href="http://www.freetextbox.com">這裡</a>... 有 online demo</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2004-12-16 03:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-16 03:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[freetextbox-3-0-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Battlestar Galactica</title>
		<link>http://columns.chicken-house.net/2004/12/15/battlestar-galactica/</link>
		<pubDate>Wed, 15 Dec 2004 23:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/15/Battlestar-Galactica.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<IMG src="/wp-content/be-files/battlestar_galactica.jpg"><BR>
<P>年紀夠大的人, 大概都記得小時後中視播過的影集 &#8220;星際大爭霸&#8221; 吧... 就是眼睛有個像霹靂車的燈一樣閃來閃去的機器人 -- Cylon (賽隆人), 而人類這邊有個愛耍帥的 Starbuck (史巴克)...</P>
<P>前幾天無意在 google 找到, 沒想到<A href="http://www.scifi.com/battlestar/classic/">官方網站</A>還在, 咳咳..&nbsp; 用驢子去找, 竟然還有重新發行的 DVD 跟 XBOX 的 game :D~~~</P>
<P>真是太令人懷念了, 可以自己開裡面的戰機... :D~~~</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date><![CDATA[2004-12-15 23:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-15 23:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[battlestar-galactica]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>626</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-30 18:45:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-30 18:45:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your URL (optional) 
 
Comments (required)* 

BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>627</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-30 18:46:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-30 18:46:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[away, please be patient as it may take a few minutes to publish - or longer if the blogger is moderating comments. 

BotCheck(請計算答案: 3 + 2 =  5)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>628</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-30 18:46:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-30 18:46:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[3123123

BotCheck(請輸入 "叭樂雞萬歲" : 叭樂雞萬歲)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>三個好用的 ASP.NET HttpHandler</title>
		<link>http://columns.chicken-house.net/2004/12/15/%e4%b8%89%e5%80%8b%e5%a5%bd%e7%94%a8%e7%9a%84-asp-net-httphandler/</link>
		<pubDate>Wed, 15 Dec 2004 02:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/15/e4b889e5808be5a5bde794a8e79a84-ASPNET-HttpHandler.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>花了幾個晚上寫了這幾個 ASP.NET HttpHandler, 貼上來現一下... 寫這些東西的起因都只有一個字, 就是“懶”!! 科技果然都是來自惰性...</p>  <p>1. ChickenHouse.Web.HttpHandlers.MediaServiceHttpHandler</p>  <blockquote style="margin-right: 0px" dir="ltr">   <p>video / audio file 直接放網頁, 很吃頻寬, 尤其我這種用ADSL架的小站沒有頻寬可以揮豁, 只好把這種大檔案放在 windows media service. 不過老實說挺麻煩的, 我自己都嫌麻煩了, 還要教會老婆大人什麼時後要用 http://www.chicken-house.net, 什麼時後要用 mms://www.chicken-house.net, ... !@#%@^&amp;</p>    <p>這個 http handler 就可以把這惱人的動作解決掉了, 放在 web 下的檔案會自動轉到 media service, 只要你的 media player 是 7.0 以上, 一切就全自動了!</p> </blockquote>  <p>2. ChickenHouse.Web.HttpHandlers.RssMonitorHttpHandler</p>  <blockquote style="margin-right: 0px" dir="ltr">   <p>又是個懶人作品... 常常想看某個目錄多了什麼檔案, 雖然可以用時間排序, 但是卻忘了上次是什麼時後看的...</p>    <p>這時 RSS 訂閱就派上用場了. 這個 HttpHandler 會把某個目錄下的所有檔案都當成網頁, 新增檔案就像 blog 新貼文章一樣, 你的 Rss Reader 就會通知你了.</p>    <p>不過這個能幹嘛? 對付全都是 *.html 做出來的靜態網頁就超好用,?什麼事都不用作就可以有 “RSS 訂閱“ 的功能了. 拿<a class="class" title="" href="http://www.chicken-house.net/files/baby.rss" target="">小皮的網頁[RSS]</a>示範...</p> </blockquote>  <p>3. ChickenHouse.Web.HttpHandlers.ZipVirtualFolderHttpHandler</p>  <blockquote style="margin-right: 0px" dir="ltr">   <p>這也是對付靜態網頁用的. 老婆大人常喜歡用 ACDSee 產生相簿網頁, 我則喜歡用 <a href="http://www.microsoft.com/windowsxp/downloads/powertoys/xppowertoys.mspx">Windows XP : Slide Show Generator Power Toys</a> 產生相簿網頁. 但是除了掛上網站外, 常會另外再放個 zip 檔方便大家下載. 一樣的東西放兩份以後維護就很頭痛...</p>    <p>沒錯, 又是因為懶, 所以就寫了這個 Http Handler. 就像 WinXP 檔案總管一樣, 會把 ZIP 檔當成一個目錄, 這個 HttpHandler 也會把 *.zip 當成網頁的一個目錄, 以後像上面講的情況, 就只要擺個 zip 檔到網站上就可以了</p>    <p>例如:     <br /><a href="http://www.chicken-house.net/files/chicken/slide.zip?download">http://www.chicken-house.net/files/chicken/slide.zip?download</a> 就是普通的 zip 檔下載,      <br /><a href="http://www.chicken-house.net/files/chicken/slide.zip">http://www.chicken-house.net/files/chicken/slide.zip</a> 就可以看 zip 檔的內容      <br /><a href="http://www.chicken-house.net/files/chicken/slide.zip/default.htm">http://www.chicken-house.net/files/chicken/slide.zip/default.htm</a> 就可以直接連到 zip檔內的檔案了</p>    <p>以後網站只要在裡面放一堆 zip 檔就好了, 不然每次一堆檔案整理起來也是很累人...</p> </blockquote>  <p dir="ltr">純現寶用, 哈哈... 崇拜的話就留個回應就好 (H)</p>  <p>&#160;</p>  <p>Sample Code 下載:    <br />    <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:7b01a124-a134-42e8-8f65-25f49fc1cf21" class="wlWriterEditableSmartContent"><p><div><a href="http://columns.chicken-house.net/wp-content/be-files/ChickenHouse.Web.zip" target="_self">ChickenHouse.Web.zip</a></div></p></div></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2004-12-15 02:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-15 02:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%89%e5%80%8b%e5%a5%bd%e7%94%a8%e7%9a%84-asp-net-httphandler]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[scott]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hhcy168@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-23 17:34:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-23 17:34:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很方便的解法，讚！
最近也在研究HttpHandler，
可以分享一下這三個例子的SOURCE嗎，
如果可以，麻煩寄到我的信箱，謝謝]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>630</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-24 18:32:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-24 18:32:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好啊，沒問題，謝謝捧場 :D
晚點回去找一下這些 source code...

不過為了避免大家都貼 &quot;我也要...&quot; 這些 comments, 我會提供下載 link, 到時再請自行下載, thx.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>631</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-27 00:23:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-27 00:23:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[加了下載連結了 :D
需要的話請自取]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>632</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shift2epaper@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-05-26 10:43:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-05-26 10:43:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝大大 無私貢獻]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>633</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shift2epaper@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-05-26 12:22:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-05-26 12:22:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Andrew
我剛載了ChickenHouse.Web.HttpHandlers.MediaServiceHttpHandler正在研究中，
不知道您方不方便，再貼上Web.config的參數設定

感謝您喔
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>大工程: 60GB 的 DV avi 壓成 WMV</title>
		<link>http://columns.chicken-house.net/2004/12/15/%e5%a4%a7%e5%b7%a5%e7%a8%8b-60gb-%e7%9a%84-dv-avi-%e5%a3%93%e6%88%90-wmv/</link>
		<pubDate>Wed, 15 Dec 2004 01:20:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/15/e5a4a7e5b7a5e7a88b-60GB-e79a84-DV-avi-e5a393e68890-WMV.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我一向不大喜歡馬上把檔案燒成 CD, 一來要用的時後還要翻 CD 很麻煩, 二來很多東西燒起來後就再也不會去動他了, 顯的“備份”的動作有點多餘...</p>
<p>因此我的策略都是 “堆在硬碟裡”, 然後再久久一次大掃除, 用不到就砍了, 還有本事留在我硬碟裡的檔案, 再燒起來備份.</p>
<p>因為這個壞習慣, 所以我的個人用 server (對啦, 就是你們現在連的這台 server), 等級不怎麼樣, 唯獨硬碟特別大... 自從小皮出生後, 陸陸續續也拍了不少照片跟 DV. DV 處理起來真是麻煩, 抓下來的檔案很大 (一小時的帶子抓出來大概要近 10GB), 壓縮速度又慢... 一不注意, 硬碟就積了 60GB 的檔案...</p>
<p>“再不處理不行了!!”</p>
<p>過去兩個禮拜, 我的 server 就一直忙著在處理這堆檔案, 晚上下班回家, 我的 X31 也湊一腳幫忙壓檔案, 每壓完一個檔, 就要用滑鼠去點一下, 做久了也是很麻煩.. 沒兩天就受不了了. 果然懶惰才是科技進步的原動力, 花了點時間研究 <a href="http://www.microsoft.com/windows/windowsmedia/tw/default.aspx">Microsoft Media Encoder 9.0</a>, 寫了簡單的批次檔, 只要檔案 copy 到固定的目錄, 批次檔就會自動處理這堆巨大的 DV-AVI , 同樣的檔案會分別壓成五種不同用途的 wmv 檔:</p>
<ol>
<li>720x480, 2.1MBps, 保留最好的 DVD 畫質, 燒起來備份 
</li><li>360x240, 1.2Mbps, copy 到家裡的 XBOX, 放給媽媽看她的金孫 
</li><li>PocketPC 250kbps, 適合在 PDA 上看的版本 (給愛現的老爸帶出去炫耀) 
</li><li>SmartPhone 140kbps, 適合在手機上看的版本 (一樣, 炫耀用途) 
</li><li>MediaService 140kbps / 65kbps, 適合放在網站上看的版本 (給小皮的娘放網頁)</li></ol>
<p>真是太好用了, 弄好這自動化流程, 自己也挺得意的 (H)... 各位在我的 blog 左邊看到小皮的幾個 video 就是 (5) 的成果啦... 哈哈!</p>
<p>我想除了我以外, 沒有人會想這樣搞吧? 有需要我寫好的 batch file, 再留話跟我講吧? :D</p>
<p></p><strong><font face="Arial" color="#ffa500">PS. 有沒有人知道什麼工具可以用命令列的方式, 把 *.avi 轉成 *.mpg / *.mpg2 / *.avi (divx) 的? 找了半天都要用滑鼠點 :~~~~</font></strong> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2004-12-15 01:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-15 01:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%a7%e5%b7%a5%e7%a8%8b-60gb-%e7%9a%84-dv-avi-%e5%a3%93%e6%88%90-wmv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>ThinkPad? 聯想墊子? My god...</title>
		<link>http://columns.chicken-house.net/2004/12/14/thinkpad-%e8%81%af%e6%83%b3%e5%a2%8a%e5%ad%90-my-god/</link>
		<pubDate>Tue, 14 Dec 2004 01:31:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2004/12/14/ThinkPad-e881afe683b3e5a28ae5ad90-My-god.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>最近新聞報的挺兇, 什麼 IT 新聞網站都有這麼一則消息...</P>
<P>&#8220;IBM 要把 PC 部門賣給對岸的聯想電腦&#8221;...</P>
<P>My god, 我愛用的 ThinkPad ... 看來 X31 是末代小黑了, 下一台 notebook 還要不要繼續用 ThinkPad 就要好好考慮一下, 該不會在對岸會出現這樣的對話...</P>
<P>&#8220;老闆, 你們聯想墊子筆記本多少錢?&#8221;咳咳...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2004-12-14 01:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2004-12-14 01:31:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thinkpad-%e8%81%af%e6%83%b3%e5%a2%8a%e5%ad%90-my-god]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>634</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-14 02:51:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-14 02:51:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實也別想太多...
<br>
<br>搞不好 聯想-想墊子電腦也是台灣光寶的大陸場子代工的..
<br>
<br>這年頭..誰知道呢..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>635</wp:comment_id>
			<wp:comment_author><![CDATA[sophie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-21 22:50:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-21 22:50:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我只知道, 這個合作規定PC部門的員工不能內轉到IBM其他部門, 也不能resign之後再rejoin IBM. 他們在觀望明年的package怎麼談...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>636</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2004-12-22 00:30:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2004-12-22 00:30:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[啥米.. 一輩子就不得再跨入 IBM ? 真嚴格的規定... :S]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon PowerShot S2 IS</title>
		<link>http://columns.chicken-house.net/2005/08/13/canon-powershot-s2-is/</link>
		<pubDate>Sat, 13 Aug 2005 00:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/08/13/Canon-PowerShot-S2-IS.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>最近看上這台, 在考慮要不要換掉用了快四年的 G2... 不過定位不一樣的相機, 還真是令人很難決擇 <img src="/Emoticons/emotion-7.gif" /></p>
		<p>S2 IS 跟 G2 比, 優點有:</p>
		<p>1. DIGIC II 晶片, 拍 video 的效果很好, 開機對焦都很快...  <img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><br />2. 有防手震...  <img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><br />3. 用三號電池, 省錢   <img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><br />4. 用 SD 卡, 現在的 SD 卡比 CF 卡划算了 <img src="/Emoticons/emotion-9.gif" />      <img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /><br />5. 12X, 雖然用不大到... 當做附贈的好處吧...   <img src="/Emoticons/emotion-21.gif" /><br />6. 套筒跟 G2 一樣 58mm, 一些雞絲可以共用... <img src="/Emoticons/emotion-21.gif" /></p>
		<p>缺點:</p>
		<p>1. 沒有熱靴...   <img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><br />2. CCD 太小, 1/2.5" only ... G 系列 1/1.8" <img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><br />3. 沒 raw format   <img src="/Emoticons/emotion-45.gif" /><img src="/Emoticons/emotion-45.gif" /><br />4. 沒搖控器   <img src="/Emoticons/emotion-45.gif" /><br />5. 光圈 2.8 only, 防手振可以補一點點 <img src="/Emoticons/emotion-45.gif" /></p>
		<p>其實會考慮最主要的理由就是 DIGIC II ... 見試到我姊的 IXUS40, 用這顆 chip, 可以處理 640x480 30fps video, 效過不比 DV 差, 常拍小皮的 video 短片真是方便啊... DV 轉帶子真麻煩...</p>
		<p>這台可以邊拍 video 邊照相片, 拍 video 時也可以變焦, 拍的 video 是立體聲... 這幾點都對我蠻有用的, 不過不能接閃光燈真是大敗筆 <img src="/Emoticons/emotion-9.gif" />, 相機能不能外接閃燈真的差很多, 現在在家拍小皮都用跳燈, 閃燈隨便往牆上打, 照出來就又亮又自然, 皮膚也白, 連房間看起來都變的很乾淨.. 哈哈 <img src="/Emoticons/emotion-11.gif" /></p>
		<p>其實缺點就差那個熱靴了, 不然早就敗下去... 不知道 G7 在 video 部份的功能會不會加強, 不然 G2 那個 video 連用都不會想用...</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2005-08-13 00:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-13 00:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-powershot-s2-is]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>551</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-13 07:57:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-13 07:57:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[買 350D + IXUS 50 (Sanyo C4/C5)
如果真的要拍好看的照片或者是短片的話

把拔拿相機，媽咪拍短片…

Canon 的短片，太吃空間了，而且是 Motion JPEG 

買 350D 就有 熱靴、RAW、搖控器

多好~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>552</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-13 21:32:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-13 21:32:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 又來勸敗 300D / 350D 了 (H)

我的程度只要差不多就夠了, 懶才是主因啊... 所以 video / photo 一體, 開機快對焦快, video 不用再 capture & 轉檔...

Motion JPEG 的確很肥, 我姊那台 256mb SD 拍 10 min 就滿了, 不過畫質很不錯, 反正我有現成的 batch file 自動轉成 wmv ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>553</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-14 08:05:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-14 08:05:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[P.S: 真是豬頭事又一樁,我還事前叫小皮爸把電池沖好電耶...結果竟然忘了,証明我有多麼需要輕巧易帶出的口袋機...嗯,生日剛過沒收到禮物,眼看農曆的情人節也快到了,咳咳.....

=========================================
我只是幫忙貼 ...貼...貼...

哈!! 哈!! 哈!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>554</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-14 12:30:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-14 12:30:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我比較喜歡照片的感覺，但是小朋友出生後，老婆希望為她留住一些短片，所以我正在物色"隨身機"

http://ytun2.sakura.ne.jp/S2IS_vs_Z750.shtml

casio Z750 有跟 S2 IS 比較哦~

如果使用motion JPEG 我看…我得準備 4G 的 SD 或者是

隨身硬碟，不然 1G 只能拍 10分鐘

先一起買 Z750 拍短片吧…

(怎麼都是來勸敗的?)快閃~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>555</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-14 15:33:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-14 15:33:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 你也要買台拍 video 的嗎?

因為老婆想換一台, 我也想換一台, 所以盡量挑一台就能滿足所有需求的... Motion JPEG 檔案真的是肥了點, 不過還好啦, 反正這一年多來也很少在外面拍超過 10 minutes 的...

我目前只有兩個選擇, 要嘛 S2 IS, 不然等 G 系列推出 DIGIC II 的機種...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>556</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-18 01:57:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-18 01:57:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[明明就很想買而且一定會買
還在那邊囉唆半天
真機車啊]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>557</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-19 04:27:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-19 04:27:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[會不會買還不一定哩!
因為我前幾天就跟G說不用買了,想想後就覺得其實可以不用花那個錢再去買一台...
所以,敗家是需要一時的衝動的,當時沒買,就可能拖下去了,哈! 不過我有跟G說,到時若有買的話請不要說是買給老婆用的,因為我已經說不用買了...
要敗就要敗的有骨氣一點喔,G大爺...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>558</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-19 10:36:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-19 10:36:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ason 別激動, 我機車又沒碾到你的香港腳... (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>559</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-22 04:42:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-22 04:42:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇哈哈哈哈! 討論了那麼多,結果還是敗了口袋機...:D~~
果然,帶個敗家媽出去就會有衝動的敗家行為發生...:P

買東西絕不龜毛機車的敗家媽...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>愛鑽小路的 PaPaGo ...</title>
		<link>http://columns.chicken-house.net/2005/07/04/%e6%84%9b%e9%91%bd%e5%b0%8f%e8%b7%af%e7%9a%84-papago/</link>
		<pubDate>Mon, 04 Jul 2005 03:01:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/04/e6849be991bde5b08fe8b7afe79a84-PaPaGo-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>話說有 GPS + PDA, 最壞的情況下是走錯路還能知道你現在在地圖的那個位置... 不過帶路功能也不能太遜啦... 用了幾次 PPG, 嗯... 挑出來的路都有點怪怪的, 哈哈... 要嘛都走大馬路, 不然都鑽小巷子.. 從我家到 sea 中和家, 也可以繞到木柵上北二高, 再從中和交流道下來... 路程共計 26km... <img src="/Emoticons/emotion-21.gif" />  為了逼它走中正橋, 還花了點功夫才搞定... 嘖嘖...</p>
		<p>不過上路前稍花點時間調整一下規劃的路徑, 倒還不錯用啦, 唯一一個小缺憾就是不能自己指定要經過的地點, 只能等它算好路線再選擇那條路要避開, 有點小麻煩就是了...</p>
		<p>不過 PC 版的倒沒這個問題, 路線算的又快又好, 也可以指定必經地點... 不過我總不能抱著 X31 上路啊 <img src="/Emoticons/emotion-9.gif" />, 只好等看看新出的 PPG 9.0 有沒有改善了... <img src="/Emoticons/emotion-11.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2005-07-04 03:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-04 03:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%84%9b%e9%91%bd%e5%b0%8f%e8%b7%af%e7%9a%84-papago]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>562</wp:comment_id>
			<wp:comment_author><![CDATA[Ｅmily]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-01-20 21:45:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-01-20 21:45:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問皮爸~你的PDA是那個機款?
我最近很想敗....給個推薦吧!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>563</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-01-22 03:31:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-01-22 03:31:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我的是 HP iPAQ 4150, 沒什麼特色的古董 PDA :~

其實只要挑台有 BT 的 PDA 就夠了, 其它就都看的順不順眼而以..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ChickenHouse.Web.CommunityServerExtension 新功能 之 2</title>
		<link>http://columns.chicken-house.net/2005/07/02/chickenhouse-web-communityserverextension-%e6%96%b0%e5%8a%9f%e8%83%bd-%e4%b9%8b-2/</link>
		<pubDate>Sat, 02 Jul 2005 22:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/07/02/ChickenHouseWebCommunityServerExtension-e696b0e58a9fe883bd-e4b98b-2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
				<img height="216" alt="cs_gallery_feedback_list.jpg" hspace="0" src="/wp-content/be-files/cs_gallery_feedback_list.jpg" width="302" border="1" />
		</p>
		<p>因應太座強列要求, 只好熬夜再補一個新功能: 就是在 Blog 旁邊顯示最新的十筆回應. 因為 CS 本身沒這功能, 因此每次要看有沒有新留言都頗辛苦, 主人可以去管理介面看, 一般 user 就只能一篇一篇找... 昨晚試裝了 CS 1.1, 也沒有這功能, 所以只好自己拼.... 咳咳...</p>
		<p>不知是要誇 CS 讚還是罵它脫褲子放屁... CS 為了支援換樣版的功能, 簡單的輸出幾個字, 要追到真正的 code 還真是不簡單... 七八個 project, 十來個 .dll , 還有好幾套樣版的檔案, 嘖... 搞了幾天才摸出來要改那裡...</p>
		<p>總之我們家的 community server 又比其它的多了點特色了, 暗爽一下 <img src="/Emoticons/emotion-11.gif" /></p>
		<p> </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2005-07-02 22:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-02 22:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chickenhouse-web-communityserverextension-%e6%96%b0%e5%8a%9f%e8%83%bd-%e4%b9%8b-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>564</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-05 12:55:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-05 12:55:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大師就是大師，厲害!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ChickenHouse.Web.CommunityServiceExtension 新增功能</title>
		<link>http://columns.chicken-house.net/2005/06/30/chickenhouse-web-communityserviceextension-%e6%96%b0%e5%a2%9e%e5%8a%9f%e8%83%bd/</link>
		<pubDate>Thu, 30 Jun 2005 01:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/30/ChickenHouseWebCommunityServiceExtension-e696b0e5a29ee58a9fe883bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>
				<img height="177" alt="cs_gallery_download.jpg" src="/wp-content/be-files/cs_gallery_download.jpg" width="321" border="1" />
		</p>
		<p>會用這個 community server 主要的原因之一, 就是它有很方便的 Photo Gallery, 但是常常照片放好給別人看了之後, 都會要求怎麼一次抓完所有的圖檔... 只好自己另外壓個 zip 給大家 download, 多來幾次就開始煩了, 哈哈.. <img src="/Emoticons/emotion-11.gif" /></p>
		<p>花了點時間加上新功能, 每個相簿右上角 (如上圖) 都會多一個新的 link, 點下去之後可以直接下載裡面包含整個相簿所有檔案的 zip file, 很方便的功能吧? 別太崇拜我 <img src="/Emoticons/emotion-10.gif" /></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2005-06-30 01:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-30 01:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chickenhouse-web-communityserviceextension-%e6%96%b0%e5%a2%9e%e5%8a%9f%e8%83%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>IBM ThinkPad X111 ...</title>
		<link>http://columns.chicken-house.net/2005/06/28/ibm-thinkpad-x111/</link>
		<pubDate>Tue, 28 Jun 2005 22:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/28/IBM-ThinkPad-X111-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>果然敗家會傳染的, 我兩個姊姊看我 X31 用的很滿意的樣子, 一個要出國唸書, 一個 desktop pc 要換掉, 就都叫我幫他們買台 ThinkPad ... 雖然我對 X40 沒啥好感, 但是用起來也不比 X31 差, 加上兩個姊姊相機都是 SD Card, 想想內建 SD 的應該比較合適... </p>
		<p>一口氣去光華抱了兩台 X40, 現在家裡已經有 X31 + X40 + X40 = X111 了... 哈哈... </p>
		<p>問到還算不錯的 $$, 兩台買起來九萬出頭... 雖然便宜, 但是買的過程也是有點 OOXX 的... 機器規格是:</p>
		<p>Pentium M LV 1.1 GHz<br />Onboard 256mb RAM + 512MB RAM<br />40GB 1.8" HDD<br />統強 Combo<br />IBM 小黑鼠</p>
		<p>用起來還真不錯, 害的我也想換了.. <img src="/Emoticons/emotion-11.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2005-06-28 22:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-28 22:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ibm-thinkpad-x111]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>終於買了 GPS</title>
		<link>http://columns.chicken-house.net/2005/06/28/%e7%b5%82%e6%96%bc%e8%b2%b7%e4%ba%86-gps/</link>
		<pubDate>Tue, 28 Jun 2005 22:32:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/28/e7b582e696bce8b2b7e4ba86-GPS.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>GPS + PDA + 導航軟體, 果然是路痴的救星啊啊啊... <img src="/Emoticons/emotion-21.gif" /></p>
		<p>因為有現成的內建藍芽PDA, 就去買了個便宜的藍芽GPS接收器... 真是路痴必備品, 就算導航路徑規劃再爛, AI 再笨, 至少都有辦法在地圖上把你現在的位置標出來, 光是這點對路痴就很有用了 <img src="/Emoticons/emotion-2.gif" />, 我老爸一向是不相信這些有的沒的, 不過買來了他也是用的很樂就是了... 只不過 PDA 操作不熟, 常搞不定 PaPaGo 怎麼用... <img src="/Emoticons/emotion-7.gif" /></p>
		<p>有了 GPS 就比較敢亂跑了, 至少迷路了還翻的到地圖... 哈哈...</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2005-06-28 22:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-28 22:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b5%82%e6%96%bc%e8%b2%b7%e4%ba%86-gps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>565</wp:comment_id>
			<wp:comment_author><![CDATA[ALEX]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-29 00:09:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-29 00:09:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最好是所有的路都有上線啦~
HAHA]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>566</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-29 03:07:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-29 03:07:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒魚蝦也好....
路沒標, 至少知道那個方向有路可以走, 不過我會去的地方大概都有畫進去吧? 哈哈..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>567</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-29 21:49:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-29 21:49:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[有可能繞路…
有可能忘記轉彎…(已偏離航道太遠，重新規劃…)
有可能叫你彎進單行道(一大堆機車瞪著你)


最近看到一對夫妻的對話：
夫：奇怪…明明要左轉，怎麼沒路轉
妻：看吧看吧…GPS也救不了你
夫：…

希望正面，樂觀一點看 GPS+PDA 帶給我們的便利，
少一點對親愛的人潑冷水!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>機器又要討錢了:~</title>
		<link>http://columns.chicken-house.net/2005/06/08/%e6%a9%9f%e5%99%a8%e5%8f%88%e8%a6%81%e8%a8%8e%e9%8c%a2%e4%ba%86/</link>
		<pubDate>Wed, 08 Jun 2005 03:46:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/08/e6a99fe599a8e58f88e8a681e8a88ee98ca2e4ba867e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>家裡的小 server (感謝斯董讚助<img src="/Emoticons/emotion-2.gif" />), 算算也滿七年了, 要邁入第八年... 其中有一顆 IBM Ultra Wide SCSI HDD 18GB, 用的好好的, 突然翁翁翁的變的很大聲... 不過用軟體去檢測裡頭的資料, 掃描硬碟, 什麼檢查都做過了, 就是沒問題...</p>
		<p>本來想放著不管, 但是聲音大到晚上在隔避房間睡覺, 都會覺的吵 <img src="/Emoticons/emotion-12.gif" />, 只好把資料搬出來, 硬碟下架...</p>
		<p>已經是這台 server 操掛的第三顆硬碟了, 哈老爹說的好, 古董機器最好不要隨便關機, 不然古董零件, 下次開機跑不跑的起來都不曉得, 咳...</p>
		<p>難道該是全面更新 server 的時後到了嗎? 哈哈... 我是笑想 Dual-Core 的 CPU 想很久了, 有看到不錯的選擇再下手吧</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2005-06-08 03:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-08 03:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a9%9f%e5%99%a8%e5%8f%88%e8%a6%81%e8%a8%8e%e9%8c%a2%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>568</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-12 12:05:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-12 12:05:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[東西壞掉很正常...

你也應該敗了...

敗吧 :>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>569</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-16 18:47:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-16 18:47:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是啊, 物色中, 不過一換就得 CPU RAM MB CASE HDD 整套換... :~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>570</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-10 04:27:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-10 04:27:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 你怎麼一年四季通通都在勸敗...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>571</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-24 12:59:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-24 12:59:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[跟你說..該買了..你就是不聽..

又被海扁一頓了吧..

敗吧!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>572</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-24 13:02:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-24 13:02:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[G..你也太厲害了...

兩年多以前的POST 你都可以回...

你會被海扁那是很正常的..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hash 的妙用</title>
		<link>http://columns.chicken-house.net/2005/06/08/hash-%e7%9a%84%e5%a6%99%e7%94%a8/</link>
		<pubDate>Wed, 08 Jun 2005 03:17:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/06/08/Hash-e79a84e5a699e794a8.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>最近替公司的系統開發了一些工具, 深深覺的有個良好的 Hash 演算法, 用處實在太多了 <img src="/Emoticons/emotion-21.gif" /><br />唯一的限制, 真的就只在於你的想像力而以...</p>
		<p>Hash algorithm (中譯: 雜湊演算法), 其實沒有什麼, 不過就是一個數學函數, Hash(X) = ......... 這樣而以. 不同的資料代進去計算, 可以得到不一樣的值. 這些值越亂越好, 越沒有規則越好, 輸出的值越難預測越好, 而且不能從輸出的值反推回原本輸入的資料.</p>
		<p>看來很複雜, 其實很簡單, 身份證字號最後一碼, 就是跟據前面的字母加上八個數字依某個原則算出來的, 勉強也可以當成一個簡單的 Hash function. 它能幹嘛? 透過最後一碼當檢查碼, 可以確認這個身份證字號是不是亂寫的.</p>
		<p>當然實際上應用的 hash algorithm 不像身份證號碼這麼簡單. 常用的就如 MD5 (Message Digest 5), SHA (Secure Hash Algorithm), SHA256, SHA512 ... etc. 這些演算法的輸入, 可以是一連串的 binary data, 像是一整個檔案. 而輸出的則是故定長度的 bytes, 能用的地方很多, 比如:</p>
		<ol>
				<li>儲存密碼的 Hash, 代替儲存明文的密碼 
</li>
				<li>檔案的 Hash 能夠快速的比對兩份檔案是否相同, 或是從一堆檔案中, 快速找出內容相同的檔案 
</li>
				<li>數位簽章, 確保資料沒有被修改過 
</li>
				<li>保護曝露在外的資訊不被竄改, 像 cookie 或是 URL 附加的 query string </li>
		</ol>
		<p>這些都是我實際上在公司開發的系統上應用的地方, 不過, 打到這裡, 發現想講的才講了 1/10 不到, 但是已經覺的手痠了, 哈哈... 就當在閒聊吧, 下回再說 <img src="/Emoticons/emotion-15.gif" /></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2005-06-08 03:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-08 03:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hash-%e7%9a%84%e5%a6%99%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>573</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-12 12:00:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-12 12:00:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[重點是 Hash 演算法..

好的 Hash 演算法.. 真的不多..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>574</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-16 18:57:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-16 18:57:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雖然 MD5 / SHA1 相繼傳出被破解, 不過, 用到現在, SHA256 除了算的慢一點之外, 其它都還算不錯啦 (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>575</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-17 14:17:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-17 14:17:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[上回去微軟的訓練會議...

基本上..他們都不用.net 內建的...

他們都用外面的..最新的好像是叫做Jundo ..之類的..

我是用blowfish ..還不錯...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>真可惡, 不想用 skype 了..... :@</title>
		<link>http://columns.chicken-house.net/2005/04/08/%e7%9c%9f%e5%8f%af%e6%83%a1-%e4%b8%8d%e6%83%b3%e7%94%a8-skype-%e4%ba%86/</link>
		<pubDate>Fri, 08 Apr 2005 01:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/04/08/e79c9fe58fafe683a12c-e4b88de683b3e794a8-skype-e4ba86-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>嘖....</p>
		<p>URL: <a href="http://www.skype.com/intl/">http://www.skype.com/intl/</a></p>
		<p>
				<img height="741" alt="skype-international.gif" src="/wp-content/be-files/skype-international.gif" width="993" border="0" />
		</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2005-04-08 01:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-08 01:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%9c%9f%e5%8f%af%e6%83%a1-%e4%b8%8d%e6%83%b3%e7%94%a8-skype-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>578</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-18 17:29:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-18 17:29:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈~
好加在
我從來沒用過啊~
但，直得抵制它..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>php python on .net</title>
		<link>http://columns.chicken-house.net/2005/04/08/php-python-on-net/</link>
		<pubDate>Fri, 08 Apr 2005 00:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/04/08/php-python-on-net.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>.NET CLR 上能支援的 language 越來越多了... 真是個好消息... <img src="/Emoticons/emotion-2.gif" /></p>
		<p>Python: Microsoft IronPython 0.7.1 [<a class="" title="" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=CF952FDB-2344-4B1E-B169-3F5DFBCA2984&amp;displaylang=en" target="">URL</a>]</p>
		<p>PHP: Phalanger, .NET 平台上的 PHP compiler [<a class="" title="" href="http://www.php-compiler.net/" target="">URL</a>]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2005-04-08 00:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-08 00:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-python-on-net]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>X31 換新殼</title>
		<link>http://columns.chicken-house.net/2005/04/05/x31-%e6%8f%9b%e6%96%b0%e6%ae%bc/</link>
		<pubDate>Tue, 05 Apr 2005 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/04/05/X31-e68f9be696b0e6aebc.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>ThinkPad 自從移到對岸生產後, 很多人都抱怨品質不如以往... 過去一台要 100K 以上的機器, 現在掉到一半不到的價位, 品質比以前差是可預期的...</p>
		<p>不過, 我這台 X31 竟然在 keyboard 下方, 就是平常打字手掌靠著的地方, 邊邊竟然裂開了 <img src="/Emoticons/emotion-9.gif" />... 翻一翻討論區, 這邊似乎是設計上的問題, 許多 X31 的使用者都碰到一樣的問題... 就趁著假日拿去送修, 不錯嘛, 多花錢買保固還是有點用, 兩個小時後就換好新的外殼了 <img src="/Emoticons/emotion-21.gif" /></p>
		<p>換掉這片外殼, 剛好也一起解決我多年的苦惱... notebook 剛買來不都會貼一堆貼紙嘛? VGA chip 貼一張, Intel Centrio 貼一張, Microsoft Windows XP 貼一張, 有的 notebook 廠商自己再貼一大張... 用久了貼紙開始撥落, 殘膠留在上面用起來實在很不舒服... 剛好換了這片 palmset, 上面乾乾淨淨什麼貼紙都沒有 <img src="/Emoticons/emotion-11.gif" /></p>
		<p>希望到三年保固期滿後不要再裂開了 <img src="/Emoticons/emotion-7.gif" />, 不然就要破費了...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2005-04-05 15:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-05 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x31-%e6%8f%9b%e6%96%b0%e6%ae%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
	</item>
	<item>
		<title>community server 改造工程</title>
		<link>http://columns.chicken-house.net/2005/04/04/community-server-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b/</link>
		<pubDate>Mon, 04 Apr 2005 02:01:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/04/04/community-server-e694b9e980a0e5b7a5e7a88b.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>自從裝了 community server 1.0 rtm 之後, 就一直對它東補補西改改的, 到現在家裡太座對它不滿的地方終於修的差不多了, 我自己補的新功能也補的差不多了, 做個總結, 總共改的地方有:</p>
		<ol>
				<li>TextEditorWrapper 改進:<br />CS 1.0 用的是 FTB 3.0, 有很多進階的編輯功能都沒被打開, 改寫了自己的 TextEditorProvider, 掛上 CS 後就通通啟用了 <img src="/Emoticons/emotion-2.gif" /></li>
				<li>啟用 FTB 3.0 的 "Insert Image From Gallery" 功能:<br />FTB 3.0 內建了 image gallery, 可以讓使用者上傳要插入的圖檔, 就像 office 裡的多媒體藝廊一樣, 花了點時間也把這地方補好了, 張貼 blog 及 forum 裡的 post 都可以啟用這功能</li>
				<li>FTB 3.0 多了一排 emotion icons 的工具列, 點下去就能插入表情符號</li>
				<li>CS 相簿批次上傳:<br />CS並沒有提供批次上傳照片的功能, 我自己寫了 web service 掛上去, 再照這個 api 寫了 command line tools, 可以把 local 的相片批次縮小後再上傳, 同時會自動建立相關的 group / gallery</li>
				<li>改掉一些我不喜歡的 page:<br />首頁: 原本那堆字都被我改掉了, 改成 gallery / blogs / forums 的 asp.net control<br />Blog 首頁: 也被我改掉了, 改成 blog 列表<br />Blog Homepage: 也改掉了, 只會秀 title, 內文要點進去才有 ( 應太座需求, 不得不改...<img src="/Emoticons/emotion-15.gif" /> )</li>
		</ol>
		<p>目前就大概做到這樣. 用起來真有成就感啊 <img src="/Emoticons/emotion-11.gif" />!! 接下來的動作就是要把舊的 ChickenHouse Forum 裡的資料轉到 CS 來...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2005-04-04 02:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-04 02:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[community-server-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
	</item>
	<item>
		<title>X31 + DVI output</title>
		<link>http://columns.chicken-house.net/2005/04/04/x31-dvi-output/</link>
		<pubDate>Mon, 04 Apr 2005 01:54:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/04/04/X31-2b-DVI-output.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
總算達成目標了!! <img src="/Emoticons/emotion-11.gif" alt="" width="28" height="30" />
</p>
<p>
買了張便宜的 PCI VGA 卡 ( nVidia FX5200, 128mb ram ), 我的 X31 總算能用 DVI + LCD monitor 了 <img src="/Emoticons/emotion-21.gif" alt="" width="28" height="30" />
</p>
<p>
不過 dock 上唯一的一個&nbsp;PCI slot 拿來裝 vga card, 原本的 1394 卡只好拔掉, 看來得再去物色一張便宜的 PCMCIA 1394 card 來用, 真是大工程...
</p>
<p>
換了 VGA 卡, 當然是滿意啦 <img src="/Emoticons/emotion-2.gif" alt="" width="28" height="30" />, 效果比內建的強太多, 爽度也不一樣, 不過也有一些缺點就是了... 最大的缺點就是換上去的 VGA 不能停用, 也就是我一定得關機才能拔走 notebook. 以前慣用的休眠模式等於失效了. 這是最大的不便... 不能休眠拔了就走, 實在是有點傷腦筋 <img src="/Emoticons/emotion-7.gif" alt="" width="28" height="30" />
</p>
<p>
第二個小缺點就是, IBM 附的 Presentation Director , 它的切換 display mode 也只支援內建的 ATI chip... 沒辦法把外接的 VGA 也納入它的 theme... 變成回家後得自己按右鍵, 啟用 DVI output... <img src="/Emoticons/emotion-9.gif" alt="" width="28" height="30" />
</p>
<p>
不過比起其它的 notebook user 來說, 已經太好命了, 其它 notebook user 連接 pci 的機會都沒有... <img src="/Emoticons/emotion-11.gif" alt="" width="28" height="30" />, 該滿足了... 該滿足了...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2005-04-04 01:54:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-04 01:54:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x31-dvi-output]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>優秀青年, 329 不放假</title>
		<link>http://columns.chicken-house.net/2005/03/29/%e5%84%aa%e7%a7%80%e9%9d%92%e5%b9%b4-329-%e4%b8%8d%e6%94%be%e5%81%87/</link>
		<pubDate>Tue, 29 Mar 2005 03:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/29/e584aae7a780e99d92e5b9b42c-329-e4b88de694bee58187.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>咳咳, 優秀的青年 329 是會努力工作的...</p>
		<p>當然, 這句話是寫給那些有放假的人看的 <img src="/Emoticons/emotion-39.gif" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2005-03-29 03:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-29 03:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%84%aa%e7%a7%80%e9%9d%92%e5%b9%b4-329-%e4%b8%8d%e6%94%be%e5%81%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>579</wp:comment_id>
			<wp:comment_author><![CDATA[去放牛的艾力克斯]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-31 02:48:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-31 02:48:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[辛苦啦，優秀青年.

你的老婆小孩會記得你的付出的.

HAHA...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Photo Gallery 啟用 !!</title>
		<link>http://columns.chicken-house.net/2005/03/27/photo-gallery-%e5%95%9f%e7%94%a8/</link>
		<pubDate>Sun, 27 Mar 2005 05:10:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/27/Photo-Gallery-e5959fe794a8-!!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>終於搞定了 <img src="/Emoticons/emotion-2.gif" /></p>
		<p>其實原本的 Gallery 就不錯用了, 該有的都有. 只不過像我已經有一堆照片, 要一張一張上傳, 那我寧可不要放.. <img src="/Emoticons/emotion-11.gif" /><br />這幾天就是想自己弄個簡單的批次上傳照片的工具, 現在應該都 OK 了</p>
		<p>細節就另外再說了, 先看 <a class="" title="" href="/photos" target="">相片</a> 再說</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2005-03-27 05:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-27 05:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[photo-gallery-%e5%95%9f%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>580</wp:comment_id>
			<wp:comment_author><![CDATA[mingche]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-28 12:44:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-28 12:44:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[:)
看到去大安公園玩的照片…有沒有覺得好像 G2 要拍小孩，速度跟不上的感覺呢?
勸敗一下…現在 300D 很便宜了，要不要進場呢?!
(y)

小熊子]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>581</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-04 02:15:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-04 02:15:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 我的程度還不需要 DSLR ....
G2 這種程度的相機我就沒辦法駕馭了 :~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>修改 Community Server 的 blog editor ( Part II )</title>
		<link>http://columns.chicken-house.net/2005/03/20/%e4%bf%ae%e6%94%b9-community-server-%e7%9a%84-blog-editor-part-ii/</link>
		<pubDate>Sun, 20 Mar 2005 06:48:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/20/e4bfaee694b9-Community-Server-e79a84-blog-editor-(-Part-II-).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>
				<img style="BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; BORDER-LEFT: #000000 1px solid; BORDER-BOTTOM: #000000 1px solid; FONT-FAMILY: ; textIdent: " src="/wp-content/be-files/cs_editor_part2.jpg" />
		</p>
		<p>花了點時間研究 CommunityServer 1.0 的 source code, 發現三位作者的架構設計的相當漂亮, 上一篇提到的 TextEditor Wrapper, 就是用 Provider Pattern 的樣式設計出來的. 整套系統很多地方都用到 Provider Pattern, 包括安全機制 ( membership, roles, auth... etc) 也都採用一樣的作法, 未來可以很簡單的寫另一套 Provider, 然後只要改一下 configuration, 馬上就整個切換到新的 Provider.</p>
		<p>這次我先拿 TextEditorWrapper 下手, 繼承下來後把我想要的東西都加上去, 然後在 communityserver.config 裡頭把我自己寫的 Wrapper 掛上去, 哇哈哈, 我上一篇說沒辦法改的東西都改好了 <img src="/Emoticons/emotion-11.gif" />, 不但把表情符號都加到 Toolbar 裡, 同時原有 FreeTextBox 的一些進階功能也打開了. 雖然會用到的還是那幾個, 不過用起來爽度就是不一樣 <img src="/Emoticons/emotion-2.gif" /></p>
		<p>下次再來改別的地方試試看..<br /></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2005-03-20 06:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 06:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bf%ae%e6%94%b9-community-server-%e7%9a%84-blog-editor-part-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>582</wp:comment_id>
			<wp:comment_author><![CDATA[mingche]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://小熊子/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-22 21:55:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-22 21:55:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["一點"時間，真的是大師級，看一下就知道 cs 在變什麼花樣，好厲害~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>修改 Community Server 的 blog editor</title>
		<link>http://columns.chicken-house.net/2005/03/19/%e4%bf%ae%e6%94%b9-community-server-%e7%9a%84-blog-editor/</link>
		<pubDate>Sat, 19 Mar 2005 14:20:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/19/e4bfaee694b9-Community-Server-e79a84-blog-editor.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="width: 553px; height: 174px" src="/wp-content/be-files/cs_editor.jpg" alt="" width="553" height="174" /> 
</p>
<p>
好像每次換一套 blog, 我的宿命就是先改 editor, 讓它可以貼圖及貼表情符號... 哈哈 <img src="/Emoticons/emotion-2.gif" alt="" width="28" height="30" />
</p>
<p>
CommunityServer 用的是之前我介紹過的 FreeTextBox, 還不難改, 但是討厭的是 CS 並不是直接內嵌 FTB, 而是<br />
中間多擋了一層 CS 自己的 Editor Wrapper... <img src="/Emoticons/emotion-8.gif" alt="" width="28" height="30" />, 然後 CS 提供的 source code 就是少了這一塊...
</p>
<p>
沒辦法, 所以改出來的東西就有點格格不入, 多的工具列得排在畫面上方, 沒辦法加到原本 FTB 自己的工具列.<br />
不然 FTB 其實還有很多好用的工具列可以打開... 真是可惜..
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date><![CDATA[2005-03-19 14:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-19 14:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bf%ae%e6%94%b9-community-server-%e7%9a%84-blog-editor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>.Text Upgrade</title>
		<link>http://columns.chicken-house.net/2005/03/18/text-upgrade/</link>
		<pubDate>Fri, 18 Mar 2005 13:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/18/Text-Upgrade.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
花了點時間, 把舊的 .Text Blog 0.95 升級到現在的 Community Server 1.0 RTM ...<br />
看來還不錯嘛, 變成 Blog + Forum + Gallery 三合一了 <img src="/Emoticons/emotion-2.gif" alt="" width="28" height="30" />
</p>
<p>
網址做了點調整:
</p>
<p>
我的: <a href="/blogs/chicken">http://community.chicken-house.net/blogs/chicken</a>
</p>
<p>
sea的: <a href="/blogs/sea">http://community.chicken-house.net/blogs/sea</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2005-03-18 13:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-18 13:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[text-upgrade]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>邪惡的 Google...</title>
		<link>http://columns.chicken-house.net/2005/03/08/%e9%82%aa%e6%83%a1%e7%9a%84-google/</link>
		<pubDate>Tue, 08 Mar 2005 19:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/08/e982aae683a1e79a84-Google.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>平常用 Google 用慣了, 沒發現它這麼邪惡... <img src="/Emoticons/shades_smile.gif" /></p>
<p>試試看在 Google 搜尋 “<a href="http://www.google.com.tw/search?hl=zh-TW&amp;q=%E5%90%83%E9%A9%9A&amp;btnG=Google+%E6%90%9C%E5%B0%8B&amp;meta=">吃驚</a>”, 看看 Google 給你的貼心建議...</p>
<p><font color="#cc0000">您是不是要查：</font><font color="#000000">......</font></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date><![CDATA[2005-03-08 19:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-08 19:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%82%aa%e6%83%a1%e7%9a%84-google]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>X31 + 雙螢幕的挑戰 @_@</title>
		<link>http://columns.chicken-house.net/2005/03/06/x31-%e9%9b%99%e8%9e%a2%e5%b9%95%e7%9a%84%e6%8c%91%e6%88%b0-_/</link>
		<pubDate>Sun, 06 Mar 2005 14:48:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/03/06/X31-2b-e99b99e89ea2e5b995e79a84e68c91e688b0-_.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/dualview.jpg" alt="" width="404" height="416" />
</p>
<p>
買了 ThinkPad X31 後, 我在公司就一直很奢侈的用兩個螢幕來工作 (真過癮啊), 本來家裡也有古董 19&rdquo;CRT 可以這樣用的, 但是 CRT 終究逃不過老化的命運, 就這樣掛掉了 :~ 所以才動了買台 17&rdquo;LCD 的念頭..
</p>
<p>
其實我的要求很簡單, 反正接 notebook 用的, 不玩 game, 反應時間? 隨便啦.. 解析度? 也隨便啦, 1280x1024 就夠了. DVI ? 暫時也沒機會用... 比較重要的反倒是能不能轉 90 度, 上下的視角 (轉成直的用, 上下視角就很重要) 還有外觀 and 價格之類的...
</p>
<p>
我的 X31 有搭配 Dock 一起用, 上面有 DVI 的接頭, 無奈 X31 本身不支援 DVI output, 這個接頭也只能當成裝飾品... 看來暫時無緣用 DVI 了. 所以解析度... 別想太多, 1280x1024 大概是極限了...
</p>
<p>
最後挑出來的機種是 Sxxxxxx 720T, 除了滿足上面要求之外, 就是它附了 Pivot Pro 這套軟體... 是一套跟你用啥顯示卡無關, 可以把你畫面轉成 90 度的工具, 為何買 monitor 還要看軟體? 看下去就知道... 有附這套軟體是讓我挑這營幕主要原因之一...
</p>
<p>
之前為了這個功能吃盡了苦頭, 首先 IBM?內建的 vga driver 並沒有把輸出畫面轉 90 度的功能, 好不容易查到這個 hack:
</p>
<blockquote dir="ltr" style="margin-right: 0px">
	<p>
	修改機碼: [HKEY_LOCAL_MACHINE\SOFTWARE\ATI Technologies\Desktop\{xxx-xxx-xxx-xxx-xxx}]<br />
	{}只有一個所以不用擔心找錯，<br />
	修改其中的 Rotation<br />
	將原本 00 00 00 00<br />
	修改成 01 00 00 00
	</p>
</blockquote>
<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/ati-rotation.jpg" alt="" width="484" height="533" /><img style="border: #000000 1px solid" src="/wp-content/be-files/ati-menu.jpg" alt="" width="444" height="196" />
</p>
<p>
真是神奇, 顯示卡的設定裡就多了 &ldquo;旋轉&rdquo;的功能了, ATI 的 TaskIcon 也多了快速選單可以轉... <img src="/Emoticons/teeth_smile.gif" alt="" width="28" height="30" />
</p>
<p>
事情還沒結束, 外接 monitor 調成 1280x1024 才發現, ATI driver 在這個模式下 ( 1024x768x32bits + 1280x1024x16bits ) 不支援旋轉的功能.. <img src="/Emoticons/angry_smile.gif" alt="" width="28" height="30" />
</p>
<p>
<img style="border: #000000 1px solid" src="/wp-content/be-files/pivot.jpg" alt="" width="484" height="533" />
</p>
<p>
到最後還是得靠 Pivot Pro 來解決... 至於解析度為何要 1280x1024x<font color="#ff0000"><strong>16bits</strong></font> ? 沒想到 32MB Video RAM 竟然撐不住 1024x768x32bits + 1280x1024x32bits ... 只能把其中一個降到 Hicolor ... <img src="/Emoticons/cry_smile.gif" alt="" width="28" height="30" />?這個就沒解了, 只能以後有機會換機器的話再說...
</p>
<p>
為了讓 X31 搭配直立式 17&rdquo;LCD 雙螢幕工作, 沒想到困難這麼多... 幸好現在可以順利使用了, 總算沒有白買 monitor <img src="/Emoticons/shades_smile.gif" alt="" width="28" height="30" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2005-03-06 14:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 14:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x31-%e9%9b%99%e8%9e%a2%e5%b9%95%e7%9a%84%e6%8c%91%e6%88%b0-_]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>替 App_Code 目錄下的 code 寫單元測試 ?</title>
		<link>http://columns.chicken-house.net/2006/10/29/%e6%9b%bf-app_code-%e7%9b%ae%e9%8c%84%e4%b8%8b%e7%9a%84-code-%e5%af%ab%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6/</link>
		<pubDate>Sun, 29 Oct 2006 04:06:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/29/e69bbf-App_Code-e79baee98c84e4b88be79a84-code-e5afabe596aee58583e6b8ace8a9a6-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>有在寫 .net / java 的人, 大概都聽過這套很有名的 framework ... JUnit / NUnit. NUnit 是從 JUnit 那套移過來的, 用法觀念大同小異, 不過 porting 到 .net 卻是充份的應用到了 .net 提供的優點...</P>
<P>Microsoft 在 ASP.NET 2.0 提供了一個很有用的機制, 就是在你的 web application 下, ~/App_Code 目錄下的所有 code 都會被視為 source code, 在 ASP.NET Hosting 環境下會自動的編譯及執行. 意思就是 source code 丟進去這目錄就 ok 了, 不需要手動執行 compile 的動作.</P>
<P>這便民的機制卻引來不少困擾, 最大的問題就是某些一定要找的到 assembly (.dll) 檔案的情況下, 少掉 dll 就變成是件麻煩事. 我自己碰到的情況就是這樣, 我想要依賴 App_Code 帶來的好處, 但是我又希望能替 App_Code 下的程式碼寫單元測試案例, 問題來了:</P>
<OL>
<LI>App_Code 沒有對應的實體 *.dll<BR>雖然在 c:\Windows\Microsoft.NET\Framework\Temporary ASP.NET Files\ 下找的到, 但是目錄編碼過, 每次都有可能不一樣, 就算找的到也很不方便 
<LI>App_Code 下的程式大都仰賴 ASP.NET Hosting 提供的環境才能執行<BR>比如 HttpContext ... NUnit 提供的 Test Runner 會另外用獨立的 AppDomain 下執行, 結果是跟 Hosting 環境相關的 code 就沒機會測試了</LI></OL>
<P>試了半天, 宣告放棄, 實在是找不到好方法完成這任務...&nbsp;Microsoft 自己的 Unit Test Framework 出局, NUnit 也出局, 我甚至去挖了 NUnit 的 source code 來看, 看的臉都綠了...</P>
<P>NUnit Test Runner 做的非常嚴謹, core 裡就把每個 test 執行的環境準備好了獨立的 AppDomain, 從指定的 assembly 載入 class 後就會丟到獨立的 AppDomain 下開始跑 test ... 本來想改掉, trace 了一陣子後就放棄了, 我只是要跑單元測試啊, 我不想要有我自己改過的 NUnit Framework 啊啊啊啊...</P>
<P>後來 google 找了一堆相關網站, 總算找到救星了... <A href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=NUnitLite" target=_blank>NUnitLite</A>. 看了它的 <A href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=NUnitLite&amp;title=NUnitLite%20Vision" target=_blank>vision</A>, 不錯, 正好是我需要的...</P>
<P>&nbsp;</P>
<DIV class=code>
<H5>The NUnitLite Vision </H5><BR>NUnitLite is a lightweight test framework for .Net, implementing a limited subset of NUnit's features. It will use minimal resources and be suitable for execution on various classes of devices.<BR><FONT color=#ff0000><STRONG>NUnit itself is fairly full-featured and becomes more so with each release. As a result, it is difficult to use in certain projects, such as embedded applications and testing add-ins for other software products</STRONG>.</FONT><BR>NUnitLite is delivered as source code only, for inclusion directly in the users' test projects. It will not suffer the weight of NUnit features like extensibility, a gui, multi-threading, use of separate AppDomains, etc. <FONT color=#ff0000><STRONG>All these features have their place but they can generally be dispensed with in resource-limited situations or when the tests must run in some special environment</STRONG></FONT>.<BR>The NUnitLite codebase is completely separate from NUnit, although obviously inspired by it. Features added to one pof the two products will not automatically be incorporated in the other.<BR>NUnitLite will initially support Microsoft .Net, Mono and the .Net compact framework. </DIV>
<P>&nbsp;</P>
<P>我標紅字的地方, 就是我最需要 NUnitLite 的原因. ASP.NET web sites 正好運作方式就像 IIS 的 add-ins 一樣, 本來就很難獨立的運作, 本來就很難把要測試的部份抽出來. 就算硬抽出來, 能測的程式碼函蓋率一定也不高. 想想看, 你的 ASP.NET code, 都不用到 HttpContext (Application, Session, Request, Response... ) 的部份,&nbsp;佔了多少比重? 剩下的那部份完全不會出錯嘛?</P>
<P>總之現在已經找到滿意的 solution 了 [:D], 雖然 NUnitLite 只有 0.1.0.0 而以, 而且最新的 release 還不能 build...&nbsp; =.= 不過至少也能很有效的解決我問題了 [:D]</P>
<P>實際的用法, 下次再改貼另一篇...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2006-10-29 04:06:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-29 04:06:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9b%bf-app_code-%e7%9b%ae%e9%8c%84%e4%b8%8b%e7%9a%84-code-%e5%af%ab%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>ASP.NET Tips: Launch ASP.NET Web Sites without IIS / VS2005</title>
		<link>http://columns.chicken-house.net/2006/10/27/asp-net-tips-launch-asp-net-web-sites-without-iis-vs2005/</link>
		<pubDate>Fri, 27 Oct 2006 22:37:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/27/ASPNET-Tips-Launch-ASPNET-Web-Sites-without-IIS-VS2005.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>恩, 題目定的很偉大的樣子.. 其實只是個不起眼的小技巧而以.. 以往開發網站程式都要裝 IIS, 到 visual studio 2005 後就有內建的 Develop Web Server 可以用.</p> <p>不過還是很麻煩, 比方說我另外一篇文章講到 NUnitLite 在 Web Application 上的應用, 我有提供 sample code, 抓下來後, 你可能會把它放到 iis 做些設定跑看看, 或是直接用 visual studio 2005 開 web site 後按 f5 跑看看... 兩種方式看來都很麻煩, 尤其我用 notebook, 開個 visual studio 2005 要等半天, 不是很有吸引力的 code 我可能就懶的開了, 哈哈..</p> <p>因為懶, 所以才有這 tips .. 我自己寫了個簡單的 batch file, 然後把它的捷徑放到 c:\Documents and Settings\{your account name}\SendTo 下, 就大功告成了.</p> <p>以下是批次檔的內容:</p> <p>&nbsp;</p> <hr>  <p>set DEVWEB_PORT=%random%<br>start /min /low c:\Windows\Microsoft.NET\Framework\v2.0.50727\WebDev.WebServer.EXE /path:%1 /port:%DEVWEB_PORT%<br>start <a href="http://localhost:%DEVWEB_PORT%/">http://localhost:%DEVWEB_PORT%/</a><br>@set DEVWEB_PORT=  <hr>  <p>&nbsp;</p> <p>&nbsp;</p> <p>用的時後怎麼用? 以我前面舉的例子來說:</p> <ol> <li>把下載的檔案解開  <li>在檔案總管裡找到這個目錄  <li>目錄上按右鍵, 選 "傳送到" --&gt; "Dev ASP.NET Web" (就是剛才拉的捷逕)</li></ol> <p>好, 大功告成... 這個動做就會像 visual studio 2005 一樣, 幫你把 dev web server 開起來, 同時幫你把 browser 也開起來..</p> <p>enjoy it :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2006-10-27 22:37:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-27 22:37:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asp-net-tips-launch-asp-net-web-sites-without-iis-vs2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<wp:comment>
			<wp:comment_id>511</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-30 08:10:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-30 08:10:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(Y)

你的 NB 還是別換了，這樣子才能跟我們站在一線…

VS2005 真是大怪獸]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>512</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-30 19:37:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-30 19:37:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 只換了硬碟, nb 再多撐兩年吧 (H)

覺的有之前換 7k60 的感動耶 :~~~
以前是換了瞬間變飛快, 現在是換了 5k160, 手不再那麼燙, 速度一樣快, 容量突然多 100GB ... hoooo..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>泛型 + Singleton Patterns (II)</title>
		<link>http://columns.chicken-house.net/2006/10/27/%e6%b3%9b%e5%9e%8b-singleton-patterns-ii/</link>
		<pubDate>Fri, 27 Oct 2006 03:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/27/e6b39be59e8b-2b-Singleton-Patterns-(II).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>上篇因為貼 code , 放一起實在太長了, 只好分兩篇... 吊完胃口, 不囉唆了, 直接看我想出來的解法. 原則還是跟一般的函式庫一樣, 我希望先做出一個 base class, 把 singleton 的實作細節都處理掉, 函式庫的目的是讓使用你 lib 的人會很快樂才對, 因此 base class 可以辛苦點沒關係, 但是絕不能讓用你 code 的人得做苦工...</P>
<P>好了, 我實做出來的版本, code 如下:</P>
<DIV class=code>
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;7</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">GenericSingletonBase</SPAN>&lt;T&gt;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;8</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">where</SPAN> T: <SPAN style="COLOR: teal">GenericSingletonBase</SPAN>&lt;T&gt;,</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;9</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">new</SPAN>()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;10</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;11</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">readonly</SPAN> <SPAN style="COLOR: blue">static</SPAN> T Instance = <SPAN style="COLOR: blue">new</SPAN> T();</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;12</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P></DIV></DIV>
<P>沒看錯, 就是只有這幾行...&nbsp;接下來貼的 code 是, 如果我自己要實作 singleton pattern 的 class 時, 該如何來用這個 lib:</P>
<DIV class=code>
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;14</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;15</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; : <SPAN style="COLOR: teal">GenericSingletonBase</SPAN>&lt;<SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN>&gt;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;16</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;17</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> GenericSingletonImpl1()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;18</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; : <SPAN style="COLOR: blue">base</SPAN>()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;19</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;20</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Console</SPAN>.WriteLine(<SPAN style="COLOR: maroon">"GenericSingletonImpl1.ctor()"</SPAN>);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;21</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;22</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P></DIV></DIV>
<P>扣掉非必要的 constructor, 其實 class 繼承的部份寫完, 就沒有其它必要的 code 了, 很好, 又滿足了我一個要求... </P>
<P>再來就剩最後一個, 要用這個 class 的 code 會不會像上一篇的例子一樣醜? 每次都要自己 casting ? 再看一下 code ...</P>
<DIV class=code>
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;21</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN> o1 = <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN>.Instance;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;22</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN> o2 = <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN>.Instance;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;23</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN> o3 = <SPAN style="COLOR: teal">GenericSingletonImpl1</SPAN>.Instance;</P></DIV></DIV>
<P>很好, 收工... 哈哈... 謝謝大家的收看 [:D]</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2006-10-27 03:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-27 03:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b3%9b%e5%9e%8b-singleton-patterns-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<wp:comment>
			<wp:comment_id>513</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-10 01:43:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-10 01:43:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SINGLETON. 

我瞳孔放大.

只因他是競爭對手新引進的WHISKY BRAND.

(N) (N) (N)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>泛型 + Singleton Patterns</title>
		<link>http://columns.chicken-house.net/2006/10/26/%e6%b3%9b%e5%9e%8b-singleton-patterns/</link>
		<pubDate>Thu, 26 Oct 2006 03:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/26/e6b39be59e8b-2b-Singleton-Patterns.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>聽起來 singleton 跟 generic 好像搭不上邊, 不過搭配 .net framework 2.0 的 generic 機制, 倒是可以讓 singleton 好做很多... 我先簡單寫一下不使用 generic 時的做法...</P>
<P>只有單一 class 要實作 singleton 很簡單, 只要寫這樣的 code 就可以:</P>
<DIV class=code>
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;7</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">SampleSingletonClass</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;8</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;9</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">SampleSingletonClass</SPAN> _instance = <SPAN style="COLOR: blue">null</SPAN>;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;10</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">SampleSingletonClass</SPAN> Instance</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;11</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;12</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">get</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;13</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;14</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">if</SPAN> (_instance == <SPAN style="COLOR: blue">null</SPAN>)</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;15</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;16</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _instance = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">SampleSingletonClass</SPAN>();</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;17</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;18</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;19</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> _instance;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;20</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;21</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;22</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;23</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> SampleSingletonClass()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;24</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;25</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;26</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//&nbsp; ToDo: constructor code here.</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;27</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;28</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;29</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P></DIV></DIV>
<P>&nbsp;很標準的 code, 不是嗎? 不過問題來了... 當我有第二個 class 也要套用 singleton patterns 時, 幾乎一樣的 code 就得再抄一次, 只因為 public static XXX Instance; 這個 static property 的型別不一樣, 很討厭...</P>
<P>這堆看起來差不多的 code 想要省掉, 那只好動點手腳, 用繼承的技術解決, 不過問題又來了, 型別的宣告... 就像一堆 Collection 物件一樣, 傳回型別宣告為 object 就好了, 不過這樣的 code 用起來實在麻煩... 寫起來就像這樣:</P>
<DIV class=code><!--
{\rtf1\ansi\ansicpg\lang1024\noproof950\uc1 \deff0{\fonttbl{\f0\fnil\fcharset136\fprq1 Fixedsys;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0??;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;??\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;??\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;??\red192\green192\blue192;}??\fs24     \cf2 public\cf0  \cf2 class\cf0  \cf10 SingletonBase\par ??\cf0     \{\par ??        \cf2 public\cf0  \cf2 static\cf0  \cf10 SingletonBase\cf0  Instance(\cf10 Type\cf0  seed)\par ??        \{\par ??            \cf2 if\cf0  (_singleton_storage[seed] == \cf2 null\cf0 )\par ??            \{\par ??                _singleton_storage[seed] = \cf10 Activator\cf0 .CreateInstance(seed);\par ??            \}\par ??\par ??            \cf2 return\cf0  _singleton_storage[seed] \cf2 as\cf0  \cf10 SingletonBase\cf0 ;\par ??        \}\par ??\par ??        \cf2 private\cf0  \cf2 static\cf0  \cf10 Hashtable\cf0  _singleton_storage = \cf2 new\cf0  \cf10 Hashtable\cf0 ();\par ??    \}\par ??\par ??    \cf2 public\cf0  \cf2 class\cf0  \cf10 SingletonBaseImpl1\cf0  : \cf10 SingletonBase\par ??\cf0     \{\par ??        \cf2 public\cf0  SingletonBaseImpl1()\par ??            : \cf2 base\cf0 ()\par ??        \{\par ??            \cf10 Console\cf0 .WriteLine(\cf13 "SingletonBaseImpl1.ctor() called."\cf0 );\par ??        \}\par ??    \}\par ??\par ??    \cf2 public\cf0  \cf2 class\cf0  \cf10 SingletonBaseImpl2\cf0  : \cf10 SingletonBase\par ??\cf0     \{\par ??        \cf2 public\cf0  SingletonBaseImpl2()\par ??            : \cf2 base\cf0 ()\par ??        \{\par ??            \cf10 Console\cf0 .WriteLine(\cf13 "SingletonBaseImpl2.ctor() called."\cf0 );\par ??        \}\par ??    \}\par ??}
-->
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;8</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">SingletonBase</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;9</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;10</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">SingletonBase</SPAN> Instance(<SPAN style="COLOR: teal">Type</SPAN> seed)</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;11</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;12</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">if</SPAN> (_singleton_storage[seed] == <SPAN style="COLOR: blue">null</SPAN>)</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;13</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;14</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _singleton_storage[seed] = <SPAN style="COLOR: teal">Activator</SPAN>.CreateInstance(seed);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;15</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;16</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;17</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> _singleton_storage[seed] <SPAN style="COLOR: blue">as</SPAN> <SPAN style="COLOR: teal">SingletonBase</SPAN>;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;18</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;19</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;20</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">Hashtable</SPAN> _singleton_storage = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">Hashtable</SPAN>();</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;21</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;22</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;23</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">SingletonBaseImpl1</SPAN> : <SPAN style="COLOR: teal">SingletonBase</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;24</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;25</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> SingletonBaseImpl1()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;26</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; : <SPAN style="COLOR: blue">base</SPAN>()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;27</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;28</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Console</SPAN>.WriteLine(<SPAN style="COLOR: maroon">"SingletonBaseImpl1.ctor() called."</SPAN>);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;29</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;30</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;31</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;32</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">SingletonBaseImpl2</SPAN> : <SPAN style="COLOR: teal">SingletonBase</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;33</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;34</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> SingletonBaseImpl2()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;35</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; : <SPAN style="COLOR: blue">base</SPAN>()</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;36</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;37</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Console</SPAN>.WriteLine(<SPAN style="COLOR: maroon">"SingletonBaseImpl2.ctor() called."</SPAN>);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;38</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;39</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; }</P></DIV></DIV>
<P>看來不怎麼漂亮? 不過看在重複的 code 只寫一次就好的份上, 醜一點關起門來就看不到了. 不過這樣就沒事了? 不... 用起來更醜... [:'(]</P>
<DIV class=code>
<DIV style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;11</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl1</SPAN>));</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;12</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl1</SPAN>));</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;13</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl1</SPAN>));</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;14</SPAN>&nbsp;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;15</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl2</SPAN>));</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;16</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl2</SPAN>));</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;&nbsp;17</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">SingletonBase</SPAN>.Instance(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">SingletonBaseImpl2</SPAN>));</P></DIV></DIV>
<P>&nbsp;</P>
<P>實在無法接受這種 quality 的 "class library" ... 這種 code 看起來一點美感都沒有, 就像文筆不好的人在寫文章一樣...</P>
<P>處女座的個性, 實在不能容忍這種 code 出現在我的 project 裡... 碰到這種問題, 直覺的解決辦法就是:</P>
<OL>
<LI>透過 inherence, 把這些重複的 code 集中到 super class 一次解決 
<LI>同樣邏輯, 要套用到不同型別的應用, 就用 generic 的方式處理</LI></OL>
<P>不過要實作還沒那麼簡單, 試了半天, 總算找出一種看起來最得意的解法... &lt;待續&gt;</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2006-10-26 03:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-26 03:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b3%9b%e5%9e%8b-singleton-patterns]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
	</item>
	<item>
		<title>Microsoft Windows XP Media Center Edition 2005</title>
		<link>http://columns.chicken-house.net/2006/09/25/microsoft-windows-xp-media-center-edition-2005/</link>
		<pubDate>Mon, 25 Sep 2006 02:53:13 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/25/Microsoft-Windows-XP-Media-Center-Edition-2005.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最近裝了台 PC, 灌了 MCE 2005 ... 用起來只有一個字... 爽!!!</p> <p>最近台灣引進了 TiVo 這套系統,&nbsp;應該不少人聽過吧? PC + TV card +&nbsp;MCE2005 就是像 TiVo 這樣子的東西, 只不過都是 Microsoft 靠一堆軟體弄的... 不用額外買專用的機器, 也不用像 TiVo 要付月租費...</p> <p>用起來如何? 就是用電腦看電視而以, 我沒有接在電視上, 而是直接用 LCD monitor 看, 爽度差了點, 不過我也習慣了, 我們家都是用 monitor 在看電視... 哈哈. 用 MCE 跟一般 TV card 付的軟體看電視, 差別蠻大的... 我列幾個我覺的特別好用的地方:</p> <ol> <li>Microsoft 的軟體很多人覺的不怎麼樣, 不過再怎麼樣也比電視卡廠商寫的軟體強多了...  <li>Microsoft 提供線上的節目表更新, 因此選台爽多了, 第幾頻道名字是啥, 現在播的節目是啥, 還有節目簡介通通都有了...  <li>有節目表後, 預約錄影也簡單多了, 選節目按錄影就搞定, 連續劇也是選好後直接幫你把每一集都錄下來  <li>Time Shift, 節目看一半可以隨時按暫停 or 倒轉, 要上廁所倒飲料不用等到廣告...  <li>錄到硬碟, 要看要刪很方便  <li>電腦沒用會自動進入待機狀態, 預約錄影時間到時會自己醒來開始錄...</li></ol> <p>其它當然有一堆好處, 我就不提了, 反正我也用不到... 如果以後買了 LCD TV,&nbsp;我一定要擺台電腦在旁邊.. [:D]</p> <p>抓幾張畫面...</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="300" src="http://community.chicken-house.net/blogs/images/MicrosoftWindowsXPMediaCenterEdition2005_2895/021.png" width="400" border="0">&nbsp;</p> <p><a href="http://community.chicken-house.net/blogs/images/MicrosoftWindowsXPMediaCenterEdition2005_2895/031.png" atomicselection="true"></a>預約錄影清單... 當然節目的相關資訊都在裡面.</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="300" src="http://community.chicken-house.net/blogs/images/MicrosoftWindowsXPMediaCenterEdition2005_2895/05.png" width="400" border="0"></p></a> <p>節目表... 左下角會用PIP方式顯示目前正在播放的節目畫面..</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="300" src="http://community.chicken-house.net/blogs/images/MicrosoftWindowsXPMediaCenterEdition2005_2895/03.png" width="400" border="0">&nbsp;&nbsp; </p> <p>播放畫面, 我錄的 "超人特攻隊" ... 它的操作界面都是特別針對電視能看的清楚的畫面, 還有都是能搭配搖控器操作... keyboard / mouse 不是必需品.</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="300" src="http://community.chicken-house.net/blogs/images/MicrosoftWindowsXPMediaCenterEdition2005_2895/06.png" width="400" border="0"> </p> <p>選台時下方會出現的頻道 and 節目資訊..</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>Orz, 這篇是勸敗文嘛...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date><![CDATA[2006-09-25 02:53:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-25 02:53:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-windows-xp-media-center-edition-2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>518</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-09-25 03:27:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-09-25 03:27:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這真的挺不錯的...對我來講,想看的節目不是在餵小孩吃飯要不就是在顧小孩,跟本沒法專心看,錄起來就可以不必趕著看,還可以等小孩睡覺後慢慢看......比一般世面上的DVR要讚喔! 當然也比VOD(fideo on demand)強囉! 至少不用一台機殼,現成的電腦跟螢幕就可以看... 

咳,我沒有勸敗喔...因為,叫我用我也不會用,我只要動動嘴巴吩咐下去就可以了...:P


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon PowerShot G7 出現了...</title>
		<link>http://columns.chicken-house.net/2006/09/25/canon-powershot-g7-%e5%87%ba%e7%8f%be%e4%ba%86/</link>
		<pubDate>Mon, 25 Sep 2006 02:26:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/09/25/Canon-PowerShot-G7-e587bae78fbee4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>期待了半天的<a href="http://web.canon.jp/Imaging/psg7/index-e.html" target="_blank">G7</a>, 等著把用了多年的<a href="/post/Canon-PowerShot-S2-IS.aspx">G2換掉</a>的新機, 沒想到這麼令人失望...</p> <p>早就有要換掉G2的打算了, 不過一直找不到合適的機種, G2其實我用的很滿意, 只是有些地方還是可以改進改進...</p> <ol> <li>專用電池太麻煩 (換成3號電池最好)</li> <li>CF card可以換一換了, 現在的SD比CF划算 and 好用的多</li> <li>拍Video的功能我很需要, G2的video實在遜了點</li></ol> <p>不過想要保留的優點有:</p> <ol> <li>可以外加閃光燈, 這個太重要了... 室內跳燈一打, 隨便照都很漂亮 [H]</li> <li>翻轉LCD</li> <li>有搖控器</li> <li>大光圈 (F2.0)</li> <li>RAW support</li> <li>Canon 的操作方式用慣了, 比它牌的好用</li></ol> <p>之前認真的考慮過 Canon S3 IS, 不過缺了 (1), 其它都還可以接受, 就這樣龜下來了, 想說還是等 G 系列的出來再說吧, 沒想到這次 G7 改了一堆, 跟本不像 G 系列了... </p> <p>缺點 (1) 還在, (2) (3)&nbsp;沒了,&nbsp;而優點 (2) (3) (4) (5) 全沒了, 額外多的好處都是對我不大重要的...</p> <ol> <li>Face Detect, 會自動偵測畫面中的臉來測光對焦...</li> <li>1000 萬像素 (6mp 1/2.5", 10mp 1/1.8", 換算起來 CCD 的密度差不多, 同樣技術的話, 畫質半斤八兩吧... )</li> <li>Digic III chip</li></ol> <p>&nbsp;</p> <p>看了真是 Orz, 看來我要換的話, 目前最合適的機種還是 <a href="http://web.canon.jp/Imaging/pss3is/index-e.html" target="_blank">Canon PowerShot S3 IS</a> 吧... G7 就不考慮了, G8 ? 看看我撐不撐的到 G8 現身.. 哈哈.. 反正這篇沒啥目的, 純脆發發牢騷用的, 我都是隨時鎖定要買的東西, 不過啥時買? 就看啥時有敗家的衝動了...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2006-09-25 02:26:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-25 02:26:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-powershot-g7-%e5%87%ba%e7%8f%be%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Windows Live Writer...</title>
		<link>http://columns.chicken-house.net/2006/08/16/windows-live-writer/</link>
		<pubDate>Wed, 16 Aug 2006 12:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/08/16/Windows-Live-Writer.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>看起來真不錯啊, 感謝小熊子提供情報, 這樣用起來真舒服...</p> <p>像 e-mail 一樣, 打完之後直接傳到網站上... Web based HTML editor 做的再好, 就是不如一個簡單的 editor ap 方便..</p> <p>補張圖爽一下... [H]</p><a href="http://community.chicken-house.net/blogs/images/WindowsLiveWriter_B0AB/writer7.jpg" target="_new" atomicselection="true"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="230" src="http://community.chicken-house.net/blogs/images/WindowsLiveWriter_B0AB/writer_thumb3.jpg" width="240" border="0"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2006-08-16 12:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-16 12:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-live-writer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>521</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-17 12:31:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-17 12:31:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[yo~ 聽到呼叫~
夠殺吧…好用得不得了，如果有用flickr 真的會感動到想哭]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>浩劫重生的 X31 ...</title>
		<link>http://columns.chicken-house.net/2006/07/20/%e6%b5%a9%e5%8a%ab%e9%87%8d%e7%94%9f%e7%9a%84-x31/</link>
		<pubDate>Thu, 20 Jul 2006 22:36:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/07/20/e6b5a9e58aabe9878de7949fe79a84-X31-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>上禮拜在公司跟同事討論事情時, 一個失手桌上喝一半的御茶園就倒在 X31 臉上.. Orz, 當時公司沒雞絲可以搶救, 就立刻把水倒出來 &amp; 搽乾就跑回家了...</P>
<P>回家後災難才開始.. 一開始是開不了機, 拆開用吹風機吹乾就正常了, 不過用了沒多久, 硬碟就發生怪叫, 再拆一次才發現硬碟的電路板進水沒擦到...</P>
<P>還好硬碟擦乾後也正常了, 不過資料卻毀了, 開不了機, 用USB接到別台也讀不出來, my god... 挖出舊的 40GB HDD 出來重灌撐著用, 同時掛了的硬碟也接到 PC 上用 Final Data 救資料..</P>
<P>跑了兩天, 資料總算是救回來, 系統也都恢復正常了, 不過小黑最引以為傲的鍵盤... 因為進水, 乾了之後打起來都卡卡的, 有的像是裡面卡了沙子, 按起來卡卡的... 有的像鞋底黏到口香糖, 按下去跳不起來 [:'(]</P>
<P>這種 ThinkPad 怎麼用啊... 去 IBM 網站看, 自費換鍵盤要價 3650 NTD .. 土匪... 到 PCHome 看到英文的 (沒有印注音的字樣) 一片 "只要" 2300 NTD, 當場就刷了下去..</P>
<P>原本就是等寄來就沒事了, 不過 pchome 竟然打來說沒貨 ( [:@] 上面寫庫存正常是寫假的嘛.. ), 要訂貨, 得等一個禮拜... 不等也不行, 就說 ok .. 隔天跟肉包聊到這件事, 他講去Y拍找找, 我才想到 "對喔, 怎麼沒想到.." ... 順手找了一下, 竟然有耶... 而且一片 "只要" 1500 NTD ...</P>
<P>誰叫我不小心打翻飲料, 當年 X23 因為這樣花了 29xx 元去 IBM 換... 現在 1500 可以解決就偷笑了, 在公司下標, 隔天就收到貨了, 差點多花了 800 冤枉錢...</P>
<P>現在總算一切搞定了 [:D], 新鍵盤真好打, 不過這片鍵盤還是跟原來的有點不一樣, 應該是給早期 X30 用的料號吧... 不管它了, 沒差多少, 貼幾張圖看看</P>
<P>
<TABLE style="WIDTH: 100%" cellSpacing=1 cellPadding=1 border=1>
<TBODY>
<TR>
<TD>舊的鍵盤</TD>
<TD>新的鍵盤</TD></TR>
<TR>
<TD><IMG src="/wp-content/be-files/X31KB01.jpg"></TD>
<TD><IMG src="/wp-content/be-files/X31KB04.jpg"></TD></TR>
<TR>
<TD><IMG src="/wp-content/be-files/X31KB02.jpg"></TD>
<TD><IMG src="/wp-content/be-files/X31KB05.jpg"></TD></TR>
<TR>
<TD><IMG src="/wp-content/be-files/X31KB03.jpg"></TD>
<TD><IMG src="/wp-content/be-files/X31KB06.jpg"></TD></TR></TBODY></TABLE></P>
<P>看起來我比較喜歡英文的這片... 乾淨多了, 那個 "ThinkPad" 的鈕看起來也比較順眼... 少了注音大概就沒有人會想來用我的電腦...&nbsp;不過最重要的是, 以往 ThinkPad Keyboard 的手感又回來了.. [:'(]</P>
<P>&nbsp;</P>
<P>&nbsp;</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2006-07-20 22:36:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-20 22:36:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b5%a9%e5%8a%ab%e9%87%8d%e7%94%9f%e7%9a%84-x31]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>522</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-21 04:47:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-21 04:47:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[當了爸的人,好像就變的比較碎念了? 哈....
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>523</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-21 11:59:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-21 11:59:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 嘖... 遠水救不了近火 :~~
不然當初也不會直接在 pchome 下訂...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>524</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-21 18:34:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-21 18:34:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 原諒我... 你的 comment 太長, 這個鳥鳥的版面就亂掉了 (h)
幫你重貼一次...

--
Friday, July 21, 2006 7:46 AM by Honga

http://0rz.net/a01Dl

US shipped !!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>525</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-22 08:36:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-22 08:36:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不用重貼拉 ...

這種小東西可以郵寄,大概USD$9

不貴啦
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>526</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-01 09:01:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-01 09:01:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[御茶園..好喝嗎?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CS Control: Recent Comments</title>
		<link>http://columns.chicken-house.net/2006/05/21/cs-control-recent-comments/</link>
		<pubDate>Sun, 21 May 2006 13:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/05/21/CS-Control-Recent-Comments.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>自從換了 CS 2.0, 就一直被抱怨沒有顯示最新回應的功能... ( 之前 1.0 版我有<A class="" title="" href="/post/ChickenHouseWebCommunityServerExtension-e696b0e58a9fe883bd-e4b98b-2.aspx" target="">自己改一個</A> ), 不過 CS 2.0 存取資料庫的方式改用 Provider Model, 除非自己改寫 Data Provider, 否則只能用它提供的 API 才能拿到你要的 data ...</P>
<P>因為這一點被卡了很久, 加上 2.0 新的 Theme Model, Orz, 想要在畫面加一段字, 要找到在那裡加是最麻煩的地方, 找到之後一切就簡單多了... 研究了半天加上官方網站的討論, 總算研究出來該如何下手...</P>
<P>最後的方法大致是這樣, CS 的 "Post" 物件, 代表了 CS 裡主要的幾種資料型態, 包括 blog 文章, blog comment, forum 的討論串, album 裡的相片... etc, 所以透過 DataProvider可以拿出原始資料, 會用 WeblogPost 型態的物件傳回.</P>
<P>另外 Theme 則沒那麼簡單... 每個 Theme Control 都會對應到同名的 Skin-#####.ascx, 因此在每套 theme file 裡會去引用到這些 user control, 同時 user control 裡必需再定義 child control, 剩下的動作你得自己在 dll 裡處理好..</P>
<P>總算是研究出來了, 哇哈哈, 現在我們家的 CS 又有跟別人不一樣的特色了.. [:$]</P>
<P><IMG src="/wp-content/be-files/recent-comments.jpg"></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2006-05-21 13:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-21 13:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cs-control-recent-comments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<wp:comment>
			<wp:comment_id>527</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-05-22 14:58:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-05-22 14:58:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[原來..你是想把我的comments 讓大家都注意到...

(Y) ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>528</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-05-25 06:57:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-05-25 06:57:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga你想太多了,這個功能是我一直要求的...^ ^
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>529</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-06-01 01:30:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-06-01 01:30:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[有的~有注意到~
不過在該板就注意到了
honga,你的留言成功!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新鍵盤...</title>
		<link>http://columns.chicken-house.net/2006/05/21/%e6%96%b0%e9%8d%b5%e7%9b%a4/</link>
		<pubDate>Sun, 21 May 2006 13:33:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/05/21/e696b0e98db5e79ba4.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>其實我想換鍵盤想很久了, 至少一兩年了 [H]</P>
<P>不過因為我都用 notebook, 沒有急迫的需要, 另一方面也是沒有看到滿意的鍵盤... 我要求很簡單, 只要:</P>
<OL>
<LI>USB (方便拔來拔去, PS2 的常需要重開機才抓的到, 很不方便)</LI>
<LI>KB Layout要標準的, 加一堆有的沒有的鈕就算了, 我最討厭把右半的KeyPad跟方向鍵那一區改的亂七八遭的排列方式, 用那種鍵盤, 我老是會按錯... 有時要按 Pause 還會按到 Shutdown ... [:@]</LI>
<LI>外型簡單, 看的順眼就好</LI></OL>
<P>要求一點都不高, 不過每次逛3C賣場, 擺出來的廿卅種就是沒一個合意的... 昨天剛好順路經過金鍵盤 (光華附近的小店), 看到這款, 就毫不考慮買了兩把.. [:D]</P>
<P><IMG src="/wp-content/be-files/usb-kb01.jpg"></P>
<P>這款的鍵用的是類似Notebook那種構造, 剛好用的很習慣... 雖然不能跟 ThinkPad 的鍵盤比, 不過差不多了, 也都符合我上面列的要求, 價格也還好, 500 有找..</P>
<P>不過用了一個晚上, 唯一的問題就是, NumLock 那個燈實在是亮的刺眼... 嘖, 沒事用什麼白光LED..</P>
<P><IMG src="/wp-content/be-files/usb-kb02.jpg"></P>
<P>照片看起來已經很亮了, 實際看起來更亮, 直接瞪著看已經到了會刺眼的程度.. Orz ... 不過沒差啦, 找個東西貼起來就好..</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2006-05-21 13:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-21 13:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e9%8d%b5%e7%9b%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
	</item>
	<item>
		<title>iPod 領帶...</title>
		<link>http://columns.chicken-house.net/2006/02/26/ipod-%e9%a0%98%e5%b8%b6/</link>
		<pubDate>Sun, 26 Feb 2006 22:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/02/26/iPod-e9a098e5b8b6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>這年頭, 連領帶都變 iPod Namo 的配件... [^o)]rz...</P>
<P><A href="http://japanese.engadget.com/2006/02/24/ipod-tie/">http://japanese.engadget.com/2006/02/24/ipod-tie/</A></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date><![CDATA[2006-02-26 22:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-26 22:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ipod-%e9%a0%98%e5%b8%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>我的硬碟到底要加多大, 才會顯示這訊息...?</title>
		<link>http://columns.chicken-house.net/2006/02/13/%e6%88%91%e7%9a%84%e7%a1%ac%e7%a2%9f%e5%88%b0%e5%ba%95%e8%a6%81%e5%8a%a0%e5%a4%9a%e5%a4%a7-%e6%89%8d%e6%9c%83%e9%a1%af%e7%a4%ba%e9%80%99%e8%a8%8a%e6%81%af/</link>
		<pubDate>Mon, 13 Feb 2006 19:47:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/02/13/e68891e79a84e7a1ace7a29fe588b0e5ba95e8a681e58aa0e5a49ae5a4a72c-e6898de69c83e9a1afe7a4bae98099e8a88ae681af.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>別人轉寄的, 害我在辦公室笑出來...</P>
<P>我的硬碟到底要加多大, 才會顯示這訊息? Orz...</P>
<P><IMG src="/wp-content/be-files/磁碟空間太多.jpg"></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2006-02-13 19:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-13 19:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%88%91%e7%9a%84%e7%a1%ac%e7%a2%9f%e5%88%b0%e5%ba%95%e8%a6%81%e5%8a%a0%e5%a4%9a%e5%a4%a7-%e6%89%8d%e6%9c%83%e9%a1%af%e7%a4%ba%e9%80%99%e8%a8%8a%e6%81%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>換新系統了!! CS 2.0 Beta 3</title>
		<link>http://columns.chicken-house.net/2006/02/03/%e6%8f%9b%e6%96%b0%e7%b3%bb%e7%b5%b1%e4%ba%86-cs-2-0-beta-3/</link>
		<pubDate>Fri, 03 Feb 2006 02:26:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/02/03/e68f9be696b0e7b3bbe7b5b1e4ba86!!-CS-20-Beta-3.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>雖然平常啥軟體有新版, 我都會手癢的想換來看看, 不過這套 BLOG ( CommunityServer ) 倒是特例, 從 1.0 release 後就再也沒動過了, 為的當然就是我自己加的那堆功能...</P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl08_PostTitle href="/post/TEXT-e79a84e7b7a8e8bcafe4bb8be99da2e8a39ce5bcb7-(e887aae5b7b1e788bde4b880e4b88b).aspx">.TEXT 的編輯介面補強 (自己爽一下)..</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl04_PostTitle href="/post/e4bfaee694b9-Community-Server-e79a84-blog-editor.aspx">修改 Community Server 的 blog editor</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl03_PostTitle href="/post/e4bfaee694b9-Community-Server-e79a84-blog-editor-(-Part-II-).aspx">修改 Community Server 的 blog editor ( Part II )</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl02_PostTitle href="/post/Photo-Gallery-e5959fe794a8-!!.aspx">Photo Gallery 啟用 !!</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl14_PostTitle href="/post/community-server-e694b9e980a0e5b7a5e7a88b.aspx">community server 改造工程</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl02_PostTitle href="/post/ChickenHouseWebCommunityServiceExtension-e696b0e5a29ee58a9fe883bd.aspx">ChickenHouse.Web.CommunityServiceExtension 新增功能</A> </P>
<P><A id=bp___ctl00___RecentPosts___postlist___EntryItems_ctl01_PostTitle href="/post/ChickenHouseWebCommunityServerExtension-e696b0e58a9fe883bd-e4b98b-2.aspx">ChickenHouse.Web.CommunityServerExtension 新功能 之 2</A> </P>
<P>列在一起, 看起來還真多... 不過後來還是破戒了, 因為 Server 升級了, OS 也換成 64 位元版本的 windows 2003 .. 舊版的 CS 1.0 碰到了這個鳥問題, 不得不升級...</P>
<P><FONT style="BACKGROUND-COLOR: #f5f5dc" color=#000000></FONT>&nbsp;</P>
<P><A onclick=StatsDotNet.TrackSearch(0,1,1) href="http://support.microsoft.com/kb/894435/zh-tw"><FONT color=#000000><STRONG>如何在 64 位元版的 Windows 上切換 32 位元版的 ASP.NET 1.1 與 64 位元版的 ASP.NET 2.0</STRONG></FONT></A><FONT color=#000000><STRONG> </STRONG></FONT>
<P style="BACKGROUND-COLOR: #f5f5dc" color="#000000"><FONT color=#000000><STRONG>IIS 6.0 同時支援 32 位元模式及 64 位元模式。但是，IIS 6.0 不支援同時在 64 位元版的 Windows 上執行兩種模式。ASP.NET 1.1 只能在 32 位元模式中執行。ASP.NET 2.0 可以在 32 位元模式或 64 位元模式中執行。因此，如果要同時執行 ASP.NET 1.1 和 ASP.NET 2.0，您必須在 32 位元模式中執行 IIS。</STRONG></FONT></P>
<P></P>
<P>嘖嘖嘖, CS 1.0 只能在 ASP.NET 1.1 環境下運作, 直接丟在 ASP.NET 2.0 下會跑不了. 偏偏 Microsoft 又不提供 64 位元版本的 .NET 1.1 Runtime, 搞到最後, 為了這舊版的 CS, 我整個 IIS 都得在 32 位元模式下運作... [:@]</P>
<P>真是枉費我破除萬難升級上來的新系統, 嘖嘖嘖... 所以只好忍痛暫時犧牲我修改的那些功能, 改用官方的 2,0 beta 3 版本 (就是現在用的這套).</P>
<P>其實換完之後感覺還不錯, 雖然少掉我之前修正了不少 sea 不滿意的地方, 但是我頂多改改別人的小地方, 官方版本才有辦法做根本上的改進, 到底好在那裡, 用過就知道啦 [H], 以後再慢慢講...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2006-02-03 02:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-03 02:26:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%9b%e6%96%b0%e7%b3%bb%e7%b5%b1%e4%ba%86-cs-2-0-beta-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Pentium D 920, 早該換了 (Y)</title>
		<link>http://columns.chicken-house.net/2006/01/29/pentium-d-920-%e6%97%a9%e8%a9%b2%e6%8f%9b%e4%ba%86-y/</link>
		<pubDate>Sun, 29 Jan 2006 01:24:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/01/29/Pentium-D-9202c-e697a9e8a9b2e68f9be4ba86-(Y).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>話說八年前斯董讚助了張主機板 (P2B-DS), 架的 server 讓我用到現在, 大概很少人的主機可以用這麼久吧 [H], 一直不肯換的主要原因就是它可以裝兩顆 CPU... 我是看不慣電腦閒在那邊的人, 總是會在背景排一堆工作讓 server 忙一點... 所以有兩顆 CPU 對我的吸引力遠大於其它因素...</P>
<P>總算現在雙核 CPU 已經買的下手了, 想了很久終於在過年前換了 Intel PentiumD 920 這顆 CPU, 主機板用 945P chipset, 外加 2GB DDR2-533 的 RAM...</P>
<P>其實換機的動機不只雙核啦, 本來 820 在那邊龜半天, 後來看到 920 才毫不考慮的敗下去, 因為下列幾個功能都是我需要的:</P>
<OL>
<LI>Dual Core 
<LI>VT ( Intel virtualization technology ) 
<LI>EM64T 
<LI><STRIKE><FONT style="BACKGROUND-COLOR: #9acd32">Enhance Speed Step</FONT></STRIKE> (功課沒做好, 要 2006 Q2 以後的 920 才支援這功能 [:'(])</LI></OL>
<P>因為我需要用 virtual machine, 所以不支援 VT 的 820 就讓我龜了半天 [H], 換新機後裝了 64 位元版的 windows 2003, 而原來的 blog 因為某些因素, 在 2003 x64 只能用 32 位元模式執行, 所以也被我換掉了...</P>
<P>Server 只做幾件事, 沒有太多軟體相容的問題, 跑起來很滿意...</P>
<OL>
<LI>Web Server (&nbsp;ASP.NET 2.0 Only ) 
<LI>SMTP Server 
<LI>File Server 
<LI>Virtual Machine 
<LI>VPN &amp; NAT 
<LI>Video Encoding ( 把 DV / DC Video 壓成 WMV )</LI></OL>
<P>這些東西都有 64 位元版, 跑起來不用特別去測就感覺出比 32 位元版快了一些... 不過心理作用比重還是比較大吧, 哈哈...</P>
<P>換機之後, 100M 的網路終於有被塞爆的一天... 特地貼圖紀念一下, 看來下次該換 GBE 了 [H]</P>
<P>&nbsp;</P>
<P><IMG src="/wp-content/be-files/network-100.gif"></P>
<P>貼貼其它的圖, 自己爽一下 [H]</P>
<P>&nbsp;</P><IMG src="/wp-content/be-files/PentiumD.gif"><BR><IMG src="/wp-content/be-files/CPUID_01.gif"><BR><IMG src="/wp-content/be-files/CPUID_02.gif"><BR><IMG src="/wp-content/be-files/CPUID_03.gif"><BR>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2006-01-29 01:24:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-29 01:24:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pentium-d-920-%e6%97%a9%e8%a9%b2%e6%8f%9b%e4%ba%86-y]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>老鼠的繁殖力真強... [H]</title>
		<link>http://columns.chicken-house.net/2006/01/28/%e8%80%81%e9%bc%a0%e7%9a%84%e7%b9%81%e6%ae%96%e5%8a%9b%e7%9c%9f%e5%bc%b7-h/</link>
		<pubDate>Sat, 28 Jan 2006 03:27:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/01/28/e88081e9bca0e79a84e7b981e6ae96e58a9be79c9fe5bcb7-H.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>哈哈, 果然書上講的沒錯, 老鼠的繁殖力驚人... 2003 年底, 在 TechEd 會場用半價買了一隻 Microsoft 無線光學鼠, 用到 2004 年底, 左鍵壞掉了, 寄去換一隻新的, 2005 年底又壞了 [:|]</P>
<P>不過這次寄去, 因為停產, 所以就換了一款較新的給我... 不過要跟別的部門調貨, 所以要晚幾天... 過了幾天果然收到了, 但是大概天公疼好人吧, 再過幾天又收到另一隻新滑鼠...</P>
<P>哈哈, 買這隻滑鼠真是值回票價啊... 不但半價, 還會進化, 還會越生越多.. [H]&nbsp; 果然我都買 Microsoft Mouse 是對的... [Y]</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2006-01-28 03:27:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-28 03:27:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%80%81%e9%bc%a0%e7%9a%84%e7%b9%81%e6%ae%96%e5%8a%9b%e7%9c%9f%e5%bc%b7-h]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>533</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-02-01 15:49:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-02-01 15:49:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[終身保固嗎? 為何可以一直換一直換?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>534</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-02-01 22:38:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-02-01 22:38:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這套 blog 是收到留言定期處理... 所以有時要等個五分鐘才會出現...

Microsoft Mouse 保固三年, 不過我也搞不清楚它保固怎麼算的啦, 反正寄去就換來了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>535</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-02-02 00:08:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-02-02 00:08:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[留言會 delay 的問題已經改好了.
這套 blog 會定期 (好像是 20 min)讀一次, 讓人很多時回應速度不會變慢...

找到說明該怎麼關掉它了, 現在應該會馬上貼馬上跑出來 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>536</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-04-12 02:16:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-04-12 02:16:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[因為賣不好所以有很多庫存可以換吧 (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[MSDN] Visual Studio Add-Ins Every Developer Should Download Now</title>
		<link>http://columns.chicken-house.net/2005/12/06/msdn-visual-studio-add-ins-every-developer-should-download-now/</link>
		<pubDate>Tue, 06 Dec 2005 01:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/12/06/MSDN-Visual-Studio-Add-Ins-Every-Developer-Should-Download-Now.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>這篇寫的太棒了... <img src="/Emoticons/emotion-21.gif" /><img src="/Emoticons/emotion-21.gif" /></p>
		<p>裡面寫的工具我都需要, 特此留念 <img src="/Emoticons/emotion-11.gif" /></p>
		<p>URL: <a href="http://msdn.microsoft.com/msdnmag/issues/05/12/VisualStudioAddins/default.aspx">http://msdn.microsoft.com/msdnmag/issues/05/12/VisualStudioAddins/default.aspx</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2005-12-06 01:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-06 01:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[msdn-visual-studio-add-ins-every-developer-should-download-now]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>水電工</title>
		<link>http://columns.chicken-house.net/2005/12/06/%e6%b0%b4%e9%9b%bb%e5%b7%a5/</link>
		<pubDate>Tue, 06 Dec 2005 00:29:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/12/06/e6b0b4e99bbbe5b7a5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>咳,這篇不是要講台灣水電工,是指我當了好幾個禮拜的水電工... 我趁著這次家裡裝修把家裡的線路都整理一遍, 佈線真是辛苦, 要把線從這邊穿到另一邊拉出來就忙了一個下午, 再加上接一堆線, 裝面板, 挖洞, 跑好幾趟買材料... 果然沒有過人的體力是當不了水電工的 <img src="/Emoticons/emotion-20.gif" />...</p>
		<p>首先是佈線, 天花板挖開, 把幾種線綑一起穿出來... 當然是為了每間房間都有網路線... <img src="/Emoticons/emotion-2.gif" />, 以客廳電視機為中心點, 因為 CATV 的線源頭在這邊, 電話線源頭也在這裡... 就從書房拉了一條 8C 的電話線 (只用兩線電話) + 一條貴松松的 AMP 網路線 + 一條 CATV 的 RG58 線到客廳.. Hmm, XBOX 終於可以上網了 <img src="/Emoticons/emotion-2.gif" /></p>
		<p>之前老爸自己接了一堆分機, 接到最後電話訊號很差, ADSL modem 的訊號也不好, 這次學乖了, 在源頭就先接上 splitter, modem 也放在客廳, 分好的訊號才拉到各電話機上, 看起來爽多了, ADSL modem 裡也看到訊號好多了, 不錯不錯... </p>
		<p>感謝中華電信, 給我的 ADSL modem 是有 4 port hub 的那種, 哈哈, 剛好省了一筆錢, 放在客廳正好夠用, 4 ports 分別連到書房, 主臥房, 客廳, XBOX..  連到書房用的就是那條貴松松的網路線, 另一頭正好拿 Honga 讚助的 IP 分享器.. <img src="/Emoticons/emotion-11.gif" />, 拿分享器當 Hub 好像太土匪了一點... <img src="/Emoticons/emotion-4.gif" />, 這台一樣 4 ports, 扣掉連到 ADSL modem 用掉一個 port, 剩下三個就是給書房, 我姊房間, 還有我的房間各一個 port ... 一切真是配合的剛剛好啊..</p>
		<p>線分好之後, 再來就是接面板了. 這個部份花最久... 因為之前沒做過, 所以花了很多白工, 算的材料總是少一兩個, 所以跑了好幾趟光華商場 -_-</p>
		<p>試過才知道, 原來接面板這麼方便啊 <img src="/Emoticons/emotion-15.gif" />, 塞在牆上的開關 &amp; 插座, 可以買到各種的替換接頭... 每個點我都放三組, 分別是 phone x 2 + network x 1... 像這種, 中間的是 RJ-45 (網路線), 兩旁的是 RJ-11 (電話線)...</p>
		<img height="480" alt="panel-01.jpg" src="/wp-content/be-files/panel-01.jpg" width="640" border="1" />
		<p>另外, CATV 也有, 我買了這種, 可以直接藏在牆上... <img height="480" alt="CATV-Panel.jpg" src="/wp-content/be-files/CATV-Panel.jpg" width="640" border="0" /></p>
		<p>老爸想裝監視器, 所以這次也一起弄好了... <img height="480" alt="security-monitor.jpg" src="/wp-content/be-files/security-monitor.jpg" width="640" border="0" /></p>
		<p> </p>
		<p>總算, 可以把 802.11b 退下來了!!! 有 WLAN 很好用, 但是只有 WLAN 可以用的話也很痛苦... WLAN 總是自己用的時後訊號很糟, 但是臨居就用的很爽都不會斷線... <img src="/Emoticons/emotion-12.gif" />, 設一堆認證搞到最後密碼都忘了, 還是網路線隨手一插比較方便 ... </p>
		<p>因為全家都已經有網路孔了, 就多敗了條這種網路線放包包, 以便隨時拿出來用 <img src="/Emoticons/emotion-2.gif" />. 這樣小小一綑就有三米了, 果然線做成扁的很方便. 規格還號稱是 CAT6, 不知道真的假的, 看起來爽就好了...</p>
		<p>
				<img height="480" alt="RJ45-cable.jpg" src="/wp-content/be-files/RJ45-cable.jpg" width="640" border="0" />
		</p>
		<p> </p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2005-12-06 00:29:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-06 00:29:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>538</wp:comment_id>
			<wp:comment_author><![CDATA[easonliu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-07 00:35:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-07 00:35:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雞爸水電工~

應該要考慮一下時間成本啦...

不過自己動手做，樂趣也多 (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>又敗家了... SONY HREM4</title>
		<link>http://columns.chicken-house.net/2005/12/01/%e5%8f%88%e6%95%97%e5%ae%b6%e4%ba%86-sony-hrem4/</link>
		<pubDate>Thu, 01 Dec 2005 22:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/12/01/e58f88e69597e5aeb6e4ba86-SONY-HREM4.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>自從上次被小皮的娘唸半天, 要用電池一顆都找不到, 連續唸了好幾天之後... 終於狠下心敗了之前看了很久的充電器... <img src="/Emoticons/emotion-11.gif" /></p>
		<p>其實我用三號電池的東西都不是很耗電的那種, 就閃光燈, 強力電蚊拍 (那種像電擊棒, 按下去會有電弧.. 這樣電死蚊子有一種抱了深仇大恨的快感 <img src="/Emoticons/emotion-11.gif" />), 刮鬍刀, 滑鼠, sea 的無線鍵盤... 不過配合上次買的 3 號轉 1 號及 2 號的塑膠殼之後, 用電池用的最兇的變小皮的玩具了... 如果他有在玩, 兩三天就要換電池... 以後給他玩玩具車的話更不得了...</p>
		<p>因為都不是一次用四顆, 就敗了這台可以一次充一顆, 有 LCD 面板顯示, 可以放電的充電器. 一次充四顆要 300 min 的 "急速" 充電器.. 跟我舊的那台 15 HR 比起來是有比較快啦, 咳咳...</p>
		<p>現在越來越懶的自己出門買了, 這次是在 Y 拍買的, 雖然之前早就耳聞 SANYO 的電池很爛, 不過看在很便宜的份上, 還是買了幾顆... SONY 充電器+2500mah x 4, SANYO 2500mah x 12, 看來應該夠小皮跟妹妹用了 <img src="/Emoticons/emotion-11.gif" /></p>
		<p>
				<img height="372" alt="SONY-HRME4-1.JPG" src="/wp-content/be-files/SONY-HRME4-1.JPG" width="450" border="0" />
		</p>
		<p>
				<img height="383" alt="SONY-HRME4-2.JPG" src="/wp-content/be-files/SONY-HRME4-2.JPG" width="450" border="0" />
		</p>
		<p>敗了之後才發現, 好一陣子沒敗家了, 接下來要敗啥? <img src="/Emoticons/emotion-2.gif" />~~~</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2005-12-01 22:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-01 22:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%88%e6%95%97%e5%ae%b6%e4%ba%86-sony-hrem4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>539</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-02 01:39:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-02 01:39:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[幾多錢?
好用唄?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>540</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-02 02:43:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-02 02:43:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很好用(Y),突然發現我能忍受GP那台充電器忍這麼久真是奇蹟..

我在這買的, 不是最便宜, 不過貨看來最齊...

http://tw.page.bid.yahoo.com/tw/auction/1138692198?rr=1292293055]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>541</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-02 04:17:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-02 04:17:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[要敗啥? 坐月子中心的錢有得你敗了...:D~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>542</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-03 13:28:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-03 13:28:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SANYO的爛..我應該也有再為他添上實用慘兮兮心得一筆~
結果現在只有一組(x4)Panasonic的電池，目前用起來很一般沒感覺(沒有特強力的驚豔，不過使用的年資也還無法看出它衰敗的速度)

又:SONY的充電電池也是SANYO代工的..so....要買充電電池的人就參考參考吧..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>543</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-12-03 22:57:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-12-03 22:57:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯, SONY 是 SANYO 代工的, 底部有個 HR 字樣的都是 SANYO 的作品... 不過差近一倍的 $$, 還是將就點用散裝的 SANYO ... :~

如果是買來用相機 or 其它需要續航力的, 那就不要揀便宜的好了 (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>共振...</title>
		<link>http://columns.chicken-house.net/2005/10/15/%e5%85%b1%e6%8c%af/</link>
		<pubDate>Sat, 15 Oct 2005 02:22:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/10/15/e585b1e68caf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[
		<p>果然高中物理課沒打混還是有用的... <img src="/Emoticons/emotion-15.gif" />   學過了共振, 終於解決我家小皮每次都被馬桶嚇哭的問題...</p>
		<p>不過, 馬桶跟共振有啥關係??? <img src="/Emoticons/emotion-8.gif" /></p>
		<p>我家 (房東) 的馬桶很怪, 每次沖完水, 牆壁裡的水管就會 ㄎㄡ ㄎㄡ ㄎㄡ... 的越響越大聲, 大聲到好像有人拿鐵鎚在鎚牆壁一樣, 小皮聽到就會邊哭邊喊 "怕怕" ...</p>
		<p>一直到前幾天, 終於找到原因了, 就是馬桶的水箱... 沖完水裡面的浮球就會下降, 連動桿就會打開水閥, 漸漸的水越來越滿, 浮球就越來越高, 直到連動桿把水閥關起來為止. 但是就在這時發生了共振的現像... <img src="/Emoticons/emotion-12.gif" />  浮球往上飄, 水閥就被關掉了, 瞬間浮球就往下沉了一點, 往下沉一點水閥剛好又打開了一會兒, 於是浮球又被往上擠, 水閥又關....</p>
		<p>就是這麼巧, 剛好浮球振動的週期就跟這上下晃動的週期一樣 ( hmm, T 跟 L<sup>2</sup> 成正比... ), 所以就越晃越猛, 猛到埋在牆壁裡的水管也跟著晃了起來, ㄎㄡ ㄎㄡ ㄎㄡ... 的就越響越大聲</p>
		<p>總算找到原因了<img src="/Emoticons/emotion-55.gif" />,  既然找到原因, 問題就好解決了, 在浮球的連動桿上隨便綁個東西, 改變它的振動週期就好, 週期不 match 就不會共振了... 現在半夜沖馬桶終於不用再耽心吵醒小皮了 <img src="/Emoticons/emotion-2.gif" /></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2005-10-15 02:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-15 02:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b1%e6%8c%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>544</wp:comment_id>
			<wp:comment_author><![CDATA[Huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-10-17 23:15:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-10-17 23:15:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖嘖~
共振改為不共振的馬桶是吧~
哈哈 好理科啊~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>該來的終於來了 :~~~</title>
		<link>http://columns.chicken-house.net/2005/08/19/%e8%a9%b2%e4%be%86%e7%9a%84%e7%b5%82%e6%96%bc%e4%be%86%e4%ba%86/</link>
		<pubDate>Fri, 19 Aug 2005 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2005/08/19/e8a9b2e4be86e79a84e7b582e696bce4be86e4ba86-7e7e7e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我的 notebook 正式變成匪貨了 <img src="/Emoticons/emotion-9.gif" /></p>
		<p>
				<img height="228" alt="LenovoThinkPad.jpg" src="/wp-content/be-files/LenovoThinkPad.jpg" width="568" border="0" />
		</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2005-08-19 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-19 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e4%be%86%e7%9a%84%e7%b5%82%e6%96%bc%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>549</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-01 01:59:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-01 01:59:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看到報紙廣告的LEVONO, 驚覺沒了 IBM 的 THINKPAD 對我來說已經失去吸引力了.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>550</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-24 22:21:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-24 22:21:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[果然是沒啥吸引力...

連字都拼錯了... 是 LENOVO ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Background Thread in ASP.NET (II)</title>
		<link>http://columns.chicken-house.net/2006/12/29/background-thread-in-asp-net-ii/</link>
		<pubDate>Fri, 29 Dec 2006 23:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/29/Background-Thread-in-ASPNET-(II).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>為了讓 ASP.NET 的 worker thread 能多做點事, 還真是吃盡了苦頭... 最近試到差不多了, 晚上睡覺就放著讓 worker thread 跑看看...</P>
<P>果然, 放著去看個電視回來就不跑了, log 檔剛剛好寫了 20 min 就停了... 看了一下, 原來是 COM+ App Pool 設定在搞鬼, 20 min 內 iis 沒有新的 request 過來, 就自動停掉把 resource 放出來, worker thread 就跟著 application unload 就不見去了</P><IMG src="/wp-content/be-files/2003-AppPool.jpg" mce_src="/wp-content/be-files/2003-AppPool.jpg"> 
<P mce_keep="true">&nbsp;</P>
<P>改個設定再跑一次, 不錯, 跑了幾個小時, 不過這次因為別的問題, IIS w3wp.exe 又停了... 至少往前跨一大步... 接下來就是看怎樣做 exception handling 比較妥當的問題了 :D</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2006-12-29 23:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-29 23:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[background-thread-in-asp-net-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
	</item>
	<item>
		<title>Background Thread in ASP.NET ...</title>
		<link>http://columns.chicken-house.net/2006/12/24/background-thread-in-asp-net/</link>
		<pubDate>Sun, 24 Dec 2006 17:31:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/24/Background-Thread-in-ASPNET-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Web Application 越做越大, 就會多了一堆不是網頁型態就能解決的功能需求... 舉例來說, 一般網頁就是你點了某個功能, server就會想盡辦法把結果輸出成網頁給你看. 但是這幾種型態的功能就非常不適合用這種模式來開發...</p> <ol> <li>會輸出大量資料的功能 (像報表之類的, 或是列出一堆資料, 又不想分頁)  <li>會長時間執行的 (像資料轉檔, 一跑就要半小時)  <li>需要定期執行, 一直躲在後面偷偷的執行的程式</li></ol> <p>web application越作越完整的時後, 難免會碰到這種需求.&nbsp;這些需求其實是有很多方式解決的, 例如用 message queue, 用 reporting service, 另外寫 windows service, 或是另外寫 window form /&nbsp;console application&nbsp;搭配排程使用等等. 這些作法都會造成開發及安裝的不便... 隨便舉就是好幾個缺點:</p> <ol> <li>configuration 無法共用. 除非你另外花力氣去做 application configuration management, 否則, web 的 web.config 跟 app 的 app.exe.config 設定檔的方式就不一樣了</li> <li>library 也要另外設計. web 環境下用的 lib 可以直接以 source code 型態存在於 app_code 目錄下, 同時 web 用的 lib 也有 HttpContext 執行環境的支援, 這些東西都是離開 web 環境下就用不到的</li> <li>asp.net 強調的就是 xcopy 就能完成 deployment, 如果再用到這些額外的開發方式, 很好... 你的程式安裝仍然是個惡夢, 要裝 MSMQ, 要註冊成 windows service, 要排定排程... etc...</li></ol> <p>看來看去, 如果可以在 asp.net web app 裡把這些問題搞定, 就簡單多了. 找到的 solution 就是用些技巧, 偷偷建立一個 thread 在 web server 裡躲著, 利用這個 thread 來執行這些動作, 讓它用起來好像是 windows service 一樣. 挖了 community server 的 source code 來研究, 發現它的作法是這樣, 在 application_start 時把 background worker thread 建起來, 之後這個 thread 就進入無窮迴圈, 直到 application shutdown ..</p> <p>自己試了一下, 優喜參半... 解決了一些問題, 不過也有些新的問題... 整理如下:</p> <ol> <li>整個機制一定要 web app 有人連線進來後才會啟用. 假如 server power on 後一段時間都沒有人開網頁, 那麼所有的動作在這段時間內都不會執行. 而 windows service 就不會有這問題.  <li>類似 (1) 的狀況, 如果 IIS 因為各種原因判定要 unload application, 則結果一樣背景作業就會被中斷. worker thread 的生命周期控制沒辦法像 windows service 那樣精確.  <li>效能影響, asp.net 會嚴格監控所用的 thread 數量, 拿一條 thread 做別的事對效能影響不小. 除非你特別去調整 thread 數量上限, 否則至少就少了一條 thread 來處理 http request, 一般預設記得是 20 or 25  <li>因為 thread 執行的環境, 也不是搭配某個 http request, 因此一樣拿不到大部份的 asp.net 特有物件, 像 request / response / session 等... 不過 configuration 機制倒是還正常, 比另外準備一套 library 好一些, 用到的 code 也可以丟 app_code 下就好..</li></ol> <p>看起來還是有不少的問題待解決, 不過至少對於簡單的 scheduler task 有辦法處理了. 只要你對基本的 thread 控制有概念的話, 寫起來應該不是什麼大問題. 簡單寫了個 sample code, 沒做什麼事, 就是 web application 啟動之後, 會每隔十秒把現在的時間寫在 log file ...</p> <p>sample source code download: [<a href="http://www.chicken-house.net/files/chicken/WebAppWorkerThreadSample.zip">HERE</a>]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2006-12-24 17:31:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-24 17:31:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[background-thread-in-asp-net]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
	</item>
	<item>
		<title>歸檔工具更新 - .CR2 Supported</title>
		<link>http://columns.chicken-house.net/2006/12/23/%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7%e6%9b%b4%e6%96%b0-cr2-supported/</link>
		<pubDate>Sat, 23 Dec 2006 04:19:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/23/e6adb8e6aa94e5b7a5e585b7e69bb4e696b0-CR2-Supported.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>嗯, 我沒 Canon DSLR 的人, 跟人家在湊什麼熱鬧... 前陣子聽說小熊子買了 5D, 真是夢幻機種啊... 被問到支不支援 .CR2 .. 阿災, 我也沒 sample file 可以試...</P>
<P>後來公司大老闆剛好有帶他的相機 20D, 拍了幾張當 sample, 就回來改 code 了... 結果還挺樂觀的, Microsoft 包的那套 wrapper 通通都吃, 而且 library 的用法也都一樣, 唯獨 .CR2 的檔案不會附帶一個 .thm 的縮圖檔案, 因此 RAW file 轉存的 .JPG 就沒有包含完整的 exif 了.</P>
<P>不過高級的相機還存什麼縮圖? 當然不會這麼小家子氣... 哈哈, 需要的話,&nbsp;Canon DSLR 就直接再幫你存一張原圖大小的 .JPG 檔了. 這麼一來, 再自己做一次 .CR2 -&gt; .JPG 好像也沒意義了, 因此這個工就省下來, 不理它...</P>
<P>這次修改沒動到多少地方, 簡單列一下 update:</P>
<OL>
<LI>MediaFilerFileExtensionAttribute 對應的 file extension 格式調整, 改為可以用 , 來指定多個副檔名. 調整後同時也調整 Factory Patterns 的 Create( ), 讓一個 MediaFiler 可以同時處理一個以上的副檔名. 
<LI>因應新的副檔名支援, configuration file 也多了一段: pattern.cr2 
<LI>沒了...</LI></OL>
<P>最後感謝小熊子買了新相機讓我更崇拜了一下, 哈哈... 公司老大提供 sample 檔也是要感謝一下啦.. 更新的檔案下載: [<A href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip" mce_href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip">HERE</A>]</P>
<HR>

<P style="COLOR: #d0d0d0">小抱怨一下, 不知道是我的 G2 搞怪還是怎樣, 想不通到底是啥原因... 我的 G2 拍 RAW file 時, 如果接了外閃, 同時拍照時外閃又剛好來不及回電沒有打出來.. 那麼拍出來曝光不足的 RAW file, 在相機裡 preview 就正常, 傳到電腦用 Microsoft Raw Image Viewer 就解不出來, 當然用它的 library 也不行, 會有 exception ... 是怎樣? :@ 嫌我相機 &amp; 閃光燈太爛嘛...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date><![CDATA[2006-12-23 04:19:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-23 04:19:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7%e6%9b%b4%e6%96%b0-cr2-supported]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<wp:comment>
			<wp:comment_id>489</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-25 14:52:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-25 14:52:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[他沒有說爛…只有說…技術支援只到 2002 年

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CS 2.1 SP2 - MetaWeblog API / newMediaObject method support ..</title>
		<link>http://columns.chicken-house.net/2006/12/10/cs-2-1-sp2-metaweblog-api-newmediaobject-method-support/</link>
		<pubDate>Sun, 10 Dec 2006 14:13:55 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/10/CS-21-SP2-MetaWeblog-API-newMediaObject-method-support-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>聽說新版的 MetaWeblogs API 直接支援上傳照片... 不用再搞半天弄 ftp 了...</p> <p>貼張照片試看看...</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="240" src="/wp-content/be-files/WindowsLiveWriter/CS2.1SP2MetaWeblogAPInewMediaObjectmeth_C2D6/IMG_5566%5B2%5D.jpg" width="240" border="0"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2006-12-10 14:13:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-10 14:13:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cs-2-1-sp2-metaweblog-api-newmediaobject-method-support]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
	</item>
	<item>
		<title>終於升級上來了...</title>
		<link>http://columns.chicken-house.net/2006/12/10/%e7%b5%82%e6%96%bc%e5%8d%87%e7%b4%9a%e4%b8%8a%e4%be%86%e4%ba%86/</link>
		<pubDate>Sun, 10 Dec 2006 05:43:41 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/10/e7b582e696bce58d87e7b49ae4b88ae4be86e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>搞了半天, 終於...</p> <p>試了一下, 幾個地方有改進..</p> <ol> <li>終於修掉不會自動記著 login user 的問題了  <li>html editor 支援直接插入表情符號, 所以就不用我改的那份了 <li>其它一堆五四三的改進...</li></ol> <p>升級倒還不大難, 不過我自己改的那堆要升上來就頗麻煩, 光是 theme file 就弄了半天... -_-</p> <p>不過總算是完成了, 試幾天看看 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2006-12-10 05:43:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-10 05:43:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b5%82%e6%96%bc%e5%8d%87%e7%b4%9a%e4%b8%8a%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>490</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-12 04:14:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-12 04:14:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[每次改版,我都還是會喜歡上一個版...
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>491</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-12 19:40:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-12 19:40:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[.....]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>492</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-18 13:53:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-18 13:53:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[那換回最原始版好了 :D 嘻嘻]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>又來了...</title>
		<link>http://columns.chicken-house.net/2006/12/10/%e5%8f%88%e4%be%86%e4%ba%86/</link>
		<pubDate>Sun, 10 Dec 2006 03:43:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/10/e58f88e4be86e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>每次都要來一次 "當選無效訴訟" 嘛...?</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2006-12-10 03:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-10 03:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%88%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>493</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-12 04:06:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-12 04:06:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果不這麼做,就不是國民黨了呀...:P
不過,選委會的確該來擬定一下多少的票數,百分比差距內就會自動抽驗...或許不會製造那麼多紛亂...

不過還是要再重申一次,"邱毅的話如果能聽的話,大便都可以吃了..."


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>升級失敗... Orz</title>
		<link>http://columns.chicken-house.net/2006/12/09/%e5%8d%87%e7%b4%9a%e5%a4%b1%e6%95%97-orz/</link>
		<pubDate>Sat, 09 Dec 2006 22:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/09/e58d87e7b49ae5a4b1e69597-Orz.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>看到 community server 官方網站, 有 CS 2.1 SP2 可以下載, 想說跟我當初裝的 2.0 RTM 也隔了好久, 想說來升級看看...</p> <p>順手先做了 shadow copy, 然後照說明, 更新檔案, 執行 2.x -&gt; 2.1 upgrade sql script ...</p> <p>很好, 結果整個 CS 開不起來, CS 又有自己的錯誤回報機制, 所有錯誤訊息都被藏起來, 除了知道有 Error 之外啥都不曉得.. -_-</p> <p>結果小孩在旁邊吵, 沒法專心處理, 只好把 revert shadow copy ... 下次責日再戰.. :@</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2006-12-09 22:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-09 22:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%87%e7%b4%9a%e5%a4%b1%e6%95%97-orz]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Volume Shadow Copy Service ...</title>
		<link>http://columns.chicken-house.net/2006/12/06/volume-shadow-copy-service/</link>
		<pubDate>Wed, 06 Dec 2006 03:22:09 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/06/Volume-Shadow-Copy-Service-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>windows 2003 提供的 "新" 功能... 其實也不算新了, 都已經要邁入第四年了, 不過卻是個很實用的東西..</p> <p>簡單的說, vss 是建立在 file system 以下的服務, 它可以替你的 storage 做 snapshot, 跟一般的備份不一樣, 它是用 "copy on write" 的方式. 意思就是, 當我要求現在替我的硬碟做一次 snapshot, 只要這份 snapshot 不刪除, 我都隨時可以找到這時的檔案內容.</p> <p>聽起來就是一般的備份嘛, 不過它的作法完全不同. snapshot 很快就可以作好, 是快到 0.x sec 這種程度, 它只是在目前的資料上做個記號, 只要檔案沒更新, 完全沒有資料需要被備份. 而已經作了 snapshot 的資料要被更新時, 它才立即做了一份 copy, 實際上的更新動作是 copy 一份出來才 update. 這就是 "copy on write" 的作法.</p> <p>講那麼多幹嘛? 因為當年研究所考試台大有考 "copy on write" ... 當時年紀輕什麼都不懂, 想破頭也寫不出來, 後來考完出來翻書才恍然大悟, 只怪書翻的太晚... :~ 所以印相就特別清楚.. 哈哈</p> <p>win2003 提供的 vss 其實不只如此, 它還提供了 provider 的架構, 意思是做 snapshot 的機制, 有可能換成其它軟體來處理, 或是其它硬體, 像是 Microsoft 自己的 SQL2005, Exchange2007, Data Protection 2006, 還有其它備份軟體... 等等工具都會受惠. 這些軟體可以基於 vss&nbsp;再開發出更進階的功能, 像 SQL2005 也在 db 上提供了 snapshot, Exchange2007 也靠 vss 做出更完整的檔案備份及複寫功能...</p> <p>不過這些對大部份自己用的電腦都沒啥用, 大家不都是現成電腦買來, windows 灌好就開始用了... 最近花了些時間研究一下, 發現還挺好用的:</p> <ol> <li>在 disk properties 上可以看到 shadow copy 的畫面, 你可以定期做 snapshot</li> <li>做好 snapshot 後, 透過網路芳鄰來看這個 share folder 就會有額外的 options</li> <li>按下 view 就可以把過去的備份叫出來, 也可以還原到某個時間的檔案內容</li></ol> <p>很棒的功能, 不過跟我的需求有點差距... 我希望用 snapshot 解決我碰到的一些問題:</p> <ol> <li>我必需要更可靠的備份作業, 我要把資料 "真正" 的 copy 出來, 而不是只留著 snapshot.</li> <li>copy 的動作要花一些時間, 但是 copy 時有可能資料也正在被修改 or 鎖定..</li> <li>我需要隨時做這些動作, 而不是像 2003 內建的, 只能排排程定期做.. 最好是可以寫成批次檔 (老人家的壞習慣... Orz)</li></ol> <p>最後找到的方式, 很陽春, 不過已經足夠解決我的問題了 (H), 就順手貼出來, 邏輯上的步驟, 是:</p> <ol> <li>要開始備份前, 先做一次 snapshot</li> <li>之後備份作業從 snapshot copy 出來, 而不是從 current state copy 出來, 就不會有 lock or update 的問題</li> <li>動作完成後, snapshot 就可以砍了, 當然要留著也無所謂...</li></ol> <p>要做成批次檔, 一次完成的話, 則有這兩項關鍵:</p> <ol> <li>命令列執行建立及刪除 snapshot 的方式: 用 vssadmin.exe</li> <li>讓其它工具 (我用 RAR.exe) 直接讀取 snapshot 的方式, vss 是以 UNC 的路逕提供:<br>\\localhost\d$\@GMT-2006.11.28-23.00.01</li></ol> <p>其中 \\nest\Home 是一般的 UNC 路逕, 後面加的 @GMT-...... 則是做 snapshot 的 timestamp, 以我來說, 要備份這目錄只要這樣下：<br><br>RAR.exe a -r c:\backup.rar \\nest\Home\@GMT-2006.11.28-23.00.01</p> <p>說穿了沒啥特別的, 只不過找到了最後兩項關鍵, 命令列指令, 跟存取 snapshot 的路逕, 解決掉了我多年來的困擾, 每次要備份檔案一下這個 lock 一下那個 lock, 不然就是得先關一堆程式才能 copy 的困擾. 不過 windows xp 的 vss 好像就沒這麼完整, 這些作法目前只有 windows 2003 能夠用, 殘念...&nbsp;不知道 vista 有沒有類似的東西可以用? :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2006-12-06 03:22:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-06 03:22:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[volume-shadow-copy-service]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Ya!! Community.Chicken-House.Net 滿兩週年了 :D</title>
		<link>http://columns.chicken-house.net/2006/11/19/ya-community-chicken-house-net-%e6%bb%bf%e5%85%a9%e9%80%b1%e5%b9%b4%e4%ba%86-d/</link>
		<pubDate>Sun, 19 Nov 2006 02:41:08 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/19/Ya!!-CommunityChicken-HouseNet-e6bbbfe585a9e980b1e5b9b4e4ba86-D.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>嗯, 這個站架起來的<a href="http://community.chicken-house.net/blogs/peter/archive/2004/11/19/157.aspx">第一篇</a>是 2004/11/19 貼的, 剛好滿兩年 :D</p> <p>當然再之前我自己寫的那個 <a href="http://www.chicken-house.net/forum.net/">forum.net</a> 不算在內啦, 被唸到臭頭的網頁 :~~ 這個只是拿來練功用, 想當年這個 forum 也替我賺了不少獎品 :D, 現在小皮愛玩的 <a href="http://www.chicken-house.net/forum.net/listpost.aspx?forumid=4&amp;year=2004&amp;month=1">xbox</a> (看 2004/01/05 那篇), <a href="http://www.chicken-house.net/forum.net/listpost.aspx?forumid=4&amp;year=2004&amp;month=10">路癡用的 PDA 導航, 老婆大人每天當電視看的 HP 15" LCD.. 還有老爸用的 scanner / printer</a> (2004/10/13那篇)... 都是這程式賺來的.. (H)</p> <p>如果把 forum.net 也算進去的話, 可以追溯到<a href="http://www.chicken-house.net/forum.net/ViewPost.aspx?FPID=742">這篇</a>...&nbsp;2003/06/08...</p> <p>如果把更早的留言板 (當年只用 xml 檔當 storage, 沒有用 database) 算進去.. 哇靠, <a href="http://www.chicken-house.net/forum.net/listpost.aspx?forumid=4&amp;year=2002&amp;month=6">這篇</a>更早, &nbsp;2002/07/01 ...</p> <p>當時還沒花錢買 chicken-house.net 這個 domain name, 用的還是免費的 chicken.27south.com .. 南方廿七號養雞場... -_-</p> <p>再往前算? BBS ... 嗯, 好, 不提當年勇了 [H]</p> <p>謝謝大家的支持, chicken-house.net 會繼續開下去的&nbsp;:D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2006-11-19 02:41:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-19 02:41:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ya-community-chicken-house-net-%e6%bb%bf%e5%85%a9%e9%80%b1%e5%b9%b4%e4%ba%86-d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>494</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-20 04:36:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-20 04:36:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[覺得這篇很像炫耀文...:P
不過,我們家老爺嘛,當然是最厲害的囉! 呵呵...

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>495</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://darkthread.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-20 08:27:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-20 08:27:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇~~~ 要命! 小熊子居然沒跟我提過，雞老大有這麼輝煌的記錄，害我上回見面時忘要膜拜一下，罪過罪過!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>496</wp:comment_id>
			<wp:comment_author><![CDATA[kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-20 13:57:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-20 13:57:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真不好意思，來這邊偷了不少東東，可是都沒有貢獻過，醬吧，我老婆姐姐的女兒要出嫁了，來賞光吧，免費的喲!http://blog.xuite.net/happybobozi/blog/8976240]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>497</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-20 23:23:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-20 23:23:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, Darkthread 不用客氣了, 還有一個沒列上來的: TechED 2002 IT Pro... 

http://www.chicken-house.net/files/chicken/TechED2001.mht

這個你也拿過了.., 小熊子也拿過了.. Orz, 世界真小.. 歷界的都點完名了? 

沒錯, 這篇真的是炫耀文... (H) ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Digital Camera Filer - Source Code (update)</title>
		<link>http://columns.chicken-house.net/2006/11/18/digital-camera-filer-source-code-update/</link>
		<pubDate>Sat, 18 Nov 2006 15:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/18/Digital-Camera-Filer-Source-Code-(update).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>這個程式其實很簡單, 最麻煩的兩個部份都找到現成的 library 就解決掉了, 剩下的就只有剪剪貼貼的手工業而以. 先介紹這個 tools 開發時用到的兩套 library:</P>
<OL>
<LI>PhotoLibrary: 封裝 System.Drawing.Image 方便讀取 EXIF 等資訊. <BR>Project Site: <A href="http://www.gotdotnet.com/workspaces/workspace.aspx...">http://www.gotdotnet.com/workspaces/workspace.aspx...</A> 
<LI>Microsoft RAW Image Viewer: 它提供了 canon sdk 及 .net wrapper<BR>Download Site: <A href="http://www.microsoft.com/downloads/details.aspx?familyid=D48E808E-B10D-4CE4-A141-5866FD4A3286&amp;displaylang=en">http://www.microsoft.com/downloads/details.aspx?fa...</A></LI></OL>
<P>扣掉這兩套 lib 幫的忙之外, 其它剩下的就真的沒啥好看的了... 只有一些五四三的還能拿來講一講... 底下是整個 project 的 class diagram:</P>
<P><IMG src="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.zip/CodeStructure.png"> </P>
<P>程式主要是用到 Factory Patterns, 每種要處理的檔案類型各有一種對應的 MediaFiler 類別來負責, 之後主程式就是 recursive 找出所有的檔案, 一個一個丟給 MediaFiler 處理而以. 簡單的說明一下這幾個 class:</P>
<UL>
<LI>class MediaFiler: 沒啥好說的, 所有的 MediaFiler 都要從這個抽像類別繼承下來. MediaFiler 會處理單一個特定格式的檔案歸檔動作. 
<LI>class CanonPairThumbMediaFiler: 一樣是抽像類別, 不過處理的檔案類型較特別, 專門處理會附帶一個縮圖檔 ( *.thm , 內容為 JPEG 格式縮圖 ) 的檔案類型.</LI></UL>
<P>扣掉這兩個 abstract class, 剩下就一個蘿蔔一個坑了... 來點名吧:</P>
<UL>
<LI>JpegMediaFiler: 就是處理 *.jpg 的 MediaFiler 
<LI>CanonRawMediaFiler: 處理 *.crw (會附帶處理對應的 .thm) 
<LI>CanonVideoMediaFiler: 處理 *.avi (會附帶處理對應的 .thm)</LI></UL>
<P>&nbsp;</P>
<P>[update: 2006/11/20]</P>
<P>講這麼多還丟 source code 幹嘛? 其實有個目的, 就是這工具的架構及選用的 library 其實已經有足夠的擴充能力去適應非 canon 的檔案格式了, 改版後做了一點調整, 搭配了 Attribute 來達成這目的, 舉片段的 code 當例子:</P>
<DIV class=code style="FONT-SIZE: 12pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: fixedsys">
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;237</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">MediaFiler</SPAN> Create(<SPAN style="COLOR: blue">string</SPAN> sourceFile)</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;238</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;239</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">FileInfo</SPAN> sf = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">FileInfo</SPAN>(sourceFile);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;240</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">foreach</SPAN> (<SPAN style="COLOR: teal">Type</SPAN> t <SPAN style="COLOR: blue">in</SPAN> GetAvailableMediaFilers()) </P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;241</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;242</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;243</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//&nbsp; match</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;244</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;245</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">MediaFilerFileExtensionAttribute</SPAN> ea = GetFileExtensionAttribute(t);</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;246</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">if</SPAN> (<SPAN style="COLOR: blue">string</SPAN>.Compare(ea.FileExtension, sf.Extension, <SPAN style="COLOR: blue">true</SPAN>) == 0)</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;247</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;248</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;249</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//&nbsp; file extension match</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;250</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">//</SPAN></P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;251</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">ConstructorInfo</SPAN> ctor = t.GetConstructor(<SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">Type</SPAN>[] { <SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: blue">string</SPAN>) });</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;252</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> ctor.Invoke(<SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: blue">object</SPAN>[] { sourceFile }) <SPAN style="COLOR: blue">as</SPAN> <SPAN style="COLOR: teal">MediaFiler</SPAN>;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;253</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;254</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;255</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> <SPAN style="COLOR: blue">null</SPAN>;</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;256</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
<P style="MARGIN: 0px"><SPAN style="COLOR: #2b91af">&nbsp;&nbsp;</SPAN></P></DIV>
<P>&nbsp;for loop 的部份就是列出所有已載入 AppDomain 的 Assemblies 裡所有包含的 Type, 過濾的條件是:</P>
<OL>
<LI>要繼承自 class MediaFiler 
<LI>class 要有貼上 MediaFilerFileExtensionAttribute 自訂屬性</LI></OL>
<P>符合這兩個條件的所有 type 就會一個一個拿來比對. 也許有人會問, 用 attrib 看起來比較強嗎? 這種典型的應用不是應該用 abstract method, 讓底下的 class 來實作就好?</P>
<P>是的, 如果我用 java 寫的話, 我會這麼做. 不過, polymophism 的前題就是要有 instance, 我連要用那個 class 來產生 instance 都還不曉得, 如何能享用到 polymphism 的好處? 用 static method 就沒有這種好處了, 況且 c# 語法也沒有辦法強迫衍生類別一定要 implements 某些 static method ...</P>
<P>這時透過 attrib 就可以很漂亮的解決這個問題,&nbsp;細節就不管了, 總之我透過 custom attribute 替每個 MediaFiler 標明, 每個 MediaFiler 負責的 file extension 為何.</P>
<P>動態挑到適當的 MediaFiler 後, 剩下的就靠 Reflection 產生 instance, 收工.</P>
<P>&nbsp;</P>
<P>看起來有點小題大作, 目的只有一個, 如果有新的檔案格式要支援怎麼辦? 目前的架構很簡單, 只要加上新的 MediaFiler implementation, 然後用 custom attribute 標明它負責的是那種 file extension, 其它就通通結束了, Factory Pattern 核心的部份 Create( ) 完全不用改.</P>
<P>優點不只如此, 還可以再做的徹底一點, 其它檔案類型的支援, 甚至不用改到原本的 code / .exe, 只要另外開 class library project, 寫在其它的 assembly, 丟在同一個目錄下執行就好了. 以往要做到 plug-ins&nbsp; 架構的程式非常麻煩, 現在十行左右的 code 就完成了.</P>
<P>&nbsp;</P>
<P>最後, 要看 source code 的人可以到下面列的網址下載整個 project. 順便廣告一下我自己寫的 <A href="/post/e4b889e5808be5a5bde794a8e79a84-ASPNET-HttpHandler.aspx">zip folder http handler</A> (H), 幹嘛用的? 直接把 zip 檔丟上來, 透過 http handler 加持, 就可以把 .zip 檔視為一個目錄了...&nbsp;方便的很, 上面的 class diagram 其實就是藏在 zip 檔裡的圖而以... 我就不用另外再維護兩份檔案了 (一份圖檔, 一份 zip 下載檔)</P>
<P>Source Code (Visual Studio 2005 Project): <A href="http://www.chicken-house.net/files/chicken/"><A href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.zip">http://www.chicken-house.net/files/chicken/Chicken...</A></A></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2006-11-18 15:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-18 15:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[digital-camera-filer-source-code-update]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>Canon Digital Camera 記憶卡歸檔工具 - Release Notes</title>
		<link>http://columns.chicken-house.net/2006/11/17/canon-digital-camera-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7-release-notes/</link>
		<pubDate>Fri, 17 Nov 2006 03:22:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/17/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7-Release-Notes.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>好戲不拖棚了, 這個小工具寫到現在, 大部份的問題都解決掉了, 接下來除非有碰到啥 Bug, 否則就不會再大改版了. 在這裡總結一下:</p> <p>&nbsp;</p> <p>overview:</p> <p>DigitalCameraFiler 是專為數位相機記憶卡歸檔用的工具, 包括一般相片, raw file, 及 video clip, 可以依照拍照時的各種資訊 (exif, 包括拍照時間, 相機型號, 光圈值, 快門值... etc) 的組合當成檔名及目錄名稱自動歸檔. 這個工具沒有 windows 介面, 為 Console Application. 可以搭配批次等等工具一起使用.</p> <p>&nbsp;</p> <p>how it work:</p> <p>這工具運作的方式很簡單, 它會掃描指定的目錄 (記憶卡) 下的所有檔案, 碰到支援的檔案類型就會依照定義好的歸檔動作去處理它. 以下是這個工具支援的幾種類型, 及它的處理方式:</p> <ol> <li>JPEG file: 最常見的類型, 碰到 *.jpg 檔會先依照 exif 裡的 Orientation 值決定要不要把照片轉正. 轉好後就把照片放到指定位置.  <li>RAW file: 支援 Canon 的 *.crw 檔案. crw 會搭配對應的 .thm 檔, 會從這兩個檔案取得必要的 exif 資訊, 用來做歸檔的動作. 除了把 .crw 放到指定位置之外, 也會另外把 .crw 轉成 .jpg 放在同一個目錄下. 在轉換檔案格式的同時, 也會把對應的 .thm 檔的 exif 都複製一份到 .jpg 檔.  <li>VIDEO file: 支援 Canon 拍攝的 MJPEG ( *.avi ) 檔. Canon 一樣會準備一份對應的 .thm 檔, 歸檔 .avi 時就會依照對應的 .thm 內的 exif 資訊為準.</li></ol> <p>&nbsp;</p> <p>configuration:</p> <p>這個工具主要的目的就是依照 exif 等資訊來安排歸檔的路逕, 因此設定的方式採取 .net framework 裡通用的 format string 格式為準. 細節可以直接參考 MSDN 網站, 設定的方式如下:</p> <blockquote> <p>pattern: 格式化字串. 大括號 { } 內的數字代表要用後面定的第幾個 exif 代碼替代.</p> <p>exif list: 你要取用的 exif variable list. 序號從 0 開始算.</p></blockquote> <p>舉例來說, 如果你指定的 pattern 為:</p> <blockquote> <p>" c:\photos\{0:yyyy-MM-dd}\{1}-{2}"</p></blockquote> <p>而指定的 exif variable list 為:</p> <blockquote> <p>" DateTime,Model,FileName"</p></blockquote> <p>則用我的 G2 在&nbsp;2006/11/11 拍的照片 IMG_1234.jpg 則會被歸檔到這個位置:</p> <blockquote> <p>c:\photos\2006-11-11\Canon PowerShot G2-IMG_1234.jpg</p></blockquote> <p>pattern 可以依照這樣的原則任意指定, 不存在的目錄會自動建立, 而可用的 exif variable 到底有多少? 在命令列執行這個工具, 不帶任何參數的話就會列出所有的變數名. 這些設定寫在 DigitalCameraFiler.exe.config 檔案內, pattern 可以各別為 JPEG / RAW / VIDEO 分別指定, 而 EXIF List 則是共用的.</p> <p>&nbsp;</p> <p>下回會把 source code 也一起 release 出來, 請有耐心點等待 :D</p> <p>&nbsp;</p> <p>安裝檔下載位置: <a href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip">http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2006-11-17 03:22:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-17 03:22:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-digital-camera-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7-release-notes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>IQ test ...</title>
		<link>http://columns.chicken-house.net/2006/11/15/iq-test/</link>
		<pubDate>Wed, 15 Nov 2006 01:40:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/15/IQ-test-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>同事給的 IQ test 網站: <a href="http://web.tickle.com/tests/uiq/index-pop.jsp?sid=...">http://web.tickle.com/tests/uiq/index-pop.jsp?sid=...</a></p> <p>只有 124 分 :'(</p> <p>共有 40 題, 英文的題目... 看來敗在英文太爛, 真糟糕, 語言能力只有 40% ~ 50% 的水準 :~~~</p> <p>測完有詳細的 report, 分四個領域個別分析你的能力.. 貼一小段我的測試報告上來:</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <hr>  <p>Congratulations, Andrew!<br>Your IQ score is 124  <p><img height="115" alt="" src="http://i.emode.com/tests/uiq/images/processor2_s.gif" width="120" border="0">  <p>This number is based on a scientific formula that compares how many questions you answered correctly on the Classic IQ Test relative to others. <br>Your Intellectual Type is <b>Precision Processor</b>. This means you're exceptionally good at discovering quick solutions to problems, especially ones that involve math or logic. You're also resourceful and able to think on your feet. And that's just some of what we know about you from your test results.  <p>&nbsp;  <p>&nbsp;  <p>&nbsp;  <p>Mathematical Intelligence  <p>Your Mathematical Percentile<br><img height="38" alt="90th percentile" src="http://i.emode.com/tests/uiq/images/90_percent.gif" width="480" border="0">  <p>You scored in the 90th percentile on the mathematical intelligence scale.This means that you scored higher than 80% - 90% of people who took the test and that 10% - 20% scored higher than you did. The scale above illustrates this visually. <br>Your mathematical intelligence score represents your combined ability to reason and calculate. You scored relatively high, which means you're probably the one your friends look to when splitting the lunch bill or calculating your waitresses' tip. You may or may not be known as a math whiz, but number crunching might come a little easier to you than it does others.  <p>&nbsp;  <p>&nbsp;  <p>&nbsp;  <p>Visual-Spatial Intelligence  <p>Your Visual-Spatial Percentile<br><img height="38" alt="70th percentile" src="http://i.emode.com/tests/uiq/images/70_percent.gif" width="480" border="0">  <p>You scored in the 70th percentile on the visual-spatial intelligence scale.<br>This means that you scored higher than 60% - 70% of people who took the test and that 30% - 40% scored higher than you did. The scale above illustrates this visually. <br>The visual-spatial component of intelligence measures your ability to extract a visual pattern and from that envision what should come next in a sequence. Your score was relatively high, which could mean that you're the one navigating the map when you're on an outing with friends. You have, in some capacity, an ability to think in pictures. Maybe this strength comes out in subtle ways, like how you play chess or form metaphors.  <p>&nbsp;  <p>&nbsp;  <p>&nbsp;  <p>Linguistic Intelligence  <p>Your Linguistic Percentile<br><img height="38" alt="50th percentile" src="http://i.emode.com/tests/uiq/images/50_percent.gif" width="480" border="0">  <p>You scored in the 50th percentile on the linguistic intelligence scale.<br>This means that you scored higher than 40% - 50% of people who took the test and that 50% - 60% scored higher than you did. The scale above illustrates this visually. <br>Linguistic abilities include reading, writing and communicating with words. Tickle's test measures knowledge of vocabulary, ease in completing word analogies and the ability to think critically about a statement based on its semantic structure. Your score was relatively low, which could just mean that you convey ideas through other means than verbally. Or maybe it just means you find other ways to spend your time than doing crossword puzzles.  <p>&nbsp;  <p>&nbsp;  <p>&nbsp;  <p>Logical Intelligence  <p>Your Logical Percentile<br><img height="38" alt="100th percentile" src="http://i.emode.com/tests/uiq/images/100_percent.gif" width="480" border="0">  <p>You scored in the 100th percentile on the logical intelligence scale.<br>This means that you scored higher than 90% - 100% of people who took the test and that 0% - 10% scored higher than you did. The scale above illustrates this visually. <br>Tickle's logical intelligence questions assess your ability to think things through. The questions determine the extent to which you use reasoning and logic to determine the best solution to a problem. Your logic score was relatively high, which could mean that when the car breaks down, your friends look to you to help figure out not only what's wrong, but how to fix it and how you're going to get to the next gas station. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2006-11-15 01:40:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-15 01:40:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[iq-test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>498</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://darkthread.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-15 13:08:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-15 13:08:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[利用午休時間花了半小時做完，在可查英文字典的情況下，131... 剛好飛過95%的門檻。不過後來才覺得也許這個測驗應該是不允許查字典的，有些用字十分艱澀，看來也在考量受測者的語言能力，所以這個分數作廢了~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>499</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-02 04:12:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-02 04:12:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇也是炫耀文吧?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>500</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-03 17:54:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-03 17:54:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這種 IQ 值得拿來炫耀嘛...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IE6 縮放網頁: using css + htc</title>
		<link>http://columns.chicken-house.net/2006/11/11/ie6-%e7%b8%ae%e6%94%be%e7%b6%b2%e9%a0%81-using-css-htc/</link>
		<pubDate>Sat, 11 Nov 2006 23:17:48 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/11/IE6-e7b8aee694bee7b6b2e9a081-using-css-2b-htc.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>之前在小熊子朋友 DarkThread 的網頁看到<a href="http://feeds.feedburner.com/~r/Darkthread/~3/45804519/kb-ie6.html" target="_blank">一篇</a>, 可以不用裝 IE7 / Firefox 等就可以有縮放網頁的功能.. 不過有個限制是要在網頁加上一段 html code, 逛的網頁不是自己能改的就頭痛了...</p> <p>之前這篇講到用 css 可以把所有的網頁縮放大小, 不過縮放比例是寫死在 css 裡的... 看到 DarkThread 的那篇, 就手癢了起來, 試試用 htc + css 的方式, 看看能不能藉著這個技巧把縮放網頁的功能散佈到所有的網站上...</p> <p>htc (Html Component) 是從 IE5.0 開始的 "新技術", 基本上它的目的就像 asp.net 的 server control, 你可以透過它創造自己的 html tag, 只不過 htc 是 client side 的技術, 而 server control 是 server side 的技術, 用法很像, 技巧完全不一樣...</p> <p>htc 在 IE5.0 只是很基本的 support, 它是從 css 裡的 behavior 延伸出來的, 因為它是靠 css 的 behavior 把 html element 跟 htc 綁在一起, 因此可以透過 css 直接把功能散佈到整個網站,&nbsp; 就變成它最擅長的地方了, 下次貼一篇把整個網站的右鍵選單停用的例子, 超簡單...</p> <p>原理大概是這樣, 因為 IE 提供了 user 自訂 css 的功能, 你可以把你自訂的 css 檔套用在所有你的 ie 開啟的網頁, 加上 htc (html component) 可以藉著 css 套用到網頁上, 這次就來試試這兩者的組合...</p> <p>1. 在 c:\ 放了三個檔案: zoom.htc / zoom.css / zoom.html (點<a href="http://www.chicken-house.net/files/chicken/zoom.zip">這裡下載</a>)</p> <p>2. 打開 IE, 工具 -&gt; 網際網路 -&gt; 存取設定 -&gt; 樣式表 -&gt; 指定 c:\zoom.css</p> <p>3. 開網頁, c:\zoom.html</p> <p>4. 按住 ALT, 同時點一下滑鼠左鍵, 不錯, 底下跳出 select 來了, 選百分比就可以直接改變網頁放大率...</p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="334" src="http://community.chicken-house.net/blogs/images/49b1d4940d01_14B92/23.jpg" width="300" border="0"> </p> <p>&nbsp;</p> <p>看起來好像很不錯, html 裡完全跟我自訂的 css / htc 沒關係, 但是效果卻出來了 (y). 不過在早期的 IE 這樣就大功告成了, 現在的 IE 可沒那麼簡單... :'(</p> <p>接著再打開 google 首頁看看...</p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="512" src="http://community.chicken-house.net/blogs/images/49b1d4940d01_14B92/17.jpg" width="501" border="0"> </p> <p>Orz,&nbsp;因為 c:\zoom.htc 跟 <a href="http://www.google.com.tw">http://www.google.com.tw</a> 在兩個不同的 security zone, 而且 domain 也不同, 兩者的 cross talk 被 IE 給檔了下來... ouch... 看來就差這個該死的安全機制...&nbsp;不然一切就太完美了... 這個限制還沒有找到很簡單的解法, 有點子的人就提供一下吧... :'(</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2006-11-11 23:17:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-11 23:17:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ie6-%e7%b8%ae%e6%94%be%e7%b6%b2%e9%a0%81-using-css-htc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML/CSS]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>CSS 擋右鍵</title>
		<link>http://columns.chicken-house.net/2006/11/11/css-%e6%93%8b%e5%8f%b3%e9%8d%b5/</link>
		<pubDate>Sat, 11 Nov 2006 03:00:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/11/CSS-e6938be58fb3e98db5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>先講在前面, 我是很不喜歡這種無聊的網站... 擋右鍵幹嘛? 也許站長真的覺的他的內容很了不起大家都想偷... 不過右鍵按下去一堆功能, 又不是每個人點右鍵都是要偷內容... 被當小偷看待的感覺真的挺不爽.. 真的要看, fillder 開下去什麼都看的到..</p> <p>好, 牢騷發完了 (H), 今天不是要講這個.. 因為工作的關係, 開發的系統是處理企業內部的 web content, 免不了有這種檔右鍵的需求, 這種 code 大家或多或少都寫過, 不過都寫的很煩吧...</p> <p>"什麼!!! 每一頁都要檔?"</p> <p>"每一頁都加 code 要加到什麼時後..."</p> <p>接到這種需求大概都想扁人吧, 咳咳... 我就是因為懶所以想到一招省事的... 先來看一下這個網頁, 看看大家追不追的到右鍵是怎麼擋的...</p> <p><a href="http://www.chicken-house.net/files/chicken/htc-sample.zip/index.html" target="_blank">test html page</a>&nbsp;(<a href="http://www.chicken-house.net/files/chicken/htc-sample.zip">full source</a>)</p> <p>看出來為什麼右鍵被停用了嗎? 沒有 script tag, 也沒有 include 啥鬼東西, 開這個 page 的 link 也沒動啥手腳... 開 page 時 ie 也沒要求下載啥奇怪的軟體...</p> <p>不過, 右鍵的確是被 disable 了, 秘密就在這段 css ..</p> <p><font color="#0000ff">body { behavior:url('context-menu-blocker.htc'); }</font></p> <p>這是 Microsoft 在 IE5 之後就引進的 DHTML Behaviors. CSS 是為了樣式而設計出來的, 目的就是希望一組網頁只要有共通的樣式, 就不用每一頁去調字型顏色等等... 只要透過 CSS 就可以把整個網站的每一頁, 在特定 tag 套用特定的樣式...</p> <p>"只能套用外觀嗎? 如果程式也可以這樣撒出去就好了"</p> <p>沒錯, behavior 就是這個目的, 把你想怎樣 "改造" 這個 tag 的 script 寫在 .htc 裡, 再用 css 把它綁到 tag 上, 一切就完成了.</p> <p>這個例子的 htc 只有去攔捷 oncontextmenu 事件, 攔下來後只有做取消事件的動作而以. 藉著 css 就可以把這功能套用到 page 上了... 當然, 你的網站有 css 的話, 這個功能馬上就套用到你所有的網頁了.</p> <p>這些技巧果然說穿了就不值錢... 咳咳, 不過 HTC 還有很多其它更讚的應用, 因為它很精巧的把 code 跟 tag binding 處理的很好, 很可惜這技術好像不大登的上抬面, 用過的人似乎不多, IE5.0 推出後, IE5.5 對 htc 有些改進, 之後就沒有啥新的進展了..</p> <p>不知道 IE7 對 htc 有啥改進? 有空再來試試了 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date><![CDATA[2006-11-11 03:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-11 03:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[css-%e6%93%8b%e5%8f%b3%e9%8d%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML/CSS]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>501</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-12 03:04:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-12 03:04:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用FIREFOX 就擋不住了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>502</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-13 17:50:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-13 17:50:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很抱歉, 這方法 IE5 限定... :$
FireFox 就要用普通的方法每頁都加 code ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>沒網路...</title>
		<link>http://columns.chicken-house.net/2006/11/11/%e6%b2%92%e7%b6%b2%e8%b7%af/</link>
		<pubDate>Sat, 11 Nov 2006 02:23:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/11/e6b292e7b6b2e8b7af.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>好不容易等到周末, 結果一回家就沒電話沒網路... 還以為沒繳錢... 打去中華電信問才知道今晚施工, 要到明早才好... :@</p> <p>沒事做只好貼一貼來抱怨一下 :@</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2006-11-11 02:23:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-11 02:23:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b2%92%e7%b6%b2%e8%b7%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>小紅點缺料? Lenovo Sucks...</title>
		<link>http://columns.chicken-house.net/2006/11/04/%e5%b0%8f%e7%b4%85%e9%bb%9e%e7%bc%ba%e6%96%99-lenovo-sucks/</link>
		<pubDate>Sat, 04 Nov 2006 02:40:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/04/e5b08fe7b485e9bb9ee7bcbae69699-Lenovo-Sucks.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>難道 thinkpad 換東家之後真的要走下坡了嘛... 小紅點缺料? ouch ...</P>
<P>從我之前的 X23, 到現在的 X31, 總共五年有了吧, 這倒是第一次碰到要索取還缺料的... 雖然小紅點的定價並不便宜, 不過也不用這樣吧, 東西小又不佔空間, 放了也不會壞, 全系列 ThinkPad 都通用的小紅點, 應該是很好控制庫存才對, 會用到缺料, 那真是 costdown 過頭了吧? 不然就是 lenovo 覺的三個月索取一次太便宜 user 了, 就用缺料來控制 user 消耗速度? hmmm...</P>
<P>也許只是真的 "剛好" 缺料而以, 我也不差晚一陣子拿到小紅點, 只不過單純不爽發發牢騷... 下一台 notebook 還要不要買 ThinkPad 真的該好好考慮了, 購買動機好像真的只剩 keyboard ... :~~</P>
<P><A href="http://www-8.ibm.com/lenovoinfo/pc/support/tw/maintenance/trackpoint.html" atomicselection="true"><IMG style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px" src="/blogs/images/Orz_23F8/image05.png"></A></P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2006-11-04 02:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-04 02:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b0%8f%e7%b4%85%e9%bb%9e%e7%bc%ba%e6%96%99-lenovo-sucks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>503</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-07 02:26:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-07 02:26:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是太了不起了, 到現在還在缺料... :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>504</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-03 00:09:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-03 00:09:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[了不起, 料終於補齊了... (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon Digital Camera 記憶卡歸檔工具 - RAW Support Update</title>
		<link>http://columns.chicken-house.net/2006/11/04/canon-digital-camera-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7-raw-support-update/</link>
		<pubDate>Sat, 04 Nov 2006 00:00:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/04/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7-RAW-Support-Update.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>每次貼新東西, 小熊子都會來支持一下... 這次寫的記憶卡歸檔工具, 既然他抱怨了一下不支援 RAW file, 那當然要來找一下 solution.. 哈哈..</p> <p>順手找了一下, 發現資源真少, 追到最後只有一些 open source 的 project 提供 Canon 的 Raw File Access, 另外 Canon 也有自己的一套 Digital Camera SDK ( free, C++ only&nbsp;), 要寫信去要, 不過不用收費就是.. 其它都是不成熟的 project, 看起來都不是很可靠 :S</p> <p>咳, c++ 已經好幾年沒碰了, 拿來唬唬還可以, 真的要動手就算了... 結果剛好讓我找到一條線索... Microsoft 提供一個簡單的 viewer, 可以直接看各家的 RAW file, 名字落落長: <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=D48E808E-B10D-4CE4-A141-5866FD4A3286&amp;displaylang=en&amp;Hash=AKaUVvxBh5XTO8fSXj6oUQmxLZAIkGTh8NzlZpwqSoCKqxdFKhVexFexOz1oLkXYi7C3rLi1dzbWfrUGColAfA==">Microsoft RAW Image Thumbnailer and Viewer for Windows XP</a> ...</p> <p>印相中這個工具可以看 canon crw, 而且安裝的系統需求是要裝 .net framework..</p> <blockquote> <p>"該不會有現成的 .net assembly 可以讀 canon raw file 的內部資訊吧?"</p></blockquote> <p>試了一下, 隨便找個看的順眼的 dll 反組譯一下, 老天真是照顧我啊, 中獎!! 哇哈哈... 原本 DigitalCameraFiler.exe 的程式架構其實早就想好要怎麼改了, 只是之前一直找不到適當的 lib..</p> <p>找到的 assembly 用法很簡單, 只要先裝好 Microsoft RAW Image Thumbnailer and Viewer for Windows XP, 就可以在安裝目錄找到這個 assembly dll: RawManager.Interop.dll</p> <p>使用的方式也很簡單 (感謝 Microsoft 工程師的 coding style 都很一致... ), 隨便試一下就試出來了:</p> <p>&nbsp;</p> <div class="code" style="font-size: 12pt; background: white; color: black; font-family: fixedsys"> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;22</span>&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: teal">CRawViewerClass</span> raw = <span style="color: blue">new</span> <span style="color: teal">CRawViewerClass</span>();</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;23</span>&nbsp;&nbsp;&nbsp;&nbsp; raw.Load(<span style="color: maroon">@"c:\CRW_1234.crw"</span>);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;24</span>&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: teal">Console</span>.WriteLine(<span style="color: maroon">"Camera Model: {0}"</span>, raw.CameraModel);</p></div> <p>&nbsp;</p> <p>這 Interop assembly 寫的還真不錯... 看起來真正做事的仍然是 Canon Digital Camera SDK... 不過現在我也可以用 C# 很簡單的叫來用, 哈哈, 感覺真爽...</p> <p>不過還沒挖到可以 edit raw 的 API, 感覺遜了一點, 但是小熊子都說了...</p> <blockquote> <p><font color="#0000ff">chicken: 不過抓的東西很有限&nbsp;:S, 也還沒辦法自動轉正<br>Michael (小熊子): raw 不需要轉正說 <br>Michael (小熊子): raw 只要知道啥米時間拍的應該就 OK </font></p></blockquote> <p>所以這部份就再說了 [H]... 哈哈...</p> <p>更新過的檔案下載: [<a href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip">DigitalCameraFilerSetup.msi</a>]<br>使用前請先安裝: <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=D48E808E-B10D-4CE4-A141-5866FD4A3286&amp;displaylang=en&amp;Hash=AKaUVvxBh5XTO8fSXj6oUQmxLZAIkGTh8NzlZpwqSoCKqxdFKhVexFexOz1oLkXYi7C3rLi1dzbWfrUGColAfA==">Microsoft RAW Image Thumbnailer and Viewer for Windows XP</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2006-11-04 00:00:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-04 00:00:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-digital-camera-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7-raw-support-update]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>505</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://darkthread.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-14 23:35:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-14 23:35:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[之前我也有動過腦筋要做Canon的照片檔歸檔(咳... 當然，半途而廢了)，想到的賤招是--- CRW檔會附一個.THM檔案(Thumbnail?)，其實只是JPG檔Rename罷了，所以EXIF資料從裡面取也成(我只要日期時間，所以還OK)。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>506</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-15 14:02:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-15 14:02:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 這招大家都用過 (H), 我對付 canon 拍下來的 .avi 也是靠它的 .thm ... 可以多抓到 camera model 就很夠了 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>507</wp:comment_id>
			<wp:comment_author><![CDATA[buy cheap digital camera]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sanane@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.buycheapdigitalcamera.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-29 00:38:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-29 00:38:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[之前我也有動過腦筋要做Canon的照片檔歸檔(咳... 當然，半途而廢了)，想到的賤招是--- CRW檔會附一個.THM檔案(Thumbnail?)，其實只是JPG檔Rename罷了，所以EXIF資料從裡面取也成(我只要日期時間，所以還OK)。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon Digital Camera 相機獨享 - 記憶卡歸檔工具</title>
		<link>http://columns.chicken-house.net/2006/11/02/canon-digital-camera-%e7%9b%b8%e6%a9%9f%e7%8d%a8%e4%ba%ab-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7/</link>
		<pubDate>Thu, 02 Nov 2006 23:41:54 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/11/02/Canon-Digital-Camera-e79bb8e6a99fe78da8e4baab-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>用數位相機的人或多或少都有這困擾吧? 不用底片錢, 也不用洗出來, 相機拿起來就是拼命拍... 拍完後, 不要說後製作了, 光是把相片檔案歸檔就有點麻煩...</p> <p>&nbsp;</p> <p>"我久久才 copy 一次照片, 要照日期分目錄真麻煩"</p> <p>"video 檔歸檔也麻煩"</p> <p>"直拍的照片要轉 90' 得一張一張看.."</p> <p>"兩台相機檔名重覆... " &lt;--- 這個大概只有我會碰到吧, 我家的相機都是 canon ...</p> <p>"...."</p> <p>&nbsp;</p> <p>這些問題,&nbsp;其實都有很好的工具可以解決, Google 的那套 Picasa 就很棒, 不然 Adobe 的 Album, AcdSee 也都有 solution ...</p> <p>不過我就是不想裝一些五四三的啊... 看照片我都只用 windows xp 內建的 image viewer, 我只缺一個很簡單的工具, 把記憶卡的照片檔案自動搬到我要的目錄就好... 可以的話我甚至不要 windows 介面的, 可以用命令列執行的更棒... (我果然是老人.. :~~~~)</p> <p>最後是自己寫一個來用... 過去是寫簡單的批次檔就搞定, 也用了兩年了, 成效很好, 我就直接把內容貼出來, 有需要的人可以拿去用...</p> <p>&nbsp;</p> <div> <p><font color="#0000ff">set DATETEXT=%DATE:~0,4%-%DATE:~5,2%%DATE:~8,2%<br>if not "%2"=="" set DATETEXT=%2 </font></p> <p><font color="#0000ff">set TRGDIR="c:\Photos\%DATETEXT% [%1]\"<br>md %TRGDIR% </font> <p><font color="#0000ff">@echo "處理 F:\DCIM 的照片..."<br>@ for /R F:\DCIM %%f in (*.jpg) do @echo 移動照片中... %%f &amp;&amp; @move /-Y %%f %TRGDIR% &gt; nul<br>@ for /R F:\DCIM %%f in (*.crw) do @echo 移動照片中... %%f &amp;&amp; @move /-Y %%f %TRGDIR% &gt; nul<br>@ for /R F:\DCIM %%f in (*.avi) do @echo 移動影片中... %%f &amp;&amp; @move /-Y %%f "c:\videos\input [dc-avi]\%DATETEXT% [%1 #%%~nf].avi" &gt; nul<br>@ for /R F:\DCIM %%f in (*.thm) do @echo 刪除影片縮圖... %%f &amp;&amp; @del /f /q %%f &gt; nul</font> </p></div> <p>&nbsp;</p> <p>批次檔的方式已經可以解決這些問題:</p> <ol> <li>依日期命名, 像這樣的格式:<br>c:\photos\2006-0101 [去公園]\IMG_9999.jpg  <li>因為我有另外處理 video file 的動作, 因此 avi 檔會另外分開放, 格式為:<br>c:\videos\2006-0101 [去公園 #MVI_9999].avi  <li>只要執行這指令, 檔案就都歸好了:<br>copypic.cmd 去公園<br>或是自己指定日期...<br>copypic.cmd 去公園 2006-0101</li></ol> <p>不過用起來還是有一點小缺點:</p> <ol> <li>日期判定不精確, 因為只寫批次檔的話, 我找不到方法把檔案日期切一段出來... 因此歸檔的檔名只能用 copy 時的日期來算... 常常白天拍, 晚上過十二點哄完小孩才來 copy, 日期就差一天  <li>因為 (1), 累積了好幾天的照片只能混在一起, 分不開  <li>沒辦法以相機名稱命名, 兩台相機照出來的檔名常打架  <li>要自動轉正</li></ol> <p>像是要讀取 EXIF 的部份, 要光靠批次檔真的是太勉強了... 本來想寫個小工具搭配批次檔用, 不過發現花的工夫跟本差不多... 就直接寫了一個小工具 [DigitalCameraFiler.exe],&nbsp;取代掉上面的批次檔了..</p> <p>需要的人可以下載去用, 不過喜歡用命令列的人應該不多吧... 哈哈... 用法很簡單... 請先確定你的電腦有安裝 Microsoft .Net Framework 2.0... 安裝設定的方式:</p> <ol> <li>編輯設定檔: DigitalCameraFiler.exe.config<br> <div> <div style="font-size: 12pt; background: white; color: black; font-family: fixedsys"> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;1</span>&nbsp;<span style="color: blue">&lt;?</span><span style="color: maroon">xml</span><span style="color: blue"> </span><span style="color: red">version</span><span style="color: blue">=</span>"<span style="color: blue">1.0</span>"<span style="color: blue"> </span><span style="color: red">encoding</span><span style="color: blue">=</span>"<span style="color: blue">utf-8</span>"<span style="color: blue"> ?&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;2</span>&nbsp;<span style="color: blue">&lt;</span><span style="color: maroon">configuration</span><span style="color: blue">&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;3</span>&nbsp;<span style="color: blue"> &lt;</span><span style="color: maroon">appSettings</span><span style="color: blue">&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;4</span>&nbsp;<span style="color: blue">&nbsp; &lt;</span><span style="color: maroon">add</span><span style="color: blue"> </span><span style="color: red">key</span><span style="color: blue">=</span>"<span style="color: blue">default.title</span>"<span style="color: blue"> </span><span style="color: red">value</span><span style="color: blue">=</span>"<span style="color: blue">未定標題</span>"<span style="color: blue">/&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;5</span>&nbsp;<span style="color: blue">&nbsp; &lt;</span><span style="color: maroon">add</span><span style="color: blue"> </span><span style="color: red">key</span><span style="color: blue">=</span>"<span style="color: blue">video.targetPattern</span>"<span style="color: blue"> </span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;6</span>&nbsp;<span style="color: blue">&nbsp;&nbsp; </span><span style="color: red">value</span><span style="color: blue">=</span>"<span style="color: blue">c:\video\{0:yyyy-MMdd} [{1} #{4}].avi</span>"<span style="color: blue"> /&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;7</span>&nbsp;<span style="color: blue">&nbsp; &lt;</span><span style="color: maroon">add</span><span style="color: blue"> </span><span style="color: red">key</span><span style="color: blue">=</span>"<span style="color: blue">general.targetPattern</span>"<span style="color: blue"> </span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;8</span>&nbsp;<span style="color: blue">&nbsp;&nbsp; </span><span style="color: red">value</span><span style="color: blue">=</span>"<span style="color: blue">c:\photos\{0:yyyy-MMdd} [{1}]\{3}</span>"<span style="color: blue"> /&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;&nbsp;9</span>&nbsp;<span style="color: blue">&nbsp; &lt;</span><span style="color: maroon">add</span><span style="color: blue"> </span><span style="color: red">key</span><span style="color: blue">=</span>"<span style="color: blue">photo.targetPattern</span>"<span style="color: blue"> </span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;10</span>&nbsp;<span style="color: blue">&nbsp;&nbsp; </span><span style="color: red">value</span><span style="color: blue">=</span>"<span style="color: blue">c:\photos\{0:yyyy-MMdd} [{1}]\{2} #{3}</span>"<span style="color: blue"> /&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;11</span>&nbsp;<span style="color: blue">&nbsp; &lt;</span><span style="color: maroon">add</span><span style="color: blue"> </span><span style="color: red">key</span><span style="color: blue">=</span>"<span style="color: blue">arguments</span>"<span style="color: blue"> </span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;12</span>&nbsp;<span style="color: blue">&nbsp;&nbsp; </span><span style="color: red">value</span><span style="color: blue">=</span>"<span style="color: blue">LastWriteTime,Title,Model,Name,<br>FileNameWithoutExtension</span>"<span style="color: blue">/&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;13</span>&nbsp;<span style="color: blue"> &lt;/</span><span style="color: maroon">appSettings</span><span style="color: blue">&gt;</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;14</span>&nbsp;<span style="color: blue">&lt;/</span><span style="color: maroon">configuration</span><span style="color: blue">&gt;</span></p></div></div>default.title: 預設的主題,&nbsp;執行時沒給 title 的話就用這個代替<br>video.targetPattern: 放 *.avi 檔的位置, 其中 {0} {1} .. 會用最後面的 arguments 依序代替<br>general.targetPattern: 放&nbsp;*.crw 檔的位置<br>photo.targetPattern: 放 *.jpg 檔的位置  <li>執行時, 打開 DOS Prompt, 切到目錄下, 執行:<br>DigitalCameraFilter.exe&nbsp;F:\ 公園外拍<br>其中, F:\ 是指你記憶卡的路逕, "公園外拍" 是主題</li></ol> <p>photo 為例, 最後檔案會被歸到:</p> <p>c:\photos\2006-1102 [公園外拍]\Canon PowerShot G2 #IMG_1234.jpg</p> <p>大概就是這樣, 自己寫來用的, 覺的好用的話就鼓勵一下吧 :D</p> <p><a href="http://www.chicken-house.net/files/chicken/ChickenHouse.Tools.DigitalCameraFiler.Binary.zip">下載程式</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2006-11-02 23:41:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-02 23:41:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-digital-camera-%e7%9b%b8%e6%a9%9f%e7%8d%a8%e4%ba%ab-%e8%a8%98%e6%86%b6%e5%8d%a1%e6%ad%b8%e6%aa%94%e5%b7%a5%e5%85%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>508</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-03 10:47:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-03 10:47:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好用是好用…

我要 raw 檔的啦~ 嗚…
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>509</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-03 16:31:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-03 16:31:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[突然想到一個可能的 solution, 試了一下竟然可以用 :D 
run 起來像這樣.. 哇哈哈.. 


DigitalCameraFiler.exe e:\dcim 測試 
[001/001] 處理檔案: e:\dcim\CRW_8635.CRW ... 
  ==> 複製到: e:\dcim.out\photo\2006-1001 [測試]\Canon PowerShot G2 #CRW_8635.CRW ... 
  ==> 完成. 
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新硬碟... Hitachi Travelstar 5K160...</title>
		<link>http://columns.chicken-house.net/2006/10/31/%e6%96%b0%e7%a1%ac%e7%a2%9f-hitachi-travelstar-5k160/</link>
		<pubDate>Tue, 31 Oct 2006 02:06:33 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/31/e696b0e7a1ace7a29f-Hitachi-Travelstar-5K160.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>敗家果然是需要衝動的啊... 大約半年前, X31 的硬碟 (7K60, 2.5", 7200 rpm, 60GB) 開始有壞軌了. 不過壞軌嘛, 還是可以用, 只是剛好讀到那個地方就會整台電腦都卡住 -_-, 要換硬碟又是大工程, 加上 notebook 是工作上需要的, 停掉一天重灌就很麻煩, 這個有問題的硬碟就一直沒去理它..</p> <p>不過每次看到硬碟燈在閃, 心裡就不大安穩, 很怕它不知啥時就給我罷工, 因此備份也做的很勤... 某天正好看到新硬碟的評比... 5K160 !! 真是夢幻的硬碟啊... [L], 垂直寫入 (那堆好處就不講了), 容量有 160GB, 嗯, 雖然只有 5400 rpm, 不過那個容量真是太誘人了... :D~~~ 現在的 60GB 每次都在忙著清檔案把空間騰出來..</p> <p>Y拍找了半天, 都缺貨, 只有它牌的, 不然就只有 SATA 版本的, 再不然就是容量小兩號的... 光華 &amp; 其它地方也逛過了, 就是沒有店家有貨... 跟Y拍賣家留了 email 後就沒去理它了, 直到上拜四晚上收到 mail 通知到貨, 拜五中午電話問了一下, 嗯, 很囉唆的賣家...</p> <p>賣家講了堆五四三 (電話要錢啊~~~), 說他的貨多難調... 這我是相信啦, 因為我自己找了半天還真的沒地方買... 最後下午兩點時去匯款給他下訂. 效率真快, 當天回家時東西就送到了, 不知道是幾點寄來的? 哈哈... 害我連退訂的機會都沒有..</p> <p>周末兩天就都在搞這顆新硬碟... 裝硬碟簡單, 轉資料麻煩, nb 只能裝一顆硬碟, 要搬資料更麻煩... 重裝 windows 太辛苦了, 不適合老人家... 何況再不久八成會忍不住換 vista, 就撐著點用了, 最後用了 true image ...</p> <p>壞了一堆磁軌, 好險最後新硬碟開機進 windows xp 一切正常... 順便推薦一下 Acronis True Image, 看來 Ghost 完全被比下去了, 有機會再寫 post 比較...</p> <p>原本的 7K60 怎辦? 當然是趁三年保固不到寄去原廠換 :D 如果這次換回新的, 就要拿去賣掉了... 有人要預定的嘛? 在這裡預約打九折 [H]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2006-10-31 02:06:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-31 02:06:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e7%a1%ac%e7%a2%9f-hitachi-travelstar-5k160]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>利用 NUnitLite, 在 App_Code 下寫單元測試</title>
		<link>http://columns.chicken-house.net/2006/10/29/%e5%88%a9%e7%94%a8-nunitlite-%e5%9c%a8-app_code-%e4%b8%8b%e5%af%ab%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6/</link>
		<pubDate>Sun, 29 Oct 2006 14:10:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/10/29/e588a9e794a8-NUnitLite2c-e59ca8-App_Code-e4b88be5afabe596aee58583e6b8ace8a9a6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>繼上篇寫了些 543, 說 NUnitLite 可以用來測 Asp.Net 2.0 Web Application 後,&nbsp;這次來個簡單的範例. 因為我公司主要開發的是 web based application, 因此常常碰到寫好的程式可能會被安裝到好幾個不同 site 的情況, 甚至安裝的人員也不見得是懂 coding 的人.. 因此確認 configuration 是否正確就是很重要的一環. 這個例子就來把 "configuration 是否正確" 這件事, 也當做 unit test 的一部份.</p> <p>也許有人會講, 這是環境的測試, 而 unit test 主要是要測程式的最小單元 - function 是否正常, 話是沒錯, config 之類的問題應該用 trace / assert 也許較恰當, 或是整個 system initialization 時就應該自我檢查一番. 這樣沒錯, 不過我的看法較實際一點, 除非你的開發人員很多, 或是你的產品量已經大到值得你這麼做, 否則大部份的專案, 我想這部份都是被呼略掉的一環...</p> <p>因此, 既然 NUnit Framework 已經讓測試這麼方便了, 為什麼不順便用這種機制來做些額外的檢查? 好, 不多說, 來看 sample project:&nbsp; NUnitLiteWebSite</p> <p>首先, 你寫好的 test fixture, 總要有 test runner 來測試它. Nunit 有 gui / console mode runner, 但是 NUnitLite 沒有, 而且 App_Code 最簡單能執行的方式也只有 asp.net page (其實我實際應用的案例, 連 ASP.NET Hosting 都用上了, 不過這就有點偏離主題了). 所以...</p> <p>Step 1. 先建立一個 Web Site Project.. [<a href="http://www.chicken-house.net/files/chicken/NUnitLiteWebSite.zip">download</a>]</p> <p>Step 2. Reference NUnitLite.dll, 請自行到 NUnitLite 網站下載 source code, 自己 build 吧.</p> <p>Step 3. 實作 NUnitLiteTestRunner.aspx 這個網頁, 目標是 browser 開啟這網頁, 就能看到像 NUnitConsole 輸出的結果畫面... (當然醜一點沒關係... ) 主程式很短, 如下...</p> <p>&nbsp;</p> <div class="code"> <div style="font-size: 12pt; background: white; color: black; font-family: fixedsys"> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;13</span>&nbsp;<span style="color: blue">public</span> <span style="color: blue">partial</span> <span style="color: blue">class</span> <span style="color: teal">NUnitLiteTestRunner</span> : System.Web.UI.<span style="color: teal">Page</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;14</span>&nbsp;{</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;15</span>&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue">protected</span> <span style="color: blue">void</span> Page_Load(<span style="color: blue">object</span> sender, <span style="color: teal">EventArgs</span> e)</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;16</span>&nbsp;&nbsp;&nbsp;&nbsp; {</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;17</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue">this</span>.Response.ContentType = <span style="color: maroon">"text/plain"</span>;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;18</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">Console</span>.SetOut(<span style="color: blue">this</span>.Response.Output);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;19</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;20</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">ConsoleUI</span>.Main(<span style="color: blue">new</span> <span style="color: blue">string</span>[] {<span style="color: maroon">"App_Code"</span>});</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;21</span>&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;22</span>&nbsp;}</p></div></div> <p>&nbsp;</p> <p>應該沒啥需要說明吧?<br>第一行指定輸出的 content type 是純文字...<br>第二行把 Console.Output 導向到 Response.Output, 這樣 browser 才收的到輸出內容<br>第三行, 呼叫 NUnitLite 內建的 console test runner ...<br>第四行, 沒... 沒事做了</p> <p>&nbsp;</p> <p>Step 4. 接下來就簡單了, 直接在 App_Code 下把你要的 TestFixture 通通丟進去... 我準備了一個例子, 主要做兩項測試. 一個是確認 session 有啟用, 另一個就是確認 configuration 裡指定的 temp folder 是否存在, 是否真的能夠 create / read / write / delete temp file.</p> <div class="code"> <div style="font-size: 12pt; background: white; color: black; font-family: fixedsys"> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;16</span>&nbsp;[<span style="color: teal">TestFixture</span>]</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;17</span>&nbsp;<span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: teal">ConfigurationTest</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;18</span>&nbsp;{</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;19</span>&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: teal">Test</span>]</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;20</span>&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> SessionEnableTest()</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;21</span>&nbsp;&nbsp;&nbsp;&nbsp; {</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;22</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;23</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//&nbsp; 確認session 是啟用的</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;24</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;25</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">Assert</span>.NotNull(<span style="color: teal">HttpContext</span>.Current.Session);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;26</span>&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;27</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;28</span>&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: teal">Test</span>]</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;29</span>&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue">public</span> <span style="color: blue">void</span> TempFolderAccessTest()</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;30</span>&nbsp;&nbsp;&nbsp;&nbsp; {</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;31</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;32</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//&nbsp; 確認設定檔指定的temp folder 存在</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;33</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;34</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">Assert</span>.True(<span style="color: teal">Directory</span>.Exists(<span style="color: teal">ConfigurationManager</span>.AppSettings[<span style="color: maroon">"temp-folder"</span>]));</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;35</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;36</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue">string</span> filepath = <span style="color: teal">Path</span>.Combine(<span style="color: teal">ConfigurationManager</span>.AppSettings[<span style="color: maroon">"temp-folder"</span>], <span style="color: maroon">"test.txt"</span>);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;37</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue">string</span> content = <span style="color: maroon">"12345"</span>;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;38</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;39</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;40</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//&nbsp; 確認可以寫暫存檔</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;41</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;42</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">File</span>.WriteAllText(</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;43</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; filepath,</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;44</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; content);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;45</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;46</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;47</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//&nbsp; 確認可讀, 且內容跟寫入的一樣</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;48</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;49</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">Assert</span>.AreEqual(</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;50</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">File</span>.ReadAllText(filepath),</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;51</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; content);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;52</span>&nbsp;</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;53</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;54</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//&nbsp; 確認可刪除, 不會有exception</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;55</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green">//</span></p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;56</span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: teal">File</span>.Delete(filepath);</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;57</span>&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p style="margin: 0px"><span style="color: #2b91af">&nbsp;&nbsp;&nbsp;58</span>&nbsp;}</p></div></div> <p>&nbsp;</p> <p>Step 5. Deploy Web, 調整好各項 configuration, 啟用前先點一下 NUnitLiteTestRunner.aspx, 看看結果如何...&nbsp;但是我的 IE 很怪, 明明 Step 3 的 code 都已經把 content type 都標示為 text/plain 了, 我的 IE 硬要把它當 xml 來開, 然後才唉唉叫說 xml 有問題.... 結果就變這樣:<br></p> <p><a href="http://community.chicken-house.net/blogs/images/NUnitLiteApp_Code_2935/image06.png" atomicselection="true"></a><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="334" src="http://community.chicken-house.net/blogs/images/NUnitLiteApp_Code_2935/image010.png" width="452" border="0"> </p> <p>&nbsp;</p> <p>如果你剛好也碰到, 就直接按右鍵選 view source 就好...</p> <hr> <pre>NUnitLite version 0.1.0
Copyright 2006, Charlie Poole

Runtime Environment -
    OS Version: Microsoft Windows NT 5.1.2600 Service Pack 2
  .NET Version: 2.0.50727.42

2 Tests : 0 Errors, 0 Failures, 0 Not Run
</pre>
<hr>

<p>故意把 web.config 裡的 session 關掉看看...</p>
<hr>
<pre>NUnitLite version 0.1.0
Copyright 2006, Charlie Poole

Runtime Environment -
    OS Version: Microsoft Windows NT 5.1.2600 Service Pack 2
  .NET Version: 2.0.50727.42

2 Tests : 0 Errors, 1 Failures, 0 Not Run

Errors and Failures:

1) SessionEnableTest (ConfigurationTest.SessionEnableTest)
  Expected: not null
  But was:  null

   於 ConfigurationTest.SessionEnableTest()

</pre>
<hr>

<p>哇哈哈, 真的如我預期的可以運作, 真是太好了. 同樣的例子大家可以換 NUnit 來試試, 一樣可以 run, 不過一來 NUnit 的 assembly 太多, 二來它會無法載入 App_Code 這個 assembly, 三來它會很嚴僅的另外建 AppDomain, 另外用獨立的 thread 來跑你的 test case, 這些動作都是非常不建議用在 web application 下的, 除非你很確定它對系統的影響... 所以, NUnit 還是留給更大規模更嚴僅的開發專案吧, 較簡單快速的 web application, NUnitLite 還是很好用的 [Y]</p>
<p>看完了, 對你有幫助的話, 來點掌聲吧 [H]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2006-10-29 14:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-29 14:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%a9%e7%94%a8-nunitlite-%e5%9c%a8-app_code-%e4%b8%8b%e5%af%ab%e5%96%ae%e5%85%83%e6%b8%ac%e8%a9%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<wp:comment>
			<wp:comment_id>510</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-08 15:19:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-08 15:19:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[到此一遊。.......................謝謝大哥分享啦!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>升級 Vista ...</title>
		<link>http://columns.chicken-house.net/2007/03/27/%e5%8d%87%e7%b4%9a-vista/</link>
		<pubDate>Tue, 27 Mar 2007 11:46:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/27/e58d87e7b49a-Vista-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
家裡的 PC 決定改裝 vista 了. 原本的機器是跑 windows 2003 x64, 機器很閒, web site + file server 跟本用不到 5% 的 loading, 就決定改為桌機...
</p>
<p>
計劃中這台 pc 要能處理這些事:
</p>
<ol>
	<li>最基本的 network service, 包括 RRAS, IIS, Media Service, SQL express, DNS, DHCP, SMTP.</li>
	<li>File Server, 原本用了 windows 內建的 RAID-1, 還有 Volume Shadow Copy, 保護自己的檔案, 如照片, DV拍的影片, 還有一些個人檔案等...</li>
	<li>MCE, 看電視, 錄電視, 節目表... etc</li>
	<li>Batch job, 如 weekly backup, video encoding... etc</li>
	<li>桌機, 不外呼上上網, 玩玩 game 之類的需求</li>
</ol>
<p>
最麻煩的部份就是 (1) 跟 (3), 跟本是互斥的 option ... [:&#39;(], 兩者跟本沒機會湊在同一套 os 裡... 最後我決定用很兩光的作法, 把 (1) 移到 virtual pc 的 guest os, 其它 (2) (3) (4) (5) 則留在 host os 上.
</p>
<p>
Host OS 就用 Vista Ultimate, 果然年紀大了, 之前被 MCE 的上網啟動問題搞半天, 這次不想花這種時間了, 剛好有優惠價, 就去買了套正版的來用 [:$], 不過換機真的是大工程, 之前為了把 (1) 的部份移到 vpc 就搞了半天. 到最後, 發現原本提供的服務用了 E6300 + 3GB ram, 換到 vpc 只開 256mb (vpc 不支援 SMP, 因此 cpu 只用到半顆), 問了一堆人都不覺的有變慢 [:|], 果然換機是對的... 以前太奢侈了... 現在是 vpc + 512mb 在跑..
</p>
<p>
Vista 已經到手了, 裡面有附 32 / 64 位元版, 不過正式換裝又是另一個大工程, 這個禮拜就先灌到 vpc 裡玩看看吧 [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2007-03-27 11:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-27 11:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%87%e7%b4%9a-vista]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>如何透過命令列, 從手機搬檔案到電腦?</title>
		<link>http://columns.chicken-house.net/2007/03/12/%e5%a6%82%e4%bd%95%e9%80%8f%e9%81%8e%e5%91%bd%e4%bb%a4%e5%88%97-%e5%be%9e%e6%89%8b%e6%a9%9f%e6%90%ac%e6%aa%94%e6%a1%88%e5%88%b0%e9%9b%bb%e8%85%a6/</link>
		<pubDate>Mon, 12 Mar 2007 20:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/12/e5a682e4bd95e9808fe9818ee591bde4bba4e588972c-e5be9ee6898be6a99fe690ace6aa94e6a188e588b0e99bbbe885a6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
這年頭了, 還有誰需要這種東西? 要搬檔案, 不就 active sync 連好, 檔案總管一開就好了?
</p>
<p>
不過問題沒這麼簡單... 先列一下我的需求跟問題:
</p>
<ol>
	<li>要能自動化, 能寫在批次檔內</li>
	<li>要能搭配 DigitalCameraFiler 自動歸檔手機的相片</li>
</ol>
<p>
本來想的很簡單, 看看檔案總管的路逕, 寫在 xcopy 後面就好, 沒想到 ActiveSync 提供的 browse device 竟然只是個 shell extension, 只是讓你 &quot;用起來&quot; 像是 local 的檔案而以 [:&#39;(]
</p>
<p>
看來不修改 DigitalCameraFiler 直接讀手機的相片是不可能了, 最快的方式是找到能用命令列工具, 把檔案搬出來, 再接著用 DigitalCameraFiler 接手... 順手 google 了一下, 找到了這兩種 solution:
</p>
<ol>
	<li><a href="http://www.codeproject.com/ce/rcmd.asp">http://www.codeproject.com/ce/rcmd.asp</a><br />
	透過 Microsoft 提供的 RAPI, 寫了一個 command line 的 tools 可以辦到</li>
	<li><a href="http://www.microsoft.com/taiwan/msdn/library/2004/...">http://www.microsoft.com/taiwan/msdn/library/2004/...</a><br />
	MSDN 的文章, 介紹如何用 .net 開發像 (1) 這樣的 tools ...</li>
</ol>
<p>
懶人我當然是先試 (1), 可以耶!! :D, 批次檔裡動點手腳, 先把手機裡的照片檔搬到暫存目錄, 再丟給 DigitalCameraFiler 處理就好, 批次檔只要這樣寫:
</p>
<blockquote>
	<p>
	<br />
	<font color="#008000">&#39; 用亂數取得暫存目錄名</font><br />
	set RND=%RANDOM%<br />
	<br />
	<font color="#008000">&#39; 建立暫存目錄<br />
	</font>md %TEMP%\%RND%<br />
	<br />
	<font color="#008000">&#39; 照片 copy 到暫存目錄</font><br />
	D:\WinAPP\MobileTools\rcmd.exe copy &quot;\Storage Card\My Documents\My Pictures\*.jpg&quot; %TEMP%\%RND%<br />
	<br />
	<font color="#008000">&#39; 砍掉手機上的照片</font><br />
	D:\WinAPP\MobileTools\rcmd.exe del &quot;\Storage Card\My Documents\My Pictures\*.jpg&quot;<br />
	<br />
	<font color="#008000">&#39; 相片歸檔</font><br />
	D:\WinAPP\Tools\DigitalCameraFiler\ChickenHouse.Tools.DigitalCameraFiler.exe %TEMP%\%RND% %1<br />
	<br />
	<font color="#008000">&#39; 砍掉暫存目錄</font><br />
	rd /s /q %TEMP%\%RND%<br />
	<br />
	<font color="#008000">&#39; 清掉環境變數</font><br />
	set RND=
	</p>
</blockquote>
<p>
不過即使如此, 還是花了點時間看了 MSDN 那篇文章, 原來 Microsoft 官方都沒有把 ActiveSync 提供的 Remote API 包成 .net 版的 class library, open source 的組織就已經做好了, 連 MSDN 官方文件都引用它來試範... 哈哈, 提供一下 link:
</p>
<p>
<a href="http://www.opennetcf.org/communication.asp">OpenNETCF 網站</a>
</p>
<p>
這個 wrapper 包裝的 API, 功能一點都不少, 只要手機用 active sync 連線後, 除了搬檔案等動作之外, 還可以取得手機的詳細資訊, registry, 甚至遠端叫手機執行指定的程式等等...
</p>
<p>
看起來真不錯, 下次來寫看看... [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2007-03-12 20:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-12 20:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e9%80%8f%e9%81%8e%e5%91%bd%e4%bb%a4%e5%88%97-%e5%be%9e%e6%89%8b%e6%a9%9f%e6%90%ac%e6%aa%94%e6%a1%88%e5%88%b0%e9%9b%bb%e8%85%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Spam Comments And CAPTCHA...</title>
		<link>http://columns.chicken-house.net/2007/03/01/spam-comments-and-captcha/</link>
		<pubDate>Thu, 01 Mar 2007 22:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/01/Spam-Comments-And-CAPTCHA.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
也許該值得高興吧, 本站都用 robots.txt 擋掉 google 等 search engine, 只因為目標只是放在給認識的人看的 blog, 不想太公開, 所以一直以來都相安無事. 一直到最近, 大概看的人變多了, 也被外面一堆不知名的 bot 盯上, 開始一直有一堆廣告的 comments 貼到 blog 上... [:@] 
</p>
<p>
試了 community server 內建的&nbsp;spam rule, 是檔掉了一些, 不過仍然有一堆漏網之魚... 想想還是跟各大網站一樣, 找個 CAPTCHA 的元件來用用. 在 community server 官方網站提供了一套, 在 msn 問了 <a href="http://www.darkthread.net">darkthread</a> 前輩, 他也提供了兩個網址, 也研究了一下... 
</p>
<ul>
	<li><a href="http://blogs.clearscreen.com/migs/archive/2005/02/01/905.aspx">Clearscreen SharpHIP HIP-CAPTCHA Control for ASP.NET </a></li>
	<li><a href="http://blog.darkthread.net/forums/thread/575.aspx">http://blog.darkthread.net/forums/thread/575.aspx</a></li>
</ul>
<p>
&nbsp;
</p>
<p>
每次看到這種怪名字 (CAPTCHA), 就很想查一下它到底是啥字的縮寫, 查了 <a href="http://en.wikipedia.org/wiki/Captcha">wiki</a>, 原來是 &quot;<font color="#0000ff"><strong><font color="#ff0000">C</font></strong>ompletely <strong><font color="#ff0000">A</font></strong>utomated <strong><font color="#ff0000">P</font></strong>ublic <strong><font color="#ff0000">T</font></strong>uring test to tell <strong><font color="#ff0000">C</font></strong>omputers and <strong><font color="#ff0000">H</font></strong>umans <strong><font color="#ff0000">A</font></strong>part</font>&quot; ... 比較有趣的是 turing test, 唸資工的大概都記得啥是 turing machine, 而 turing test 也是 Alan Turing 提出來的, 大意是在探討機器怎樣才算是有 &quot;智慧&quot; 的程度? 如果讓一個人 (測試者) 跟另一個真人及機器對話, 而測試者如果沒有辦法從對話內容中猜出誰是真人, 誰是機器, 就代表這個機器已經通過 turing test, 就算是具有某種程度的 &quot;智慧&quot;, 而不只是會運算的計算機了... 
</p>
<p>
即使到現在, 連 IBM 深藍都打敗棋王了, 不過終究也只是運用高速的運算加上龐大的儲存空間, 超越人類對邏輯深度及廣度的挑戰而以. 這種比賽人類遲早會輸的... 像我打牌幾回合以前出過的牌都忘光光了... 哈哈... 不過這種還算不上是 &quot;智慧&quot;. Microsoft 有兩個 msn bot 還蠻有趣的, 雖然一看就知道是 robot, 不過還能跟你聊上一兩句... 問問題也只要直接用白話打進去就好. 要跟它聊天很簡單, 只要把這兩個 account 加到你 msn messanger 的聯絡人... 
</p>
<ol>
	<li>Encarta 百科全書: <a href="mailto:encarta@botmetro.net">encarta@botmetro.net</a> </li>
	<li>會講中文的 &quot;聰明小孩&quot; (只會簡體 :@): <a href="mailto:smarterchinesechild@hotmail.com">smarterchinesechild@hotmail.com</a></li>
</ol>
<p>
近來網站很流行讓你看一張圖, 然後要你把裡面的字 key 進表格內, 目的就是要判定填資料的是 &quot;真人&quot;, 而不是 &quot;機器&quot;... 不過這樣就要套上 CAPTCHA, 就有點過頭了,&nbsp;現在 CAPTCHA 已經變成這種作法的代名詞了, 這個字也被註冊過, 不能亂用... 不過人跟機器的辨識, 真的只靠這種圖片就可以解決了嗎? spammer 開使採用 OCR 的技術來反擊, 辨識率約有 80%, 但是剩下的 20%, 不知道有多少比例是連真人都認不出來的圖? 
</p>
<p>
辯別人跟機器的戰爭, 不應該只靠肉眼跟OCR做區隔, 人腦對資訊的 &quot;理解&quot; 能力是另一個關鍵... 如果有些問題是目前的 bot 回答不出來的, 那麼這就是個有效的辯別方式... 扯遠了, 我只不過是要講一下 CAPTCHA 的由來而以 [:P]... 不過老實說, 我還真不喜歡網站加這些東西, 毫無意義的文字, 有些已扭曲到我真的看不懂 [:|]&nbsp; 連 I 跟 1, 0 跟 O 也都分不出來,&nbsp;還要試好幾次才過, 嘖嘖... 為了防 spammer&nbsp;苦了人...&nbsp;但是為了保障我自己家的 blog 不受 spammer 侵襲, 還是得試一試. 上面提到的那幾套, 都很盡責的能正常的運作, 不過看了就是不大爽... 
</p>
<p>
&quot;<font color="#008000">如果有些問題是目前的 bot 回答不出來的, 那麼這就是個有效的辯別方式... </font>&quot; 
</p>
<p>
想想也沒幾行 code, 就自己寫了一個簡單的. 反正暫時還不會有 spammer 針對我的 blog 寫破解的程式吧 [H], 我採用的方式是隨機產生一些問題, 要 user 輸入正確的答案, 答對才判定你不是 robot ... 當然這些問題都不難... 目前做的問題有三大類: 
</p>
<ol>
	<li>簡單的數學問題, 就兩個個位數字的運算. </li>
	<li>Echo. 題目只是很簡單要你跟著打一段字而以... </li>
	<li>靜態的題庫, 另外在 xml 檔裡先建好題目 &amp; 答案的配對, 隨機挑一題出來...</li>
</ol>
<p>
Code 本身倒是很簡單, 完全沒有什麼特別的, 我就不講了. 為了 deployment 方便, 我連 code 都藏到 .ascx 裡了... 沒有其它的 .cs 跟 .dll 要安裝, 純脆以方便為原則. 
</p>
<p>
這方法只是簡單的題庫測驗的簡化版而以. 它跟真正的 turing test 仍然有好大一段差距. 因為 tester 也是機器, 不是人, 而且要簡化到單一問題的回答, 不是一連串的對話. 要由機器來判定對方是不是真人, 真的不是簡單的課題.... 我只能實際一點, 做到夠用就好.. 
</p>
<p>
效果如何? 大家捲到<a href="#comments">底下試看看</a>就知道了, 網頁 refresh 一下就可以隨機換一題..., 靜態題目我目前都放腦筋急轉彎類的, 當然我都有附解答, 免的大家答不出來, 掛在那邊不能留言... Echo 型態則只是要大家無腦一點, 跟著打一些口號而以, 像 &quot;叭樂雞萬歲&quot;&nbsp;之類的 [H] ..... 
</p>
<p>
果然這樣看起來爽多了, 也比較有趣一點, 反正目的達到就好 [:D], 如果大家有啥有趣的腦筋急轉彎也提供一下, 看看這樣 page view 跟 comment 數會不會衝高一點 [H] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2007-03-01 22:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-01 22:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spam-comments-and-captcha]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>換新版面了 :D</title>
		<link>http://columns.chicken-house.net/2007/03/01/%e6%8f%9b%e6%96%b0%e7%89%88%e9%9d%a2%e4%ba%86-d/</link>
		<pubDate>Thu, 01 Mar 2007 19:57:03 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/01/e68f9be696b0e78988e99da2e4ba86-D.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>沒事沒事, 只是貼一下, 讓那些都只用 RSS 看文章的人知道一下而以 [H]</p> <p>新年新氣象, 除舊佈新一下, 祝大家新春愉快 [:D]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2007-03-01 19:57:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-01 19:57:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%9b%e6%96%b0%e7%89%88%e9%9d%a2%e4%ba%86-d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>461</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-02 13:07:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-02 13:07:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒想到我的網站 link 也更新了

要不要找一些我照的照片放上 header 呀，仙人掌不好看]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>462</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-02 14:07:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-02 14:07:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 恭喜你是第一個通過 Bot Check 的人... (Y)

等 CS2007 出來還得再調一次版面, 那時再給我 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>463</wp:comment_id>
			<wp:comment_author><![CDATA[ALAN]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-16 00:41:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-16 00:41:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雞老大
給你一個網址去認吳氏宗親吧  連帶叫胡老大也去嘿
http://www.babyhome.com.tw/bb/101028]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新手機真是讚 (y) - III</title>
		<link>http://columns.chicken-house.net/2007/02/28/%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y-iii/</link>
		<pubDate>Wed, 28 Feb 2007 02:45:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/28/e696b0e6898be6a99fe79c9fe698afe8ae9a-(y)-III.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
勸敗就是要像格鬥遊戲一樣, 要一口氣使出連續技, 才有殺傷力... 哈哈,&nbsp;昨天下班走路經過伯朗咖啡, 正好講完電話, 就順手在店門口站著借用店裡的無線網路收 RSS ..
</p>
<p>
才在想怎麼這次收的比較久... 後來收完邊走邊看, 才發現原來&nbsp; DOPOD bondle 的這套 rss reader 還會幫你把圖給抓下來啊, 同時還幫你 resize ..
</p>
<p>
果然有圖有真相, 在手機上<a href="http://michadel.chicken-house.net/blogs/michadel/archive/2007/02/26/40.aspx">看到小熊子拍的櫻花</a>, 突然覺的整支手機的格調就不一樣了, 哈哈.. 不過最近手機越用越兇, 沒事躺床上就開 bt 更新 rss 當報紙看, 三不五時就拿來按一下, home screen 放的 plug in 變多, 現在三天就得充一次電... Orz, 真是有一好沒兩好...
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/files/45041.jpg" alt="" width="400" height="436" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2007-02-28 02:45:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-28 02:45:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y-iii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>464</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-28 09:01:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-28 09:01:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[天啊~還有自動縮放圖片的功能，真是不錯~~

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>如何在執行檔 (.NET) 裡附加額外的資料?</title>
		<link>http://columns.chicken-house.net/2007/02/28/%e5%a6%82%e4%bd%95%e5%9c%a8%e5%9f%b7%e8%a1%8c%e6%aa%94-net-%e8%a3%a1%e9%99%84%e5%8a%a0%e9%a1%8d%e5%a4%96%e7%9a%84%e8%b3%87%e6%96%99/</link>
		<pubDate>Wed, 28 Feb 2007 02:16:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/28/e5a682e4bd95e59ca8e59fb7e8a18ce6aa94-(NET)-e8a3a1e99984e58aa0e9a18de5a496e79a84e8b387e69699.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
離上一篇有營養的 post 已經隔好久了, 中間都是貼些五四三的, 哈哈... 今天再來貼點跟 .net development 有關的心得...
</p>
<p>
這篇要講的, 就是想做的像一般壓縮軟體, 可以把壓縮檔包成一個可執行檔, 這個執行檔包含解壓縮的程式, 同時也包含你自己資料, 包成單一執行檔無論攜帶或保存, 甚至隨時要解開都很方便...
</p>
<p>
看起來很普通的功能, 沒想到要實作起來還真麻煩... 一般標準的開發工具沒辦法產出這樣的 code, 頂多在 compile time 把一些資料當成 resource, 一起 compile 進 exe 內部. 不過即使如此, 這些動作都是在開發階段就完成的, 跟一般自解壓縮檔不同, 是執行階段才完成的...
</p>
<p>
跟同事討論了一下, 同事就土法練鋼, 試了第一種作法: 直接把 data 附加在 .exe 的後面.
</p>
<p>
出乎意料的, 這個方法竟然可行, 而且執行也沒有問題, 不過心裡就是毛毛的...
</p>
<ol>
	<li>&nbsp;
	<ol>
		<li><font color="#000080">&quot;是剛好嗎? 會不會以後就突然不行了?&quot;</font></li>
		<li><font color="#000080">&quot;這作法好像病毒喔, 會不會被防毒軟體檔下來?&quot;</font></li>
		<li><font color="#000080">&quot;這種作法能通過 PEVerify 檢查嘛?&quot;</font></li>
		<li><font color="#000080">&quot;以後加上 signature, 還能執行嘛?&quot;</font></li>
		<li><font color="#000080">&quot;.....&quot;</font></li>
	</ol>
	</li>
</ol>
<p>
上面的動作, (1), (2) 還沒碰到. (3) 對於沒有簽章過的可以, (4) 沒去試..&nbsp;不過為了免除這些疑慮, 只好朝向其它較 &quot;正規&quot; 的作法... 從官方的工具著手.
</p>
<p>
為了避免第一種作法的疑慮, 整個流程到最後產出 .exe 為止, 都必需用官方認可的作法, 所以我能做的動作只剩下把原本很簡單的動作盡量拆解, 盡量拆到只留最後一步, 其它可以先作的一次做掉, 留最後一步在 runtime 時才呼叫外部工具來執行.
</p>
<p>
原本很簡單的 windows application project, 在裡面加上 embedded resource, build 就可以搞定的事, 現在必需這樣做:
</p>
<ol>
	<li>除了要外加的 embedded resource 之外, 其它的部份先用 csc.exe 編譯成 module</li>
	<li>把 (1) 編譯好的 module 跟外加的 file(s), 用 al.exe 產出一份完整的 .net assembly (.exe)</li>
</ol>
<p>
其中 (1) 的部份可以事先作好, 未來在執行時就不用再重複 (1) 的步驟, 只要拿 module file 不斷的搭配不同的 embedded resource 就可以產出包含不同 data 的 exe file, 就像典型的自解壓縮檔那樣. 我簡單寫了一個 sample code, 試了一下, 可行. 有興趣的人可以<a href="/wp-content/be-files/StartApp.zip">抓去研究看看</a>... 我的作法是:
</p>
<ol>
	<li>開一個 VS2005 的 windows application project: StartApp, 程式內容很簡單, 就是把 name 為 &quot;attachment&quot; 的 resource 存成暫存檔, 然後用 shell execute 去開啟它, 開完後把暫存檔砍掉, 程式結束.<br />
	</li>
	<li>這個 project 不能 build, 得另外寫 command line 把它編譯成 module (start.module):<br />
	<font color="#008000">csc.exe /out:startup.module /t:module /recurse:*.cs /resource:Form1.resx<br />
	</font></li>
	<li>(2) 產出的 start.module 搭配圖檔 paint.jpg,&nbsp;藉由 assembly linker 把它們結合成單一的可執行檔 (start.exe):<br />
	<font color="#008000">al.exe /embed:paint.jpg,attachment /t:exe start.module /out:start.exe /main:StartApp.Program.Main<br />
	</font></li>
</ol>
<p>
大功告成! 產出的 start.exe 執行之後, 按下 [RUN] 就自動開啟圖檔, 就像你直接在 paint.jpg 上按兩下一樣... 完全達到我的期望 :D
</p>
<p>
這個作法看起來比較好, 因為產出的過程完全都是正式的作法, 不大會有什麼問題, 但是它也有缺點... Orz
</p>
<ol>
	<li>Visual Studio 2005 的各種 project type, 並沒有包含 module 這種類型... 查了一下, 它只有在講解 .net 內部架構, SDK, 跟 assembly 等基礎知識的地方有提到... 除了直接用 csc.exe 之外, 沒有很簡單的工具可以產出 module... 這對未來要進行 daily build 就有點頭痛了...</li>
	<li>csharp compiler (csc.exe) 還好, 只要有 CLR 就有, 但是 assembly linker (al.exe) 就麻煩了, 在我的 windows 2003 x64 裡竟然找不到, 查了一下這個要裝 .net framework sdk 才有. 當場去 download 回來裝, 哇靠... 380mb... 傻眼... 這個環境要求稍微高了點, 通常客戶的環境都會裝 .net runtime, 但是不會裝 .net sdk ...</li>
	<li>另一個麻煩是, 要執行這些工具, 最少要有基本的權限... 我是要透過 asp.net web application 執行上面這串動作, 要突破的 security 限制還不少... </li>
	<li>這些工具目前還查不到對等的 class library 可以簡單的達成一樣的目的, 沒事去拿 MSBuild 裡內建的那堆 task 反組譯看看, CSC / AL 這兩個 task, 通通都是 create process, 然後直接去呼叫 csc.exe / al.exe ... 這種動作對 web application 的效能很具殺傷力... 得改成批次執行, 對系統會好一些, 只是這樣就失去了即時產出的時效性了</li>
</ol>
<p>
試到這邊, 暫時想不到其它作法了, 沒想到要產出自定的 .exe 還真不容易... 如果有其它更好的作法, 就通知一下吧, 真的這樣在 web app 搞下去真是自找苦吃 :~~~
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2007-02-28 02:16:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-28 02:16:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%9c%a8%e5%9f%b7%e8%a1%8c%e6%aa%94-net-%e8%a3%a1%e9%99%84%e5%8a%a0%e9%a1%8d%e5%a4%96%e7%9a%84%e8%b3%87%e6%96%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>465</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-01 13:56:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-01 13:56:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[補一下後續..

為了避開直接去執行外部 .exe 的動作, 去反組譯 MSBuild 裡內建的 AL task, 好樣的, Microsoft 自己也是 Create Process 去呼叫現成的 AL.exe ...

後來再去反組譯 AL.exe 來看, 真是讚, .net sdk 附的 AL.exe 跟本不是 .net assembly ...

很好, 又是死路一條... :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>466</wp:comment_id>
			<wp:comment_author><![CDATA[litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-19 23:23:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-19 23:23:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您的部落格還真多寶物可以找...
最近有類似的問題，想把執行檔打包成類似的狀態，有點像FLASH包成的exe。
結果google搜尋&quot;執行檔 附加檔案&quot;，就又來到這邊了。

不過第二種方法好像限制不小，得在客戶端安裝.net framework sdk?
所以看來還是得先用第一種方法先，但總覺得執行檔有壞掉的機會...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>467</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-21 01:20:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-21 01:20:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，歡迎回來找資料啊 XD

第二種方式是比較正規的作法，其實就是想盡辦法把該在 design time 就做好的事，移到 runtime 才包裝起來... 安裝 SDK 是免不了的。我沒試過只複製 al.exe 的話能不能動，不過就算可以我也不大敢用，真要冒險就直接用第一種作法了...

這個問題後續還找到另一個折衷的解法，就是要留著未編譯的原始專案... 相較於 AL.exe 必需安裝 SDK 才提供，MSBuild.exe / CSC.exe 這些編譯工具可是內建的，只要有裝 .NET Framework 就有了，不需要 SDK。解法就是當你要打包的資料準備好之後，重新 BUILD 一份你要的.exe 吧。效能有多糟，就視你的.exe編譯起來有多慢了... 不過在使用 AL.exe 有困難的情況下，這也是個可以參考的方案啦 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>468</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-06 12:15:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-06 12:15:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最近發現.net framework裡面有System.CodeDom這個namespace專門處理動態編譯的，
另外還有Microsoft.CSharp這個namespace類似。
這樣就可以把[打包後執行檔B]的原始碼加到[打包程式A]裡面，
動態產生與連結[打包後執行檔B]的內嵌資源。
再用CodeDomProvider編譯執行檔B，這樣應該也算正規的作法。
不過這樣效能會被B檔案編譯影響......

另外還有一些語法糖好像會被判錯，如
public bool IsDisposed { get; private set; }]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>469</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-06 12:24:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-06 12:24:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[補充一下，Microsoft.CSharp.CSharpCodeProvider是繼承System.CodeDom.Compiler.CodeDomProvider的，
而CSharpCodeProvider對語法彈性比較好，還可以指定編譯的.net framework版本。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>電腦也要過年..</title>
		<link>http://columns.chicken-house.net/2007/02/25/%e9%9b%bb%e8%85%a6%e4%b9%9f%e8%a6%81%e9%81%8e%e5%b9%b4/</link>
		<pubDate>Sun, 25 Feb 2007 03:16:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/25/e99bbbe885a6e4b99fe8a681e9818ee5b9b4.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>沒想到過個年, Microsoft 也有一堆更新 &amp; 新版發行...</p> <ol> <li>SQL 2005 SP2<br>目前為止我都還把 SQL2005 當 SQL2000 用, 嗯, 有啥新功能就不管它了, 裝了再說..</li> <li>ActiveSync 4.5<br>換了之後, 除了 icon 漂亮點之外, 好像沒啥不一樣, 不過裝了後合作關係都要重建一次.. :@</li> <li>Virtual PC 2007<br>這個一定要推一下, 一路從 Connectix Virtual PC, 用到 Microsoft Virtual PC 2004,&nbsp;換到 Virtual PC 2007 Beta, 再換&nbsp;RC, 終於換到 2007 了 :D, 支援 Intel VT, CPU 有支援的可以裝看看..<br>另外一個龜很久的 Virtual Server 2005 R2 SP1 到底啥時要出來?</li> <li>過年前一口氣爆出十幾個 security patch ...</li></ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date><![CDATA[2007-02-25 03:16:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-25 03:16:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%bb%e8%85%a6%e4%b9%9f%e8%a6%81%e9%81%8e%e5%b9%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Network Bridge in Windows 2003...</title>
		<link>http://columns.chicken-house.net/2007/02/22/network-bridge-in-windows-2003/</link>
		<pubDate>Thu, 22 Feb 2007 03:24:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/22/Network-Bridge-in-Windows-2003.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
又在沒事找事做了... 這次是搬硬碟, 外加把部份網路從 100Mbps --&gt; GBE, 不過這次沒有要添購新配備... 
</p>
<p>
我很迷信大廠的硬體, 自己有在開發軟體最清楚, 只有大廠才有那個本錢把軟體的 bug 都抓乾淨, driver 更是明顯... driver 寫不好鳥問題一堆, 到這種年紀已經沒力氣跟那堆 driver 慢慢奮鬥了, 只要穩定可以用不要出問題就好... 
</p>
<p>
因此之前買了一批 Intel 82559 的網路卡 (不是只有 chip 是 82559, 而是整張卡都是貼 intel mark), 有 Intel PRO/100 S 跟 PRO/100 Management+, 當時一次買了十幾張, 因為 yahoo 賣家要一次賣掉... 所以當然就全家的網卡全部換成這批. 就算主機板有內建 GBE, 還是把它給關了用 Intel 82559... 換了果然有差, driver 比那堆 d-xxxx, rxxxxt 的好多了, 也從來沒碰過傳一堆大檔傳到一半, 網路會停掉的問題, 而且經過便宜的 hub, 網路傳輸速率隨便也有 8x% ... 
</p>
<p>
不過再怎樣, 100Mbps 終究抵不過 1000Mbps, 試過幾次從 server 拉 iso 到 desktop pc 燒 dvd 就受不了了, 一定得先把 iso copy 到 desktop pc 再燒, copy 得等上十分鐘, 燒完又是十來分鐘, 還要再 verify 又是十來分鐘... Orz 
</p>
<p>
忍了一陣子, 決定趁過年調整一下, 剛好 desktop pc / server 的主機版都內建 Marvell GBE 網卡, 就把它們的封印拿掉直接對連, hub 也省了, 反正只有兩台有 GBE. 改這個很簡單, BIOS 把 LAN 打開, 網路線拔過去插上去就收工了. 
</p>
<p>
麻煩的是網路設定的地方... 原本的架構是這樣, 有點小複雜, 除了基本的 NAT 之外, server 上的 RRAS 也設定了 demand-dial, 會自動連到公司的 VPN, 同時也是 VPN server, 接受我在外面撥到家裡的區域網路, 其它 DNS, DHCP, IIS, Net Share 等等的就不畫了.. 
</p>
<p>
<img src="/wp-content/be-files/files/58684.gif" alt="" width="614" height="486" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
最初的想法是, 直接多增加一個網段, 專門放 GBE 的 node. 不過家裡也才幾台電腦, 這樣弄好像太小題大作了, 加上這麼一來設定就越來越複雜了, DHCP 要調, static routing 要改... [:&#39;(], 後來放棄, 直接用最不用大腦的 solution ... software networking bridge! 架構如下: 
</p>
<p>
<img src="/wp-content/be-files/files/37191.gif" alt="" width="669" height="486" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
還好 windows 2003 有內建 bridge, 正好把 LAN 的兩張網卡串起來, 邏輯上只有一張 network interface, 只是實體接的線路有兩條 (100mbps / 1000mbps), 啥軟體設定都不用改... 
</p>
<p>
試了一下效果, 不錯, 直接 copy 檔案就有 30% 的使用率... 跟以前 100mbps 的&nbsp;90% 來比, 隨便也有三倍多的提升. 不過 30% 的瓶頸似乎是掉在 disk i/o 上面, 同時從不同 disk 拉檔案就可以飆到 60% .. 
</p>
<p>
之前對 Marvell 的 chip 很感冒, 公司的 virtual server 2005 就是內建這個 chip, 流量很大, 開個一兩個禮拜網路就不通了, 但是怎麼看都正常, 就是網路不通, 得把 LAN 停用再啟用才會正常, 如果剛好人不在公司就完了, 得等隔天拔 monitor 直接到主機上面去點... 後來加了張 Intel 的網卡, 這張就一點事都沒有... 家裡流量應該不會這麼大吧? 哈哈, 就加減用一下就好.. 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2007-02-22 03:24:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-22 03:24:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[network-bridge-in-windows-2003]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>IE7 終於升級成功了.. :~</title>
		<link>http://columns.chicken-house.net/2007/02/18/ie7-%e7%b5%82%e6%96%bc%e5%8d%87%e7%b4%9a%e6%88%90%e5%8a%9f%e4%ba%86/</link>
		<pubDate>Sun, 18 Feb 2007 17:12:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/18/IE7-e7b582e696bce58d87e7b49ae68890e58a9fe4ba86-7e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
看起來沒啥了不起的標題, 哈哈... 自從IE7推出以來, 這是第四次升級了... 之前每次裝好後, 一開IE7就應用程式錯誤, IE7就自己關掉了, 連進去打網址的機會都沒有 :~
</p>
<p>
之後每次看到 Microsoft 有新的 update 之後, 就會試著再裝一次, 終於這次過年前一大票的 security patch 裝了之後, IE7 就正常了 :D
</p>
<p>
原來裝 IE7 也是要看時辰的, 大年初一就 ok .. Orz
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2007-02-18 17:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-18 17:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ie7-%e7%b5%82%e6%96%bc%e5%8d%87%e7%b4%9a%e6%88%90%e5%8a%9f%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Community Server 2007 Beta 1 Available Now</title>
		<link>http://columns.chicken-house.net/2007/02/17/community-server-2007-beta-1-available-now/</link>
		<pubDate>Sat, 17 Feb 2007 17:47:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/17/Community-Server-2007-Beta-1-Available-Now.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
終於出來了, 從 <a href="http://scottwater.com/blog/archive/community-server-2007-beta-1-available/">scott 的 blog</a> 看到的... 想要試看看的可以到<a href="http://communityserver.org/forums/568417/ShowThread.aspx#568417">這裡</a>下載.
</p>
<p>
&nbsp;
</p>
<p>
新版看來最大的改進就是換了 theme engine, 可以直接在 browser 上調整 UI, 效能也提高了..&nbsp;不過還沒試過也不曉得差在那裡 :P
</p>
<p>
其它改進我列幾個比較特別的:
</p>
<ol>
	<li>share membership store<br />
	據官方說法, 可以好幾個友站 share 同一個會員資料庫... 我在猜大概是透過 web service, 實作一套 membership provider 吧... </li>
	<li>可以直接把文章匯出成單一檔案, 包括圖片... ( .mht 檔? ) </li>
	<li>demo.exe, 不需要安裝就可以試用... 應該是把 cassini 那種東西包進來吧, 不過試了一下, 我之前自己弄的<a href="/post/ASPNET-Tips-Launch-ASPNET-Web-Sites-without-IIS--VS2005.aspx">批次檔</a>還比較好用 :P</li>
</ol>
<p>
其它就等裝了再研究看看, 先祝大家新年快樂 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2007-02-17 17:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-17 17:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[community-server-2007-beta-1-available-now]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Web Site Application + Sandcastle</title>
		<link>http://columns.chicken-house.net/2007/02/16/web-site-application-sandcastle/</link>
		<pubDate>Fri, 16 Feb 2007 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/16/Web-Site-Application-2b-Sandcastle.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
這次要解決的問題, 跟上次想要<a href="/post/e588a9e794a8-NUnitLite2c-e59ca8-App_Code-e4b88be5afabe596aee58583e6b8ace8a9a6.aspx">在 Web Application 裡執行單元測試</a>的問題類似, C# 有跟 Java 類似的 comment help, 可以把寫在註解的文字萃取出來, 製作成一份文件...
</p>
<p>
不過, 過去的 NDoc, 到現在新掘起的 <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=E82EA71D-DA89-42EE-A715-696E3A4873B2&amp;displaylang=en">SandCastle</a>, 都要求兩個東西:
</p>
<ol>
	<li>Assembly Files: 可以透過 reflection api, 取得 asm 的 metadata</li>
	<li>Compiler 在 compile code 時匯出的 xml document</li>
</ol>
<p>
通常 help 製作工具都需要這兩種檔案才能制作 help, 不過 asp.net 2.0 引進的 web app, 正常情況下跟本拿不到這些東西, 因為 code 只要丟在 App_Code 就可以跑了, 跟本不需要 compile 成 dll, 更不用說 xml document 了.... 想到幾種可能可行的辦法, 今天就抽空試了一下:
</p>
<p>
&nbsp;
</p>
<p>
<strong><u><font size="3" color="#0000ff">在 web.config 裡加上 compiler option 輸出 xml</font></u></strong>
</p>
<p>
要產生 dll 倒不難, 有一堆方法, 可以用 <a href="http://search.msdn.microsoft.com/search/Redirect.aspx?title=ASP.NET+Compilation+Tool+(Aspnet_compiler.exe)+&amp;url=http://msdn2.microsoft.com/en-us/library/ms229863(VS.80).aspx">aspnet_compiler.exe</a> 這個工具, 直接 build web site, 可以輸出 DLL. 不過還缺 xml doc, 翻了翻 MSDN, 找到一條路, 就是在 web.config 裡可以加 compiler options.. 加上去之後, 就會產生 xml document...
</p>
<p>
<font color="#008000">&lt;configuration&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;system.codedom&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;compilers&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;compiler ...... compilerOptions=&quot;/doc:c:\sample.xml&quot; /&gt;<br />
...</font>
</p>
<p>
簡單寫個 web app 試了一下可以 work, 但是放到 production site 就不行了, compile 的過程中, 你會看到這個 xml 檔案不斷的產生出來, 又被砍掉... 原來 App_Code 目錄下, aspnet engine compile 的方式是以目錄為單位, 每個目錄下的 *.cs 會被當成一個 project compile 一次, 換個目錄再來一次, 所以你指定的 xml document 檔會不斷的被覆蓋...
</p>
<p>
氣的是這個參數還一定得指定檔名, 不能指定 *.xml 或是不指定之類的... 所以除非你的 App_Code 目錄下只有一層, 不然就放棄吧..
</p>
<p>
&nbsp;
</p>
<p>
<strong><u><font color="#0000ff">Web Deployment Project</font></u></strong>
</p>
<p>
Visual Studio 2005 有個附加的 <a href="http://msdn2.microsoft.com/en-us/asp.net/aa336619.aspx">Web Deployment Project</a>, 在 SP1 之後就直接內建了, 它大概的作法就是 aspnet_compiler.exe 先輸出一堆 assembly, 然後再用 asm merge tools 把它併成單一個 assembly dll file. 是可以很簡單的拿到 dll 了, 不過產生 xml document 的部份仍然一樣無解
</p>
<p>
&nbsp;
</p>
<p>
<strong><u><font color="#0000ff">寫 msbuild project file</font></u></strong>
</p>
<p>
在 google 查這個問題時, 看到有老美用的作法是自己寫一段 task, 把所有 *.cs 加到 <a href="http://search.msdn.microsoft.com/search/Redirect.aspx?title=Csc+Task+&amp;url=http://msdn2.microsoft.com/en-us/library/s5c8athz.aspx">csc task</a> 裡... 不過太麻煩了, 一來我整個 build 程序沒有用到 msbuild project file, 二來我也不熟, 寫起來有點辛苦..
</p>
<p>
&nbsp;
</p>
<p>
<strong><u><font color="#0000ff">手動下 CSC.exe 指令</font></u></strong>
</p>
<p>
來硬的, 我自己想辦法生個 dll + xml 總可以了吧, 反正我的目的只是要 help, dll 用完就丟也沒關係, 只要我不要寫兩份 code 就好. <a href="http://search.msdn.microsoft.com/search/Redirect.aspx?title=Working+with+the+C%23+2.0+Command+Line+Compiler+&amp;url=http://msdn2.microsoft.com/en-us/library/ms379563(vs.80).aspx">查了一下指令</a>, 可以這樣用:
</p>
<p>
<font color="#008000">csc.exe /out:App_Code.dll /doc:App_Code.xml /target:library /recurse:App_Code\*.cs</font>
</p>
<p>
哇哈哈, 這次就成功了, dll 跟 xml 都成功的產生出來, 之後就丟給 NDoc / Sandcastle 就解決了. 額外抱怨一下, 雖然 SandCastle 能夠處理 .net 2.0 額外的功能, 像 generic 等等, 不過速度真是爆慢... Orz, 以前用 NDoc 約 20 min 能夠 build 好 chm, 現在用 sandcastle 要跑 60 min ... 
</p>
<p>
雖然如此, 不過這個方法還是有幾個缺點.. 列一下我已經確定的:
</p>
<ol>
	<li>App_Code 下可以包含 source code 以外的檔案.<br />
	除了 .cs 這種 source code 會被自動編譯之外, 還有其它型態的檔案也會自動被處理. 比如 wsdl 放著就會自動 gen web service proxy, xsd 放著就會自動 gen typed dataset 的 source code... 這些是單用 csc.exe 沒辦法解決的</li>
	<li>另外像 .ascx .aspx 對應的 cs, 也無法用&nbsp;csc.exe 處理, 因為還有另一半的 partial class 是由 template file 會透過 asp.net engine 動態 parsing 後產生 .cs 再一起 compile, 這部份也沒有辦法單靠 csc.exe 處理掉</li>
	<li>理論上還是有辦法把這些動作加在 batch file 或是 msbuild task 裡, 不過這些通通做下來, 那等於你自己搞一個 aspnet_compiler.exe 了... 工程太大, 不划算...</li>
</ol>
<p>
最後我選擇放棄這些遺漏的部份. 因為 help file 主要就是為了能共用的 class library 能有對應的文件, 上面漏掉的三塊都不大會有 comment help 產出, 唯獨 .ascx 還是很需要 help, 不過在沒有更方便的工具之前就先不管它了... 哈哈
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2007-02-16 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-16 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-site-application-sandcastle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>人生ｵﾜﾀ＼(^o^)／の大冒険</title>
		<link>http://columns.chicken-house.net/2007/02/13/%e4%ba%ba%e7%94%9f%ef%bd%b5%ef%be%9c%ef%be%80%ef%bc%bco%ef%bc%8f%e3%81%ae%e5%a4%a7%e5%86%92%e9%99%ba/</link>
		<pubDate>Tue, 13 Feb 2007 23:33:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/13/e4babae7949fefbdb5efbe9cefbe80efbcbc(5eo5e)efbc8fe381aee5a4a7e58692e999ba.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://blog53.fc2.com/k/king75/file/owata.html">http://blog53.fc2.com/k/king75/file/owata.html</a></p> <p>沒耐性 or 脾氣不好的人千萬別玩... 哈哈, 好機車的 game, 玩到想罵 TMD...</p> <p>每當你以為很勵害破關了, 其實是掉到另一個陷阱.. [:@], 果然, 這就是人蔘啊...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2007-02-13 23:33:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-13 23:33:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%ba%e7%94%9f%ef%bd%b5%ef%be%9c%ef%be%80%ef%bc%bco%ef%bc%8f%e3%81%ae%e5%a4%a7%e5%86%92%e9%99%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>好樣的多普達...</title>
		<link>http://columns.chicken-house.net/2007/02/13/%e5%a5%bd%e6%a8%a3%e7%9a%84%e5%a4%9a%e6%99%ae%e9%81%94/</link>
		<pubDate>Tue, 13 Feb 2007 23:30:26 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/13/e5a5bde6a8a3e79a84e5a49ae699aee98194.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>在我買了手機滿五周, 跟客服來回了十封 mail, 也打了幾通電話, 官方網站總算擺上了 c720w 回複出廠預設值後要安裝的軟體了 -_-</p> <p>果然軟體還是要調過跑的才會順, 之前的 RSS reader, 畫面轉 90' 就是有點小問題 (因為是抓 595 的來裝的..), 語音命令的 hotkey / icon 也變正常了, 字典也回來了, 兩個附的 game 也回來了...</p> <p>除了 RSS reader 速度變快了之外, 好像也沒啥大不同... 哈哈...</p> <p>另外, 手機就是當手機用就好, 上周拿手機跑 PaPaGo 試了一圈, hmm... 導航沒多久, 我裝的 screen saver 就給我啟動了, 沒觸控邊開車也不大好按, 想想還是把我古董的 PDA 拿來當 GPS 專用機好了..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2007-02-13 23:30:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-13 23:30:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a5%bd%e6%a8%a3%e7%9a%84%e5%a4%9a%e6%99%ae%e9%81%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Generic Type 的繼承...</title>
		<link>http://columns.chicken-house.net/2007/02/12/generic-type-%e7%9a%84%e7%b9%bc%e6%89%bf/</link>
		<pubDate>Mon, 12 Feb 2007 03:46:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/12/Generic-Type-e79a84e7b9bce689bf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
之前貼過一篇 Singleton 的文章 (<a href="/post/e6b39be59e8b-2b-Singleton-Patterns.aspx">泛型 + Singleton Patterns</a>, <a href="/post/e6b39be59e8b-2b-Singleton-Patterns-(II).aspx">泛型 + Singleton Patterns (II)</a>), 就用到 base class 是 generic type 的作法, base class 可以是 generic type, 在繼承時直接給型別, 衍生出來的子類別就不再是 generic type 了.. 不過這種怪異的用法, 大概沒什麼書上的範例有講到, 也沒什麼書上有應用範例... 這完全是我自己亂配出來的藥方, 沒練過的人不要亂吃, 咳咳..
</p>
<p>
除了 Singleton 那種例子之外, 我另外碰到一個例子... 某個用 asp.net 開發的&nbsp;project, 需要準備一套輸入各種型別資料的 control, 如基本的型別: string, int, bool, DateTime, TimeSpan... 及較複雜的自定型別, 如 MemberInfo, RoleInfo, ..... 等.
</p>
<p>
基本型別的部份, 大概大家都是搭配 asp:textbox, asp:checkbox, asp:calendar 這幾個控制項加一些 code 就搞定了, 反正用起來夠簡單, 也不用再呼它夠不夠精簡, 可不可以 reuse 了, 後面的自訂型別應該也不會太多, 可能土法練鋼, 每種各硬寫出個 user control 就解決了...
</p>
<p>
不過我怎麼能容忍這種 code 擺在我眼前? 哈哈... 看了就很不順眼... 以一般的 OO 觀點來看, 這些控制項應該有些共通的地方 (generalization) 能抽出來, 往上堆到 base class .. 不過卡在每種 user control <font color="#ff0000">要輸入的型別跟本完全不一樣, 不是通通用 object 代替, 就是要寫的很醜</font>...
</p>
<p>
看到那段紅字, 大家大概就會聯想到泛型 (generic) 了, 沒錯... 不過套用到 control 的世界該怎麼用?
</p>
<p>
貼一段不能 run 的 sample ... base class 的部份:
</p>
<p>
<font color="#008000">public class Editor&lt;T&gt; : System.Web.UI.UserControl {<br />
&nbsp;&nbsp;&nbsp; public abstract T Value { get; set; }<br />
&nbsp;&nbsp;&nbsp; // 其它就不干我的事了<br />
}</font>
</p>
<p>
之後假設我要寫個選日期的控制項, 只要這樣寫:
</p>
<p>
.ascx
</p>
<p>
<font color="#008000">&lt;asp:calendar runat=&quot;server&quot; id=&quot;calendar1&quot; /&gt;</font>
</p>
<p>
&nbsp;
</p>
<p>
.ascx.cs
</p>
<p>
<font color="#008000">public class DateEditor : Editor&lt;DateTime&gt; {<br />
&nbsp;&nbsp;&nbsp; public override DateTime Value&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return this.calendar1.SelectedDate; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { this.calendar1.SelectedDate = value; }<br />
&nbsp;&nbsp;&nbsp; }<br />
}</font>
</p>
<p>
&nbsp;
</p>
<p>
最後用起來就沒什麼特別的了, 大概像這樣:
</p>
<p>
<font color="#008000">&lt;chicken:DateEditor runat=&quot;server&quot; value=&quot;2000/01/01&quot; /&gt;</font>
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
看到最後, 讓大家失望了 (H), 沒什麼特別的 code 嘛, 其實不然, 這個作法可以替你的 project 打下一個很好的基礎, 透過 generic 的 base class, 解決掉型別的問題後, 你就可以把各種型別的 editor 都綁在一起, 讓它們有共通的 base class, 這樣的好處很快就出現了,&nbsp;有許多功能你就有機會只作一次, 每種不同的 editor 都能享用...:
</p>
<ol>
	<li>例: Editor 可以實作 &quot;記住上次輸入的值&quot; 這動作, 只要把 value set 的 code 插一段, 記到 file / db 之類的地方..., 所有 editor 自動都有這個能力了</li>
	<li>可以統一加上 OnChange Event, 所有的 editor 都可以有這事件讓寫 page 的人能應用</li>
	<li>因為所有的 editor 都有共同的 base class, 因此搭配 reflection 及 attribute, 你就能把 polymorphism 的技巧應用出來. 舉例來說, 你可以拿任意物件, 產生它專用的編輯畫面. 你可以透過 reflection api, 把所有的 field / property 名字及型別列出來, 同時在畫面上動態產生一個對應型別的 editor control ... 最後底下放個 [save] 的 button, 按下 ok 後自動的把每個 editor 收集到的值寫回 object ... 這一連串的動作如果沒有共同的 base class, 你是沒有辦法做的出來的</li>
	<li>其它 543 的功能, 你有辦法都可以加在 class Editor&lt;T&gt; 裡, 馬上所有的 Editor 都能夠繼承這些能力</li>
	<li>想不出來了, 剩下的原因只有這樣寫起來比較爽...</li>
</ol>
<p>
實際的 sample code 還真的不大好寫, 我碰到的 project 裡寫的東西又牽扯太多, 那天有空想要把它精簡一點的話再放 sample code, 不然就再說... 哈哈..
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2007-02-12 03:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-12 03:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generic-type-%e7%9a%84%e7%b9%bc%e6%89%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
	</item>
	<item>
		<title>Windows Live Writer - Plugin 處女作...</title>
		<link>http://columns.chicken-house.net/2007/02/07/windows-live-writer-plugin-%e8%99%95%e5%a5%b3%e4%bd%9c/</link>
		<pubDate>Wed, 07 Feb 2007 03:16:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/07/Windows-Live-Writer-Plugin-e89995e5a5b3e4bd9c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Windows Live Writer (以下簡稱 WLW) 用過的都說好, 老實說它做的真是不錯, 連家裡太座用了之後就再也不到網頁上寫 blog 了... 
</p>
<p>
不過有個缺點實在是很礙眼, 就是透過它上傳的圖檔, 不管 options 怎麼調, 透過 MetaBlogAPI 或是 FTP, 都會被重新存一次 JPEG 檔. 一來 JPEG 是破壞性壓縮, 越存會越糟糕, 二來它用的 quality 還不低, 我自己的圖檔丟上去大概都會肥一倍... 畫質變差, 檔案又有可能變肥, 真是人財兩失.. 到底差多少? 各位自己比較一下就知道了, 在圖檔上按右鍵選內容可以看的到 file size.. 底下左邊的圖是原檔, 右邊是 WLW 幫你加工過的, 不過我原圖是 JPEG 100% quality, 所以 WLW 雞婆完反而變小一點... 
</p>
<p>
<img src="/wp-content/be-files/files/10502.jpg" alt="" width="300" height="300" /><img src="/wp-content/be-files/WindowsLiveWriter/WindowsLiveWriterPlugin_276C/CRW_0465(Canon%20PowerShot%20G2)%5B4%5D.jpg" alt="" width="300" height="300" /> 
</p>
<p>
試了半天沒得解, 每次都用 &quot;Insert Picture&nbsp;From Web&quot; 也不是辦法, 就把腦筋動到 Plugin 上了...&nbsp;跟小熊子聊完後就開始手癢了, 去下載 WLW SDK 回來看... 可以用 .NET 寫, 就邊 K 邊寫起來... 做法跟 Insert Picture From Web 差不多, 只是先設定好 UNC 路逕跟網址的對應, 讓你挑完檔案先幫你 copy 好再塞入網址.. 懶人用. 
</p>
<p>
首先是 option settings, dll 丟到 Plugins 目錄後, 打開 WLW 的 Tools -&gt; Preferences, Plugins 就會看到新加進去的外掛了.. 
</p>
<p>
<img src="/wp-content/be-files/files/23218.gif" alt="" width="540" height="511" /> 
</p>
<p>
&nbsp;
</p>
<p>
我有準備編輯設定的畫面... 因此有 [options] 的按鈕可以用.. 
</p>
<p>
<img src="/wp-content/be-files/files/35291.gif" alt="" width="408" height="139" /> 
</p>
<p>
這個畫面就很簡單的只填 UNC (網路分享的路逕), 跟對應的 URL ... 設定完成後, 只要要插入圖檔時, 從選單選 Insert -&gt;&nbsp;插入圖片(從網路芳鄰), 就會跳出標準的 Open File DialogBox, 挑完就一切大功告成了 :D 
</p>
<p>
<img src="/wp-content/be-files/files/17535.gif" alt="" width="373" height="221" /> 
</p>
<p>
&nbsp;
</p>
<p>
本來是想從 MetaBlog API 下手, 因為這個管道也可以 upload image, 不過試了半天宣告放棄, 大概是 Microsoft 怕有人寫 Plugins 來偷密碼吧? 也可能是 Plugins 都被定位在 &quot;edit blog&quot; 的部份, 而不是 &quot;publish&quot; 的部份, 因此完全拿不到 WLW 的 Weblog Account 相關資訊... 這條路宣告放棄, 就算要作, 也得分開 config, 沒辦法... 
</p>
<p>
現在這個版本其實只是自己做爽的而以, 所以就不用跟我要 .dll 了, 不成氣候的作品... 因為不知 Microsoft 下一版會不會改掉這鳥問題? 有的話這外掛就變廢物了, 二來現在太陽春, 連個防呆都沒有... 哈哈... 只是花兩個小時邊 K 邊寫的本來就只能玩玩... 不過做過這個 plugin 後, 寫法跟能運用的範圍大概都有個底了, 下次來改寫的話, 我打算 option 那邊就改成 MetaBlogAPI 需要的設定, 如 Blog URL, account, password 等資訊, 不然放個網芳真的是沒啥用... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date><![CDATA[2007-02-07 03:16:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-07 03:16:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-live-writer-plugin-%e8%99%95%e5%a5%b3%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>新手機真是讚 (y) - II</title>
		<link>http://columns.chicken-house.net/2007/02/03/%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y-ii/</link>
		<pubDate>Sat, 03 Feb 2007 03:59:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/03/e696b0e6898be6a99fe79c9fe698afe8ae9a-(y)-II.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
既然要勸敗, 就要勸的徹底一點, 不過我當然寫不出那種從開箱就一堆照片, 然後啥 ooxx 很有質感, 接著再拿一堆手機出來疊疊樂的文章, 咳咳.. 
</p>
<p>
發現買 Dopod C720W 這支手機的人似乎不多, 討論也是少到可憐, 不過這款手機倒是有不少優點, 我事前除了做足了功課之外, 還專程去抓了 Microsoft 的 Smartphone SDK + Device Emulator, 把我要的功能都試了好幾次, 確認跟我想的一樣才跑去買... 我就挑幾個合我胃口的優點講一講:
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture9.gif" alt="" width="320" height="240" />
</p>
<p>
Dopod 內建了幾個軟體, 很鳥的就不講了, 不過 &quot;語音命令&quot; 這個軟體還真不錯 (Y), 軟體不大, 語音也不用事先錄好, 直接講就可以了, 像上面的例子, 我只要 hotkey 按住, 對著手機講 &quot;打電話到叭樂雞行動電話&quot;, 接著講 &quot;確定&quot;, 我的電話號碼就撥出去了..., 講 &quot;查詢叭樂雞&quot;, 我的通訊錄就跳到我那一筆...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture2.gif" alt="" width="320" height="240" /> 
</p>
<p>
這個軟體 ( pTravelAlarm ) 從我上一支 smartphone 就開使用了, 沒什麼特別的功能, 就是簡單好用而以. Microsoft 內建的鬧鐘很沒有誠意, 連兩百塊的電子錶都比它強 :@, 我的要求也不多, 能用 midi / mp3 / wma 當鈴聲, 能夠讓我訂兩三組, 上班 &amp; 周末各在不同時間響就好了...
</p>
<p>
不過說也奇外,&nbsp;這麼簡單的功能還真找不到滿意的, 這套本來在 WM5 smartphone 有小 bug, 就是 kb 鎖住後鬧鐘又響, 事後會按不到解鎖的鈕, 變成你的手機就解不開了 :@, 解法只剩自己打通電話進來, 或是拔掉電池這兩招... 本來想試試其它軟體都不合用, 剛好一月中更新的版本解掉這個鳥問題, 就繼續用這套習慣的小鬧鐘...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/c720w/01.wmv"><img style="width: 320px; height: 240px" src="/wp-content/be-files/c720w/pc_capture21.gif" alt="" width="320" height="240" /></a> 
</p>
<div>
Screen Saver + Auto Lock
</div>
<p>
&nbsp;
</p>
<p>
手機剛買來前兩天, 就為了這件事很苦惱, 一堆鍵, 旁邊還有觸控條, 帶在身上光是要拿出來就會不小心按到一堆鈕... 收起來時忘了 lock keyboard 就麻煩了, 用慣折蓋機對這點還真不能適應... 果然 smartphone 能灌軟體是個大優點, 什麼要求都找的到軟體可以用...
</p>
<p>
這個是德國人寫的小程式, 選項多到會眼花, 我只挑兩個功能... 一個是像電腦的 screen saver 一樣, 隔幾秒不動就自動 lock keyboard .. 另一個就是它可以自定 screen saver 的畫面, 設定方式挺抽像的, 不過彈性很大就是, 這段 video 就是我調的, 還是弄個類比時鐘比較順眼... :D
</p>
<p>
底下那排 icon 會隨時跟著 smartphone 的狀態作變化, 像是有沒有開 wifi, bluetooth, 電池有沒有電, 有沒有漏接來電等等... 還挺方便的, 另外有顯示溫度 ??? 不過那個溫度怎麼看都不準, 不知道資訊是打那來的?
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture7.gif" alt="" width="320" height="240" /><img src="/wp-content/be-files/c720w/pc_capture8.gif" alt="" width="320" height="240" />
</p>
<p>
上一篇提到多普達的鳥客服... 手機買來手癢就給它 hard reset, 然後要去抓軟體回來裝, 網站連個影都沒有 :@, 對, 即使到現在還是沒有. 本來有內建一個字典也沒得用了, 只好去挖這套之前在 8390 上面用的字典出來裝...
</p>
<p>
這年頭, 連手機都有&nbsp;clear type ....&nbsp; =.=, 左邊的是開 clear type 的效果, 右邊的沒有... 其它就沒啥特別了, 就是一般的字典而以.. 我裝了英英跟英漢兩套, 果然有 qwerty keyboard, 查起來真順手, 哈哈...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture10.gif" alt="" width="320" height="240" /><img src="/wp-content/be-files/c720w/pc_capture15.gif" alt="" width="320" height="240" />
</p>
<p>
Dopod 最近的手機都內建一套 RSS reader, 本來我是想...
</p>
<p>
&nbsp;&quot;手機內建 rss 能幹嘛? 我又不會一天到晚上網&quot;
</p>
<p>
不過就算每天只同步一次, 這個軟體還真不錯用, RSS 剛好可以把這些消息大綱很快的上網抓下來, 然後就帶在身上無聊拿出來看一下... 如果 theme 換成多普達的, 在首頁還會隨機輪播 RSS 的文章標題...&nbsp; 現在到處都有 RSS 可以訂閱, 每天簡單更新一下就幾十則新聞自動跑進來... 遠比用 mail 或是 mobile favorites 方便太多了... 沒上網時就有東西可以看, 當然有上網時更棒... 可以直接連到網頁去看全文...
</p>
<p>
不過用手機上網幹嘛? wifi 又不是那麼方便, 我也沒有 3G&nbsp;/ GPRS 吃到飽... 這時 bluetooth 的好處就來了, 我的電腦插著 bt dongle, 剛好我在床上躺著還可以收到訊號, 臨時想連一下就不用爬起來... 哈哈, 所以現在我都窩在床上看 RSS ..
</p>
<p>
補幾張圖... 左邊是看 RSS 內容的畫面, 右邊是點了 &quot;線上閱讀&quot; 後開 IE 的畫面.. 怎麼上網的? 本來用 wifi 後來覺的太麻煩, 我現在都改用 bluetooth + activesync 了...
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture13.gif" alt="" width="320" height="240" /><img src="/wp-content/be-files/c720w/pc_capture14.gif" alt="" width="320" height="240" />
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/pc_capture3.gif" alt="" width="320" height="240" /><img src="/wp-content/be-files/c720w/pc_capture5.gif" alt="" width="242" height="239" />
</p>
<p>
PaPaGo G10 就沒啥好講了, 之前只耽心 320x240 這種解析度會不會有問題? 試了結果是一切正常 :D, 補幾張圖應付一下.. 哈哈..
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img src="/wp-content/be-files/c720w/outlook.gif" alt="" width="522" height="254" /> 
</p>
<p>
這個軟體叫 Smart Journal, 是裝在 PC 上, 不是裝在手機上... 只要每次 ActiveSync 一啟動, 它就會跟著跑起來, 會把 SmartPhone 上面的通話記錄都倒到 outlook 的日誌 (Y), 我的 outlook 就會有所有的通聯記錄了, 咳咳.. 它會記錄來電 or 去電, 沒接到的也會記, 如果通訓錄對的到,&nbsp;就會直接秀名字, 也會有通話時間... 這個小軟體太棒了, 有用 windows mobile 的一定要去裝一下... 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
最後要講的是象牙筷子... 咳咳, 果然敗家會忍不住一直敗下去... 為了這支手機總共多敗了三樣雞絲...
</p>
<ol>
	<li>那個買到假貨的 bluetooth headset 就不要提了, 雖然 NTD480 而以, 賣家還有一萬多個好評... 反正我本來就只是要買個便宜堪用的... 沒想到現在連 3C 產品也有假貨, 外型很像, 包裝很像, 不過很多小地方不同, 模具也差, 不過抓到的 device id 還一模一樣, 對岸的功力果然不是蓋的... 之前看壹周刊, 對岸連雞蛋都有假的... (沒錯, 假蛋打開也有蛋白蛋黃, 拿去煎還會熟...&nbsp; -_-)<br />
	<br />
	</li>
	<li>Kingston 1GB micro SD, 含 SD 轉卡, 還有一個 microSD 的 USB 讀卡機 (不用轉卡), 含稅, 總共是 NTD 550 + 50 ... 同樣的東西 512mb 要 300 + 50, 想都沒想就標了 1G 的... 不過, 塞不完啊 :&#39;(&nbsp;&nbsp; 努力塞了半天還剩 7xx mb ...<br />
	<br />
	</li>
	<li><img src="/wp-content/be-files/c720w/CRW_1090.jpg" alt="" width="240" height="161" align="right" />&nbsp;最後一個, 用了三個禮拜的 USB bluetooth dongle, 受不了了, 凸一塊在旁邊, notebook 很難收到包包裡, 拔掉的話要連線又要抓半天, ThinkPad 專用的 BMDC-300 貴就算了, 沒內建天線, 還要破解 BIOS 啥的... 受不了就去敗了這張 PCMCIA 的 bluetooth adapter, 不過也不便宜, 夠買兩支同等級 USB 的 bluetooth dongle 了.. 這張的收訊範圍是 200m (號稱), 舊的那支我剛好躺在床上用手機就是極限了, 翻個身就收不到, 換了這張怎麼滾都有訊號... 哈哈!! 不過美中不足的是, 買來插上電腦才發現, 這張 PCMCIA 其實裡面是 USB host chip + USB bluetooth chip... 所以插上電腦是先找到 VIA USB Host Controller... :@, ouch !!! 腦袋馬上響起一句話.. &quot;VIA sucks...&quot; 嘖嘖, 好在用起來沒啥大問題, 就睜一隻眼閉一隻眼吧...<br />
	<br />
	</li>
	<li>GPS bluetooth receiver... 這個還沒敗, 不過我只打算買個便宜堪用的就好, 哈哈... 這個其實不算買手機後才要買的東西, 我本來就有一個了, 只不過之前有一次拿錯變壓器, 充壞了, 還可以用, 不過關不掉, 電池一放就猛閃燈, 也不會進入省電模式, 猛閃個半小時就沒電去...<br />
	<br />
	</li>
</ol>
<p>
好了, 別再撐了, 快去敗吧... 對, 就是說你們兩個 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2007-02-03 03:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-03 03:59:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>470</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-05 08:20:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-05 08:20:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看到最後…嚇了一跳… 被點名了…

那個鬧鐘不錯的樣子…

幫我搞定一下輸入法如何?(嘸蝦米的哦)

還有呀…幫黑暗大哥問一下…可以待機多久呀?
少於4天的話就不及格囉。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>471</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-05 16:44:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-05 16:44:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[官方說法: 250hr -_-

不過我自己在用, 除了剛買那一陣子三不五時就拿出來玩, 還開 wifi / bluetooth ... 之後正常使用, 偶爾拿出來看看有沒有未接來電, 一天講個兩三通, 晚上用 bt 同步一兩次, 可以用到五天左右..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>472</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-05 16:55:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-05 16:55:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[順手 google 找了一下...

CE-Star for SmartPhone 版支援無蝦米... 還支援 320x240 橫螢幕...
http://www.mobem.com/cht/products/cestarwm5sp.php
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>473</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-13 02:35:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-13 02:35:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哪兩個啊?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>474</wp:comment_id>
			<wp:comment_author><![CDATA[ethan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-27 04:02:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-27 04:02:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問這個screen saver在哪裡可找到？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>475</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-28 02:02:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-28 02:02:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Automatic Keylock 3.87
http://maniac.fschreiner.de

有新版, 不過我沒再更新就是了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>新手機真是讚 (y)</title>
		<link>http://columns.chicken-house.net/2007/02/02/%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y/</link>
		<pubDate>Fri, 02 Feb 2007 03:38:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/02/e696b0e6898be6a99fe79c9fe698afe8ae9a-(y).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哇哈哈, 用了半個多月, 覺的這支新手機 (dopod c720w) 真是不錯啊... (Y) 
</p>
<p>
這支手機果然沒有辜負我對它的期望, $$果然沒有白花, 喜歡用 smartphone 的人可以考慮一下... 首先對於一支手機, 它是還蠻稱職的, 雖然這些要求可能幾百塊的手機就擺的平, 不過被舊手機折磨了兩年多, 我一定要講一下... 
</p>
<ul>
	<li>待機時間還不差, 官方說法待機 250hr, 平常一天講個三四通, 早上當 mp3 鬧鐘, 可以連續用個四五天.. 比之前那支待機 1 天, 電力剩不到一半還會斷訊好多了</li>
	<li>終於不會當機了... :&#39;(</li>
	<li>很薄, 掛在腰帶上很舒服, 不會卡卡的</li>
</ul>
<p>
如果只有上面這些優點的話會被人當笑話看, 咳咳... 
</p>
<ul>
	<li>橫的 LCD ( 320x240 ) 看起來果然爽多了, LCD 畫面真棒</li>
	<li>跟 outlook 整合的很完美, 藍芽一按下去資料就通通過來了, 通訊錄的大頭照貼在 outlook 裡就自動進來...</li>
	<li>鬧鐘 + 自動鍵盤鎖 + 全螢幕的類比時鐘等小軟體, 灌一灌就很順手</li>
	<li>不小心買了 1GB microSD, NTD 600 含運費 + 發票 + USB 讀卡機, 灌不滿 :~~</li>
	<li>可以跑 PaPaGo, 以後出門不用多帶台 PDA ..</li>
	<li>終於可以用 bluetooth headset ... :D</li>
	<li>標準 mini USB 充電, 到處都可以充...</li>
	<li>用了之後證明, 有 qwerty 鍵盤, 比拿隻筆在上面戳戳戳方便太多了 (H)</li>
	<li>有 wifi, 在公司可以直接上網, skype / communicator 可以直接用</li>
	<li>搭公司的 exchange server 可以有 push mail</li>
	<li>語音命令很好用, 直接唸名字就可以打電話...</li>
	<li>RSS reader 放上面很方便, 平常同步抓一下, 出門沒事可以當報紙看</li>
	<li>可以看 word / excel / power point / pdf, 檔案帶著實用多了</li>
	<li>通話記錄可以傳回 outlook journal, 有來電號碼, 通話時間等...</li>
	<li>電腦放房間, 我躲在床上還收的到藍芽的訊號, 剛好省了 wifi ...</li>
	<li>可以自己寫 .net cf&nbsp;的程式丟上去跑...</li>
</ul>
<p>
爽完了, 講點不爽的... 
</p>
<ul>
	<li>dopod 的客服實在是很鳥, 手機買來有灌一些工具, 手冊說 hard reset 後這些軟體會清掉, 要上網 download 軟體回來補... 不過網站跟本沒這堆檔案, 跟客服盧了兩個禮拜沒結果 :@</li>
	<li>為了搭手機去買 bluetooth headset, 沒想到連這東西都有冒牌的.. -_-, 不過很便宜就是...</li>
	<li>notebook 沒有內建藍芽, 插一根藍芽棒好麻煩.. 該去敗 thinkpad bmdc 300 或是 billionton 的 pcmcia bluetooth adapter 了..</li>
	<li>沒座充... mini USB 有個蓋子, 要拔來拔去的.. 為什麼不能無線充電啊!!!</li>
	<li>好貴...</li>
</ul>
<p>
哈哈, 還沒退伍時買了第一支手機 (Panasonic GD70), 之後就沒再買過了, 中間兩支手機都是不用錢的 (H), 這支是第二支...&nbsp;不錯不錯, 果然手機還是要自己買才合用啊... 這篇其實沒啥內容, 只不過是勸敗文而以, 哈哈 :D 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2007-02-02 03:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-02 03:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%b0%e6%89%8b%e6%a9%9f%e7%9c%9f%e6%98%af%e8%ae%9a-y]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>476</wp:comment_id>
			<wp:comment_author><![CDATA[http://blog.xuite.net/mingche_tw/photo/]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-02 16:14:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-02 16:14:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[流口水中]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>總算搬完了</title>
		<link>http://columns.chicken-house.net/2007/02/02/%e7%b8%bd%e7%ae%97%e6%90%ac%e5%ae%8c%e4%ba%86/</link>
		<pubDate>Fri, 02 Feb 2007 03:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/02/02/e7b8bde7ae97e690ace5ae8ce4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
server 跟我桌機要對調主機板的事, 其實早就有這打算了, 只因為一個懶字, 就摸到現在 (H)...
</p>
<p>
幾個月前, 弄了套陽春的 MCE, 因為配了 Core2 Duo CPU, 又快又省電, 風扇也安靜的多, 就想把它換到 server 上, server 的 PentiumD 920 挪到桌機看電視等娛樂用途...
</p>
<p>
上週日趁著老婆小孩回娘家, 有幾個小時的空檔, 開車回家吃完飯就趕回來施工了, 3:00pm ~ 6:30pm 總算把要拆機的動作弄完... 嘖, 動作真慢, 果然年紀大了就不適合玩 DIY 了, 以前這種事大概一半時間就搞定了...
</p>
<p>
整個過程還真是不怎麼順利... 記一下:
</p>
<ol>
	<li>顯示卡的散熱片卡到機殼風扇, 剛剛好蓋不起來...</li>
	<li>12&quot; 的機殼大風扇, 平常放著竟然吸了好幾隻蚊子到機殼內.. -_-</li>
	<li>積了一堆灰塵, 吸塵器剛好沒電</li>
	<li>SATA 接頭竟然一碰就掉, 害我多拆了好幾次</li>
	<li>MCE跟我哀說偵測到硬體變更, 要我重新 activation windows xp :@</li>
	<li>一堆沒標示正負的線裝反, 燈不會亮, USB 不能用, 讀卡機不會亮 ... Orz</li>
	<li>USB KB 竟然在開機時會抓不到, 明明按個確定就好, 就是按不下去 :~ 只好再去挖 PS/2 的..</li>
</ol>
<p>
搞了半天, 小皮有一整天沒湯瑪士可以看, 我有兩天沒睡飽, 少錄了一天的天線寶寶跟企鵝家族, 總算是都搞定了... 換了 C2D, 果然安靜很多 :D&nbsp; 辛苦果然是值得的, 接下來就是欠的債要還一還了, 升級 community server 2.1 ...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2007-02-02 03:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-02 03:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b8%bd%e7%ae%97%e6%90%ac%e5%ae%8c%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>皮哥皮妹的年齡 user control ...</title>
		<link>http://columns.chicken-house.net/2007/01/18/%e7%9a%ae%e5%93%a5%e7%9a%ae%e5%a6%b9%e7%9a%84%e5%b9%b4%e9%bd%a1-user-control/</link>
		<pubDate>Thu, 18 Jan 2007 00:17:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/01/18/e79aaee593a5e79aaee5a6b9e79a84e5b9b4e9bda1-user-control-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img src="/wp-content/be-files/age-control.gif" alt="" width="271" height="148" /> 
</p>
<p>
每次看 sea 在貼文章都會貼小皮幾歲幾個月, 妹妹幾個月... 就想說直接寫個 user control 就搞定了, 沒想到真的寫下去還有點小麻煩... 哈哈...
</p>
<p>
曆法的規則還真不少, 難怪每個教寫程式的書都會來一段萬年曆的 sample code.. 每個月天數都不一樣, 還有潤年不潤年的, 四年一潤, 百年不潤, 四百年又潤... 
</p>
<p>
這堆原則弄下來, 單純的幾歲幾個月反而不好算了, 算從出生到現在共幾天, 去除 365 當歲數的誤差還好, 餘數再除 30 當月份的誤差就不小了, 最後的餘數再當天數就完全不對了...
</p>
<p>
弄了一下, 果然寫元件的爽度就是不一樣... 這個 control 寫好後的用法是這樣:
</p>
<blockquote>
	<p>
	<font color="#0000ff">&lt;CH:Age runat=&quot;server&quot; birthday=&quot;2000/05/20&quot; pattern=&quot;阿扁當總統已經 {0} 年 {1} 個月了&quot; /&gt;</font>
	</p>
	<p>
	會顯示: <font color="#0000ff">阿扁當總統已經 6 年 7 個月了</font>
	</p>
</blockquote>
<p>
細節就不多說了, 以後進到 皮哥&amp;皮妹的小天地 的左上角, 就看的到年紀, 純脆自己爽一下, 我們家的 blog 又跟別人的有一點點地方不一樣了 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2007-01-18 00:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-18 00:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%9a%ae%e5%93%a5%e7%9a%ae%e5%a6%b9%e7%9a%84%e5%b9%b4%e9%bd%a1-user-control]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>477</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/mingche_tw/photo/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-18 10:31:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-18 10:31:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我也要~~~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>478</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-18 10:44:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-18 10:44:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[糟, 熊熊想到還沒 upgrade cs 2.1 ... 哈哈...
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>敗家新目標... Dopod C720w</title>
		<link>http://columns.chicken-house.net/2006/12/31/%e6%95%97%e5%ae%b6%e6%96%b0%e7%9b%ae%e6%a8%99-dopod-c720w/</link>
		<pubDate>Sun, 31 Dec 2006 19:38:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2006/12/31/e69597e5aeb6e696b0e79baee6a899-Dopod-C720w.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>好久沒敗手機了... 之前就一直在物色新手機, 因為快被現在這支氣炸了... 現在這支 SmartPhone (Mio 8390) 其實功能沒什麼好挑的, 就敗在當支手機實在太不稱職了...</p> <ol> <li>待機太短, 新的時後只能待機 2.x 天, 只要某天話多一點就掛了  <li>電力剩一格以下, 通訊就很容易中斷... 如果通話中從兩格掉到一格, 一定段訊..</li></ol> <p>其它都很好, smartphone 搭 outlook 的好處太多了, 所以想找隻能夠替代的 smartphone .. 看了半天終於有兩支入選, 分別是 Dopod <a href="http://www.dopodasia.com/Dopod/Taiwan/Products/SmartPhone/C720w/">C720w</a> 跟 <a href="http://www.dopodasia.com/Dopod/Taiwan/Products/SmartPhone/595/">595</a> ...</p> <p>借用一下 Dopod 的圖...</p> <p>C720W:<br><img src="http://www.dopodasia.com/NR/rdonlyres/EED125D2-F81B-458D-94F8-E74F68776E27/1277/frontchinesewith3d180x240.jpg"><br/>595:<br/><img src="http://www.dopodasia.com/NR/rdonlyres/B169A5A6-25EB-4653-8B86-90F9C788353F/921/180X240.jpg"></p> <p>網頁的官方訂價都一樣, 對我而言, 兩台的優點各為:</p> <ol> <li>C720W 有鍵盤 [*][*][*]</li> <li>C720W 的螢幕是橫的 (360x240) [*][*][*][*][*]</li> <li>C720W 有&nbsp; wifi [*][*][*]</li> <li>595 有 3G [*][*][*][*]</li> <li>595 的螢幕規格較普遍 (240x320), 軟體相容性較好 [*][*]</li></ol> <p>看了半天, 決定放棄用不大到的 3G, 盡量用內建的軟體就不會有解析度跟軟體不相容的問題了... 不過目前的門號有綁約, 要等到 2007 / 05 才解套... 再龜幾個月吧 (H), 搞不好那時又變卦了..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2006-12-31 19:38:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-31 19:38:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%97%e5%ae%b6%e6%96%b0%e7%9b%ae%e6%a8%99-dopod-c720w]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>479</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-01 07:30:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-01 07:30:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不用等...

就敗吧...

反正..敗家最大!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>480</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-02 14:13:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-02 14:13:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不..應該是新年最大..

新年新希望新手機...

大家新年快樂...至於下面那一句..就不用說了..

因為...

大家都發大財了嘛...!! 

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>481</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-03 00:08:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-03 00:08:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 我想敗手機, 你倒是挺樂的... :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>482</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-07 00:55:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-07 00:55:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 再讓你樂一點...
你現在打電話給我的話, 已經會有來電大頭貼了 (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>483</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-09 10:04:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-09 10:04:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這摸酷的手機..不貼一張來瞧瞧..會對不起這個Blog..

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>484</wp:comment_id>
			<wp:comment_author><![CDATA[山姆]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-10 14:52:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-10 14:52:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這就是所謂的"敗家"子嗎?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>485</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-10 21:04:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-10 21:04:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[honga: 要貼啥? 照片就是上面 c720w 那支啊.. (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>486</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-11 09:59:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-11 09:59:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[來個 10 mega-pixal 的近拍吧...

反正敗家不嫌多..多一個也無妨..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>487</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-12 00:42:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-12 00:42:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[10mp... 你對我想敗的東西還真瞭解.. (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>488</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-17 19:58:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-17 19:58:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用了一個多禮拜, 只有一個想法...

"早該買了, 我竟然還撐這到現在..."

哈哈, 不過一切都好, 唯一美中不足的是 dopod 的客服果然名不虛傳, 真是是很兩光... :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Windows Live Writer Beta2 ... (新版)</title>
		<link>http://columns.chicken-house.net/2007/08/29/windows-live-writer-beta2-%e6%96%b0%e7%89%88/</link>
		<pubDate>Wed, 29 Aug 2007 02:43:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/29/Windows-Live-Writer-Beta2-(e696b0e78988).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
看來我真的落後太久了... 等了半天都沒改版的 windows live writer, 沒想到悄悄推出更新版本 (beta 2) 了, 連到<a href="http://windowslivewriter.spaces.live.com/">官方網站</a>一看, Orz, 2007/05/30 就出來了... 
</p>
<p>
看起來畫面好多了, 之前輸入法常常叫不出來的問題現在還沒碰到, 其它功能還沒仔細去試, 哈哈, 管它的, 先裝再說, 反正跟我自己的 blog 搭起來還是可以用, 以後再慢慢試... [:D] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2007-08-29 02:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-29 02:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-live-writer-beta2-%e6%96%b0%e7%89%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>不用再龜了... Canon PowerShot G9 現身...</title>
		<link>http://columns.chicken-house.net/2007/08/22/%e4%b8%8d%e7%94%a8%e5%86%8d%e9%be%9c%e4%ba%86-canon-powershot-g9-%e7%8f%be%e8%ba%ab/</link>
		<pubDate>Wed, 22 Aug 2007 01:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/22/e4b88de794a8e5868de9be9ce4ba86-Canon-PowerShot-G9-e78fbee8baab.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
在 Canon 的網站看到 <a href="http://web.canon.jp/imaging/dcp/psg9/index-sp-e.html">G9</a> 的消息, 這次果然跳過 G8 直接出 G9... 哈哈...
</p>
<p>
這系列文章, 歹戲拖棚了那麼久, 總算可以演大結局了 (註1). &nbsp;Canon 還是有在看市場的, S5 IS 終於加了被罵很久的熱靴, 這次 G9 也把 G7 被罵很久的 RAW file support 給加回來了, 看樣子 G2 總算可以退休了, 這年頭應該沒有人數位相機用這麼久了吧, 七年, 足足七年, 果然該手癢了... [H].
</p>
<p>
之前其實差一點就要買G7了,&nbsp;只不過沒有 RAW file 就不想買了 (註2), 不然其它 G 系列失傳的特性我都願意忍受了說.. G9 果然把 RAW 給加回來了. 之前 Canon 還硬ㄠ了一堆理由, 說什麼像素這麼高了, 雜訊嚴重, 直接取樣的 RAW file 畫質不見得會比處理過的 JPEG 檔來的好.. blah blah, 果然是行銷術語.. 咳咳..
</p>
<p>
看了一下, 跟 G7 沒有什麼很大的不同, 主要就是把 RAW (.CR2) file 加回去了... 好, 開始要找找那裡買划算了 [:D], 不過最近敗了一堆東西, 果然錢花下去會上癮啊... [:&#39;(]
</p>
<p>
&nbsp;
</p>
<p>
--
</p>
<p>
註 1. 前情提要一下...
</p>
<ul>
	<li><a href="/wp-content/be-files/archive/2007/05/10/canon-powershot-s5-is.aspx">Canon PowerShot S5 IS 出來了</a>, 2007/05/10</li>
	<li><a href="/post/Canon-PowerShot-G7-e587bae78fbee4ba86.aspx">Canon PowerShot G7 出現了...</a>, 2006/09/25</li>
	<li><a href="/post/Canon-PowerShot-S2-IS.aspx">Canon PowerShot S2 IS</a>, 2005/08/13</li>
</ul>
<p>
&nbsp;
</p>
<p>
註 2. 為什麼這麼在意 RAW ? 現在不存 RAW, 以後一定會後悔啊... 何況我花了一堆工夫把 RAW file 的處理流程給簡化到單一步驟了... [:D], 現在換 .CR2 剛好可以直接換到 Vista, Canon 有 .CR2 的 codec support ..
</p>
<ul>
	<li><a href="/wp-content/be-files/archive/2007/04/03/canon-raw-codec-for-vista.aspx">Canon RAW Codec for Vista 出來了..</a>, 2007/04/03</li>
	<li><a href="/wp-content/be-files/archive/2006/12/23/cr2-supported.aspx">歸檔工具更新 - .CR2 Supported</a>, 2006/12/23</li>
	<li><a href="/post/Digital-Camera-Filer---Source-Code-(update).aspx">Digital Camera Filer - Source Code (update)</a>, 2006/11/18</li>
	<li><a href="/post/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7---Release-Notes.aspx">Canon Digital Camera 記憶卡歸檔工具 - Release Notes</a>, 2006/11/17</li>
	<li><a href="/post/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7---RAW-Support-Update.aspx">Canon Digital Camera 記憶卡歸檔工具 - RAW Support Update</a>, 2006/11/04</li>
	<li><a href="/post/Canon-Digital-Camera-e79bb8e6a99fe78da8e4baab---e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7.aspx">Canon Digital Camera 相機獨享 - 記憶卡歸檔工具</a>, 2006/11/02</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2007-08-22 01:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-22 01:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%8d%e7%94%a8%e5%86%8d%e9%be%9c%e4%ba%86-canon-powershot-g9-%e7%8f%be%e8%ba%ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>416</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-22 01:44:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-22 01:44:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[講半天G9 還是沒買阿!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>417</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-22 01:51:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-22 01:51:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[市面上還買不到... 急什麼...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>又變成水電工了..</title>
		<link>http://columns.chicken-house.net/2007/08/18/%e5%8f%88%e8%ae%8a%e6%88%90%e6%b0%b4%e9%9b%bb%e5%b7%a5%e4%ba%86/</link>
		<pubDate>Sat, 18 Aug 2007 12:45:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/18/e58f88e8ae8ae68890e6b0b4e99bbbe5b7a5e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
有了<a href="/post/e6b0b4e99bbbe5b7a5.aspx">上一次</a>的經驗之後, 這次要佈線就熟練多了... 不過弄起來好像有點過頭了? 把家裡弄的跟網咖一樣...
</p>
<p>
趁著這次家裡隔間從無到有隔起來, 水電管線也得從頭處理一次, 那當然是趁這次機會把網路線都拉好... 不然下一次大概是廿年以後才有這機會.想了想, 一個房間一個 RJ-45 應該是不大夠, 這年頭什麼都需要網路線, 電腦要用, 網路硬碟要用, 印表機要用, 電話也要用, 音響要用, video player 也要用, 電視遊樂器也要用, 現在連硬碟 (NAS) 都要接網路...... Orz
</p>
<p>
於是狠下心, 連電話線也都直接用 CAT5E 的線來拉, 每間房間就是一組 (三條 CAT5e), 兩個網路孔 + 一個電話, 以後必要時接頭改成 RJ-45 就是三個網路孔了... 雖然電話線跟第四台的CABLE線不需要用星狀架構, 我還是一樣把每個電話線跟cable線都單獨拉到機箱, 這樣就算要裝電話總機也沒問題... 要裝強波器 or 分配器也都一起收到裡面就好...
</p>
<p>
這樣拉線好處很多, 不過缺點就是線太多條, 線也要多買很長... 那些將近1公理的線就是這樣藏在我家天花板... 拉線的過程中, 水電師父就說:
</p>
<p>
&quot;<em>之前做別人家裡也有拉網路線, 不過沒有像你拉這麼多的...</em>&quot;
</p>
<p>
連工頭都講:
</p>
<p>
&quot;<em>你這樣拉, 好像是家裡要開網路賭場的那種...</em>&quot;
</p>
<p>
連我爸都跟我講, 有鄰居進來看也在問...
</p>
<p>
&quot;<em>吳先生, 你們家怎麼線拉的跟蜘蛛網一樣? ....</em>&quot;
</p>
<p>
Orz, 有這麼誇張嘛...
</p>
<p>
不過想一想, 會在家裡這樣搞真的是有點誇張, 哈哈... 為了新家的網路基礎建設, 我花了不少工夫在準備這些材料.... 連 catv 的線也狠下心, 直接拉放設狀的, 以後有什麼強波器之類的通通都塞到機櫃裡就好 [H]. 光是這邊的材料費就花了不少, 如下:
</p>
<ol>
	<li>15U 機櫃 (Y拍買的, 好大一個, 偷兒會不會以為這是金庫? 直接把機櫃塞到雜物間...) </li>
	<li>24ports swtich hub (Y拍買的, 網咖關門拋售的二手設備, 幾百塊而以) </li>
	<li>4U 機殼 (Y拍買的...) </li>
	<li>AMP Cat5e 網路線 305m 兩箱 (竟然用到快光了... Orz) </li>
	<li>大通的 CATV 線 100m 三捲 (這個也快用光了... Orz) </li>
	<li>3M Cat5e 插座 + 資訊面版 ( 好貴 :~~~ ) </li>
	<li>雜牌的RJ11線頭, 高級的有線電視F頭, AMP 的RJ45線頭 (這家賣的頭便宜的離譜, 100個市價約600, 他賣199,不知道是不是假的... 管它的) </li>
	<li>一堆雜七雜八的配線工具 (有壓CABLE的鉗子,RJ11/RJ45的鉗子,剝線刀,壓線工具,數字環,熱縮管,blah blah... 用了之後真值得, 早就該買了 [Y]) </li>
	<li>老爸愛用的監控系統, 像錄放影機一樣直接錄到硬碟.. (Y拍買的, 插上網路裝上硬碟就好了) </li>
	<li>電話總機, 不需要專用話機, 普通電話就可以... (一樣Y拍買的, 還真不錯用, 三外線八內線)</li>
</ol>
<p>
這些東西通通收到 15U 機櫃, 當然除了電力線路之外, 所有的線也都集中到機櫃這邊, 機櫃就直接丟到雜物間去, 眼不見為淨... [H]
</p>
<p>
下次各位想去網咖就不用去跟那些七八年級的年輕人搶位子了, 來我家就好 [H] 哈哈
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date><![CDATA[2007-08-18 12:45:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-18 12:45:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%88%e8%ae%8a%e6%88%90%e6%b0%b4%e9%9b%bb%e5%b7%a5%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="family"><![CDATA[家人]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>418</wp:comment_id>
			<wp:comment_author><![CDATA[Clifford]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-05 10:27:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-05 10:27:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈希!!!

你真專業,還來得及去參觀嘛?
看來以後(不知道要多久以後 :~~~~~)成家的時候,得要請教這位拉線顧問了...

咳! 人家新光的 e-learning 又潛入水面下了...怎麼這麼難賣!快說!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>419</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-07 02:22:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-07 02:22:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[來啊, 歡迎 :D
不過要弄到好, 還要個把個月 :~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>停機公告...</title>
		<link>http://columns.chicken-house.net/2007/08/15/%e5%81%9c%e6%a9%9f%e5%85%ac%e5%91%8a-2/</link>
		<pubDate>Wed, 15 Aug 2007 01:41:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/08/15/shutdown-20080715.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
該看的應該都沒在看這裡吧, 哈哈.. 有把 DNS 或是 BLOG 等等的 service hosting 在我這邊的人請留意一下, 預計九月開始會停機一陣子, 停多久我也不曉得 [:D], 剩下兩個禮拜的時間快點去找備援的地方吧... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2007-08-15 01:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-15 01:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%81%9c%e6%a9%9f%e5%85%ac%e5%91%8a-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>推!!!</title>
		<link>http://columns.chicken-house.net/2007/07/24/%e6%8e%a8/</link>
		<pubDate>Tue, 24 Jul 2007 19:02:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/07/24/e68ea8!!!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
鄉民們, 一起來推吧... 上啊...
</p>
<p>
看到 FunP 人氣開始超越黑米的新聞之後, 原本想很久因為懶都沒動手的念頭又起來了... 放個推文的 button 在 blog 上面看看, 搞不好會因為這樣找到更多同好也說不定 [:D]
</p>
<p>
放的方式很簡單, 只是照 FunP 網站上面的工具產生出來的 html tag, 包裝成 ASP.NET User Control (單一ASCX), 然後加到樣板裡面, 完全沒有什麼深度可言, 我就不貼 code 了...
</p>
<p>
每篇都有個推文的 link, 大家就順手幫我推一推吧 [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2007-07-24 19:02:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-24 19:02:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8e%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>422</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-25 08:30:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-25 08:30:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[有要填巴樂雞萬歲的東西..誰會想推?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>423</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-25 22:43:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-25 22:43:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 就是真的有...
大概是寧願按 "推", 也不願意打 "叭樂雞萬歲" 吧... [:'(]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>424</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-29 05:07:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-29 05:07:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[那一定是看到我寫的..才去推的...

不然...那三個都是巴樂雞..自己推的..

雞..別裝了

PS.還好這次是 ..海娘娘永遠是對的]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>425</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-29 10:53:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-29 10:53:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[那三個人, 一個是我認試的, 另外兩個還真不知道是那位善心人事... 哈哈.. [:D]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using VHDMount with Virtual PC</title>
		<link>http://columns.chicken-house.net/2007/06/23/using-vhdmount-with-virtual-pc/</link>
		<pubDate>Sat, 23 Jun 2007 00:41:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/06/23/Using-VHDMount-with-Virtual-PC.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Microsoft Virtual Server 2005 R2 SP1 (好長的名字...) 在兩個禮拜前出來了. 這版本總算支援了 Hardware Assisted Virtualization, 也支援了直接在 Host OS 掛上 VHD 用的工具: VHDMount...
</p>
<p>
這年頭應該不少人用過各種的 virtual cd-rom 軟體, 可以把 .iso 檔當成光碟片, &quot;塞&quot; 進 virtual cd-rom 來使用. VHDMount 也是一樣, 只不過它的對相是 vpc 用的硬碟映象檔 *.vhd, 而不是光碟的映象檔 *.iso ...
</p>
<p>
vmware 則是提供這種工具好久了, Microsoft 終於也支援了, 而且在 mount vhd 時會啟用 undo disk 的機制, dismount 時可以選則要不要 commit 這些 change, 真是不錯 [Y], 以後不用為了改 vhd 的內容, 還得大費周張的 boot guest os...
</p>
<p>
因為 VPC 跟 VS2005 R2 SP1 用的 vhd 格式是互通的, 因此你可以放心的在你的 XP 上面裝 Virtual Server 2005 R2 SP1, 其它項目都不要選, 只要安裝 VHDMount 這個工具就好了, 這麼一來即使你只是用 VPC, 也可以享受到 VHDMount 帶來的好處...
</p>
<p>
提外話抱怨一下, 這年頭什麼都虛擬化了, 為什麼都沒有虛擬的燒錄器?&nbsp; 沒有可以模擬燒錄器的 virtual cd-rom, 連 virtual machine 也沒有支援假的燒錄器... :&lt;
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2007-06-23 00:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-23 00:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-vhdmount-with-virtual-pc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>426</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-23 17:29:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-23 17:29:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[告訴你..還有虛擬CPU 虛擬記憶體...

簡單..小朋友多就會有..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>還是換回 XP 了...</title>
		<link>http://columns.chicken-house.net/2007/06/20/%e9%82%84%e6%98%af%e6%8f%9b%e5%9b%9e-xp-%e4%ba%86/</link>
		<pubDate>Wed, 20 Jun 2007 03:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/06/20/e98284e698afe68f9be59b9e-XP-e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<P>哈哈, 隔了好長一段時間沒寫 blog 了, 自從幾個禮拜前終於受不了 vista, 決定換回 XP 後, 就被一堆小問題弄到現在...</P>
<P>其實也沒啥大問題, 只不過換了 vista 一兩個月, 發現還是不到時後, 就決定換回來了, 因為:</P>
<OL>
<LI>vista 的 volume shadow copy 仍然不到我的標準, 看起來它的 vss writer 實作方式仍然跟我慣用的 win2003 有差, 常常不知不覺 (不到 2 weeks), 250GB 放照片等檔案的硬碟, 剩下的 150GB 就會被塞爆... 跟我所知的 copy on write 好像有很大的距離...</LI>
<LI>vista 介面倒是都習慣了, 不過相容性倒是個大問題, 我是很喜歡用內建軟體的人, 只要內建的 (包括 Microsoft 自己出的一堆小工具) 別太差勁, 我通常會選內建的而不用外加的軟體. 不過換到 vista, 大部份都不能用, Orz... 包括: XP PowerToys (我常用裡面附的 Image Resizer, Raw Image Viewer), Resource Kit Tools ( cdburn / dvdburn 很好用 ), 還有就是 Canon 遲遲不出 .CRW 的 codec ..</LI>
<LI>File System 的安全機制有點怪, 常常搬檔案跟我講沒有權限... 奇的是同樣的操作, 換成 copy + delete 就可以過的去, 家裡用的電腦就懶的去追究原因了...</LI>
<LI>慢! 雖然已經是 Core2 Duo E6300 + 2GB RAM, 不過仍然常操作到一半就得等一下... </LI>
<LI>MCE錄製節目常多錄... 比如我只預約錄某個節目, 結果它重播的也給我自動錄下來... !@#%@#$... (不過後來發現我冤枉 vista 了, 是節目表剛好有問題...)</LI></OL>
<P>主要的原因是 (2), (3), (4), 後來決定不再跟它奮戰了, 等到這些問題有 solution 後再換, 就暫時又換回 XP 了... 換的過程又碰上一堆問題, 最機車的是 vista 建的動態磁區竟然在 xp 裡無法匯入, vista complete pc 做的 disk image 又不能還原, 害我捏了一把冷汗... 最後是花時間又重灌了一套 vista, 土法鍊鋼, 慢慢一個一個硬碟搬資料... 前陣子停機停了兩三天就是在搞這些...</P>
<P>這陣子就沒事就在重建我的工作環境, 當然也有在忙其它的... 哈哈, vista, 就移到 VPC 裡看看什麼時後才能再把它放出來吧...</P>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2007-06-20 03:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-20 03:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%82%84%e6%98%af%e6%8f%9b%e5%9b%9e-xp-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>427</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-26 12:12:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-26 12:12:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[第五點那個"!@#%@#$... "
不用做成email啦 哈哈哈哈
(我可特地mouse over一下看它link到哪吶~)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>428</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-26 18:14:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-26 18:14:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Orz, 妳不講我還沒發現... 八成是 editor 發現有 @ 就自動加上 mailto 的 link ... -_-]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Ouch, 為什麼沒有 c720w ...</title>
		<link>http://columns.chicken-house.net/2007/05/19/ouch-%e7%82%ba%e4%bb%80%e9%ba%bc%e6%b2%92%e6%9c%89-c720w/</link>
		<pubDate>Sat, 19 May 2007 05:01:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/05/19/Ouch2c-e782bae4bb80e9babce6b292e69c89-c720w-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Dopod 官方網站: <a href="http://www.dopodasia.com/global/tw/news/20070503_NR_Dopod_WM6_Upgrade_TW.html" title="http://www.dopodasia.com/global/tw/news/20070503_NR_Dopod_WM6_Upgrade_TW.html">http://www.dopodasia.com/global/tw/news/20070503_NR_Dopod_WM6_Upgrade_TW.html</a>
</p>
<p>
多普達提供Windows Mobile 6升級計畫: U1000、P800W、CHT9000與CHT9100免費升級
</p>
<p>
&nbsp;
</p>
<p>
很好很好, 沒有我這台 C720W 就算了, 但是同一台機器, 一模一樣, 為什麼國外的&nbsp;T-Mobile 就提供升級到 WM6 啊啊啊啊...
</p>
<p>
<a href="http://www.t-mobile.com/wmupgrade/" title="http://www.t-mobile.com/wmupgrade/">http://www.t-mobile.com/wmupgrade/</a>
</p>
<p>
&nbsp;
</p>
<p>
雖然已經從XXX扛回這份升級程式了, 不過沒膽升級... 哈哈, 怕升級之後一些內建的軟體灌不回去, 升級後一定是沒保固了, 也沒有還原的軟體可以用, 如果升級升壞了不就欲哭無淚...
</p>
<p>
有人聽過誰有膽量升級的消息嘛? 提供一下... :D, 不過 HTC / DOPOD 你也爭氣點, 都變一家人了, 快點提供 C720W 升級到 WM6 的 Rom Code 吧... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2007-05-19 05:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-19 05:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ouch-%e7%82%ba%e4%bb%80%e9%ba%bc%e6%b2%92%e6%9c%89-c720w]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>431</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-21 10:08:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-21 10:08:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[快去反應一下~我的新手機還沒著落…嗚~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>432</wp:comment_id>
			<wp:comment_author><![CDATA[antliu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://rainlaker.iblog.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 15:30:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 15:30:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[據說要刷T-MOBILE的ROM要先解鎖的，20英鎊]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>一個一萬多的簡報器... Orz..</title>
		<link>http://columns.chicken-house.net/2007/05/19/%e4%b8%80%e5%80%8b%e4%b8%80%e8%90%ac%e5%a4%9a%e7%9a%84%e7%b0%a1%e5%a0%b1%e5%99%a8-orz/</link>
		<pubDate>Sat, 19 May 2007 04:25:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/05/19/e4b880e5808be4b880e890ace5a49ae79a84e7b0a1e5a0b1e599a8-Orz.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
看到我 MSN 的 nickname 寫這句 &quot;一個一萬多的簡報器... Orz..&quot; 一定會想, 那個潘那花這個錢... 哈哈, 其實是我無意間發現這個軟體: <a href="http://www.salling.com/Clicker/windows/" target="_blank">Salling Clicker for Windows 3.5</a>&nbsp;... 那什麼東西要一萬多? 當然是<a href="/wp-content/be-files/archive/2007/02/02/y.aspx">我的 Dopod c720w</a> ... 
</p>
<p>
之前一直很羨幕 Sony Ericsson 的使用者, 它們的藍芽手機總有一堆有趣的應用, 像是有人做出用手機搖控的藍芽搖控車之類的, 另外也有軟體可以讓手機透過藍芽當作無線鍵盤+滑鼠. 這個當然不大可能取代真的滑鼠, 不過拿來當簡報器倒是挺好用的, 反正手機一定會隨手帶著, 用慣 ThinkPad 的我也不會隨身再帶隻 mouse, 多方便...
</p>
<p>
無奈我用的都是 Windows Mobile 的手機, 無緣... 直到前兩天發現這套軟體, 抓下來試用之後發現, 真是太棒了.. :D, 它就是讓你透過藍芽 (也包括 WiFi), 來當電腦的搖控器. 可以搖控 iTune / Media Player / Power Point.
</p>
<p>
<img src="http://www.salling.com/Clicker/windows/gfx/Slideshow/Slideshow_Preso_Windows.gif" alt="" width="228" height="175" /> 
</p>
<p>
它所謂的 &quot;搖控&quot; 不是只有鍵盤對應, 幫你按按鈕而以. 比較炫的是它會把一些相關資訊傳回手機, 顯示在手機的畫面上... 我對 iTune / Media Player 是沒啥興趣, 所以我只介紹 PowerPoint 的部份... 這張圖是官方網站提供的, 實際上的操作畫面就是長這樣. 除了最基本的上一頁下一頁控制之外, 它也會把每頁 SLIDE 的縮圖, 標題, 還有內文傳到手機上. 舉個 use case:
</p>
<ol>
	<li>開始演講, 打開手機跟電腦連線, 打開 Power Point 準備簡報... </li>
	<li>手機<font color="#ff0000">輸入預計簡報時間, 開始倒數</font> </li>
	<li><font color="#ff0000">畫面會顯示目前的投影片相關資訊</font> </li>
	<li>講到一半忘了準備好的橋段, <font color="#ff0000">按一下 Notes 可以偷看 Power Point 的備忘稿</font> </li>
	<li>簡報順利講完, 到了 Q&amp;A 時間, 有人問前面的問題 </li>
	<li>剛好有準備好的投影片, <font color="#ff0000">按一下 &quot;Select Slides...&quot;, 畫面列出所有的投影片標題, 選好直接跳到你要的那一頁</font> </li>
	<li>演講順利結束, <font color="#ff0000">按一下 &quot;Shutdown PC&quot;, notebook 自動關機</font>. 電腦收到包包很帥的走出會場..</li>
</ol>
<p>
&nbsp;其實這個使用案例很常見, 有作過簡報的大概都經歷過, 不過標紅字的部份, 大部份的人應該都是直接拿 MOUSE 在電腦上面操作吧... 熟電腦的人可能會用雙營幕, 在自己看的畫面上顯示這些資訊, 不過這樣就失掉用簡報器的目的了, 得待在電腦前面..
</p>
<p>
其它的 iTune / Media Player 搖控就沒那麼神奇了, 也是一樣把曲目還有專輯唱片的封面傳到手機上, 讓你可以自己控制要放那一首... 目前播放的進度列也會顯示出來, 不過我比較少聽, 就用不大到...
</p>
<p>
這個軟體對 Windows Mobile 的使用者算是一大福音吧? 因為真的很少看到這類的軟體有 WM5 版的... 分享一下這個資訊, 需要的去買一套吧 [H], 很值得, 如果不想買的話就... 努力找找... 哈哈
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2007-05-19 04:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-19 04:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%80%e5%80%8b%e4%b8%80%e8%90%ac%e5%a4%9a%e7%9a%84%e7%b0%a1%e5%a0%b1%e5%99%a8-orz]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>433</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-21 10:10:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-21 10:10:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可不可以有雷射筆的功能呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>434</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-21 20:34:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-21 20:34:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用 powerpoint 的筆就好, 可以從手機控制 mouse cursor... 只要你的方向鍵很好用的話 [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon PowerShot S5 IS 出來了</title>
		<link>http://columns.chicken-house.net/2007/05/10/canon-powershot-s5-is-%e5%87%ba%e4%be%86%e4%ba%86/</link>
		<pubDate>Thu, 10 May 2007 04:07:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/05/10/Canon-PowerShot-S5-IS-e587bae4be86e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
無意間逛了逛 Canon 網站，才發現 <a href="http://web.canon.jp/Imaging/pss5is/index-e.html">S5 IS</a> 的消息 [:D]
</p>
<p>
規格跟前一代 S3 IS 比起來沒差多少，除了相素從 600M 跳到 800M 之外，其它都差不多，除了 S5 終於多了熱靴... [:D]
</p>
<p>
之前 S3 就是因為不能裝閃光燈害我猶豫了半天 (龜毛篇: <a href="/post/Canon-PowerShot-G7-e587bae78fbee4ba86.aspx">G7</a>,&nbsp;<a href="/post/Canon-PowerShot-S2-IS.aspx">S2</a>)，現在看到有了真心動，不曉得一台要價多少... 加上前陣子有人研究出 S3 如何解開封印，能夠直接存 RAW File，還不用重刷軔體，聽起來真是不錯，等一陣子看看 S5 能不能依樣畫葫蘆... 可以的話就太讚了 [Y]
</p>
<p>
不過最近花錢花的兇，省一點好了 :~ 反正都龜了那麼久...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2007-05-10 04:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-10 04:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-powershot-s5-is-%e5%87%ba%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>435</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://che.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-10 22:55:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-10 22:55:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我覺得他會買 S8 大家覺得呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>436</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-11 03:22:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-11 03:22:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>437</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-19 05:05:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-19 05:05:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[基本上貼在板子上的...

應該是都會到手的東西...

不然會有怨念]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>438</wp:comment_id>
			<wp:comment_author><![CDATA[Brain]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-12 18:12:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-12 18:12:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問S5 IS這台是否有夜間對焦的功能?例如紅外線輔助對焦?要不然光線不足時會對不到焦,晚上拍照還要帶個手電筒幫忙打亮要拍的東西真麻煩!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>439</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 03:34:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 03:34:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Brian... 新面孔... :D

紅外線輔助對焦喔? 我也不曉得, 不過 canon g/s 系列好像從來沒出現過這東西, 只有可見光的輔助對焦燈, 顏色還出現過白色 & 綠色...

晚上拍, 內建的輔助對焦燈不夠亮就認命吧, 我都開風景模式, 怎麼拍都不會對不到焦...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>偷偷升級到 CS2007 ..</title>
		<link>http://columns.chicken-house.net/2007/05/05/%e5%81%b7%e5%81%b7%e5%8d%87%e7%b4%9a%e5%88%b0-cs2007/</link>
		<pubDate>Sat, 05 May 2007 14:11:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/05/05/e581b7e581b7e58d87e7b49ae588b0-CS2007-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
好像沒啥人發現的樣子, 哈哈, 本站兩個禮拜前升級到 CS2007 了, 升級完面版馬上就調成舊的, 外觀看起來一模一樣...
</p>
<p>
功能當然有差, 不過我就不提了, 請直接到官方網站看就好. 升級很簡單, DB upgrade + File upgrade 就好了. 比較麻煩的是我自己客製過的 theme 跟 control ..
</p>
<p>
CS2007 的樣版系統, 從當年的 1.0 到 2.x 都一樣, 用了一堆動態載入 UserControl 的方式, 把版面配置的部份留在 User Control 的 TAG, 而後端的 data / logic 則是寫在 code. 因此要改它的樣版, 得花一番功夫瞭解它的作法.. 到了 CS2007, 總算改用 ASP.NET 2.0 標準作法了, 每套樣版就是一個 master page + config 而以 (theme.master, theme.config), 以 BLOG 來說, 每個頁面就很單純是一個 .aspx, 改起來方便多了, 不需要花什麼大腦就找的到要改那裡...
</p>
<p>
另一個 User Control, 舊的 API 有些都不能用了, 趁著這次改版我就直接把這幾個 User Control 改寫一次了. 以前都要寫 DLL 也是很麻煩, 這次一起改成 .ascx + .cs 就丟著了, deployment 方便嘛...
</p>
<p>
至於 CS2007 的新功能, 還沒很仔細的研究, 至少現在平台 ready 了 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2007-05-05 14:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-05 14:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%81%b7%e5%81%b7%e5%8d%87%e7%b4%9a%e5%88%b0-cs2007]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>440</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://che.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-05 21:37:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-05 21:37:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒發現哩]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fiddler 跟 TFS 相衝的問題解決 - II</title>
		<link>http://columns.chicken-house.net/2007/04/24/fiddler-%e8%b7%9f-tfs-%e7%9b%b8%e8%a1%9d%e7%9a%84%e5%95%8f%e9%a1%8c%e8%a7%a3%e6%b1%ba-ii/</link>
		<pubDate>Tue, 24 Apr 2007 02:50:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/24/Fiddler-e8b79f-TFS-e79bb8e8a19de79a84e5958fe9a18ce8a7a3e6b1ba-II.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
&lt;&lt;續上篇&gt;&gt;
</p>
<p>
計劃好之後, 我打算的流程是這樣:
</p>
<ol>
	<li>Fiddler 存下目前的 Proxy Config </li>
	<li>Fiddler 把 WinINET&nbsp;的 Proxy 改為 127.0.0.1:8888 </li>
	<li>在 OnAttach 裡加上自定的 Script, 就抄 (2) 的 CODE 改一改再把我要的值加上去</li>
</ol>
<p>
作法想好後, 連放 CODE 的地方都弄好了. Fiddler 直接用現成的 .net language 當成&nbsp;script 使用, 就是直接修改 CustomRules.js 這個檔案.&nbsp;裡面已經定義好 Method: OnAttach( ), 會在 Fiddler 開始 Capture Traffic 後被呼叫, 看來我要做的事 (3) 只要放在裡面就好, (1) 及 (2) 是 Fiddler 自己本來就會做的部份.
</p>
<p>
而 Fiddler 不再 Capture Traffic 時, 我什麼都不必作, 因為 Fiddler 預設的動作就是把 (1) 存下來的東西再填回 IE 的 Proxy 設定...
</p>
<p>
其實這方法還可以解決附帶的幾個問題, 像我在家用 VPN, 或是在公司用無線網路, Fiddler 也常常失效, 因為它預設都只改 [區域連線] 的 Proxy 設定... 不過 IE 又很貼心的讓每個 network adapter 都可以有自己的 proxy settings, 你只要不是用預設的 NIC 就沒救了. 雖然手動把你用的網路連線 proxy 改為 127.0.0.1:8888 就可以動, 不過每次都改也是很煩人...
</p>
<p>
好, 有足夠的誘因了, 開始動手...
</p>
<p>
&nbsp;
</p>
<p>
A 計劃:
</p>
<p>
開始用 Reflector 追 Fiddler 的程式, Bingo... 主程式是 Fiddler.frmViewer, 我要的東西就藏在 oProxy 這個 static field 裡. 看了 oProxy 的型別是 Fiddler.Proxy, 繼續追下去... My God.... 截到宣告如下:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">internal</span> WinINETProxyInfo piPrior;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">private</span> WinINETProxyInfo piThis;
</pre>
</div>
<p>
piPrior 放的是存起來的設定, piThis 則是被 Fiddler 填入的設定, 沒救, private field... 連用 reflection 的機會都沒有, 只好放棄, 想第二條路...
</p>
<p>
&nbsp;
</p>
<p>
B 計劃:
</p>
<p>
碰到鐵板, 繼續鑽別條路. 我先自己開個 console application 做簡單的測試, 先把 Fiddler.exe 改成 Fiddler.dll, 然後設定 project 參考這個 .dll, 依照 Fiddler 主程式的用法測了一下這段 code:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    WinINETProxyInfo proxy = <span class="kwrd">new</span> WinINETProxyInfo();
</pre>
<pre>
<span class="lnum">   4:  </span>    proxy.GetFromWinINET(<span class="kwrd">null</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    proxy.sHostsThatBypass = <span class="str">&quot;*.chicken-house.net;*.hinet.net;&quot;</span>;
</pre>
<pre>
<span class="lnum">   6:  </span>    proxy.SetToWinINET(<span class="kwrd">null</span>);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">return</span>;
</pre>
<pre>
<span class="lnum">   8:  </span>}
</pre>
</div>
<p>
哇哈哈, 真的有效, Run 過之後開控制台的 Internet Options 裡的 PROXY 設定, 真的被改過來了, 心想太好了, 這段 code 貼到 CustomRule.js 就一切搞定...
</p>
<p>
對, 這麼順利的話就不會分兩篇了, 誰曉得貼上去後 Fiddler 就給我唉這段 message:
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/FiddlerTFSII_1D90/image04.png" alt="" width="469" height="320" /> 
</p>
<p>
按了 [確定] 後就變這樣:
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/FiddlerTFSII_1D90/image09.png" alt="" width="497" height="224" /> 
</p>
<p>
真是嘖嘖嘖... 大概猜的出問題在那, 這種外掛的 script 多半動態 Load Script, 動態 compile, 同時會載入到另一個獨立的 AppDomain, 看起來在 script 可用的範圍內, 是存取不到 Fiddler.WinINETProxyInfo 這個類別... 
</p>
<p>
AppDomain 真是讓人恨的牙癢癢的, 不過它還真是個很棒的設計. 在 .net 的世界, AppDomain 可以在不降低效能的前題下, 達到如傳統 OS Process 的安全隔離層級, 而且又有 thread 的快速 share data 方式... 可以說有 process 的好處, 又無 process 的負耽.
</p>
<p>
講那麼多幹嘛? 問題還是無解... 不過有了上面 console application 試驗後, 至少讓我證明這條路是可行的, 只不過 script 得再繞一條路試看看...
</p>
<p>
&nbsp;
</p>
<p>
C 計劃:
</p>
<p>
我的目的只是要在 CustomRule.js 的 OnAttach 裡執行那四行 code 而以, 只好脫褲子放屁了, 四行可以搞定的事多花幾行來寫, 把之前搭配 Attribute 寫 Library 學到的那套 Reflection 搬出來用, 原本的這四行 code:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>WinINETProxyInfo proxy = <span class="kwrd">new</span> WinINETProxyInfo();
</pre>
<pre>
<span class="lnum">   2:  </span>proxy.GetFromWinINET(<span class="kwrd">null</span>);
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>proxy.sHostsThatBypass = <span class="str">&quot;*.chicken-house.net;*.hinet.net;&quot;</span>;
</pre>
<pre>
<span class="lnum">   4:  </span>proxy.SetToWinINET(<span class="kwrd">null</span>);
</pre>
</div>
<p>
改寫為:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>System.Reflection.Assembly fiddler = System.Reflection.Assembly.LoadFrom(<span class="str">@&quot;Fiddler.exe&quot;</span>);
</pre>
<pre>
<span class="lnum">   2:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">object</span> proxy = fiddler.CreateInstance(<span class="str">&quot;Fiddler.WinINETProxyInfo&quot;</span>);
</pre>
<pre>
<span class="lnum">   4:  </span>Type proxyType = fiddler.GetType(<span class="str">&quot;Fiddler.WinINETProxyInfo&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span>proxyType.GetMethod(<span class="str">&quot;GetFromWinINET&quot;</span>).Invoke(proxy, <span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="kwrd">null</span> <span class="kwrd">as</span> <span class="kwrd">string</span> });
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>proxyType.GetProperty(<span class="str">&quot;sHostsThatBypass&quot;</span>).SetValue(proxy, <span class="str">&quot;http://ld-fsweb.learningdigital.com:8080;&quot;</span>, <span class="kwrd">null</span>);
</pre>
<pre>
<span class="lnum">   8:  </span>proxyType.GetMethod(<span class="str">&quot;SetToWinINET&quot;</span>).Invoke(proxy, <span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="kwrd">null</span> <span class="kwrd">as</span> <span class="kwrd">string</span> });
</pre>
</div>
<p>
&nbsp;
</p>
<p>
很好, 繞了一大圈, 結果還是不行... [:@], 結果跟 B 計劃一樣, 我就不貼了...
</p>
<p>
&nbsp;
</p>
<p>
D 計劃:
</p>
<p>
好, 最後一招了, 別轉台... 實在是受不了了, 最沒品的那招拿出來用... 把 B 計劃寫的 Console App 拿來用, 東西都寫好丟在 Fiddler 的目錄, 檔名叫 myproxycfg.exe, 然後在 CustomRules.js 裡呼叫它...
</p>
<p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
</p>
<div class="csharpcode">
<pre>
<span class="lnum">   1:  </span>System.Diagnostics.Process.Start(<span class="str">&quot;myproxycfg.exe&quot;</span>);
</pre>
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
嗯, Fiddler 啟用 Capture Traffic 後, 果然就 OK 了, 這招都出了還不行就沒辦法了.. 吊個 .exe 在那邊看了實在很礙眼, 不過眼不見為淨啦, 可以 work 就好...
</p>
<p>
IE Proxy 的設定真的如我所料, Fiddler 啟動後就改掉了, Fiddler 停掉後就一切揮復原狀, [Y][Y][Y], 以後不用為了 TFS 要 Get Latest Version 還得去關 Fiddler ....
</p>
<p>
果然懶才是資訊科技進步的原動力啊, 哈哈.., 謝謝收看.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2007-04-24 02:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-24 02:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fiddler-%e8%b7%9f-tfs-%e7%9b%b8%e8%a1%9d%e7%9a%84%e5%95%8f%e9%a1%8c%e8%a7%a3%e6%b1%ba-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>441</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-24 08:21:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-24 08:21:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(Y) (Y) (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>442</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-30 12:08:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-30 12:08:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看完這一篇.

發現...

G 你還可以再生一個..沒問題

時間多嘛!!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>443</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-30 16:47:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-30 16:47:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 對... 所以你不用怕, 第二個勇敢的給它生下去.. [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>444</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-01 03:00:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-01 03:00:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[G的時間當然多,小孩吃奶吃飯又輪不到他來餵,也只不過幫兒子洗個澡,然後偶爾被老婆叫來倒小孩的便便就覺得很了不起,然後還能玩線上遊戲,改版blog,裝vista,假日睡到比全家還晚起,平常還能跟我一起看反恐,羨不羨慕?

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>445</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-04 07:22:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-04 07:22:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太美爽爽了!!!

太美爽爽了!!!

太美爽爽了!!!

太太太美爽爽了!!!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>446</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-04 22:37:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-04 22:37:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[..........]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>447</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-07 00:31:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-07 00:31:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 最後一句是你隱藏的抱怨嘛? 哈哈... 

"太太" 太美爽爽了!!!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fiddler 跟 TFS 相衝的問題解決 - I</title>
		<link>http://columns.chicken-house.net/2007/04/23/fiddler-%e8%b7%9f-tfs-%e7%9b%b8%e8%a1%9d%e7%9a%84%e5%95%8f%e9%a1%8c%e8%a7%a3%e6%b1%ba-i/</link>
		<pubDate>Mon, 23 Apr 2007 00:26:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/23/Fiddler-e8b79f-TFS-e79bb8e8a19de79a84e5958fe9a18ce8a7a3e6b1ba-I.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<a href="http://www.fiddler2.com/" target="_blank">Fiddler</a>, 應該不用我多介紹了, 一套很好用的 Http Debugging Tool. 它的原理是把自己當成 Proxy, 讓所有的 Http 流量都經過它再轉出去, 讓你能看到你的程式到底跟網站講了那些話, 尤其是新興的 AJAX 更需要這種 Tools, 因為一堆東西是你按右鍵 + view source 所看不到的...
</p>
<p>
不過以上不是重點, 重點是我常常搭配 visual studio 2005 一起使用, 每當 Fiddler 開啟, 我再使用 vs2005 的 TFS 相關功能時, vs2005 跟 TFS 中間的 http connection 就被欄下來不動了.
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/FiddlerTFS_14D72/image07.png" alt="" width="539" height="252" />&nbsp;
</p>
<p>
Fiddler Log:
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/FiddlerTFS_14D72/image012.png" alt="" width="610" height="136" /> 
</p>
<p>
HTTP 401, 看起來就像是 vs2005 傳出去的身份驗證機制沒有成功的通過 Fiddler 傳到 server, 導至 server 回應 401 回報沒有權限... vs2005 回的 ERROR MESSAGE 則是看起來跟這件事一點關聯都沒有...
</p>
<p>
正規的解法應該是想辦法讓 vs2005 的驗證能過 Fiddler Proxy ... 不過太懶了, 我發現只要開 Fiddler 等它自動改完 IE Proxy Settings 後再把 TFS 網址加到 bypass host list 後就一切正常了, 所以腦筋就動到怎麼讓 Fidder 自動調整的 Proxy Settings 能自動把 TFS 網址加到忽略清單內. 我打算的流程是這樣:
</p>
<ol>
	<li>Fiddler 存下目前的 Proxy Config </li>
	<li>Fiddler 把 WinINET&nbsp;的 Proxy 改為 127.0.0.1:8888 </li>
	<li>在 OnAttach 裡加上自定的 Script, 就抄 (2) 的 CODE 改一改再把我要的值加上去</li>
</ol>
<p>
想的很好, 就開始動工了, 不過開始動工才發現, 原來一路上困難重重... -_-
</p>
<p>
&lt;&lt; 下期待續 &gt;&gt;
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2007-04-23 00:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-23 00:26:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fiddler-%e8%b7%9f-tfs-%e7%9b%b8%e8%a1%9d%e7%9a%84%e5%95%8f%e9%a1%8c%e8%a7%a3%e6%b1%ba-i]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>WMCmd.vbs 在 VISTA 下執行會導至 cscript.exe 發生錯誤...</title>
		<link>http://columns.chicken-house.net/2007/04/15/wmcmd-vbs-%e5%9c%a8-vista-%e4%b8%8b%e5%9f%b7%e8%a1%8c%e6%9c%83%e5%b0%8e%e8%87%b3-cscript-exe-%e7%99%bc%e7%94%9f%e9%8c%af%e8%aa%a4/</link>
		<pubDate>Sun, 15 Apr 2007 19:36:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/15/WMCmdvbs-e59ca8-VISTA-e4b88be59fb7e8a18ce69c83e5b08ee887b3-cscriptexe-e799bce7949fe98cafe8aaa4.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
我用的冷門工具在 vista 裡又碰到問題了 [:S]
</p>
<p>
Windows Media Encoder 9 附的 script: WMCmd.vbs, 在 vista 下執行時, cscript.exe 就會因為 DEP 的原因發生問題, 被攔下來, 看來 Microsoft 自己的 code 也是到處都藏著地雷, 隨便也碰到 data segment 被執行的狀況, 然後 DEP 就啟動了...
</p>
<p>
本想把 DEP 關掉了事, 不過 cscript.exe 在 vista 還被限定非得開啟 DEP 不可, Orz, 只好 Google / Microsoft support 查看看有沒有解了. 沒想到運氣還真不錯, 果然在官方網站找到 solution:
</p>
<p>
&nbsp;
</p>
<blockquote>
	<p>
	FIX: You may experience issues when you use Windows Media Encoder 9 Series on a computer that is running Windows Vista
	</p>
</blockquote>
<blockquote>
	<p>
	URL: <a href="http://support.microsoft.com/kb/929182/en-us" title="http://support.microsoft.com/kb/929182/en-us">http://support.microsoft.com/kb/929182/en-us</a>
	</p>
</blockquote>
<p>
&nbsp;
</p>
<p>
果然 FIX 裝了就一切正常, 以前寫的<a href="/post/e5a4a7e5b7a5e7a88b-60GB-e79a84-DV-avi-e5a393e68890-WMV.aspx">批次轉 video script</a> 繼續用, 剩下只缺 Canon 補上 .CRW 的 codec&nbsp;了 [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2007-04-15 19:36:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-15 19:36:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wmcmd-vbs-%e5%9c%a8-vista-%e4%b8%8b%e5%9f%b7%e8%a1%8c%e6%9c%83%e5%b0%8e%e8%87%b3-cscript-exe-%e7%99%bc%e7%94%9f%e9%8c%af%e8%aa%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>448</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-16 07:58:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-16 07:58:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[繼續發掘吧，等半年後，我的新電腦加了 RAM 後，再升級 vista ，原本的安德魯工具集就有 vista 版了，真好!!!!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>449</wp:comment_id>
			<wp:comment_author><![CDATA[二樓]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[werrty123456@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-14 18:17:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-14 18:17:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[呼呼!!終於找到解決辦法了!

原本在新的 x86 Win7下無法使用的cscript wmcmd.vbs指令又復活了

之前看了很多的網站討論如何在 x64裡執行cscript wmcmd.vbs指令

http://www.hydrogenaudio.org/forums/index.php?showtopic=47759&amp;st=25&amp;p=620153&amp;#entry620153

改來改去都沒有成功

想說死馬當活馬醫(反正Vista 跟Win7 差不多?)

竟被我試出來了 (別問我為什麼這個FIX也能在Win7上用)

現在我的Foobar2000 又可以轉WMA了!! ^^

感謝大所提供經驗及資訊]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>手癢亂裝 MyATM...</title>
		<link>http://columns.chicken-house.net/2007/04/09/%e6%89%8b%e7%99%a2%e4%ba%82%e8%a3%9d-myatm/</link>
		<pubDate>Mon, 09 Apr 2007 23:47:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/09/e6898be799a2e4ba82e8a39d-MyATM.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
最近真是, 裝什麼, 什麼就出問題...
</p>
<p>
因為信用卡繳費期限要到了, 換了 Vista 用 WebATM 又有點怪怪的, 其它銀行的都可以, 唯讀台新的 ATM 一連就當, 看到它有 MyATM 這個小工具可以安裝, 就裝起來看看...
</p>
<p>
沒想到它只是個很惹人厭的 Applet, 躲在右下角, 等你 ATM 卡片塞進去就跳網頁出來... (這樣的話我幹麻裝... [:@])
</p>
<p>
沒想到要移除後, 新增移除工具竟然跟我講權限不足? 搞什麼, Administrators 還沒權限是要怎樣才有權限? 不過這年頭 Error Message 都亂寫一通, 一堆不知道啥怪問題的就說是權限... 讓我想起我追過的一堆 Bug, 都是 try { ... } catch 攔到不知明的 Exception, 就一概顯示 &quot;權限不足, 請聯絡系統管理員&quot; ...
</p>
<p>
最好系統管理員真的這麼了不起, 咳咳, 沒事開了 Registry Editor 出來找看看, search &quot;台新銀行&quot;, 找到這筆:
</p>
<p>
電腦\HKEY_LOCAL\MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{F25E1429-F70A-4843-8885-84CE5E18C352}\UninstallString
</p>
<p>
C:\Program Files\\InstallShield Installation Information\{F25E1429-F70A-4843-8885-84CE5E18C352}\setup.exe &quot;-removeonly&quot;
</p>
<p>
發現它的路逕怎麼多了一個反斜線? 拿掉之後再移除一次就 OK 了
</p>
<p>
真是它ㄨㄨㄨ的... 還好我無聊, 不然安裝程式清單老卡一個不想要的軟體, 看了還真礙眼... 哈哈, 弄完了, 收工!
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/8cba23b9e713_14BB3/image03.png" border="0" alt="" width="960" height="727" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2007-04-09 23:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-09 23:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%8b%e7%99%a2%e4%ba%82%e8%a3%9d-myatm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>450</wp:comment_id>
			<wp:comment_author><![CDATA[Owen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-12 13:04:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-12 13:04:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool ,老兄 , thank for ur solution , it's really a fuck applet!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>原來 System.Net.Mail 也會有 Bug ...</title>
		<link>http://columns.chicken-house.net/2007/04/06/%e5%8e%9f%e4%be%86-system-net-mail-%e4%b9%9f%e6%9c%83%e6%9c%89-bug/</link>
		<pubDate>Fri, 06 Apr 2007 15:01:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/06/e58e9fe4be86-SystemNetMail-e4b99fe69c83e69c89-Bug-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[果然老外寫的程式, 就是容易忽略掉亞洲語系的需求... 為了這個 Bug, 足足浪費我兩天的時間 [:@], 既然糾出來了, 當然要講一下... 先來看這段 sample code:

&nbsp;
<pre class="lang:c# decode:true">MailMessage mail = new MailMessage();
Encoding chtEnc = Encoding.GetEncoding(950);
mail.From = new MailAddress("peter@chicken-house.net", "吳小皮", chtEnc);
mail.To.Add(new MailAddress("annie@chicken-house.net", "吳小妹", chtEnc));
mail.Subject = "今天天氣很好";
mail.SubjectEncoding = chtEnc;
mail.Body = "blah blah blah...";
(new SmtpClient()).Send(mail);</pre>
嗯, 執行的很好, 收的到 MAIL, 編碼也沒問題. 不過沒有回應的 code 總是不大 friendly, 加印一行 message 看看...
<div class="csharpcode">
<pre class="lang:c# decode:true">    MailMessage mail = new MailMessage();
    Encoding chtEnc = Encoding.GetEncoding(950);
    mail.From = new MailAddress("peter@chicken-house.net", "吳小皮", chtEnc);
    mail.To.Add(new MailAddress("annie@chicken-house.net", "吳小妹", chtEnc));
    mail.Subject = "今天天氣很好";
    mail.SubjectEncoding = chtEnc;
    mail.Body = "blah blah blah...";
    Console.WriteLine("準備寄信 (From: {0})", mail.From);
    (new SmtpClient()).Send(mail);</pre>
My God !!! 啥米, 這樣就錯? 而且錯的地方讓我丈二金剛摸不著頭腦... 執行的環境試過 XP, 2003, Vista, 中英文版, 都有 windows update 更新所有的 patch, 除了訊息有中英文版不同之外, 錯誤通通一樣, Exception Dump 如下:

</div>
<blockquote>
<pre class="lang:default decode:true">        準備寄信(From: "吳小皮")未處理的例外狀況: System.Net.Mail.SmtpException: 
        傳送郵件失敗。	---&gt;System.FormatException: 
        標頭值中找到無效的字元。	
        於 System.Net.Mime.HeaderCollection.Set(String name, String value)   
            於 System.Net.Mail.Message.PrepareHeaders(Boolean sendEnvelope)   
            於 System.Net.Mail.Message.Send(BaseWriter writer, Boolean sendEnvelope)   
            於 System.Net.Mail.SmtpClient.Send(MailMessage message)
            -- - 內部例外狀況堆疊追蹤的結尾-- - 
            於 System.Net.Mail.SmtpClient.Send(MailMessage message)   
            於 Program.Main()</pre>
</blockquote>
真是它ㄨㄨㄨ的, 怎麼會這樣? 我實際的情況比較慘, 是加了一堆 Console.WriteLine( ) 後才突然發現有問題, 跟本搞不清楚怎麼回事... 試到最後, 確定加了 Console.WriteLine( ) 會有問題, 問題是, 這行到底有什麼了不起的? 不過就是 mail.Form.ToString() ... [:|]

決定繼續挖下去, 先從 Exception 開始查. 前面有一大堆不好追的就跳過去了, 從 dump 的 call stack, 再用 Refactor 去反組譯 .net 的 assembly, 最後這裡看起來最像是 Exception 的源頭:
<blockquote>class: System.Net.Mime.HeaderCollection
method: public override void Set(string name, string value)</blockquote>
截錄片段 source code:

<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="lang:default decode:true ">  if (!MimeBasePart.IsAnsi(value, false))
  {
      throw new FormatException(SR.GetString("InvalidHeaderValue"));
  }</pre>
怎麼看都沒問題, 追過 IsAnsi( ), 裡面沒啥特別的 code, 就 char 的值小於 0xff 就判定 pass. 所以問題應該出在 value 的值送進來判定時就已經有問題了... 再往上追, value 的源頭是 MailAddress 物件的 .ToEncodedString( ) 來的:

</div>
class: System.Net.Mail.MailAddress

<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="lang:default decode:true ">    internal string ToEncodedString()
    {
        if (this.fullAddress == null)
        {
            if ((this.encodedDisplayName != null) &amp;&amp; (this.encodedDisplayName != string.Empty))
            {
                StringBuilder builder = new StringBuilder();
                MailBnfHelper.GetDotAtomOrQuotedString(this.encodedDisplayName, builder);
                builder.Append(" &lt;");
                builder.Append(this.Address);
                builder.Append('&gt;');
                this.fullAddress = builder.ToString();
            }
            else
            {
                this.fullAddress = this.Address;
            }
        }
        return this.fullAddress;
    }</pre>
然後跟加了就會出問題的 ToString( ) 比對著看:

</div>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="lang:default decode:true ">  public override string ToString()
  {
      if (this.fullAddress == null)
      {
          if ((this.encodedDisplayName != null) &amp;&amp; (this.encodedDisplayName != string.Empty))
          {
              StringBuilder builder = new StringBuilder();
              builder.Append('"');
              builder.Append(this.DisplayName);
              builder.Append("\" &lt;");
              builder.Append(this.Address);
              builder.Append('&gt;');
              this.fullAddress = builder.ToString();
          }
          else
          {
              this.fullAddress = this.Address;
          }
      }
      return this.fullAddress;
  }
</pre>
Ouch, 真是想罵人, 問題就在這裡... 看起來是 Microsoft 工程師為了避開重複作編碼的動作, 每次呼叫 ToEncodedString( ) 及 ToString( ) 時都會去看看 fullAddress 這個 private field 是否有值? 有的話代表之前已經作過編碼了, 就直接撿現成. 問題出在第一次呼叫時, 編碼的動作在 ToString( ) 及 ToEncodedString( ) 各寫了一次 (果然沒有做好 refactoring ... 哈哈), 結果 ToString( ) 的這份 code implementation 是錯的, 跟本沒編碼 [:@] ... 我沒事雞婆在寄信前呼叫 ToString( ) 印 Messabe 算我運氣背, 就碰到這個 Bug.. [:@]

</div>
花了近兩天, 不過最後有找到 Bug, 而且還是 Microsoft 的 Bug, 哈哈, 總算證明人不是我殺的 [:D], submit Microsoft 的 Bug 有獎金嘛? 不只 Bug, 連問題都找到了... 有的話通知一下 [:D]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2007-04-06 15:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-06 15:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8e%9f%e4%be%86-system-net-mail-%e4%b9%9f%e6%9c%83%e6%9c%89-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>451</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://che.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-09 08:17:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-09 08:17:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太厲害了!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>452</wp:comment_id>
			<wp:comment_author><![CDATA[破宝]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-10 17:04:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-10 17:04:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我都快疯掉了，终于搜到了您这篇文章，谢谢啊！

--
BotCheck(請計算答案: 6 x 4 =  24)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>453</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-11 03:00:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-11 03:00:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[耶? 還真的有人碰到一樣的問題 [:D]

抓到這個 BUG 果然還有點用...

--
BotCheck(請輸入 "海娘娘永遠是對的" : 海娘娘永遠是對的)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>454</wp:comment_id>
			<wp:comment_author><![CDATA[不错]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[name@ye.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-12 10:52:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-12 10:52:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[b][/b][i][/i][u][/u]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>455</wp:comment_id>
			<wp:comment_author><![CDATA[洪哥]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yjiaw616@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-22 14:07:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-22 14:07:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看了，可是一点用处都没有。菜鸟请求帮助。。。最近我也在做一个简单的邮件发送。可是报的都是“在邮件标头中找到无效的字符。”我看这篇文章应该可以解决问题，但是我还是搞不懂，请高手送我一篇全的代码]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>456</wp:comment_id>
			<wp:comment_author><![CDATA[wkevinst]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wkevinst@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-06 20:40:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-06 20:40:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這個 Bug 不是那邊出問題喔,應該是 IsAnsi 那邊出問題
因為我們使用雙語系的問題,微軟卻是使用 char 去檢查有無大於 0xff 
但是我們加了中文字串後 char 卻變成雙字元自然就大於 0xff 
於是就丟出了一個錯誤!!

真是冤妄.... 微軟弄了一個不支援雙字元組的 System.Net.Mail 類別出來]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>457</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-10 01:32:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-10 01:32:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[也許兩邊都有問題吧 @@，我當時追到的是有沒有呼叫過 ToString( ) 的確會影響執行的結果。
IsAnsi() 的問題我就沒仔細追了...

這個問題回報給Microsoft, 也被確認了，說會在未來的版本修正... (真是官方說法)
有 live ID 的人可以看一下，我當時回報的問題已經被 closed 了:

http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=351578]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon RAW Codec for Vista 出來了..</title>
		<link>http://columns.chicken-house.net/2007/04/03/canon-raw-codec-for-vista-%e5%87%ba%e4%be%86%e4%ba%86/</link>
		<pubDate>Tue, 03 Apr 2007 19:32:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/03/Canon-RAW-Codec-for-Vista-e587bae4be86e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
資料來源: <a href="http://blogs.msdn.com/pix/archive/2007/03/30/canon-raw-codec-for-vista-release.aspx" title="http://blogs.msdn.com/pix/archive/2007/03/30/canon-raw-codec-for-vista-release.aspx">http://blogs.msdn.com/pix/archive/2007/03/30/canon-raw-codec-for-vista-release.aspx</a>
</p>
<p>
前天才抱怨了一下, WPF 的 WIC 沒有內建 canon raw codec, 沒想到 2007/3/30 已經出來了, 真是失敬 [:p], 不過為什麼只支援 .CR2 啊啊啊啊啊.... 難道用老相機 G2 就註定是這種下場嘛? Orz
</p>
<p>
往好方面想, .CRW 的 codec 應該也會出吧? 嗯, 再等一等好了...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2007-04-03 19:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-03 19:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-raw-codec-for-vista-%e5%87%ba%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>458</wp:comment_id>
			<wp:comment_author><![CDATA[NBuslo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nbuslo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-06 08:27:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-06 08:27:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我也覺得那很不尊重老客戶.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Vista Day 4...</title>
		<link>http://columns.chicken-house.net/2007/04/03/vista-day-4/</link>
		<pubDate>Tue, 03 Apr 2007 02:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/04/03/Vista-Day-4.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
&nbsp;
</p>
<p>
升級 Vista 第四天, 來講幾個令我超不爽的地方.... 
</p>
<ol>
	<li>內建的工具列, 現在竟然不能拉出工作列了... [:@] </li>
	<li>內建陽春的注音輸入法大改一通... 這一天終於來了 [:&#39;(] </li>
	<li>Console 不再能直接拉檔案過去, 代表直接輸入完整路逕了, ouch... </li>
	<li>兩個影像相關的 PowerToys 不能用... ( Image Resizer, RAW Image Viewer) </li>
	<li>UAC 真囉唆...</li>
</ol>
<p>
看起來沒什麼大不了, 不過這些都佔了我平常用電腦的大多數動作... 真是晴天霹靂... 還好是家裡的電腦, 愉樂用途居多, 如果是工作用的電腦, 我大概會抓狂... 比較起來, (2) 跟 (4) 對我影響最大, (2) 只要輸入中文的地方, 打起來都覺的怪怪的... 因為這幾個地方都不一樣了:
</p>
<ul>
	<li>最陽春的注音已經沒有底下一排的那種模式了 </li>
	<li>從 DOS 時代就能用的 ALT+KEYPAD 輸入 ASCII 碼的功能也被拿掉了<br />
	(我常習慣打 ALT-4, ALT-4 代表 ASCII 碼為 44 的字元: 逗號, 因為這樣不用切回英數模式) </li>
	<li>中文模式下按住SHIFT是可以輸入英文沒錯, 不過以前這樣打是小寫, 現在變大寫... [:@]... </li>
	<li>注音還停在選字的時後 (就字底下有虛線的狀態) 不能按 BACKSPACE 取消<br />
	(打慣的我常因為這, 玩 WOW 邊打邊聊天就卡住, 法術按不出來就趴了... [:@])</li>
</ul>
<p>
真是太讚了 [:@], 打到這邊已經打錯好幾個字, 十幾年來養成的習慣, 不知道要啥時才有可能習慣... Orz, 之前從windows2000就在耽心, 傳統的笨注音何時會被拿掉, 看來 vista 已經是第一步了... [:&#39;(]
</p>
<p>
而 (4), 不能裝 RAW Image Viewer, 連帶的讓我自己寫的<a href="/wp-content/be-files/archive/2006/12/23/cr2-supported.aspx">歸檔</a>程式都不能用 (因為我是靠它的 wrapper 才能讀取 canon raw file)... 真是... 查了一下 MicrosoftDN,&nbsp;原來 vista 裡已經全面改用 WPF 處理, 因此原本內建的 image 相關軟體都換過了, 以 .NET 來說, 就是從原本的 GDI+ (System.Draw) 改到 WIC (Windows Imaging Component, System.Media.Imaging). 像 video 一樣, 針對各種不同的 image file 也改用 codec 的方式來處理了. 這也是 Microsoft 在 HD Photo 計劃裡重要的一環, 藉著 WPF 首次引入 <a href="http://en.wikipedia.org/wiki/HD_Photo">HD Photo</a> ( Windows Media Photo ), 目標是把 JPEG 換掉, 不過應該有好一段路要走.... 看起來以後會有較正式的 API 可以存取 RAW file, 不用像我之前一樣要走旁門... 不過, Nikon 已經提供了 NFE 檔的 WIC codec 下載, Canon 的 CRW 咧? [:&#39;(] 看起來是該把歸檔程式用 WIC 改一下了... 只要 Canon Codec 快點出來...
</p>
<p>
(5) 則是大名鼎鼎的 <a href="http://technet.microsoft.com/en-us/windowsvista/aa906021.aspx">UAC</a>, 可以預防管理者不知不覺做了啥危險的動作. 只要你執行的程式要做較危險的動作, 就會跳出來跟你確認一下... 用意很好, 不過實在有點煩人, 感覺好像以前用 AntiVirus, 我自己有一些 script 用 FileSystemObject 在做事, Norton AV 老跳出來警告我, 認為我寫的 script 是病毒... 現在又是一樣的感覺, 真是... 不過隨便 GOOGLE 查了一下, 沒想到賽門鐵克 (就是賣 AntiVirus 的公司) 還會<a href="http://cpro.com.tw/channel/news/content/index.php?news_id=53758">放話說 UAC 不好</a>,&nbsp;真是, 要嘲笑鱉沒尾巴也不是這樣笑的....
</p>
<p>
大概我碰 UNIX 比碰 window 來的早, 我還是比較習慣 sudo 的作法. sudo 是在你需要時, 才主動透過 sudo 暫時取得 root 的身份來做事. 平常用的帳號本來就不該有太大的權限. 從 NT 以來, 不用 administrator 登入, 跟本很難做事, 我曾經自己很安份的用 Power Users 身份的帳號工作了一陣子, 後來實在是受不了又換回來... 到了 2000 / xp 情況就好多了, 有很類似 sudo 的 runas 指令可以用, 也可以在捷徑上先指定好 runas 執行身份... ( 沒錯, 我把 DOS prompt 還有 MMC&nbsp;拉了捷逕, 設成&nbsp;administrator 身份開啟 ), 用 PowerUsers 身份就用的很快樂...
</p>
<p>
不過碰到 UAC 真是一肚子火, 嘖嘖, 對知道的人是幫倒忙, 對不知道的人他也只會通通按 YES -_-, 就像所有的精靈都是按下一步一樣, 哈哈... 不過至少還是有進步, 畢竟不是每個人都有嫌工夫像我一樣設 RUNAS ..., 不過不習慣就是不習慣, 試沒多久就把 UAC 給關了.. [:$]
</p>
<p>
牢騷發完了, 謝謝收看 [:D], 下回來寫點正面的... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2007-04-03 02:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-03 02:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vista-day-4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>459</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-05 12:02:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-05 12:02:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[愉樂用途居多...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>460</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-07 14:58:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-07 14:58:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這位老兄, 你是在娛樂什麼...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>便宜的 SATA 光碟機</title>
		<link>http://columns.chicken-house.net/2007/03/30/%e4%be%bf%e5%ae%9c%e7%9a%84-sata-%e5%85%89%e7%a2%9f%e6%a9%9f/</link>
		<pubDate>Fri, 30 Mar 2007 14:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/30/e4bebfe5ae9ce79a84-SATA-e58589e7a29fe6a99f.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
太久沒自己 DIY PC 了, 連行情都一點概念也沒有... 我很少燒片, 所以舊的 4x 燒錄器就加減用, 不過沒光碟機就真的很麻煩, 因此想替我兩台 PC 買個便宜的 DVD-ROM 來用用...&nbsp;現在 Intel 965 (ICH8) 的主機板跟本沒內建 IDE, 只有靠一顆外加的 chip 提供 IDE port, driver 又有點小問題, 之前被搞的很煩, 因此順手去 Y拍 查了一下 SATA 介面的 DVD-ROM, 沒想到真的有.... [:D],&nbsp;兩台光碟機 + 運費 =&nbsp;NTD 1000, 二話不說就買了兩台..
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/SATA_C6E3/IMAGE_070%5B8%5D.jpg" alt="" width="400" height="320" /> 
</p>
<p>
裝機前放桌上隨便拍了一張, 看來組裝 PC 都是拿這種來裝機出貨吧, 面板很乾淨, 除了一個燈號, 一個按鈕之外就沒有了, 背後也是, 就一個 SATA 訊號接頭, 加上一個 SATA 的電源接頭就沒了, 不像硬碟至少都還有傳統的電源接頭等等, cost down 真徹底...
</p>
<p>
機身上都看不到啥牌子 or 型號等資訊, 賣家說是 BenQ 1640, 接上去從 BIOS / Windows Device Manager 看, 它標示的型號是 PHILIPS - DROM6316, google 查了一下, 原來 dell 出貨也搭這台, 咳咳...
</p>
<p>
用起來沒啥特別的, 就光碟機嘛, 中規中矩的, 我手上的片子都還讀的出來. 有需要的朋友可以上 Y拍 找看看, 不想免費幫它打廣告, 真的想買又找不到再問我吧, 我給你 link ...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2007-03-30 14:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-30 14:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%be%bf%e5%ae%9c%e7%9a%84-sata-%e5%85%89%e7%a2%9f%e6%a9%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Vista 初體驗 - (DISK篇)...</title>
		<link>http://columns.chicken-house.net/2007/03/27/vista-%e5%88%9d%e9%ab%94%e9%a9%97-disk%e7%af%87/</link>
		<pubDate>Tue, 27 Mar 2007 20:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/03/27/Vista-e5889de9ab94e9a997-(DISKe7af87).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Vista 試了兩天, 果然是有隱藏很多驚喜在裡頭. Microsoft 真是家不簡單的公司... 小地方我就不寫了, 我只寫對我比較特別的部份:
</p>
<p>
<strong><font color="#ff0000">[Volume Shadow Copy]</font></strong>
</p>
<p>
因為我是把原本 file server 的工作都移到 desktop 上, 因此 vista 終於把 vss 納入, 真是福音一件啊 [:D], 原本我的 server 放照片的那區, 有雙重保護 ( RAID-1 + Volume Shadow Copy ), 換到 XP 時心裡很不安, 保護都沒有了. RAID 可以用主機版上面的取代, 不過可以預防不小心被吳小皮 or 老婆大人砍掉照片的 VSS 就沒有了. 昨天發現 Vista 有提供 VSS 真是感動啊... ( Microsoft 你什麼時後才要把 RAID-1 加進來...? 用主機板內建的 RAID 很可怕啊...&nbsp;)
</p>
<p>
&nbsp;
</p>
<p>
<strong><font color="#ff0000">[Windows Complete PC]</font></strong>
</p>
<p>
另一個驚喜, 是老早就知道的, 就是 vista 開始內建 disk image 的工具 ( windows complete pc,&nbsp;ultima 版限定, 像 ghost 那樣的東西 ), 這沒什麼特別的, 不過試用一下的發現才發現, 做出來的檔案格式, 就是 VHD ( virtual hard disk ).
</p>
<p>
頓時覺的, Microsoft 真是間可怕的公司, 難怪他老是立於不敗之地. VHD 是 Microsoft 在 virtual machine 上面推廣的 virtuah hard disk 格式. Virtual PC / Virtual Server 都是以這個格式為 vm 的 disk. 一年多前才公開了 vhd 的 spec, 廣邀各方拿去使用, Virtual Server 2005 R2 SP1 也將會提供 VHD mount 的工具. 這樣佈局下來, ghost 早已不是對手了, 我還沒試過, 不過未來 vista pc 要移到 virtual machine 內應該就更簡單了, 只要做好 disk image, 再用 vm 掛起來, 搞定收工. 這麼讚的事一定要找時間來試一試.
</p>
<p>
&nbsp;
</p>
<p>
<strong><font color="#ff0000">[Microsoft iSCSI Initiator]</font></strong>
</p>
<p>
另一個驚喜, 是 vista 竟然已經內建 Microsoft iSCSI initiator... 這個倒沒什麼特別的, Microsoft 老早就 free download 了. 不過我覺的它背後的意義, 是不是代表 client 已經做好 iSCSI client 的準備, 未來 windows server 就會內建 iSCSI target ? 會的話, 格式就會直接用 .vhd ? Virtual PC / Virtual Server 就有進一步的機會直接從 iSCSI target mount disk 來 boot vm ? 哇哈哈, 之前我找半天才湊起來的 solution, 看來以後有望內建了 [Y]
</p>
<p>
&nbsp;
</p>
<p>
Microsoft 真是個不簡單的公司, 它總是很能利用 software 要 reuse 才有價值的理念, 打贏過去的每一場仗. 從當年的 office, 到 netscape, 到現在的 visualization solution, 還有 .net technology 都是... Microsoft 要跟 netscape 對打, 不是做出更好的 IE 內建而以. 它既然花了心力去打造 IE 這瀏覽器, Microsoft 一定會有 SDK, 讓到處都可以用的到 IE. 從 HTML Help, 檔案總管, windows 桌面, 到每一個小軟體都可以開網頁 (像 msn messenger 裡玩 game 就是), 還有一堆 Microsoft 的管理工具都看的到 IE 的影子, 除非你不用 Microsoft 的軟體了, 不然就算你用 FireFox, 你還是甩不掉 IE...
</p>
<p>
其實這樣的例子很多, Microsoft 每一場重要的戰爭都是這樣贏的吧, 不知道 vista 裡還有什麼驚奇, 我再來研究看看... [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2007-03-27 20:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-27 20:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vista-%e5%88%9d%e9%ab%94%e9%a9%97-disk%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>MSDN Magazine 閱讀心得: Stream Pipeline</title>
		<link>http://columns.chicken-house.net/2008/01/19/msdn-magazine-%e9%96%b1%e8%ae%80%e5%bf%83%e5%be%97-stream-pipeline/</link>
		<pubDate>Sat, 19 Jan 2008 05:48:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/01/19/MSDN-Magazine-e996b1e8ae80e5bf83e5be97-Stream-Pipeline.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>前一陣子研究了幾種可以在 .NET 善用多核心的作法之後, 最近剛好又在在 MSDN Magazine 看到這篇不錯的文章: <a title="http://msdn.microsoft.com/msdnmag/issues/08/02/NETMatters/default.aspx" href="http://msdn.microsoft.com/msdnmag/issues/08/02/NETMatters/default.aspx">http://msdn.microsoft.com/msdnmag/issues/08/02/NETMatters/default.aspx</a> 裡面點出了另一種作法: 串流管線 (Stream Pipeline)...</p>
<p>如果你是以多核心能有效利用為目標, 那這篇對你可能沒什麼用... 不過如果你要處理的資料必需經過幾個 Stream 處理的話, 這篇就派的上用場. 這篇是以一個常見的例子為起點: 資料壓縮 + 加密...</p>
<p>在 .NET 要壓縮資料很簡單, 只要把資料寫到 GzipStream 就好, 建立 GzipStream 時再指定它要串接的 FileStream 就可以寫到檔案了 (串 Network 就可以透過網路傳出去... etc), 而加密則是用 CryptoStream, 也是一樣的用法, 可以串接其它的 Stream ...</p>
<p>正好利用這個特性, 資料要壓縮又要加密, 可以這樣作:</p>
<p>(single thread) [INPUT] --&gt; GzipStream --&gt; CryptoStream --&gt; [OUTPUT]</p>
<p>不過那裡跟多核 CPU 扯上關係? 因為壓縮跟加密都是需要大量 CPU 運算, 這樣的作法等於是只用單一 thread 來負責 Gzip 跟 Crypto 的工作. 即使透過串接 stream , 動作被切成很多小段, 壓縮一點就加密一點, 但是仍然只有一個 thread... 再忙也仍然只有用到單一核心, 除非等到未來改板, 用類似上一篇 [TPL] 的方法改寫的 library 才有機會改善...</p>
<p>作者提出另一個觀點, 這兩個 stream 能不能分在兩個 thread 各別執行? 弄的像生產線 (pipeline) 一樣, 第一個作業員負責壓縮, 第二個作業員負責加密, 同時進行, 就可以有兩倍的處理速度... 答案當然是 "可以" ! 我佩服 Stephen Toub 的地方在於他很漂亮的解決了這個問題, 就是它寫了 BlockingStream 就把問題解掉了, 乾淨又漂亮... 真是甘拜下風.. 這也是我為什麼想多寫這篇的原因.</p>
<p>之前在念作業系統, 講到多工的課題, 有提過 "生產者 / 消費者" 的設計, 就是一部份模組負責丟出一堆工作, 而另一個模組則負責把工作處理掉. 如何在中間協調管控就是個重要的課題. 生產的太快工作會太多, 因此多到某個程度就要降低生產者的速度, 通常就是暫停. 消費者消化的太快也會沒事作, 就需要暫停來休息一下等待新的工作. 而消費者這端如果是用 thread pool 來實作, 就剛好是 [上篇] 提到的動態調整 thread pool 裡的 worker thread 數量的機制. 工作太多會動態增加 worker thread 來處理, 工作太少就會讓多餘的 worker thread 睡覺, 睡太久就把它砍了...</p>
<p>而這次 Stephen Toub 解決的方式: BlockingStream 則是處理生產者跟消費者之間的橋樑. Stream 這種類型, 正好是身兼消費及生產者的角色. 他舉了郵件處理的例子. 如果你有一堆信要寄, 你也許會找一個人把卡片折好, 放進信封貼郵票. 這些動作由一個人 (one thread) 來作, 就是原本的作法. 生產者就是那堆要寄的信件, 這個可憐的工人就是要把這些信裝好信封貼好郵票的消費者.</p>
<p>如果有第二個人呢? 他們可以分工, 一個裝信封, 一個黏郵票. 第一個人 ( thread 1 ) 裝好信封交給第二個人 (thread 2), 第二個人再黏郵票就搞定了. 這就是典型的生產線模式. 這樣在第一個人裝信封的同時, 第二個人可以貼上一封信的郵票... 因此除了裝第一封信, 第二個人沒事作, 及貼最後一張郵票, 第一個人沒事作之外, 其它過程中兩個人都有工作, 對應到程式就是一個 thread 負責壓縮, 壓縮好一部份後就交給後面的 thread 負責加密, 同時前面的 thread 則繼續壓縮下一塊資料... 剛好搭配雙核 cpu, 效能就能提高. 兩個 stream 之間就靠 StreamPipeline 及 BlockingStream 隔開在兩個不同的 thread. 原本的流程改為:</p>
<p>[INPUT] --&gt; GzipStream (thread 1) --&gt; BlockingStream --&gt; CryptoStream (thread 2) --&gt; [OUTPUT]</p>
<p>雖然技術細節才是精華, 但是這部份就請各位看原文就好, 我寫再多也比不過原文講的清楚... 我想要比較的是這樣作跟之前碰到的幾種平行處理 or thread pool 差在那裡? 這種作法有什麼好處?</p>
<p>其實最大的差異在於, pipeline 以外的作法 (TPL, ThreadPool) 都是把大量的工作分散給多個工人來處理. 每個人處理的內容其實都是獨立的. 比如之前我處理的問題, 要把一堆照片轉成縮圖. 每個動作都互獨立, 可以很容易的分給多個人處理, 也能得到明顯的加速, 更大的好處是人手越多效能越好.</p>
<p>但是事情不是一直這麼理想. 某些情況是另一個極端, 沒有辦法靠人海戰術解決. 比如這個寄信的例子, 折信紙裝到信封不難, 但是要貼郵票的話, 工人可能就得放下信紙, 到旁邊拿起郵票膠水貼上去. 反覆下來他會浪費時間在交換作這兩件事情上. 這時較好的分工就不是找兩個人一人各處理一半的信, 而是一人負責折信裝信封, 一人負責貼郵票.</p>
<p>當然還有另外一種考量, 如果這些信 *必需* 依照順序處理, 你也無法用 thread pool 這種人海戰術來處理, 一定要把工作切成不同階段, 由專人負責才可以. 這就是 pipeline 能夠應用的時機. 其實這種作法在 CPU 很普遍, 多虧之前修過 micro-processor, 也多少學到皮毛. X86 CPU 從 80386 開始稱作 "超純量" (super scaler) CPU, 就是代表它在單一 clock cycle 能執行完超過一個指令, 靠的也是 pipeline.</p>
<p>再講下去就離題了, 簡單的說以往平行處理都是用 multi thread 來分配工作, 就像銀行有好幾個櫃台, 每個客戶在單一櫃台就辦完他的手續. 而 pipeline 就像拿選票一樣, 第一位查證件, 第二位蓋章, 第三位給你選票, 第四位問你要不要領公投票... 咳咳 (我實在不支持公投題目這麼無聊, 無關黨派)... 這是屬於兩種不同維度的工作切割方式. 使用 pipeline 的方式切割有幾個好處:</p>
<ol>
<li>每個階段都負責單一工作, 動作簡單明確, 因此就可以更簡潔快速, 不會有額外的浪費 </li>
<li>不會像 thread pool 那樣, 會有不固定個數的 worker thread 在服務, thread 數量一定是固定的, 減少了 thread create / destory 的成本</li>
</ol>
<p>不過呢, 缺點也不少, 文章內也列了幾點:</p>
<ol>
<li>效能不見得能照比例提升. 整個 pipeline 過程中只要有一階段較慢, 會卡住整條生產線. 以此例來說, 只提升了 20% 的效能, 因為管線的兩個階段花費的時間並不相等. </li>
<li>如果我有足夠的人手, 但是工作的特質不見得能切成這麼多階段, 因此擴充性有限, 以此例來說, 你用四核CPU就派不上用處了, 仍然只能分成兩階來處理.&nbsp; </li>
<li>pipeline 啟動及結束的成本較高. 一開始只有前面階段有工作做, 最後只有後面階段有工作做. pipeline 切越多 stage 問題就越嚴重. 這在 CPU 的架構設計上比較常在探討這問題, 就是管線清空後造成的效能折損. 這也是為什麼常聽到園區停電一分鐘, 台積電就會損失幾億的原因... 因為它的生產線很長, 停掉生產線跟啟動生產線的成本高的嚇人.</li>
</ol>
<p>廢話講了很多, 主要是這篇文章提供了另一種平行處理的方式, 是較少看到的, 就順手把心得寫一寫了, 自己留個心得, 以後才不會忘掉 [:D]. 最後, 很豬頭的是, 整篇英文很辛苦的 K 完, 才發現有中文版的, 真是... 下次各位看文章前請先注意一下有沒有中文版 [H], 當然你英文很好的話就沒差... 哈哈..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2008-01-19 05:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-19 05:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[msdn-magazine-%e9%96%b1%e8%ae%80%e5%bf%83%e5%be%97-stream-pipeline]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
	</item>
	<item>
		<title>遲來的正義</title>
		<link>http://columns.chicken-house.net/2008/01/14/%e9%81%b2%e4%be%86%e7%9a%84%e6%ad%a3%e7%be%a9/</link>
		<pubDate>Mon, 14 Jan 2008 02:59:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/01/14/e981b2e4be86e79a84e6ada3e7bea9.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
看來 Google 沒幾個看的懂中文的員工... 不過我的破英文倒是看的懂, 真是不簡單... [Y] 
</p>
<p>
&nbsp;
</p>
<p>
話說前陣子<a href="/post/e58fafe683a12c-e7ab9fe784b6e581b7e8b2bce68891e79a84e69687e7aba0-.aspx">我的文章被盜連</a>, 最初只是點了 Blogger 上面的回報不恰當內容的標幟, 嗯, 不鳥我... 
</p>
<p>
後來在 Google 網站找了半天, 才找到回報 Google 所有不當內容的網頁, 看它訊息都寫中文的, 我就不客氣的用中文回報了... 等了一兩個禮拜果然沒鳥我... 
</p>
<p>
上禮拜就用我的破英文再回報一次, 這次只貼了兩三句鼈腳英文, 簡單說明文章是我寫的, 他盜用我文章 blah blah... 耶! 果然有效... 現在再點那篇文章就變這樣了: 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/7e680184a1be_2A22/image_4.png"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/7e680184a1be_2A22/image_thumb_1.png" border="0" alt="image" width="644" height="461" /></a> 
</p>
<p>
看來 Google 還是有在做事, 哈哈... 特別在此感謝一下.. 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2008-01-14 02:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-14 02:59:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%81%b2%e4%be%86%e7%9a%84%e6%ad%a3%e7%be%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:comment>
			<wp:comment_id>299</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 00:54:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 00:54:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[回覆你的大概是巴基斯坦人吧, 所以看得懂你的英文]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>300</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 02:22:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 02:22:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳,可別小看巴基斯坦人喔...
我跟Ason一樣,一直覺得英文低標都不到的G英文應該是爛的可以吧,結果我後來發現,他常常看的程式設計之類的電腦書都是原文的,而且還很認真的在看...嚇,這些書連中文的我都看不懂了,何況是原文的...@_@
不過我也發現,他自從玩上電動後就不上進很久了...:P


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>301</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 08:28:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 08:28:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哦~有爆料的…(h)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>302</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 08:29:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 08:29:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[自從玩了攝影，也很久沒有上進心了…

ps: 我可不可也有 bot check......]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>303</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 13:06:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 13:06:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳, 我也是有在看新東西 [H], 妳不曉得而以..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>304</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-17 13:07:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-17 13:07:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[話說 google 又寄了封落落長的英文信, 看了就想睡覺... [H]

大意是我可以發傳真 or 書面的內容去檢舉 blah blah 的...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>305</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-22 15:55:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-22 15:55:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[話說~那些中文介面大概都是外包給人家批次弄好的~
沒事他應該也不會專門找一個會中文的客服啦~
所以人家沒有不理你喔~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>可惡, 竟然偷貼我的文章... :@</title>
		<link>http://columns.chicken-house.net/2007/12/21/%e5%8f%af%e6%83%a1-%e7%ab%9f%e7%84%b6%e5%81%b7%e8%b2%bc%e6%88%91%e7%9a%84%e6%96%87%e7%ab%a0/</link>
		<pubDate>Fri, 21 Dec 2007 02:56:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/21/e58fafe683a12c-e7ab9fe784b6e581b7e8b2bce68891e79a84e69687e7aba0-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
小熊子告訴我我才發現, 竟然有其它Blog轉貼我的文章, 還在上面擺廣告... [:@] 回報 Blogger 也不知道有沒有用, 嘖嘖...
</p>
<p>
看來這網站也不是人工轉貼的, 八成 search blog 後用 RSS 自動全貼過去, 看它的內容有上千篇, 都是 canon / nikon 相機的內容... 算了, 我還介紹它幹嘛? 應該想辦法快讓它下架才對...
</p>
<p>
貼它的網址可能會幫它打廣告, 不過想一想不貼也只是讓它活更久而以... 網址就不打馬賽克了, 大家幫我點上面的 [標幟BLOG] 吧, 讓它早日下架... [:@]
</p>
<p>
<a href="http://canon-vs-nikon.blogspot.com/2007/11/canon-raw-codec-12-net-framework-30-wpf.html" title="http://canon-vs-nikon.blogspot.com/2007/11/canon-raw-codec-12-net-framework-30-wpf.html">http://canon-vs-nikon.blogspot.com/2007/11/canon-raw-codec-12-net-framework-30-wpf.html</a>
</p>
<p>
<a href="/admin/Pages/wp-content/be-files/WindowsLiveWriter/2edc8ffce949_2951/image_6.png"><img style="border: 0px" src="/admin/Pages/wp-content/be-files/WindowsLiveWriter/2edc8ffce949_2951/image_thumb_2.png" border="0" alt="image" width="386" height="480" /></a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2007-12-21 02:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-21 02:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%af%e6%83%a1-%e7%ab%9f%e7%84%b6%e5%81%b7%e8%b2%bc%e6%88%91%e7%9a%84%e6%96%87%e7%ab%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:comment>
			<wp:comment_id>306</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-01 17:49:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-01 17:49:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[所以這事現在有下文了嗎??]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>307</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-02 17:32:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-02 17:32:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[點也點了, 也回報給 Google 有違反 copyright 內容網頁了, 不過還沒回應... [:S]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>308</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-10 02:17:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-10 02:17:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[與有榮焉啊~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>309</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-11 02:52:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-11 02:52:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[咳..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ThreadPool 實作 #3. AutoResetEvent / ManualResetEvent</title>
		<link>http://columns.chicken-house.net/2007/12/17/threadpool-%e5%af%a6%e4%bd%9c-3-autoresetevent-manualresetevent/</link>
		<pubDate>Mon, 17 Dec 2007 02:21:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/17/ThreadPool-e5afa6e4bd9c-3-AutoResetEvent-ManualResetEvent.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
續上篇, 從眾多閒置的 worker thread 挑選一個起來接工作有兩種策略作法. 一種作法是 Thread Pool 自己決定, 最基本的就是誰等最久就叫誰起來, 或是 Thread Pool 有自己的演算法挑一個最菜的 worker thread 來做工都可以... 另一種作法就是不管它, 每個 worker thread 都靠運氣, 交給上天 (OS) 決定, 看誰搶到下一個 job. 看起來第一種好像比較好, 事實上不見得. 每個 thread 之間的排程是個學問, OS 多工的效率好不好就看這個. 舉例來說, 如果每個 worker thread 的優先順序不同, 或是某些 thread 正好碰到 GC, 或是正好被移到 virtaual memory 等等, 硬去叫它起來工作反而要花更多的時間. 而這些資訊都在 OS 的排程器裡才有足夠的資訊可以判斷, 以寫 AP 的角度很難顧級到這個層面. 這時最好的辦法就是不管它, 用齊頭式的平等, 把選擇權交給 OS 決定.
</p>
<p>
又是一個說起來比 code 多的例子. 這兩種不同的策略, 寫成 code 其實只差一行... 就是選用 AutoResetEvent 跟 ManualResetEvent 的差別而以. .NET SDK 的 Class Reference 上這樣寫著:
</p>
<p>
AutoResetEvent: Notifies <strong><font color="#ff0000">a</font></strong> waiting thread that an event has occurred.
</p>
<p>
ManualResetEvent: Notifies <strong><font color="#ff0000">one or more</font></strong> waiting threads that an event has occurred.
</p>
<p>
真正寫成 Code 來測試一下... 
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> count = 0; count &lt; 5; count++)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        Thread t = <span class="kwrd">new</span> Thread(<span class="kwrd">new</span> ThreadStart(ThreadTest));
</pre>
<pre>
<span class="lnum">   6:  </span>        t.Start();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    }
</pre>
<pre>
<span class="lnum">   8:  </span>    Thread.Sleep(1000);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    wait.Set();
</pre>
<pre>
<span class="lnum">  10:  </span>    Thread.Sleep(1000);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    wait.Set();
</pre>
<pre>
<span class="lnum">  12:  </span>    Thread.Sleep(1000);
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    wait.Set();
</pre>
<pre>
<span class="lnum">  14:  </span>    Thread.Sleep(1000);
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    wait.Set();
</pre>
<pre>
<span class="lnum">  16:  </span>    Thread.Sleep(1000);
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    wait.Set();
</pre>
<pre>
<span class="lnum">  18:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  20:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> AutoResetEvent wait = <span class="kwrd">new</span> AutoResetEvent(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum">  21:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ThreadTest()
</pre>
<pre>
<span class="lnum">  22:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    Console.WriteLine(<span class="str">&quot;Thread[{0}]: wait...&quot;</span>, Thread.CurrentThread.ManagedThreadId);
</pre>
<pre>
<span class="lnum">  24:  </span>    wait.WaitOne();
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    Console.WriteLine(<span class="str">&quot;Thread[{0}]: wakeup...&quot;</span>, Thread.CurrentThread.ManagedThreadId);
</pre>
<pre>
<span class="lnum">  26:  </span>}
</pre>
</div>
<p>
執行結果:
</p>
<p>
Thread[ 3 ]: wait...<br />
Thread[ 5 ]: wait...<br />
Thread[ 4 ]: wait...<br />
Thread[ 6 ]: wait...<br />
Thread[ 7 ]: wait...<br />
Thread[ 3 ]: wakeup...<br />
Thread[ 4 ]: wakeup...<br />
Thread[ 6 ]: wakeup...<br />
Thread[ 5 ]: wakeup...<br />
Thread[ 7 ]: wakeup... 
</p>
<p>
程式過程中我加了幾個 Sleep, 首先我用同一個 AutoResetEvent, 讓五個 thread 都去等待同一個 notify event 來叫醒它. 而 AutoResetEvent 一次只能叫醒一個被 WaitOne blocked 住的 thread. 就是第一種先到先贏的作法, 後面幾行 wakeup 的 message 每隔一秒會跳一行出來.
</p>
<p>
&nbsp;
</p>
<p>
再來看一下 ManualResetEvent ...
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> count = 0; count &lt; 5; count++)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        Thread t = <span class="kwrd">new</span> Thread(<span class="kwrd">new</span> ThreadStart(ThreadTest));
</pre>
<pre>
<span class="lnum">   6:  </span>        t.Start();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    }
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    Thread.Sleep(1000);
</pre>
<pre>
<span class="lnum">  10:  </span>    wait.Set();
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>}
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> ManualResetEvent wait = <span class="kwrd">new</span> ManualResetEvent(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">  14:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ThreadTest()
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>{
</pre>
<pre>
<span class="lnum">  16:  </span>    Console.WriteLine(<span class="str">&quot;Thread[{0}]: wait...&quot;</span>, Thread.CurrentThread.ManagedThreadId);
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    wait.WaitOne();
</pre>
<pre>
<span class="lnum">  18:  </span>    Console.WriteLine(<span class="str">&quot;Thread[{0}]: wakeup...&quot;</span>, Thread.CurrentThread.ManagedThreadId);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>}
</pre>
</div>
<p>
執行結果:
</p>
<p>
Thread[ 3 ]: wait...<br />
Thread[ 4 ]: wait...<br />
Thread[ 5 ]: wait...<br />
Thread[ 6 ]: wait...<br />
Thread[ 7 ]: wait...<br />
Thread[ 5 ]: wakeup...<br />
Thread[ 4 ]: wakeup...<br />
Thread[ 6 ]: wakeup...<br />
Thread[ 3 ]: wakeup...<br />
Thread[ 7 ]: wakeup... 
</p>
<p>
除了把型別宣告從 AutoResetEvent 換成 ManualResetEvent 之外, 其它都沒變. 當然 line 10 一次就能叫醒所有的 thread, 所以後面四次 Set( ) 我就直接刪掉了. 程式 run 到 line 10, 後面五行 wakeup 的訊息就會一次全出現, 而出現的順序是隨機的, 每次都不大一樣.
</p>
<p>
這種作法的解釋, 是一次 Set( ), 卡在 WaitOne( ) 的五個 thread 就全被叫醒了. 而這個現象如果套用在 SimpleThreadPool 的實作上, 它的作用相當於第二種作法. 一瞬間把所有的 worker thread 從 blocked 狀態移到 waiting 狀態. 而到底是那一個 thread 有幸第一個被 OS 移到 running 狀態? 就是根據 OS 自己的排程策略而定. 第一個移到 running 狀態的 thread 通常就能搶到 job queue 裡的工作, 剩下的沒搶到, 則又會因為沒有工作好做, 再度進入閒置狀態, 等待下一次機會再一起來碰一次運氣...
</p>
<p>
就這一行, 花了最多篇幅來說明, 因為它最抽象. 說明這段的目的, 如果你的 ThreadPool 要更進階一點, 如果你想要改用先排隊先贏的策略, 把 WaitHandle 的型別改成 AutoResetEvent 就好. 如果你希望根據工作的特性來微調每個 thread 的 priority, 你就必需用 ManualResetEvent.
</p>
<p>
好, 沒想到一百行左右的 SimpleThreadPool 有這麼多東西可以寫, 完整的 code 我直接貼在底下, 歡迎引用. 好用的話記得給個回應. 要用在你的 project 也歡迎, 只要禮貌性的支會我一聲. 讓我知道我寫的 code 被用在什麼地方就好. 寫到這裡總算告一段落. 謝謝收看 [:D] 
</p>
<p>
&nbsp;
</p>
<p>
--<br />
完整的 SimpleThreadPool.cs 原始碼:
</p>
<p>
&nbsp;
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">using</span> System;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">using</span> System.Collections.Generic;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">using</span> System.Text;
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">using</span> System.Threading;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">using</span> System.Diagnostics;
</pre>
<pre>
<span class="lnum">   6:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span><span class="kwrd">namespace</span> ChickenHouse.Core.Threading
</pre>
<pre>
<span class="lnum">   8:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> SimpleThreadPool : IDisposable
</pre>
<pre>
<span class="lnum">  10:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        <span class="kwrd">private</span> List&lt;Thread&gt; _workerThreads = <span class="kwrd">new</span> List&lt;Thread&gt;();
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">private</span> <span class="kwrd">bool</span> _stop_flag = <span class="kwrd">false</span>;
</pre>
<pre>
<span class="lnum">  14:  </span>        <span class="kwrd">private</span> <span class="kwrd">bool</span> _cancel_flag = <span class="kwrd">false</span>;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  16:  </span>        <span class="kwrd">private</span> TimeSpan _maxWorkerThreadTimeout = TimeSpan.FromMilliseconds(3000);
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        <span class="kwrd">private</span> <span class="kwrd">int</span> _maxWorkerThreadCount = 0;
</pre>
<pre>
<span class="lnum">  18:  </span>        <span class="kwrd">private</span> ThreadPriority _workerThreadPriority = ThreadPriority.Normal;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  20:  </span>        <span class="kwrd">private</span> Queue&lt;WorkItem&gt; _workitems = <span class="kwrd">new</span> Queue&lt;WorkItem&gt;();
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        <span class="kwrd">private</span> ManualResetEvent enqueueNotify = <span class="kwrd">new</span> ManualResetEvent(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">  22:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        <span class="kwrd">public</span> SimpleThreadPool(<span class="kwrd">int</span> threads, ThreadPriority priority)
</pre>
<pre>
<span class="lnum">  24:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>            <span class="kwrd">this</span>._maxWorkerThreadCount = threads;
</pre>
<pre>
<span class="lnum">  26:  </span>            <span class="kwrd">this</span>._workerThreadPriority = priority;
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>        }
</pre>
<pre>
<span class="lnum">  28:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        <span class="kwrd">private</span> <span class="kwrd">void</span> CreateWorkerThread()
</pre>
<pre>
<span class="lnum">  30:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            Thread worker = <span class="kwrd">new</span> Thread(<span class="kwrd">new</span> ThreadStart(<span class="kwrd">this</span>.DoWorkerThread));
</pre>
<pre>
<span class="lnum">  32:  </span>            worker.Priority = <span class="kwrd">this</span>._workerThreadPriority;
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>            <span class="kwrd">this</span>._workerThreads.Add(worker);
</pre>
<pre>
<span class="lnum">  34:  </span>            worker.Start();
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>        }
</pre>
<pre>
<span class="lnum">  36:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> QueueUserWorkItem(WaitCallback callback)
</pre>
<pre>
<span class="lnum">  38:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>            <span class="kwrd">return</span> <span class="kwrd">this</span>.QueueUserWorkItem(callback, <span class="kwrd">null</span>);
</pre>
<pre>
<span class="lnum">  40:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  42:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> QueueUserWorkItem(WaitCallback callback, <span class="kwrd">object</span> state)
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>        {
</pre>
<pre>
<span class="lnum">  44:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>._stop_flag == <span class="kwrd">true</span>) <span class="kwrd">return</span> <span class="kwrd">false</span>;
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  46:  </span>            WorkItem wi = <span class="kwrd">new</span> WorkItem();
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>            wi.callback = callback;
</pre>
<pre>
<span class="lnum">  48:  </span>            wi.state = state;
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  50:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0 &amp;&amp; <span class="kwrd">this</span>._workerThreads.Count &lt; <span class="kwrd">this</span>._maxWorkerThreadCount) <span class="kwrd">this</span>.CreateWorkerThread();
</pre>
<pre class="alt">
<span class="lnum">  51:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  52:  </span>            <span class="kwrd">this</span>._workitems.Enqueue(wi);
</pre>
<pre class="alt">
<span class="lnum">  53:  </span>            <span class="kwrd">this</span>.enqueueNotify.Set();
</pre>
<pre>
<span class="lnum">  54:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  55:  </span>            <span class="kwrd">return</span> <span class="kwrd">true</span>;
</pre>
<pre>
<span class="lnum">  56:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  57:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  58:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> EndPool()
</pre>
<pre class="alt">
<span class="lnum">  59:  </span>        {
</pre>
<pre>
<span class="lnum">  60:  </span>            <span class="kwrd">this</span>.EndPool(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum">  61:  </span>        }
</pre>
<pre>
<span class="lnum">  62:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  63:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> CancelPool()
</pre>
<pre>
<span class="lnum">  64:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  65:  </span>            <span class="kwrd">this</span>.EndPool(<span class="kwrd">true</span>);
</pre>
<pre>
<span class="lnum">  66:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  67:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  68:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> EndPool(<span class="kwrd">bool</span> cancelQueueItem)
</pre>
<pre class="alt">
<span class="lnum">  69:  </span>        {
</pre>
<pre>
<span class="lnum">  70:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>._workerThreads.Count == 0) <span class="kwrd">return</span>;
</pre>
<pre class="alt">
<span class="lnum">  71:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  72:  </span>            <span class="kwrd">this</span>._stop_flag = <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  73:  </span>            <span class="kwrd">this</span>._cancel_flag = cancelQueueItem;
</pre>
<pre>
<span class="lnum">  74:  </span>            <span class="kwrd">this</span>.enqueueNotify.Set();
</pre>
<pre class="alt">
<span class="lnum">  75:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  76:  </span>            <span class="kwrd">do</span>
</pre>
<pre class="alt">
<span class="lnum">  77:  </span>            {
</pre>
<pre>
<span class="lnum">  78:  </span>                Thread worker = <span class="kwrd">this</span>._workerThreads[0];
</pre>
<pre class="alt">
<span class="lnum">  79:  </span>                worker.Join();
</pre>
<pre>
<span class="lnum">  80:  </span>                <span class="kwrd">this</span>._workerThreads.Remove(worker);
</pre>
<pre class="alt">
<span class="lnum">  81:  </span>            } <span class="kwrd">while</span> (<span class="kwrd">this</span>._workerThreads.Count &gt; 0);
</pre>
<pre>
<span class="lnum">  82:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  83:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  84:  </span>        <span class="kwrd">private</span> <span class="kwrd">void</span> DoWorkerThread()
</pre>
<pre class="alt">
<span class="lnum">  85:  </span>        {
</pre>
<pre>
<span class="lnum">  86:  </span>            <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre class="alt">
<span class="lnum">  87:  </span>            {
</pre>
<pre>
<span class="lnum">  88:  </span>                <span class="kwrd">while</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0)
</pre>
<pre class="alt">
<span class="lnum">  89:  </span>                {
</pre>
<pre>
<span class="lnum">  90:  </span>                    WorkItem item = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">  91:  </span>                    <span class="kwrd">lock</span> (<span class="kwrd">this</span>._workitems)
</pre>
<pre>
<span class="lnum">  92:  </span>                    {
</pre>
<pre class="alt">
<span class="lnum">  93:  </span>                        <span class="kwrd">if</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0) item = <span class="kwrd">this</span>._workitems.Dequeue();
</pre>
<pre>
<span class="lnum">  94:  </span>                    }
</pre>
<pre class="alt">
<span class="lnum">  95:  </span>                    <span class="kwrd">if</span> (item == <span class="kwrd">null</span>) <span class="kwrd">continue</span>;
</pre>
<pre>
<span class="lnum">  96:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  97:  </span>                    <span class="kwrd">try</span>
</pre>
<pre>
<span class="lnum">  98:  </span>                    {
</pre>
<pre class="alt">
<span class="lnum">  99:  </span>                        item.Execute();
</pre>
<pre>
<span class="lnum"> 100:  </span>                    }
</pre>
<pre class="alt">
<span class="lnum"> 101:  </span>                    <span class="kwrd">catch</span> (Exception)
</pre>
<pre>
<span class="lnum"> 102:  </span>                    {
</pre>
<pre class="alt">
<span class="lnum"> 103:  </span>                        <span class="rem">//</span>
</pre>
<pre>
<span class="lnum"> 104:  </span>                        <span class="rem">//  ToDo: exception handler</span>
</pre>
<pre class="alt">
<span class="lnum"> 105:  </span>                        <span class="rem">//</span>
</pre>
<pre>
<span class="lnum"> 106:  </span>                    }
</pre>
<pre class="alt">
<span class="lnum"> 107:  </span>&nbsp;
</pre>
<pre>
<span class="lnum"> 108:  </span>                    <span class="kwrd">if</span> (<span class="kwrd">this</span>._cancel_flag == <span class="kwrd">true</span>) <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum"> 109:  </span>                }
</pre>
<pre>
<span class="lnum"> 110:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum"> 111:  </span>                <span class="kwrd">if</span> (<span class="kwrd">this</span>._stop_flag == <span class="kwrd">true</span> || <span class="kwrd">this</span>._cancel_flag == <span class="kwrd">true</span>) <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum"> 112:  </span>                <span class="kwrd">if</span> (<span class="kwrd">this</span>.enqueueNotify.WaitOne(<span class="kwrd">this</span>._maxWorkerThreadTimeout, <span class="kwrd">true</span>) == <span class="kwrd">true</span>) <span class="kwrd">continue</span>;
</pre>
<pre class="alt">
<span class="lnum"> 113:  </span>                <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum"> 114:  </span>            }
</pre>
<pre class="alt">
<span class="lnum"> 115:  </span>&nbsp;
</pre>
<pre>
<span class="lnum"> 116:  </span>            <span class="kwrd">this</span>._workerThreads.Remove(Thread.CurrentThread);
</pre>
<pre class="alt">
<span class="lnum"> 117:  </span>        }
</pre>
<pre>
<span class="lnum"> 118:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum"> 119:  </span>        <span class="kwrd">private</span> <span class="kwrd">class</span> WorkItem
</pre>
<pre>
<span class="lnum"> 120:  </span>        {
</pre>
<pre class="alt">
<span class="lnum"> 121:  </span>            <span class="kwrd">public</span> WaitCallback callback;
</pre>
<pre>
<span class="lnum"> 122:  </span>            <span class="kwrd">public</span> <span class="kwrd">object</span> state;
</pre>
<pre class="alt">
<span class="lnum"> 123:  </span>&nbsp;
</pre>
<pre>
<span class="lnum"> 124:  </span>            <span class="kwrd">public</span> <span class="kwrd">void</span> Execute()
</pre>
<pre class="alt">
<span class="lnum"> 125:  </span>            {
</pre>
<pre>
<span class="lnum"> 126:  </span>                <span class="kwrd">this</span>.callback(<span class="kwrd">this</span>.state);
</pre>
<pre class="alt">
<span class="lnum"> 127:  </span>            }
</pre>
<pre>
<span class="lnum"> 128:  </span>        }
</pre>
<pre class="alt">
<span class="lnum"> 129:  </span>&nbsp;
</pre>
<pre>
<span class="lnum"> 130:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose()
</pre>
<pre class="alt">
<span class="lnum"> 131:  </span>        {
</pre>
<pre>
<span class="lnum"> 132:  </span>            <span class="kwrd">this</span>.EndPool(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum"> 133:  </span>        }
</pre>
<pre>
<span class="lnum"> 134:  </span>    }
</pre>
<pre class="alt">
<span class="lnum"> 135:  </span>}
</pre>
</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2007-12-17 02:21:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-17 02:21:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[threadpool-%e5%af%a6%e4%bd%9c-3-autoresetevent-manualresetevent]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>310</wp:comment_id>
			<wp:comment_author><![CDATA[mark]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-18 21:08:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-18 21:08:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[非常謝謝版主教學~~ 小弟目前想學實作pool 只是觀念還不是很純熟
不太敢去製作~

如果版主有空閒 是否能教導一下
a0921625577 即時通 謝嚕^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>311</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-19 05:31:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-19 05:31:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果你在實作碰到什麼問題, 可以貼在這邊我會看的到, 平常工作忙大概沒時間用IM聊. 貼出你的問題也有助於你先想清楚到底卡在那裡, 加油!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>312</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-04 14:36:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-04 14:36:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果要將class WorkItem加入暫停繼續兩功能,
(像FlashGet中的任一Task可暫停繼續)
請問該怎麼做呢?

Resume( )已禁用了, 
而且不用Mutex的情況下,
可以用哪些東西湊出Resume的功能?
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>313</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-05 02:16:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-05 02:16:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Suspend() / Resume() 被停用，是因為你可能停在握有某些 LOCK 還未釋放的狀態，很容易就造成 deadlock. 因此停用的真正原因，是 thread 應該自己挑適當的點自己停下來 (sleep or wait), 而不是不知道什麼時後被外面的 code 隨機停在不預期的位子。

所以關鍵會在要被停下來的 code, 應該要有某個時間點自己不斷的檢查是否該停下來了? 停下來之後就用某種 WaitHandle 物件去 Wait, 直到有人叫醒它。

不知你不用 Mutex 的原因是? 原則上視你的情況，所有 WaitHandle 繼承下來的物件你都可以用。除了Mutex 之外，AutoResetEvent / ManualResetEvent / Semaphore 都可。以 FlashGet 那樣的例子， ManualResetEvent是你可以考慮使用的方法。如果還要搭配某個站只限幾個 connection 之類的，改用 Semaphore 會比較簡單。


要讓程式停下來，找個有迴圈的地方 (比如 read to buffer / write from buffer 的典型 I/O code) ，每個 thread 的每圈都呼叫 ManualResetEvent 的 WaitOne()，外面要讓它停止就呼叫 
要讓 workitem 暫停很簡單，就用 ManualResetEvent 就好了。

--
請輸入: &quot;年年行大運&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>314</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-05 17:06:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-05 17:06:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[開發團隊中不見得每個人都有thread pool的概念,
但是用Flashget排程抓片倒是共通的常識...

我的目的是希望有個萬用的thread工具,
使用方式如同Flashget,
開發WinService或WebService的同仁都能方便使用;

目前參考網路上各家的範例完成示意如下(後有完整碼載點)
===================================================
// 我寫的thread工具
FlashgetThreats flashgetT = new FlashgetThreats();

// 同仁A寫他的class時只有個限制
// 要交給thread跑的函式必須長的像這樣void XXX(object obj)
// 同仁A的使用情況如下
AnalyzeMatrix a = new AnalyzeMatrix();
a.initialize()...

// 參數依序如下
// (要交給thread跑的函式, 該函式的參數, 排程起時, 排程終時, 每次處理讓出的CpuTime)
int tid = flashgetT.Add( a.Analyze, null, &quot;20080101&quot;, &quot;20081231&quot;, 100 );

flashgetT.Start(tid);
flashgetT.Pause(tid);
flashgetT.Resume(tid);
flashgetT.Delete(tid);
===================================================

目前在Windows Service使用時,
有記憶體持續消耗的狀況發生!
即使item.Execute( )執行的是空函式也會如此!!
我原本懷疑是Mutex或Thread.Sleep造成的,
所以才請教不用Mutex的改法...
如果有空請幫我看看吧


完整碼載點
http://www.badongo.com/file/10711065]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>315</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-06 02:27:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-06 02:27:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看了你附的程式碼，邏輯上沒有什麼問題，不過用法卻有點不恰當... 

1. Mutex 跟 Monitor 其實很像，不過兩者運作方式卻大不相同。Mutex 是設計來可以 &quot;跨&quot; process... 對整個 OS 是 global 的。不過你用的方式是 unnamed mutex，實際上會不會佔用 OS 的 mutex 物件我就不曉得了... 其實你的需求用輕量化的 Monitor / lock() 指令就足夠了。

2. Mutex 要求 WaitOne() 跟 ReleaseMutex() 一定要在同一個 thread (thread identity)，如果取得 Mutex 的 thread 終止，mutex 會自動放掉。意思是如果你設計的 Pause() / Resume() 有可能在不同的 thread 被呼叫，就會有問題 (EX: 透過 ASP.NET / WEB SERVICE)

3. 你的主程式會各別控制 &quot;所有&quot; 的 workitem 嗎? 還是只會統一由 flashgetT 來控制? 如果是後者，每個 workitem 都配備一個 mutex 有點殺雞用牛刀... 整個 flashgetT 統一控制就夠了。

4. sleep() 的目的是真的要讓 thread 暫停一段指定的時間? 還是只是你調整系統 loading 的手段? 如果是後者，我建議拿掉，用處不大。你很難掌控你下的參數及實際 loading 之間的關係，因為真正 workitem 執行時間是變數，而 sleep 時間是固定的... 真正有需要隔多久才跑一次的需求，就留給 workitem 自行處理就好，workitem 之間的 sleep 就直接給 0 吧，只要讓 OS 知道這時適合作 context switch 就好。

不確定你的程式有沒有嚴格的要求 workitem 的 loop 只能 sleep 多久? 如果沒有，整體看來我比較建議你換個架構，把一堆 workitem 打散混在一起，一起丟給 thread pool，然後一樣用 Mutex / Monitor 等機制來統一控制這些 workitem 的運作。採用 multi-thread / thread pool 的方案不外乎都是為了 &quot;整體&quot; 效能，而不是單一工作的效能。正好我才投了一篇文章，運氣好的話下個月的 runpc 應該會看的到，就是討論自己控制一堆 thread 跟直接採用 thread pool 的效能差異。採用的範例跟你的架構蠻像的，就是一次對幾百張圖檔作縮圖，分別用多個執行緒 (像你一樣自行控制) 及不管它直接丟 threadpool ，讓 threadpool 幫你安排一切的效能差異。除非你特別去針對某套硬體去作效能調校，否則在不同規模的系統上運作時(比如單核PC，或是八核/十六核的server)，程式表現的效能差異會大到你跟本不想自己去控制 threads ...

我比較建議你把程式簡化，直接拆成一堆小的 workitem 丟到 threadpool, 然後自己實作 start / pause / resume / delete 的控制機制。不但簡單，效率也好的多(大部份情況)。如果顧及整個team的成員都不是那麼瞭解 thread pool, 你一樣可以把它封裝在 flashgetT 內，用你原本一模一樣的介面讓其它人使用。


--
請輸入: &quot;海娘娘永遠是對的&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>316</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-07 18:41:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-07 18:41:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝指導!!
我改成ManualResetEvent版了,
http://www.badongo.com/file/10745483

至於自己控制或是pool自管哪個較優,
就期待你的新文章了,
到時候我再效法改良!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>317</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-06 02:22:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-06 02:22:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[替自己打一下廣告 :D
文章已經刊出來了，2008 9月號 RUNPC
http://columns.chicken-house.net/post/RUNPC-2008-09.aspx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>318</wp:comment_id>
			<wp:comment_author><![CDATA[virgilyeh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[virgil_nsk@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-03 12:31:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-03 12:31:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi,您好
為什麼threadpool.clear() func中的停止不改成thread.abort呢
而用join
用abort不是才能達成直接中斷的目地嗎^^&quot;
有錯請更正^^
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>319</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-03 13:55:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-03 13:55:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[join使用上的限制我最近也遇到了...

這篇有類似的討論
http://www.programmer-club.com/pc2020v5/forum/ShowSameTitleN.asp?board_pc2020=netframework&amp;id=991&amp;szKeyword=thread&amp;selectmethod=subject]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>320</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-06 00:23:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-06 00:23:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To virgilyeh:

abort 跟 join 最大的不同就是 abort 真的是 &quot;中斷&quot;，而 join 則是會等到那個 thread 自己停止。如果不想被停掉的 thread 事情只作到一半就被砍掉，用 join 是比較合適的選擇。

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>321</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-09 10:07:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-09 10:07:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[.NET 4.0中提供一个新版的thread pool,
新整合了Task,Continuation,Future;

請參考http://www.infoq.com/cn/news/2009/02/Tasks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>322</wp:comment_id>
			<wp:comment_author><![CDATA[virgilyeh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[virgil_nsk@Hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-12 16:30:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-12 16:30:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嗯嗯
我只是想說怎麼沒有做及時中斷所有job的選項^^&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>323</wp:comment_id>
			<wp:comment_author><![CDATA[Julian]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shikarinfo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-26 11:11:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-26 11:11:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最近使用,net內建的ThreadPool
發現沒辦法符合想產生多個ThreadPool各自設定上限Thread的需求
在同事介紹下看到大大這篇文章，實在太太太完美了
完全命中需求，而且還考慮到執行的效能
也決解一直分不清楚AutoResetEvent和ManualResetEvent的問題
以後一定要常常來這拜讀大大的文章
感謝安德魯大大的教學
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>324</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-01 03:14:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-01 03:14:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝支持 :D

我寫的 thread pool 還沒有很實用，這個主題你可以參考一下 MSDN 的專欄作家: Stephen Toub

http://msdn.microsoft.com/zh-tw/magazine/cc301269.aspx

他在幾年前的某篇專欄也有個簡單的 thread pool, 大概只有我的一半行數就搞定了 @_@
他的文章都不錯，可以參考看看 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>325</wp:comment_id>
			<wp:comment_author><![CDATA[Sairt]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chrissuppra@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-04 18:10:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-04 18:10:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[安大您好
我最近也在寫有關多執行緒的程式
只是我也些問題
如果在一個程式裡面有很多個CallBackFunction
那把CallBackFunction指定給執行緒之後..執行緒進入waitone的狀態
那要怎麼使用SET方法喚醒特定執行緒??
就是說..假設有A,B,C三個CallBackFunction
當三個CallBackFunction各被指定給C,D,E三條執行緒
那這三條執行緒一旦進入WaitOen的狀態之後
要喚醒應賅是用SET方法
那使用SET時,要怎麼去指定要喚醒哪一條執行緒?
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>326</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-06 13:48:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-06 13:48:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看了你的問題，應該這樣處理才對。WaitHandle 是讓多個 thread 去等這個物件 SET，醒來的順序就看定義。
如果你要精確控制到要喚醒那一個 thread, 我想到的只有兩個辦法:

1. 用我上面的例子，全部都叫醒... 每個被叫醒的 thread 要自己 check 看看是不是在叫他? 不是的話繼續睡覺..

2. 每個 thread 各用一個 wait handle (AutoResetEvent) 來管理，你要叫醒那一個，就去 SET 那一個物件就好...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>327</wp:comment_id>
			<wp:comment_author><![CDATA[Sairt]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chrissuppra@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-11 15:20:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-11 15:20:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝安大解答..後來我想通了..
還是把全部工作包進WORKITEM去處理
只是我發現一個問題...
因為我的程式是網路通訊程式
主要是處理Client傳來的封包
只是在第一個封包傳進來時..執行緒不會去處理
要等到第二個封包進來後才會連同第一個一起處理
後來我發現程式這邊的位置..
if (this._workitems.Count &gt; 0 &amp;&amp; this._workerThreads.Count &lt; this._maxWorkerThreadCount) this.CreateThread();
    this._workitems.Enqueue(wi);
    this.enqueueNotify.Set();
第一個工作進來時..wi還沒塞進佇列裡..所以檢查時不會去跑CreateThread()
所以就沒有執行緒在工作..但是因為沒辦法預知第一個封包跟第二個封包會隔多久
所以我把他改成
if (this._workitems.Count &gt; 0 &amp;&amp; this._workerThreads.Count &lt; this._maxWorkerThreadCount) this.CreateThread();
else { wi.Execute(); }
這樣不管佇列裡有沒有工作..都會有執行緒跑進去..不過進去後是直接睡覺就是
等到this.enqueueNotify.Set();之後..執行緒就會自己起來做事
----------------不知道解釋這樣對不對..不過程式跑起來是對的就是@@
還有我發現..如果是設定成ManualResetEvent..
執行緒跑到this.enqueueNotify.WaitOne(this._maxWorkerThreadTimeout, true)
這邊的時候不會停下來
但是如果是AutoResetEvent的話就會
這是什麼原因@@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>328</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-01 15:12:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-01 15:12:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[因為一些問題, &quot;再度&quot;拜讀了您的大作
運用ThreadPool發揮CPU運算能力 這篇
我發現有幾種問題是否不適用於ThreadPool來處理執行緒?
1.工作優先度強烈的工作們
2.時常要中斷工作 -&gt; 更新工作清單的工作
-----------------------分隔一下-----------------------------
以我的問題而言, 我要做的是秀圖程式 (沒有商業價值, 只屬於自己興趣)
而程式內有個重心是要處理buffer ---- 預讀圖的問題
預讀當然是讀取目前圖片附近的N張圖(視buffer設定大小)
預讀成Bitmap後還要依顯示物件的Size預先Resize
{其實跟您&quot;運用ThreadPool發揮CPU運算能力&quot;這篇裡的工作非常相似}

1.而處理的優先順序，當然是越近的(例如下一張)的優先度越高
2.若使用者快速的翻到某頁時，執行緒應該先停止手邊的工作，改讀新的預讀清單

因為我沒有多核心電腦(只有一台有偽多核心HT的Atom230)，無法自行測試，但根據您
&quot;運用ThreadPool發揮CPU運算能力&quot;這篇裡提供的數據，可發現：
雖然運用ThreadPool可以提升整體效能，但平均單張的完成時間卻增加了

目前的作法是不使用ThreadPool，自己管理兩個Thread, 一個專門負責Load, 一個專門負責Resize
之所以要分成這樣是希望把I/O工作(Load)和CPU工作(Resize)拆開
而兩個thread都只從個別的queue取得工作
q_load -&gt; thread_load -&gt; 結果丟入q_resize &amp; 喚醒下個thread_load
q_resize -&gt; thread_resize -&gt; 結果丟入buffer &amp; 喚醒下個thread_resize]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>329</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-02 02:48:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-02 02:48:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[先看一下 thread pool 適合處理的工作型態: thread pool 適合處理 &quot;大量&quot; 的 &quot;小&quot; 工作。因為小，所以為每個工作建立及回收 thread 的成本就相對的高。因為大量，這些額外的消耗會被放大，讓你不得不重視它造成的效能影響。因此這種情況下，運用 thread pool 可以讓你處理這些大量的小工作，卻不必花費大量的 thread 的建立及回收成本。

你提到的這兩種情況，並不是說不可以用 thread pool, 只不過你必需花更多的心思去控制它而已。目前 .NET 內建的 threadpool, 工作丟進去就很難再挖出來取消了，不過 .NET 4.0 內建的 thread pool 則支援了這些功能。



回到你的問題，我的看法是這樣:

0. HT 也能提升多執行緒的效能。不過它的效果不若多核心。大致情況是這樣，兩個 HT 同時執行時，有可能拖慢每個 thread 的速度，不過整體的效能是會有提升的。如果你追求的是單一 AP 執行的效能，幫助不大。

1. 你的作法，跟我另一篇 [生產者/消費者] 講的是同一件事。也跟 2008/11 月號的 RUN!PC 刊登的那篇 [生產線模式] 講的解決方式類似。處理的原則是由多個執行續，分別負責同一個工作的多個部份，而不是常件的一個執行緒負責一個獨立的工作。

http://columns.chicken-house.net/post/e7949fe794a2e88085-vs-e6b688e8b2bbe88085-BlockQueue-e5afa6e4bd9c.aspx

http://columns.chicken-house.net/post/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx

要讓你的應用程式效能最佳化，我建議你先做個測試: load / resize 的速度比大約是多少? 兩者佔用的運算資源分別是? 不大確定你的 load / resize 各別負責什麼，如果 load 只是從檔案 load 到 byte[], 那其實意義不大，除非檔案來援是很慢的 (EX: 網路磁碟機，或是從網站下載)。如果 load 是從檔案 -&gt; Image 物件，那有可能在 decode 時會是個瓶頸，甚至 loading 會比 resize 大，這時兩個 cpu bound 的工作，分成兩個 thread, 用的又是非雙核的 CPU，那能造成的效能提升應該蠻有限的。

這時比較好的策略，反而是妥善控制程式，把有限的運算資源，用在當前最需要的地方。這時多執行緒的目的，反而不在提升效能，而是讓你的程式切換兩種動作時好寫一些而已。一個執行，另一個停止。一個停止，另一個就執行之類的，或是直接調整這兩個 thread (UI / background) 的優先權也行。

現在時間有點晚了，明天想一想再來貼心得... :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>330</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-02 20:30:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-02 20:30:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[那麼晚了還撥空回應我的問題，真是謝謝你
我的Load是包含了image file decodec，所以decodec時會給CPU負荷
但就是這樣，才有寫多執行緒的意義、把工作切開給不同的核心處理
當然非雙核的CPU效能可能不升反降我也明白，但若降幅可以接受，在多核心電腦上擁有更多的潛力何嘗不可?
就是因為想體驗一下多執行緒配合多核心效能的提升，才玩多執行緒的(可憐了我的Atom)
以目前的寫法，使用Atom230 HT測試，雙執行緒(load-&gt;zoom)生產線模式比單一執行緒提升了約20%的速度...不多但也不算少。

不過若說到 (load/resize) 的比例，則會根據使用環境影響，而且算是很巨幅的影響。
從硬體到CPU、硬碟速度，軟體到圖檔類型(影響decodec速度)，甚至連螢幕解析度都會影響(zoom size變化)，所以實在難以一言蔽之。
例如我用單執行緒的程式碼，在解析度設為相同的情況下
電腦1(Atom230)測試，zoom花費的時間約為load的兩倍
電腦2(XP2500)測試，zoom的時間比load還短

當然，自用or客製化是沒問題，但是寫成這樣就不漂亮了？這也是為什麼會想到ThreadPool的原因，它會依環境自行拿捏，很方便。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>331</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-10 01:42:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-10 01:42:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[又拖了好一陣子 :P

我還是建議先測一下你的 job, 瞭解一下你要執行的 job 特性。大部份人都只認為 multi-threading 只有多處理器時才有用，其實不然。電腦執行的過程中，很多資源都是閒置的 (包擴 CPU，MEM，DISK IO，NETWORK IO等等)。同時執行的程式，只要需要的資源不互相衝突，其實都有加速的效果。

典型的情況: 比如要 COPY 一分鐘的檔案，跟要算一分鐘的 super pi, 排在一起執行，差不多也是一分鐘兩者就可以一起執行完畢。如果你能找出你的 job 的特性，再適當的運用執行緒去安排你的工作，就可以有效能的進展。

你的例子還蠻有趣的，要是我的話，我會跟你一樣配置 QUEUE 把安排好的工作丟進去，但是我會用 thread pool 來消化這個 queue 裡的工作。不過這 thread pool 我大概不會用內建的，因為一定會有機會 (像 USER 切換目錄) 把排在 QUEUE 裡的工作，甚至是執行到一半的 JOB 都丟掉重來。內建的 thread pool 要做到這樣有點辛苦... 我會選擇另外實作一個可以簡單清掉 thread pool 裡所有工作的版本來取代。

感覺好像 CPU 裡的 PIPELINE ... :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>332</wp:comment_id>
			<wp:comment_author><![CDATA[果粒橙]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[scottzz999@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-19 13:19:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-19 13:19:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好, 想請問版主大大,
上面文章中程式是用ManualResetEvent,然而是否程式中怎麼都沒看到
enqueueNotify.Reset() 呢? 是否要讓使用者自己判斷決定加入呢?
要是版主大大, 您又會在何處加入Reset()呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>333</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-21 21:55:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-21 21:55:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[果粒橙:

我的作法是，一開始建立 ManualResetEvent 物件時，就會把它狀態設為 nonsignaled... 建構式裡給 false 就等同於一開始就呼叫 Reset().

其它的動作就都配對配好好的，一邊 WaitOne(), 另一邊 Set() ... 不需要額外的 Reset() 動作。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>334</wp:comment_id>
			<wp:comment_author><![CDATA[果粒橙]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[scottzz999@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-22 23:37:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-22 23:37:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝版大回答,
不過或許我是初學者,可能尚不是很懂請見諒.
我還有疑問是像上述有位網友(Sairt)留言:&quot;使用 ManualResetEvent時,程式跑到enqueueNotify.WaitOne並不會停下來而會繼續做事&quot; 我的想法是已經Set過後enqueueNotify不是就都變成signaled,不需要以Reset讓它成為nonsignaled嗎? 這樣子WaitOne才有效果吧! 我的認知對嗎? ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>335</wp:comment_id>
			<wp:comment_author><![CDATA[果粒橙]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[scottzz999@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-23 18:07:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-23 18:07:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[版主大大,承上想再追問一個問題.
若中間沒有Reset( )的話,縱使我 MaxThread = 1 , ThreadPriority.BelowNormal
丟進去QueueUserWorkItem中Run起來CPU都是跑100%呢?請問大家有遇過此問題嗎?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>336</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-30 19:28:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-30 19:28:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[果粒橙:

兩個留言一次回覆 :P

你講的沒錯，ManualResetEvent 呼叫 Set() 之後，的確是要靠 Reset() 再讓它的 WaitOne() 發生作用。少掉 Reset() 的話，這 thread pool 就變成一直在 pooling ... 看來我的程式真的漏掉這動作了 :P

謝謝提醒 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>337</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-28 10:37:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-28 10:37:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[關於上面討論到 ManualResetEvent的Set()、Reset()、WaitOne()的關係，我最近也遇到了。
很有趣的是，如果WaitOne()裡面Timeout參數有設定&gt;0的話，則執行緒會停下來直到其他執行緒呼叫Set()或Timeout指定的時間經過。

但若只是想閒置執行緒直到被喚醒，而不用Timeout或設為-1(Timeout.Infinite)，則會依ManualResetEvent的狀態繼續：若ManualResetEvent曾被Set()且未Reset()，則執行緒完全不會被停止......AutoResetEvent則不會有這個問題。
因為是Manual，得手動Reset？

我目前使用兩種方法來解決這個問題：
1.由於主要需要喚醒工作執行緒的位置在Add Work的地方，故在Add Work內的Set()後緊接著Reset()。但這樣會有一個問題：應該在Set()被喚醒的執行緒有時就這樣Reset()醒不來了......
可能會在Set()與Reset()之間，多加一個Thread.Sleep(1)，再觀察一下會不會出狀況。
2.在Worker Thread找不到工作、睡前WaitOne()之前呼叫Reset()，但由於這個區塊並沒有lock，還是有可能(雖然很小)與主執行緒Add Work的Set()發生Race condition，如下：
工作執行緒 Reset() -&gt; 主執行緒Add Work/Set() -&gt; 工作執行緒 WaitOne()，然後停不下來...
不過接下來工作執行緒因為迴圈會再度 Reset()+WaitOne()，問題應該不大？

如果是版大，會用什麼處理方法呢？
順便請教一下，WaitOne()的第二個參數到底有什麼用？原本以為可以用它暫時跳出lock區塊，但實際上還是會deadlock...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>338</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-28 14:54:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-28 14:54:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[發表一下測試的感想，用比喻的描述一下，人就是執行緒：

ManualResetEvent: 
就像木門或鐵捲門，當有人打開[.Set()]後，在被關閉[.Reset()]之前，所有人不管先來後到[.WaitOne()]都能通過而不等待。

AutoResetEvent: 
就像火車或捷運的收票口，打開[.Set()]一次只能通過一人次，下一人次必須等再度開啟。
但也可以打開後，在還沒有人通過之前就先關閉[.Reset()]，例如抓到通緝犯...XD
簡單的說，就是有人通過後會自動關閉[.Reset()]，這樣名稱AutoReset就很好理解了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>339</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-04 14:30:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-04 14:30:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Litfal,

太晚回覆了，看來你已經找到答案了 :D

沒錯，&quot;Auto&quot; 跟 &quot;Manual&quot; 的差別，就是一個人呼叫過 Set 後，會不會自動 Reset. 不同情況可以挑選不同的類別來使用 :D

因為兩者的特性不同，所以 Auto 也有隱函著 queue 的實作在裡面，十個人都在 waitone( ) 時，它會依照先後順序來喚醒， Manual 則是瞬間全喚醒，然後再照程式原本的邏輯及同步機制，看誰會搶到工作。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>340</wp:comment_id>
			<wp:comment_author><![CDATA[Float Ye ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aaa@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-18 14:56:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-18 14:56:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小弟在實作這個範例後發現，在 &quot; 完整的 SimpleThreadPool.cs 原始碼&quot; 

 53:              this.enqueueNotify.Set();

需要再加入  &quot;this.enqueueNotify.Reset();&quot; ，如此Thread 才會在

112:                  if (this.enqueueNotify.WaitOne(this._maxWorkerThreadTimeout, true) == true) continue;

這個地方判定Time Out 後自動結束。

查詢MSDN後發現，是由於 AutoResetEvent 會自動回到未收到信號的狀態，而使用 ManualResetEvent ，則必須要再呼叫Reset方法後，才會回到未收到信號的狀態。

以上有錯誤請指證 ~ ^^&quot; 
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>341</wp:comment_id>
			<wp:comment_author><![CDATA[Ming]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[joumingt@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-18 09:13:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-18 09:13:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[寫得很棒唷！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>342</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[babyjoe1120@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-03-29 13:57:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-03-29 13:57:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear 版主:
                            我想請問一下,ManualResetEvent(false)中的false他會影響到什麼東西,相同的程式碼,我設為true跟false有何差異。
　　　　　　　　　　　　　　　　　　　　　　　感謝回答
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ThreadPool 實作 #2. 程式碼 (C#)</title>
		<link>http://columns.chicken-house.net/2007/12/17/threadpool-%e5%af%a6%e4%bd%9c-2-%e7%a8%8b%e5%bc%8f%e7%a2%bc-c/</link>
		<pubDate>Mon, 17 Dec 2007 02:12:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/17/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
既然上一篇都把 pseudo code 寫出來了, 現在就可以開始來寫真正的 Thread Pool 了. 開始之前, 我先把目標定一下. 這次寫的 Thread Pool 必需俱備這些能力:
</p>
<ol>
	<li>要能由使用者控制 thread pool 的組態:<br />
	- worker thread 數量上限<br />
	- worker thread 優先權<br />
	- thread idle timeout 時間 (超過 idle timeout, 代表 thread 是宂員, 可以下台了)<br />
	- job queue 安全範圍 (超過代表需要找幫手 - 建立新的 worker thread) </li>
	<li>thread pool 在 job queue 超過安全範圍時, 要能動態建立新的 thread 來消化 queue 裡的工作 </li>
	<li>worker thread 在 idle 時間超過 idle timeout 時, 則這個 worker thread 就要被回收 </li>
	<li>簡單的同步機制, 要能等待 thread pool 處理完所有的 job. </li>
	<li>如果有多個 worker thread 要搶同一個 job 來執行, 要由 OS 決定, 不要由 thread pool 自己決定</li>
</ol>
<p>
每次在寫這些描述, 都會覺的怎麼寫起來比 code 還多... @_@, 沒錯, code 短到我可以直接貼上來, 不需要附檔案.. 我會把完整的 code 貼在最下方. 其它說明的部份只會貼片段.
</p>
<p>
首先, 先來決定 SimpleThreadPool 的 class define 為何. 依照需求及我希望它用起來的樣子, 為:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> SimpleThreadPool : IDisposable
</pre>
<pre>
<span class="lnum">   2:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>        <span class="kwrd">public</span> SimpleThreadPool(<span class="kwrd">int</span> threads, ThreadPriority priority)
</pre>
<pre>
<span class="lnum">   4:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        }
</pre>
<pre>
<span class="lnum">   6:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> QueueUserWorkItem(WaitCallback callback)
</pre>
<pre>
<span class="lnum">   8:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        }
</pre>
<pre>
<span class="lnum">  10:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> QueueUserWorkItem(WaitCallback callback, <span class="kwrd">object</span> state)
</pre>
<pre>
<span class="lnum">  12:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        }
</pre>
<pre>
<span class="lnum">  14:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> EndPool()
</pre>
<pre>
<span class="lnum">  16:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        }
</pre>
<pre>
<span class="lnum">  18:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> CancelPool()
</pre>
<pre>
<span class="lnum">  20:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        }
</pre>
<pre>
<span class="lnum">  22:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> EndPool(<span class="kwrd">bool</span> cancelQueueItem)
</pre>
<pre>
<span class="lnum">  24:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>        }
</pre>
<pre>
<span class="lnum">  26:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>        <span class="kwrd">private</span> <span class="kwrd">void</span> DoWorkerThread()
</pre>
<pre>
<span class="lnum">  28:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        }
</pre>
<pre>
<span class="lnum">  30:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose()
</pre>
<pre>
<span class="lnum">  32:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>            <span class="kwrd">this</span>.EndPool(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">  34:  </span>        }
</pre>
</div>
<p>
這個 ThreadPool 我希望它用起來像這樣, 貼一段理想中的用法 sample code:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>            SimpleThreadPool stp = <span class="kwrd">new</span> SimpleThreadPool(2, System.Threading.ThreadPriority.BelowNormal);
</pre>
<pre>
<span class="lnum">   2:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>            <span class="kwrd">for</span> (<span class="kwrd">int</span> count = 0; count &lt; 25; count++)
</pre>
<pre>
<span class="lnum">   4:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>                stp.QueueUserWorkItem(
</pre>
<pre>
<span class="lnum">   6:  </span>                    <span class="kwrd">new</span> WaitCallback(ShowMessage),
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>                    <span class="kwrd">string</span>.Format(<span class="str">&quot;STP1[{0}]&quot;</span>, count));
</pre>
<pre>
<span class="lnum">   8:  </span>                Thread.Sleep(<span class="kwrd">new</span> Random().Next(500));
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            }
</pre>
<pre>
<span class="lnum">  10:  </span>            Console.WriteLine(<span class="str">&quot;wait stop&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            stp.EndPool();
</pre>
</div>
把 ThreadPool 想像成一個服務櫃台, 很多人排隊等著處理. 因此整個實作會像是個工作的佇列 (job queue), 只要把你的工作放到 queue 裡 (排隊), 而服務人員 (worker thread) 就會一個一個的處理. 最後你可以決定要把所有工作做完才收攤 (呼叫 EndPool( ), 會 blocked 直到工作清光), 或是決定掛牌 &quot;明日請早&quot; (呼叫 CancelPool( )), 只把作到一半的工作處理掉, 剩下還在排隊的改天再來. 
<p>
整個實作的關鍵部份是在 private void DoWorkerThread(), 裡面寫的 code 就是每一個 worker thread 要執行的所有內容. 補上實作的 code:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">private</span> <span class="kwrd">void</span> DoWorkerThread()
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    {
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="kwrd">while</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        {
</pre>
<pre>
<span class="lnum">   8:  </span>            WorkItem item = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            <span class="kwrd">lock</span> (<span class="kwrd">this</span>._workitems)
</pre>
<pre>
<span class="lnum">  10:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>                <span class="kwrd">if</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0) item = <span class="kwrd">this</span>._workitems.Dequeue();
</pre>
<pre>
<span class="lnum">  12:  </span>            }
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>            <span class="kwrd">if</span> (item == <span class="kwrd">null</span>) <span class="kwrd">continue</span>;
</pre>
<pre>
<span class="lnum">  14:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>            <span class="kwrd">try</span>
</pre>
<pre>
<span class="lnum">  16:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>                item.Execute();
</pre>
<pre>
<span class="lnum">  18:  </span>            }
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>            <span class="kwrd">catch</span> (Exception)
</pre>
<pre>
<span class="lnum">  20:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>                <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  22:  </span>                <span class="rem">//  ToDo: exception handler</span>
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>                <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  24:  </span>            }
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  26:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>._cancel_flag == <span class="kwrd">true</span>) <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>        }
</pre>
<pre>
<span class="lnum">  28:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        <span class="kwrd">if</span> (<span class="kwrd">this</span>._stop_flag == <span class="kwrd">true</span> || <span class="kwrd">this</span>._cancel_flag == <span class="kwrd">true</span>) <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  30:  </span>        <span class="kwrd">if</span> (<span class="kwrd">this</span>.enqueueNotify.WaitOne(<span class="kwrd">this</span>._maxWorkerThreadTimeout, <span class="kwrd">true</span>) == <span class="kwrd">true</span>) <span class="kwrd">continue</span>;
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>        <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  32:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  34:  </span>    <span class="kwrd">this</span>._workerThreads.Remove(Thread.CurrentThread);
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>}
</pre>
</div>
<p>
每個 worker thread 就只作很簡單的一件事, 就是進入無窮迴圈, 只要開始上班就不段的接工作來處理, 一直到下班為止. 整個最外層的 while loop 就是指這部份. 離開 loop 後就代表這個 worker thread 該下班了.
</p>
<p>
迴圈內也很簡單, 上工的第一件事就是看 job queue 裡有沒有工作要做? 有就 dequeue 一個來處理, 一直重複到 job queue 空了為止, 或是直到老闆下令關店 (_cancel_flag 為 true).
</p>
<p>
無論是要關店或是工作做完了, 流程會跳離 line 6 ~ 27 這個 while loop. 後序的關鍵在 line 30:
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">if</span> (<span class="kwrd">this</span>.enqueueNotify.WaitOne(<span class="kwrd">this</span>._maxWorkerThreadTimeout, <span class="kwrd">true</span>) == <span class="kwrd">true</span>) <span class="kwrd">continue</span>;
</pre>
</div>
<p>
呼叫 WaitHandle 的 WaitOne( ) method, 會讓 worker thread 進入 blocked 狀態. 直到被叫醒為止 (叫醒它的 code 寫在 add queue 裡), 或是 idle timeout 時間到了. .NET API WaitHandle.WaitOne( ) 提供 option 指定 timeout 時間, 至於是被叫醒的 or 時間到了自己醒來, 就靠 return value 來判定. 以這段 code 來看, 被叫醒 (return true) 代表有新工作進來, 就執行 continue 指令, 繼續到 job queue 拿新的工作繼續努力, 如果是睡太飽自己醒的, 就執行 break, 準被收拾東西下班去...
</p>
<p>
整個 worker thread 的生命周期就是靠這段 code 來運作. 接下來看一下如何把 job 加進來:
</p>
<div class="csharpcode">
<pre class="alt">
&nbsp;
</pre>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">private</span> List&lt;Thread&gt; _workerThreads = <span class="kwrd">new</span> List&lt;Thread&gt;();
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">private</span> Queue&lt;WorkItem&gt; _workitems = <span class="kwrd">new</span> Queue&lt;WorkItem&gt;();
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">private</span> ManualResetEvent enqueueNotify = <span class="kwrd">new</span> ManualResetEvent(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">   4:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">public</span> <span class="kwrd">bool</span> QueueUserWorkItem(WaitCallback callback, <span class="kwrd">object</span> state)
</pre>
<pre>
<span class="lnum">   6:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">if</span> (<span class="kwrd">this</span>._stop_flag == <span class="kwrd">true</span>) <span class="kwrd">return</span> <span class="kwrd">false</span>;
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    WorkItem wi = <span class="kwrd">new</span> WorkItem();
</pre>
<pre>
<span class="lnum">  10:  </span>    wi.callback = callback;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    wi.state = state;
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="kwrd">if</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0 &amp;&amp; <span class="kwrd">this</span>._workerThreads.Count &lt; <span class="kwrd">this</span>._maxWorkerThreadCount) <span class="kwrd">this</span>.CreateWorkerThread();
</pre>
<pre>
<span class="lnum">  14:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    <span class="kwrd">this</span>._workitems.Enqueue(wi);
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="kwrd">this</span>.enqueueNotify.Set();
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="kwrd">return</span> <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>}
</pre>
</div>
<pre class="alt">
&nbsp;
</pre>
<pre class="alt">
扣掉一大半準備 WorkItem 的 code 之外, 剩下的就是把 workitem 加到 queue 裡了. 兩個關鍵的地方是:
</pre>
</div>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">if</span> (<span class="kwrd">this</span>._workitems.Count &gt; 0 &amp;&amp; <span class="kwrd">this</span>._workerThreads.Count &lt; <span class="kwrd">this</span>._maxWorkerThreadCount) <span class="kwrd">this</span>.CreateWorkerThread();
</pre>
</div>
<p>
如果 job queue 堆的工作超過 0 個, 而總共的 worker thread 數量還沒超過上限, 就呼叫 CreateWorkerThread( ) 再叫一個 worker thread 來幫忙.
</p>
<p>
line 14 把 work item 加到 queue 之後, line 15 就緊接著呼叫 WaitHandle.Set( ), 通知所有正卡在 WaitOne( ) 睡覺中的 worker thread 該醒來工作了. 其實到這裡, thread pool 主要結構都說明完了, 剩下的都是細部實作, 比如如何封裝 job 的物件, 如何得知共有幾個 worker thread 等等, 這些直接看 code 比較快我就不多說明了. 搭配前一篇, 提到有各種 synchrinization 機制可以使用, 這裡我用的是 ManualResetEvent, 為什麼要挑這個? 先弄清楚觀念上的問題: 假設有五個 worker thread 都睡著等待新的工作進來, 這時只有一個新的工作進來, 到底是誰該醒來作事? 是由誰決定?
</p>
<p>
說明起來又是一大篇了... 改寫第三篇再繼續吧!
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2007-12-17 02:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-17 02:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[threadpool-%e5%af%a6%e4%bd%9c-2-%e7%a8%8b%e5%bc%8f%e7%a2%bc-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>ThreadPool 實作 #1. 基本概念</title>
		<link>http://columns.chicken-house.net/2007/12/14/threadpool-%e5%af%a6%e4%bd%9c-1-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5/</link>
		<pubDate>Fri, 14 Dec 2007 02:35:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/14/ThreadPool-e5afa6e4bd9c-1-e59fbae69cace6a682e5bfb5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[既然都花了力氣回憶起過去學的 ThreadPool Implementation, 而且都用 C# 寫好了, 不如就整理一下好了. 其實寫起來 code 真的都不難, 難的是人腦天生就不適合思考這種 multithreading 的東西, 想多了腦筋真的會打結. 另外一個障礙是有些東西要唸過 Operation System 才會懂, 沒這基礎的話, 光看 API 說明會一個頭兩個大...

這篇還不會貼完整的 code, 先把必要的基礎及認知說明一下. ThreadPool 的概念其實很簡單, 這 design pattern 目的是把過去的 multi-threading programming model 簡化, 把複雜的 threads control 拆到 thread pool implementation 裡封裝起來, 使用它的人只要把你的 job 封裝成一個 job object, 丟到 pool 裡面代為執行就可以了. 然後裡面就套用 "生產者 / 消費者" 的模式, User 不斷的生出 job 給 thread pool, 而 thread pool 不斷的消化掉 (執行 job) 它. 實作這些東西要面臨到的課題, 有這幾項:
<ol>
	<li>基本的 thread sync 機制</li>
	<li>thread pool 內部的 thread 管理, thread 動態建立 / 回收機制</li>
	<li>封裝 job, job queue</li>
</ol>
先從最抽像的 (1) 來說好了. 這是過去作業系統 (OS) 這門課, 特地花了一整章來說明的課題. 當年第一次碰到用 java 實作 thread pool 時, 我還特地把課本挖出來再看一次... @_@, 不過搬了兩次家, 課本也不曉得塞到那去了, 哈... 印像中記得裡面有 OS 管理下的 process 生命周期 state machine:

圖來自: <a title="http://en.wikipedia.org/wiki/Process_states" href="http://en.wikipedia.org/wiki/Process_states">http://en.wikipedia.org/wiki/Process_states</a>

<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Process_states.svg/600px-Process_states.svg.png" alt="Image:Process states.svg" width="600" height="600" border="0" />

中間三個狀態是主要的部份, running 當然就是指執行中, 而要等待別人喚醒則是進入 blocked 狀態, block 狀態時是不會被 OS 分配到任何 cpu time slice 的. 等到被喚醒後, 並不是直接跳到 running, 而是跳至 waiting, 等待 OS 把下一段 cpu time slice 分給這個 thread 時, 它就會再度進到 running 狀態.

所謂的 synchronization, 就是指在 multi-threading 環境下, 每個 thread 各跑各的, 完全不管其它 thread 在作什麼. 但是在某些特殊情況下, 是要 threads 之間互相調整腳步的. 舉例來說, FlashGet 大家都用過吧? 它一次開好幾個 thread 下載同個檔案的不同部份. 那些情況需要 synchrinization ? 舉個 use case:
<blockquote><strong><em>下載到一半想停掉, UI thread 接受了 user 的指令 (按按鈕), 每個 thread 必需適當的中止目前的動作及存檔. UI thread 必需 "等待" 每個 thread 完成後才能回報 user 停止的指令已經完成.</em></strong></blockquote>
在 Multi-threading 的環境下, 千萬不要再去用老掉牙的同步方式 (啥? 就是用 global variable, 然後用 loop 一直去檢查), 正規的用法就是用 OS 提供的 synchronization 機制, 一邊 wait, 另一邊去叫醒它. 對照上面的圖來說, 也就是讓 thread 進到 blocked 狀態. 在 Java 裡就是 Thread 的 Notify 相關 method, 在 .NET 則是包裝成 WaitHandle 物件. 以這種最基本的 wait / notify, 在 .NET 可以用 ManualResetEvent 來達成. 簡單的寫兩段 code, 用起來像這樣:

&nbsp;
<div class="csharpcode">
<pre class="lang:default decode:true">// thread 1: 等著被喚醒
wait_handle.WaitOne( );
 
// thread 2: 喚醒 thread 1
wait_handle.Set( );</pre>
更複雜的例子, 可以用其它不同型態的 WaitHandle 來達成. 在 .NET 是把所有這種用於同步機制的物件都抽像化成 System.Threading.WaitHandle, 它是 abstract class, 你要找一個合適的衍生類別來用. 這些機制原則上一定要靠 OS 的 API 才能提供, 請別異想天開自己搞一個...  列幾個常用的:

</div>
<ul>
	<li>AutoResetEvent: 叫醒單一個 wait thread</li>
	<li>ManualResetEvent: 叫醒多個 wait thread(s)</li>
	<li>Semaphore (旗標): 只允許有限數量的 thread 執行某段程式.
再舉 FlashGet 的例子, 如果某個網站只限最多 3 threads download, 就可以用 Sempahore.</li>
</ul>
其它還有一些, Mutex, Monitor, SpinLock... 就不一一說明了, 直接去翻 OS 課本.. [H]

為什麼花這麼多篇幅講這個? 因為這短短一兩行的 code, 可是控制 thread pool 運作的重要關鍵. Thread Pool 需要一個 Queue 來存放待處理的工作. ThreadPool 同時也要 "養" 數個 threads 來處理掉 Queue 裡面的工作. 正常情況下每個 thread 忙完後就到 Queue 再拿一個工作出來, 如果 Queue 空了, thread 就可以休息 (blocked). 如果 Queue 有新工作進來, 這些睡著 (blocked) 的 thread 就應該要醒來繼續處理堆在 queue 裡的工作.

這是 Thread Pool 的基本型, 通常會用 thread pool 有幾個理由:
<ol>
	<li>要處理的工作數量很多. 不可能用最古董的作法: 每個工作建一個 thread, 做完就丟掉...  (因為 thread create / delete, OS 是要花成本的, 同時 thread 太多也會造成效能及回應時間下降)</li>
	<li>工作是不斷的持續的產生, 需要有 thread 事先在那邊等著接工作來做, 降低回應時間.</li>
	<li>工作的性質適合以有限的 thread 來處理時</li>
</ol>
最典型的例子就是 ASP.NET. ASP.NET Hosting 會養一堆 thread, 來服務前方 IIS 送來的一堆 request. 即使 CPU 只有一顆, 多個 thread 也可以有降低回應時間的好處. 記得照 MSDN 的建議, 一個 CPU 建議值是開 25 threads 的樣子... 因此會有一些變型, 以求效能更好一點. 通常 thread 的建立 / 回收, 很花時間. 養一堆 thread 也很花資源. 因此考量的重點都放在怎樣才不會重複建立/回收 thread, 怎樣才不會養太多不工作的 thread ... 歸納一下:
<ol>
	<li>現有 threads 不夠 (或未達上限), 而還有工作還卡在 Queue 裡沒人處理, 就建立新的 thread 加進來幫忙.</li>
	<li>如果工作都做完了, 多餘的 thread 就可以讓它發呆. 發呆太久的 "宂員" 就可以把它 fired 了... 判定的依據一般都用 idle timeout. 當然也有不同的策略, 那就不管了.</li>
</ol>
看起來很囉唆, 其實想通之後, 就像 recursive 一樣, 寫起來很簡潔, 多寫兩行都會覺的累贅... 我把流程用假的 code 整理一下:

每個 thread 運作的 body 就像這樣:

<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="lang:default decode:true">  while (true)
  {
      //
      //  從 queue 裡找 job 來做, 直到做完為止.
      //
   
      //
      //  idle.
      //
      if (超過IDLE時間 == true) break;
  }</pre>
&nbsp;

</div>
&nbsp;

另外, 就是把 Job 加到 Queue 裡的動作要像這樣:

&nbsp;

<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="lang:default decode:true ">  //
  //  把 Job 加到 Queue
  //
   
  if (Job太多)
  {
      //
      //  多建立一些 thread 來幫忙
      //
  }
   
  if (有Idle的thread)
  {
      //
      //  叫醒 thread 來工作
      //
  }</pre>
&nbsp;

</div>
&nbsp;

上面兩段 code 關鍵就在如何讓 thread idle ? 如何判定 idle 超過某段時間? 另外就是如何叫醒 idle 的 thread? 答案其實就是用上面講的 synchronization 的機制來做. 這些 code 搞定後, 包裝在一起, thread pool 其實就完成了. 很簡單吧? 哈哈... 實際的 code 等下篇再說... 正好寫第二篇的時間, 就讓大家想一想到底該怎麼寫... [H], 敬請期待下集!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2007-12-14 02:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-14 02:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[threadpool-%e5%af%a6%e4%bd%9c-1-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>343</wp:comment_id>
			<wp:comment_author><![CDATA[Wade]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[peecome.tw@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-12-18 16:12:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-12-18 16:12:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很喜歡你的教學文!
讓我的觀念更加清楚!! :)

謝謝喔!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>平行處理的技術演進</title>
		<link>http://columns.chicken-house.net/2007/12/12/%e5%b9%b3%e8%a1%8c%e8%99%95%e7%90%86%e7%9a%84%e6%8a%80%e8%a1%93%e6%bc%94%e9%80%b2/</link>
		<pubDate>Wed, 12 Dec 2007 11:17:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/12/e5b9b3e8a18ce89995e79086e79a84e68a80e8a193e6bc94e980b2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
現在 CPU 廠商大打 &quot;多核心&quot; 的口號, 讓大家都知道多核心的好處了, 不過每個評論的人也都會補上一句, &quot;要有專為多核心設計的軟體才能發恢效能&quot;. 到底什麼叫作專為多核設計的軟體? 
</p>
<p>
簡單的說, 就是程式不能再以單一流程來思考, 必需引用平行處理的概念. 就像工作分派一樣, 有十個人幫你做事, 一定比一個人好. 不過這也是考驗你分派及管理的能力. 做的不好, 可能工作還是都只有一個人在做, 另外九個在偷懶, 更糟的是還造成溝通的問題, 比只有一個人還糟. 
</p>
<p>
在程式設計的領域裡, 實現平行處理, 它的困難有幾個: 
</p>
<ol>
	<li>並行的流程控制 </li>
	<li>多個程序之間的資料交換 </li>
	<li>Critial Section 問題 (某些絕對不能同時執行的程式片段) </li>
	<li>資料 Lock 及 Racing condition 的問題</li>
</ol>
<p>
早期的 Unix 提供的 fork( ) 就是個典型的例子, 呼叫後有兩份一模一樣的程式一起執行, 你要自己想辦法分出誰是誰, 然後讓它們各自執行. 兩個程式怎麼溝通? 只能靠 IPC (Inter-Process Communication), 方式不外呼開 socket 或是 share memory, 互相等待要靠 signal( )... 總之你大概會有 80% 以上的精力是在解決這些問題, 不是在解決你要處理的問題. 
</p>
<p>
後來較新的 OS 紛紛引入了 thread 的關念, 解決了部份 IPC 問題, 其它的還是一樣困難. 直到 Java 出來, 寫 multi-threading 程式就簡單多了. 到了 .net 3.5, 又更進一步, 就是我這篇要講的主題. 
</p>
<p>
在 MSDN Magazine 看到一篇文章, 覺的還不錯, 就貼上來跟大家分享一下心得. 原文在此:<br />
為多重核心電腦最佳化 Managed 程式碼<br />
<a href="http://msdn.microsoft.com/msdnmag/issues/07/10/Futures/default.aspx?loc=zx">http://msdn.microsoft.com/msdnmag/issues/07/10/Futures/default.aspx?loc=zx</a> 
</p>
<p>
細節我就不多討論了, 那篇文章裡面都說明的非常清楚, 很棒的一篇文章. 主要的重點是, 即使用了 Java / .NET 這樣的開發環境, 你仍然要面對許多 threading 的問題, 像是 thread 如何開始, 如何結束, 這個 thread 如何去通知另一個 thread 完成的問題. 但是大部份的情況下, 我只不過是有一堆工作, 想要丟給電腦處理, 最好就是所有可用 CPU 通通叫來幫忙... 
</p>
<p>
這篇文章介紹的 TPL ( Task Parallel Library ) 很巧妙的利用 delegate, 把整套 Library 包裝的像一個 for loop 一樣簡單. 基本的觀念就是, 只要用它提供的類似 for loop 寫法改寫你的程式, 原本 loop 裡要執行 100 次的工作, 現在就會自動的分配到你所有的 CPU 一同執行. 聽起來很酷, 真的用起來也是如此. 我簡單貼一下內文兩段 sample code: <br />
<!-- code formatted by http://manoli.net/csharpformat/ -->
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// 一般的迴圈</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; 10; i++) {
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    a[ i ] = a[ i ] * a[ i ];
</pre>
<pre>
<span class="lnum">   4:  </span>}
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span><span class="rem">// 改用 TPL 的迴圈</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>Parallel.For(0, 100, <span class="kwrd">delegate</span>(<span class="kwrd">int</span> i) {
</pre>
<pre>
<span class="lnum">   8:  </span>    a[ i ] = a[ i ] * a[ i ];
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>});
</pre>
</div>
<p>
上面兩段 code 做的事情都一樣, 就是把陣列 a 的內容, 每一筆都算平方, 再寫回來. 差別在於第一段程式會在同一個 thread 裡依序完成每一筆計算, 而第二個例子則利用 anonymous delegate, 讓 code 看起來像迴圈, 實際上每圈都是執行一次 delegate. 而這個 delegate 會自動透過 task manager 分配到合適的 thread 執行. 它跟 thread pool 有許多不同, 文章內有一些說明... 如此一來就能享用的到多核心 CPU 的好處, 你的每一個核心都會被充份的利用. 
</p>
<p>
其實這樣的作法, 並不是 Microsoft 或是 .NET 特有的創新, 早在更重視效能的 C/C++ 就有了. Intel 就大力的支持了這個 open source project: <a href="http://threadingbuildingblocks.org/">http://threadingbuildingblocks.org/</a> 裡面提供了大量的 C++ template, 也是用類似的方式替 C++ 加入了平行處理的支援. 
</p>
<p>
ZD Net 上面有一系列的 video (<a href="http://www.zdnet.com.tw/white_board/intel/video-8.htm">http://www.zdnet.com.tw/white_board/intel/video-8.htm</a>), 講的相當不錯, 我很認同裡面的幾個觀念, 主講人 James Reinders 提到, 平行處理你第一個應該要想到的是函式庫, 或是編譯器等等, 讓你的程式不自覺就能自動享用到平行處理的好處, 第二是用這類 library, 針對各種的 loop 去調整, 讓他能適用平行處理, 最後也是最不建議的作法, 才是大家常聽到的 multi-threading. 原因很簡單, threading 必需是你設計軟體架構就考慮進去的東西, 相對之下開發不易, 效能也不見得比較好, 更糟的是你可能會設計用 4 threads 來處理問題, 結果就是你的程式在超過四核的系統上就沒有明顯的效能增強了. 
</p>
<p>
昨天晚上仔細的看完這幾篇文章, 果然科技的進步真是神速啊, 過去寫到翻掉的 Multi-Process 程式, 如今一個 For Loop 就解決掉, 沒走過這一段的人應該不能體會吧. 不過也因為這樣, 更能體會這些技術的價值在那裡. TPL 真的是個好東西, 強力推薦大家學一學!! 
</p>
<p>
-- 
</p>
<p>
文中題到的 TPL 已經有 Tech Preview 可以下載了. 感謝 Unicorn 提供資訊.<br />
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=e848dc1d-5be3-4941-8705-024bc7f180ba&amp;DisplayLang=en">http://www.microsoft.com/downloads/details.aspx?FamilyID=e848dc1d-5be3-4941-8705-024bc7f180ba&amp;DisplayLang=en</a> 
</p>
<p>
--
</p>
<p>
這篇是寫了貼在別的地方, 當然自己的 blog 也要貼一份... [H]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2007-12-12 11:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-12 11:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b9%b3%e8%a1%8c%e8%99%95%e7%90%86%e7%9a%84%e6%8a%80%e8%a1%93%e6%bc%94%e9%80%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>Canon Raw Codec + WPF #2, ThreadPool</title>
		<link>http://columns.chicken-house.net/2007/12/11/canon-raw-codec-wpf-2-threadpool/</link>
		<pubDate>Tue, 11 Dec 2007 21:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/11/Canon-Raw-Codec-2b-WPF-22c-ThreadPool.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
效能問題, 就跟我自己寫的小工具一起講好了. 話說之前 Microsoft 提供了一個很讚的小工具: <a href="http://download.microsoft.com/download/whistler/Install/2/WXP/EN-US/ImageResizerPowertoySetup.exe">Resize Pictures Power Toys</a>, 功能超簡單, 大概就是檔案總管把圖檔選一選, 按右鍵選 &quot;Resize pictures&quot; 就好了: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2Metadata_2E96/image_3.png" border="0" alt="image" width="543" height="318" /> 
</p>
<p>
選了之後就有簡單的對話視窗: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2Metadata_2E96/image_9.png" border="0" alt="image" width="440" height="312" /> 
</p>
<p>
很簡單吧, 我個人非常愛用, 而且轉出來的效果也不差, 看起來 JPEG quality 大約有 80% ~ 90% 吧... 無耐 windows xp 裡有幾個跟 image 相關的 power toys, 到了 vista 通通不能用. 看來應該都是碰到 GDI+ 要轉換到 WPF 的陣痛期吧, 這幾個小工具還真是讓我繼續撐在 XP 的主要理由之一... 
</p>
<p>
扯遠了, 所以我的目標就是寫個類似的小工具, 讓我簡單的做批次縮圖就好. 有了上一篇的基礎, 要寫這種 tools 實在是沒什麼挑戰, 大概會寫 winform 的拉兩下就可以收工了... 
</p>
<p>
&nbsp;
</p>
<p>
不過, 大話說太早. 先貼一下成品的畫面, 後面說明比較清楚: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2Metadata_2E96/image_12.png" border="0" alt="image" width="517" height="189" /> 
</p>
<p>
要做的東西很簡單. 選好一堆圖按右鍵選 resize pictures 後就跳這畫面, 按 Resize 就開始跑. 用的是前一篇弄好的 library. 結果碰到的障礙還不少. 雖然可以跑, 但是看了就很礙眼... 
</p>
<ol>
	<li>效能有點糟.<br />
	比較好的架構一定會有額外的效能折損, 我倒可接受. 內建的 JPEG codec 還好, 比不上像 Google Picasa 那樣快速. 但是 canon raw codec 就慘不忍睹... 如果把 raw 轉成同大小的 jpg (4000x3000 pixel), 足足要 60 ~ 80 sec ... </li>
	<li>沒針對多處理器最佳化<br />
	簡單的說, 以我的雙核 CPU (Core2Duo E6300), 跑起來 CPU 利用率只有 5x% 而以. </li>
	<li>ThreadPool 也無法解決問題<br />
	因為 (2), 就很直覺的聯想到, 我一次轉兩張, 同樣時間內可以完成兩張的轉檔, 單位時間的運算量還是有提升, 雖然每一張還是要花那麼久... 不過我錯了, 看來是 canon codec 的限制, 開 thread pool 跑下去, 一樣是卡在 60% cpu 使用率左右... </li>
	<li>UI thread 問題<br />
	thread pool 也不完全沒有作用. jpeg encode / decode 的部份是可以充份利用到 thread pool 的好處的, 只是 canon raw decode 的部份用不到. 當部份時間是 canon raw decode + jpeg encode / decode 時, 剩餘的 CPU 運算能力還是吃的到. 但是 thread pool 無法控制 priority, pool 裡的 thread 就嚴重的影響到 UI thread 的作業. 常看到的現像就是進度列一直在跑, 不過預覽圖片的控制項卻一直跑不出來</li>
</ol>
<p>
&nbsp;
</p>
<p>
(1) 的問題其實沒這麼嚴重. Microsoft HD Photo 有一個 feature, 就是大檔放在網路上, 你也能夠很快的透過網路看到小圖. 有點類似早期漸進式的 jpeg 那樣. 不過看起來 codec 的設計更好一點. 實驗的結果是, Full Size .CR2 (4000x3000) 存成同大小的 JPEG 檔需要 60sec, 而存成 800x600 只要 5 sec. 但是拿對照組 .JPG (4000x3000) -&gt; .JPG (800x600), 差距又沒這麼大. 因此推測起來, 應該在 decode 階段就已經針對這樣的需求設計過了. 
</p>
<p>
剩下的問題我試了好幾種方法, 目標都擺在如何安排這堆 thread 在合適的時間做合適的工作. canon codec 就不適合同時丟好幾個 thread 下去跑, 因為完全沒用, 反而拉長每個 .CR2 從開始到輸出的時間. jpeg 的部份就很適合, 因為時間短, 多核的好處也可以藉著多 thread 用的到. 另外 canon codec 因為限制較多, 我需要它以較高的 priority, 並且要在第一時間就開始跑, 才不會拖慢整個轉檔的處理時間... 理想的 task 安排狀況應該要像這樣: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2ThreadPool_BB53/%E7%B0%A1%E5%A0%B11_3.png" border="0" alt="簡報1" width="660" height="500" /> 
</p>
<p>
&nbsp;
</p>
<p>
最後找到一個我比較滿意的解, 就是另外寫一個合用的 ThreadPool... @_@ 
</p>
<p>
&nbsp;
</p>
<p>
其實我是很不想做重新發明輪子這件事, 不過除此之外實在沒什麼好方法. 所幸 .net 下要自己弄出個 thread pool 也不難. 這一切都要感謝當年在 yam, 當時研發部的一位主管, 交大的學長, 現在跑到 Microsoft 去了, 我們都叫他 &quot;旺旺&quot; .. 他技術能力只能用 &quot;神&quot; 來形容... 當時他在公司內開了門課, 真是印像深刻. 就用 java 示範了如何寫 ThreadPool ... 寫起來還真沒幾行... 扣掉一堆 import (相當於 c# 的 using) 等宣告之類的 code, 整個功能 &quot;完整&quot; 的 thread pool 大概只有一百行左右的 code... 而且 thread 動態 create 跟回收等功能一樣不少... threads 之間同步問題也沒漏掉.. 
</p>
<p>
我歸納了一下我需要的 ThreadPool 到底要什麼功能, 而內建的到底缺什麼... 要怎麼做就很清楚了... 要解決上面的問題, 我大概需要這樣的 thread pool 來支援我的想法: 
</p>
<ol>
	<li>thread 的數量不需要是動態的, 固定的就夠了. 一次開太多 thread 效果不見得好. </li>
	<li>thread 一定要能設定 priority. 因為轉圖檔是 cpu bound 的工作, priority 設低一點對整體的回應時間比較好. </li>
	<li>需要多組 thread pool. 我的想法是用一組專用的 thread pool 來處理 canon raw codec, 只要 1 thread 就夠 (以後 canon 真的改善的話再加大數量). 另外其它 (大部份都是 jpeg codec) 的工作就丟到有 4 threads 的 thread pool 去跑. 至少到四核的 cpu 都還能夠充份的利用到. </li>
	<li>需要簡單的作法, 能夠 wait thread pool 裡的工作全處理完. .net 內建的也可以, 不過必需透過比較麻煩的 WaitHandle 自己去 wait ... </li>
</ol>
<p>
這些剛好都是我需要, 但是 .NET 內建的 thread pool 做不到的需求. 因此自己寫了個簡單的 SimpleThreadPool .. 介面規格就儘量比照內建的 ThreadPool (因為 code 已經寫好不想改太多 [:P]). 用起來像這樣: 
</p>
<p>
&nbsp;
</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SimpleThreadPoolTest()
</pre>
<pre>
<span class="lnum">   2:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>            SimpleThreadPool stp1 = <span class="kwrd">new</span> SimpleThreadPool(2, System.Threading.ThreadPriority.BelowNormal);
</pre>
<pre>
<span class="lnum">   4:  </span>            SimpleThreadPool stp2 = <span class="kwrd">new</span> SimpleThreadPool(1, System.Threading.ThreadPriority.Lowest);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span>            stp1.StartPool();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>            stp2.StartPool();
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            <span class="kwrd">for</span> (<span class="kwrd">int</span> count = 0; count &lt; 10; count++)
</pre>
<pre>
<span class="lnum">  10:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>                stp1.QueueWorkItem(
</pre>
<pre>
<span class="lnum">  12:  </span>                    <span class="kwrd">new</span> WaitCallback(ShowMessage),
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>                    <span class="kwrd">string</span>.Format(<span class="str">&quot;STP1[{0}]&quot;</span>, count));
</pre>
<pre>
<span class="lnum">  14:  </span>                stp2.QueueWorkItem(
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>                    <span class="kwrd">new</span> WaitCallback(ShowMessage),
</pre>
<pre>
<span class="lnum">  16:  </span>                    <span class="kwrd">string</span>.Format(<span class="str">&quot;STP2[{0}]&quot;</span>, count));
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  18:  </span>                Thread.Sleep(13);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>            }
</pre>
<pre>
<span class="lnum">  20:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  22:  </span>            Console.WriteLine(<span class="str">&quot;wait stop&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>            stp1.EndPool();
</pre>
<pre>
<span class="lnum">  24:  </span>            stp2.EndPool();
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>        }
</pre>
<pre>
<span class="lnum">  26:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  28:  </span>        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ShowMessage(<span class="kwrd">object</span> state)
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        {
</pre>
<pre>
<span class="lnum">  30:  </span>            Console.WriteLine(<span class="str">&quot;ThreadID: {0}, state: {1}&quot;</span>, Thread.CurrentThread.ManagedThreadId, state);
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            Thread.Sleep((<span class="kwrd">new</span> Random()).Next(1000));
</pre>
<pre>
<span class="lnum">  32:  </span>        }
</pre>
</div>
<p>
&nbsp;
</p>
<p>
嗯, 功力跟旺旺比差了一點, 不過也是一百出頭行就搞定這個 ThreadPool ... [:D], 接下來就是火力展示了... 因為介面跟內建的 ThreadPool 幾乎一樣. 就簡單測一下 125 JPEG + 20 G9 RAW + 2 G2 RAW files 一起做轉檔時的 CPU 使用率記錄... 
</p>
<p>
圖一. 用內建的 ThreadPool, 110 sec ( UI 回應正常, 進度列也會跑. 不過礙於 CPU loading 關係, ImageBox 的圖都沒出來) 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2Metadata_2E96/image_18.png" border="0" alt="image" width="654" height="513" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
圖二. 改用我自己寫的 SimpleThreadPool, 90 sec. 因為調整過 priority, 每張圖轉完 ImageBox 都會立即顯示出來. 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonRawCodecWPF2Metadata_2E96/image_21.png" border="0" alt="image" width="654" height="513" /> 
</p>
<p>
&nbsp;
</p>
<p>
第一張圖, 所有的 job 都依序執行, 簡單的 jpeg 都擠在前段, 那段 cpu 100% 就是這樣來的. 後面就都是 canon decoder 在跑, cpu 大約都維持在 50% 左右, 直到跑完為止. 
</p>
<p>
而第二張圖, jpeg / canon 都強迫同時一起執行. 而 canon 的 priority 略高於 jpeg. 因此排程的策略是優先執行較慢的 canon decoder, 而剩餘的 cpu 運算能力就拿來處理 jpeg 的部份. 因為 cpu 使用率的統計圖下的面積 (積分) 就是總共需要的運算量. 看的出來維持在 100% 的部份越短, 則總體完成的時間就會拉長... 後面自定的 thread pool 的作法, 不論在 UI 回應, 跟整體處理的時間都比較好. 看來適度的調整 thread 數量, 跟 thread priority 還是很有用的. 不過題外話, thread 再怎麼用, 效果還是不如 lib or compiler level 做的平行處理效果來的好. ZD Net 上有一系列 <a href="http://www.zdnet.com.tw/white_board/intel/video-8.htm">intel 提供的 video</a>, 講的還不錯. <a href="http://msdn.microsoft.com/msdnmag/issues/07/10/Futures/default.aspx?loc=zx">Microsoft 也替 .NET 開發了一套 Library</a> (<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=e848dc1d-5be3-4941-8705-024bc7f180ba&amp;DisplayLang=en">download</a>), 只要調整一點語法, 就可以把 loop 內的運算轉成平行運算, 這種效果遠比用 thread pool 來的聰明 &amp; 有效. 不過還在 community preview 就暫時不考慮採用了. 
</p>
<p>
總算, 搞定了 thread pool, 也搞定了 metadata, 幾個主要的障礙都排除了. 兩個要開發的工具也完成了一個 ( image resizer ), 剩下的歸檔程式就剩下納入 video encoder 的部份也就大功告成了. 有力氣的話會再寫一篇吧, 敬請期待 [:D] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2007-12-11 21:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-11 21:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-raw-codec-wpf-2-threadpool]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<wp:comment>
			<wp:comment_id>344</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-12 08:06:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-12 08:06:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是了不起!!

快點讓我下載試用看看~

京都回來有四千張 cr2 要轉…


有支援 picture style 嗎?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>345</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.darkthread.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-12 08:22:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-12 08:22:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[旺旺? 交大? 在微軟? 
剛剛去了一趟Google徵信社，周旺暾，對吧?
與此等神人失之交臂真是一大遺憾，不過有緣識得閣下這等仙人，也算無憾了，哈!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>346</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-12 10:27:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-12 10:27:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小熊子:

    picture style 我猜是沒有支援吧 [H], codec 文件完全沒看到這字樣... canon codec 解出來的 image 會自動轉正, 所以我在猜, 部份的影像處理的動作是含在 codec 內的... 至於有那些我就不曉得了.

    你要的是 resize picture 那個嗎? 現在還沒安裝程式, 需要的話晚上回家傳給你.


Darkthread:

    沒錯, 你找對人了... 哈哈...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon Raw Codec + WPF #1, WPF Image Codec, Metadata</title>
		<link>http://columns.chicken-house.net/2007/12/11/canon-raw-codec-wpf-1-wpf-image-codec-metadata/</link>
		<pubDate>Tue, 11 Dec 2007 19:14:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/12/11/Canon-Raw-Codec-2b-WPF-12c-WPF-Image-Codec2c-Metadata.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
託 Canon G9 的福, 這一個月來的空閒時間都在研究 Windows Presentation Foundation 裡的 Image Codec 相關事項. 幹嘛買個相機還這麼辛苦? 因為原本算計好的計劃, 就差這一環啊... 雖然老早就有換機的計劃, 為什麼龜了那麼久 G9 一出來就跑去買? 除了之前講了一堆相機本身的考量之外, 剩下的關鍵因素是 RAW support. 因為: 
</p>
<ol>
	<li>Canon G9 &quot;又&quot; 開始支援 RAW file </li>
	<li>Canon 正好搭配 WPF (windows presentation foundation), 發表了它專屬的 RAW file codec. </li>
	<li>WPF 裡提供了許多 JPEG 無法帶來的好處, 我打的如易算盤是: 不管未來是什麼東西取代了 JPEG, 留著 RAW 一定沒錯, 因此支援 RAW 就大大加了不少分.</li>
</ol>
<p>
RAW support 在我看來是必要的. 照片可不能等十年後再搭時光機回來照, 而現有的 JPEG 又已經是老古董的規格了, 未來是一定會有取而代之的新規格. 會是什麼我不曉得, 不過留著 RAW 準沒錯. 只要 Canon 沒倒, 未來一定有辦法把 RAW 轉成新的通用格式, 而不用經過 JPEG 的折損... 
</p>
<p>
未來看起來很美好, 不過當 G9 入手後, 事情沒有想像的順利, 有了 WPF + Codec, 我自己必需寫些小程式來簡化未來例行的相片歸檔動作. Codec 只要去 Canon 下載就有, WPF 則是新東西, 得自己先研究一番... 搭配 WPF, Microsoft 也推出了新的圖型檔格式: HD Photo. 它的一堆好處我就不多說了, Microsoft 網站多的是. 我在意的是, HD Photo 提供的新功能, 包括廣大的色域等, 也會對應的在 image codec 裡提供. 因此如果 RAW file 本身就包含這些資訊的話, 透過 codec 讀出來就不會有資訊的折損, 存成 JPEG 就沒有這些好處了. 
</p>
<p>
實作第一步, 當然是先研究 WPF 關於 Image 物件的基本處理. 嗯, 果然是跟之前的 GDI / GDI+ 不一樣. 感覺起來 GDI 典型 application 就是像 &quot;小畫家&quot; 這類的 AP, 而 WPF 典型的 application 就是像 flash 這類的, 裡面的物件已經變成圖型來源, 套用各種 transform, 層層處理套上去後得到的結果才是你看到的東西, 大概就類似 photoshop 的 layer 那樣的東西. 
</p>
<p>
講了那麼多, 其實我也只是要用到 codec 來讀取 canon raw file, 把圖檔縮成我要的像素, 存成指定的 jpeg 檔而以... 我就以這個例子貼一段 sample code 
</p>
<p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
</p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>BitmapDecoder source = BitmapDecoder.Create(
</pre>
<pre>
<span class="lnum">   2:  </span>    <span class="kwrd">new</span> Uri(<span class="str">@&quot;C:\IMG_0001.CR2&quot;</span>),
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    BitmapCreateOptions.DelayCreation,
</pre>
<pre>
<span class="lnum">   4:  </span>    BitmapCacheOption.None);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>JpegBitmapEncoder target = <span class="kwrd">new</span> JpegBitmapEncoder(); 
</pre>
<pre>
<span class="lnum">   6:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>target.Frames.Add(BitmapFrame.Create(
</pre>
<pre>
<span class="lnum">   8:  </span>    <span class="kwrd">new</span> TransformedBitmap(source.Frames[0], <span class="kwrd">new</span> ScaleTransform(0.3, 0.3)),
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    source.Frames[0].Thumbnail,
</pre>
<pre>
<span class="lnum">  10:  </span>    metadata,
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    <span class="kwrd">null</span>)); 
</pre>
<pre>
<span class="lnum">  12:  </span>target.QualityLevel = 80; 
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  14:  </span>FileStream trgs = File.OpenWrite(<span class="str">@&quot;C:\IMG_0001.JPG&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>target.Save(trgs);
</pre>
<pre>
<span class="lnum">  16:  </span>trgs.Close(); 
</pre>
</div>
<p>
而過去也寫過 GDI+ 版本的, 那個我就不貼了. 老實說 code 也不會太多, 不過寫起來就覺的是兩種不同層次的思考邏輯. 也隨著這次機會花了點心思研究 System.Windows.Media.Imaging 裡的東西, 就開始想把舊的程式都翻一翻.. 包括了之前的歸檔程式, 及另一個批次縮圖的工具. 後面有機會再貼. 
</p>
<p>
圖檔基本內容處理掉之後, 接下來就是 exif. 我很在意這些圖檔隱藏的資訊, 也不知道為什麼, 哈哈. 上面的 code 轉完是沒有半點 EXIF 的, 沒轉過來感覺就像少了什麼... 無奈在處理 metadata 時又碰到了一些小 trouble ... 
</p>
<p>
&nbsp;
</p>
<p>
花了一些時間搞定了 metadata, 不過又碰到不同檔案格式之間的 metadata 轉換問題. WPF 的 Image Codec 已經把 metadata 的讀寫方式給 &quot;抽像化&quot; 了, 所有圖檔的 metadata 都用一樣的方式讀寫. 它採用的是類似 xpath 的 metadata query 來指明目標是那個 metadata, 然後再用 GetQuery( ) 來讀值, 或是用 SetQuery( ) 把值寫進去. 現在碰到的問題是 Canon Raw 的 query 跟 JPEG exif 用的對應不起來. 我也不知道怎麼解, google 找幾個 sample 對照著比一比, 摸黑試了幾種對應方式, 竟然看起來還好像猜中了, 就不管先用下去. 我簡單的把整理的對照表貼一下... 
</p>
<p>
/ifd/{ushort=256} --&gt; /app1/ifd/exif/{ushort=256}<br />
/ifd/{ushort=257} --&gt; /app1/ifd/exif/{ushort=257}<br />
... 
</p>
<p>
請不要問我這是啥意思, 我真的也搞不懂, 看了 w3c 一些 spec, 真是天書... 大概只知道 metadata 有幾種規範, exif, xmp, ifd 等等. 而 ushort=256 大概就是指整個 block 裡, 第 256 bytes 位置的 ushort 的值就是這筆資料存放的地方等等. 我是拿幾張照片轉換後對照著看, 看起來對就將就著用了. 最後是用程式跑了一份看起來可用的對照表, 存成 xml 檔, 丟在自己寫的 library project 裡, 當作 embedded resource. 供未來轉檔的動作時拿出來用. library 包裝好之後用起來像這樣: 
</p>
<p>
&nbsp;
</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>ImageUtil.SaveToJPEG(
</pre>
<pre>
<span class="lnum">   2:  </span>    <span class="str">@&quot;c:\IMG_0001.CR2&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="str">@&quot;c:\IMG_0001.JPG&quot;</span>,
</pre>
<pre>
<span class="lnum">   4:  </span>    800,
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    800,
</pre>
<pre>
<span class="lnum">   6:  </span>    75);
</pre>
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
弄到現在, 總算把最基本的動作: 轉檔 (含 exif) 給搞定了. 總算有足夠的資訊把 library 給弄好. 不過馬上就碰到第二個大問題... &quot;效能&quot;. 這部份就留著下一篇吧. 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date><![CDATA[2007-12-11 19:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-11 19:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-raw-codec-wpf-1-wpf-image-codec-metadata]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
	</item>
	<item>
		<title>前言: Canon Raw Codec 1.2 + .NET Framework 3.0 (WPF)</title>
		<link>http://columns.chicken-house.net/2007/11/26/%e5%89%8d%e8%a8%80-canon-raw-codec-1-2-net-framework-3-0-wpf/</link>
		<pubDate>Mon, 26 Nov 2007 03:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/11/26/e5898de8a880-Canon-Raw-Codec-12-2b-NET-Framework-30-(WPF).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<a href="/post/Canon-G9-e585a5e6898b2c-e4b88de9818e.aspx">搞了好幾天</a>, 終於理出點頭緒了. 自從 <a href="http://software.canon-europe.com/software/0026049.asp">Canon 推出 1.2 版的 codec</a> 之後, G9 拍的 .CR2 支援問題總算是往前跨了一大步, 至少在 XP / Vista 下可以直接顯示 .CR2 了. 接下來就是如何讓它<a href="/wp-content/be-files/archive/2006/12/23/cr2-supported.aspx">自動化</a>等等問題. 
</p>
<p>
WPF寫起來很簡單, 效率的問題就先擺一邊了 (很理想的預期 canon 會在未來版本會改善... 咳...), 不過 EXIF 的問題還真是令我傷透腦筋... 前前後後碰到幾個問題, 加上官方文件很多細節沒有提供, 讓我碰了不少釘子... Orz. 先整理一下碰過的釘子有那些 (現在當然拔乾淨了才有心情打這篇.. 哈哈 [H]), 先列一下問題最大的 metadata: 
</p>
<ol>
	<li>Metadata抓不到, BitmapSource.Metadata 抓出來都是 null .. <br />
	(後來發現文件漏掉一行... Orz, 目前版本不提供 BitmapSource.Metadata, 只提供每個 Frame 自己的 Metadata ...)</li>
	<li>內建的 Metadata 只有十個不到的欄位 (ApplicationName, CameraModel, ...), 問題是 exif 有一堆啊..</li>
	<li>WPF 改用 &quot;Metadata Query Language&quot;, 類似 xpath 之於 xml document 一樣... 看起來就像 &quot;/ifd/{ushort1000}&quot; 這樣. 所有底層動作都是 GetQuery( ) / SetQuery( ). 不過沒有地方讓我列舉出所有已存在的 metadata query 啊...</li>
	<li>文件上說用 InPlaceMetadataWriter 可以修改 metadata, 不過到現在我還是試不出來 -_-</li>
	<li>EXIF 上百個欄位, 對應的 query, 官方文件一個字都沒提到... 冏rz...</li>
	<li>.CR2 解出來的 metadata 跟 .JPG 廣為接受的 EXIF, 對應的 query 完全不一樣...</li>
</ol>
<p>
另外其它跟 metadata 無關的問題也有幾個: 
</p>
<ol>
	<li>Canon Codec 的效能不怎麼樣, G9 的檔案 (4000x3000, 15mb 左右) 全幅解開, 接上 JpegEncoder 存同尺寸 100% quality 檔案, 在我的 Core2Duo E6300 (2GB ram, XP MCE2005 SP2) 足足要 80 sec ...</li>
	<li>多處理器佔不到便宜. 雙核CPU跑下去, 處理器只有約 50% ~ 60% 使用率. 改了改程式, 開兩個 thread 下去也一樣, 殘念... ( Microsoft 的就要誇一下, 內建的 codec 就運作的很好... 又快, thread pool 用下去也享受的到全速.. [Y])</li>
	<li>怪的很, Microsoft 提供的 viewer 直接看 G2 的 .CRW 一切正常, 不過透過 WPF 就會得到 Exception .. 還沒解.</li>
</ol>
<p>
這些鳥問題都在 MSDN 找不到直接的答案, 只好埋頭苦TRY了. 好消息是主要問題都解的差不多了. 先簡單列一下 solution, 後續的等我 [歸檔程式] 改版完成後再來專欄報導.. 
</p>
<ol>
	<li>Metadata Query 列舉的問題原來隱藏在實作的 interface 裡.. [:@], 氣的是官方文件還沒有任何說明 &amp; 範例. 原來 BitmapMetadata 實作了 IEnumerable&lt;string&gt;, 直接把 BitmapMetadata 丟到 foreach 裡就是了...</li>
	<li>修改 metadata 的動作, 暫時由 metadata.clone() 之後修改, 再加到 encoder 裡可以閃開碰到的問題, 就不理它了</li>
	<li>EXIF 問題, 因為 (1) 有解了, 加上 google 找到其它 sample, 東拼西湊誤打誤撞也被我試出來... 哈哈</li>
	<li>效能問題一樣無解, 只能改程式儘量把不相干的 job 排在一起, 想辦法把空閒的 CPU 運算能力吃掉... 就看是我改的快還是 canon 改的快了 [H]..</li>
</ol>
<p>
前言大概就先打到這裡, 沒啥內容, 都只是預告片而以, 被它折磨了兩個禮拜, 當然要先貼一篇發洩一下. 剩下的工作就單純多了, code 改到一個段落我就會繼續寫後續幾篇. 這次會包括兩個 project, 一個是 Image Resizer, 另一個就是之前好幾篇都在講的歸檔工具. 敬請期待! 
</p>
<p>
替舊文章打一下廣告... [H] 
</p>
<ul>
	<li><a href="/wp-content/be-files/archive/2006/12/23/cr2-supported.aspx">歸檔工具更新 - .CR2 Supported</a></li>
	<li><a href="/post/Digital-Camera-Filer---Source-Code-(update).aspx">Digital Camera Filer - Source Code (update)</a></li>
	<li><a href="/post/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7---Release-Notes.aspx">Canon Digital Camera 記憶卡歸檔工具 - Release Notes</a></li>
	<li><a href="/post/Canon-Digital-Camera-e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7---RAW-Support-Update.aspx">Canon Digital Camera 記憶卡歸檔工具 - RAW Support Update</a></li>
	<li><a href="/post/Canon-Digital-Camera-e79bb8e6a99fe78da8e4baab---e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7.aspx">Canon Digital Camera 相機獨享 - 記憶卡歸檔工具</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2007-11-26 03:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-26 03:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%89%8d%e8%a8%80-canon-raw-codec-1-2-net-framework-3-0-wpf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>347</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-05 08:07:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-05 08:07:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是堅持，果然成功是留給堅持到最後的人。


還在用 DPP 轉檔的小熊子]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>網站升級: CommunityServer 2007.1</title>
		<link>http://columns.chicken-house.net/2007/11/12/%e7%b6%b2%e7%ab%99%e5%8d%87%e7%b4%9a-communityserver-2007-1/</link>
		<pubDate>Mon, 12 Nov 2007 01:43:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/11/12/e7b6b2e7ab99e58d87e7b49a-CommunityServer-20071.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
周日下午趁小孩都回外婆家, 花了點時間把家裡該裝的裝一裝, 該接的接一接, 還有一點空檔, 就把拖了很久的網站升級處理一下... 原本的版本是 CS 2007 (3.0), 中間推出了 3.0 SP1, SP2, SP3 beta 都跳過去沒理它, 這次 2007.1 (3.1) 出來手又癢了起來...
</p>
<p>
過程就沒啥好說了, 失敗了好幾次, 最後決定整個重裝... 抓了 2007.1 的官方版本, 把舊的 db 配上它的 upgrade script 執行完後掛上去, 基本功能就會動了, 最後再把 ~/blogs, ~/photos, ~/forums 等有 storage 的目錄搬過去, 再把我自己客制過的 themes 重改一次 ( my god, themes 裡的檔案全都調過, 原本的 themes 蓋過來可以跑, 不過心裡毛毛的 )... 總算大功告成. 事後順手也把同一台 server 另外兩套 CS 也順便升級了一下.
</p>
<p>
老實說我也沒很注意 2007.1 到底改了啥, 就貼一下吧, 搞不好大家之前碰到的鳥問題已經被解決掉了... 正好鴕鳥混過去, 哈哈 [H]
</p>
<p>
以下是 CS2007.1 release notes:
</p>
<p>
Below are changes available in Community Server 2007.1<br />
------------------------------------------------------------------- 
</p>
<p>
Enhancements<br />
- Updated caching framework, performance updates, added locking support for several of the application-wide collections<br />
- SQL performance updates and best-practices updates<br />
- Added CreateEditWeblogPostForm, DeleteWeblogPostForm, and associated sub-form controls from CS2008 to support creating/editing/deleting blog posts in the front UI using Chameleon.<br />
- Updated styles on the TinyMCE wrapper&#39;s content to provide some default spacing and use a larger default font size.<br />
- Updated TagCloud controls to support disabling the &quot;no tags&quot; message and &quot;no related tags&quot; messages.&nbsp; Updated all existing themes (except for tag browsing pages) to not render the &quot;no tags&quot; message.<br />
- Updated SqlProviders to resolve LINQ SortOrder namespace ambiguity<br />
- Added support for sorting and paging LinkCategory and Link objects in the API and via Chameleon.<br />
- Added toggle button for enabling/disable application tokens<br />
- Tweaked app tokens list a little bit to show the time for the last used column<br />
- Added a new AdPlacementOptions to WrappedRepeater, AlternatingSeperator - places an ad after every other item starting after the first. <br />
- Updated TinyMCE to use the latest wrapper.<br />
- Updated the email job only retrieves as many messages as it will send from the email queue (prevent large queues from causing timeouts)<br />
- Updated notifications and mass emails to enforce the check on a user&#39;s &quot;Enable Email&quot; global setting and &quot;Allow Site to contact me&quot; setting<br />
- Updated email notifications to check the enable thread tracking for post replies<br />
- Updated mass emailing to take place on a background thread<br />
- Updated Telligent.Registration.dll to address an issue where the add-ons could get stuck if they start before SQL on a reboot/startup<br />
- Updated Telligent.MailGateway.Common.dll to address issues with XML cleaning in the core library and downloading only as many messages as needed from the email queue<br />
- Updated user date formats so that month-day-year is 6-1-2007 instead of 06-01-2007<br />
- Updated Windows Live Writer support by implementing keywords for custom tags and removing excerpt support since it gets confused with text-mode.<br />
- The error messages were updated so that the actual error message is displayed more prominently.<br />
- Removed the AutoDeleteThreshold setting from the forum control panel since it is not implemented.<br />
- Updated stylesheet to not underline the group expand/collapse toggle button.<br />
- Updated version of CookComputing XML-RPC.NET library to use new .NET 2.0 optimized verison<br />
- Updated list of default Weblog Ping URLS (removed Blo.gs and PubSub.com, added PingOMatic.com)<br />
- Implemented TruncationEllipsisTemplate on the ObjectDataBase control to support custom markup/controls being used in the TruncationEllipsis<br />
- Enabled adding new categories inline through Windows Live Writer<br />
- Added rsd.ashx and wlwmanifest.ashx in web project, and added namespaces (Added support for RSD and WLWManifest).<br />
- Updated MetaBlog to support excerpts, read-more, and post names<br />
- Updated blog truncation to use readmore links<br />
- Updated Metablog to default to the users current blog<br />
- Added auto discovery for the current blogs metablog path<br />
- Added basic site and blog theme<br />
- Updated email templates for forum and forum thread emails to remove the background grey color.<br />
- CSContext.User is only overridden with TokenUser when told via AllowTokenRequests(bool requirePrivateToken)<br />
- Added rendering of news to the &quot;Traveler&quot; blog theme&#39;s sidebar.<br />
- Added support for TemporaryUserTokens that expire after 3 hours<br />
- Change password now uses a temporary user token<br />
- Added support for disabling exception logging. It is disabled by default.<br />
- Moved keep-alive code from global.js into the KeepAlive control.&nbsp; Updated Editor control to *always* render a KeepAlive control.&nbsp; Deleted web/utility/keepalive.aspx<br />
- Added a few performance improvements to ThreadQueryBuilder classes: Only joining to cs_threads if we really have to, Adding a cs_Sections.ApplicationType filter back in<br />
- Changed the expiration date from 30 days to 7<br />
- Exception logging now occurs in background cache tasks 
</p>
<p>
Bug Fixes:<br />
- FileSystemWatcher pathing fix<br />
- Request/Response encoding fix<br />
- You can now resize the editor horizontally in the content editor modals<br />
- You can now override an editor option without specifying type on the control<br />
- You are no longer redirected to login when browsing a site that has forums at root while you are anonymous.<br />
- Updated inline text editor to not overlap its popup container<br />
- Updated Telligent.Glow.Modal to use frameborder=&#39;0&#39; instead of frameborder=&#39;no&#39;<br />
- Create/Edit Blog Page Validation fixed so that appkey cannot be blank<br />
- Added code and note bbcode and updated existing processing order of scrubbing modules<br />
- Enabled checking of the user&#39;s Enable Email setting on a wide variety of message types<br />
- Corrected all references in Chameleon controls to OpenWindow function in global.js to use a direct call to window.open.<br />
- Updated Forum BreadCrumb control to use the current rewritten URL name instead of the rendered URL to determine the current page<br />
- Updated EntryThumbnail control to render the file extension in the alt attribute.<br />
- Updated EntryThumbnail control to render with an Image control and default to 0 border width and no alignment.<br />
- The parent post cache is now expired properly when creating a new post in a thread.&nbsp; This allows a reply to post to always display in a thread after it is created.<br />
- Create edit blog post now maintains state better<br />
- Added validation for the user&#39;s email address to Users.Create<br />
- Fix for Gallery search results from searchbarrel linking to image not to gallery page<br />
- Removed the ability to rename or delete the anonymous user<br />
- Fixed issue where GalleryService.Update failed to set the PostID, which caused it to always fail.<br />
- Updated cs_User_Delete sproc to update author/post ID&#39;s as well as names<br />
- Disabled subforums no longer require user to login in parent forum<br />
- Fixed theme cache name so that the cache key is correct.&nbsp; Previously theme configuration were never getting retrieved from cache correctly.<br />
- Changed create user page so that validation occurs when fields change as oppose to whenever a key was pressed.<br />
- Group RSS Feed no longer causes Exception<br />
- Pager added to the default aggregateentrylist control for the file gallery<br />
- Clicking the Advanced Search link from a search results page now populates the advanced search options form for the lean and green theme as well as default<br />
- Corrected QuickReply link to only refresh the page if false (and not undefined OR false) is passed as the callback parameter.<br />
- Fixed EXIF page to show the full list of tags.<br />
- Fixed photo post edit so it decodes the subject before populating the text box in the CP (to prevent double encoding)<br />
- Fixed all auto-syndication registration to not re-html-encode section names.<br />
- Fixed issue with users in the Member Administrators role not being able to change user passwords<br />
- Fixed spelling error in the API... renamed User.EnableAvtar to User.EnableAvatar<br />
- Updated default and leanandgreen themes to hide &quot;view all users&quot; link when &quot;Display Member List&quot; is set to &quot;No&quot; in the Control Panel.<br />
- The SaveExtendedUserData call was moved into the event handler for the submit button, before the first call to sub-forms.<br />
- You can now delete a tag that is disabled.<br />
- User Points can now display without Post Points.<br />
- Fixed issue with order of permissions not being handled properly<br />
- Control Panel Report page title now shows correct text<br />
- Fix for linking over to Shutterfly showing 0x0 as the picture&#39;s size.<br />
- Fix for null reference on private messages from CS 2.x that were to users that were later deleted<br />
- Fixed ForumSqlProvider to save sticky info on edited posts<br />
- Corrected issue resulting in multiple encoding of the AvatarUrl property.<br />
- Updated edit user form in the control panel to always show the user&#39;s Username in the &quot;Alias&quot; field.<br />
- Updated blog admin control panel to properly decode the blog name.<br />
- Corrected FireFox rendering issue on user+avatar lists in the default and lean and green themes.<br />
- Fixed issue where Weblog XML-RPC pings do not get sent in some scenarios.<br />
- Corrected misplaced &lt;/div&gt; tag issue in PoisonIvy, Gertrude, Luxinterior, and Photos blog themes causing nested comments.<br />
- Changed Roller Blog add-feed sproc to set Last Modified to current time - interval, so that the feed gets pulled the next time the job runs after the feed is added.<br />
- Corrected rendering issue in the Control Panel in FireFox prior to JavaScript loading<br />
- Updated the HTMLScrubber regex to use slightly different syntax which prevents infinite loop issue in FireFox.<br />
- Corrected invalid anchor tag in blog themes.<br />
- Added check for cs_Posts.IsIndexed in all SearchBarrel-generated queries.<br />
- Fixed failed check to see if the user was anonymous within MailGateway<br />
- Fixed how SPAM blocker counts links<br />
- Fixed an issue with a missing resource label<br />
- Updated CallbackPager to always render the PagedContent contents.<br />
- Fixed issue with deserialization returning as successful when the output object is null<br />
- Blog pages now show up in the tag post list if set to be aggregated, and the aggregate options are visible when creating a new page.<br />
- Corrected thread view count to register one view per thread per rendered page regardless of the number of posts displayed on the page.<br />
- Removed script to enable/disable &quot;Join&quot; button on the registration form in the default and lean-and-green themes to prevent issues with auto-complete.<br />
- Updated TinyMCE wrapper to set the document_base_url TinyMCE option to the parent window&#39;s URL when the editor is opened in a Modal.<br />
- Fixed notifications of message being flagged for moderation by MailGateway being queued with SettingsID of 0<br />
- License usage colors are now cleared after uploading a license.<br />
- Updated truncation ellipsis markup to render within the content wrapper (link) on ObjectDataBase control.<br />
- Corrected next/previous thread links to direct to the thread&#39;s URL.<br />
- Updated UserAvatarSubForm to set the remote avatar URL (if available) when an avatar is uploaded.<br />
- cs_system_GenerateWeblogYearMonthDayList and cs_vw_weblog_PostByYearMonth now has some sql included to attempt to build the roll-up tables.<br />
- Fixed regression from Bug Fix #1391 with AppKey being a required field on the blog creation page<br />
- Selecting &#39;Hide Topics I&#39;ve Read&#39; in the forum filtered thread control now keeps the unread announcements visible on the first page<br />
- You can now delete a forum post without it sending email<br />
- Tweaks to cs_weblog_Post_Create and cs_weblog_Post_Update to ensure that UserTime was never NULL.<br />
- Corrected potential XSS issue in User RSS Feeds<br />
- Added EnsureHtmlEncoded calls to loaded TemporaryRssFeeds and TemporaryRssFeedItems content.<br />
- Updated UserSearchForm to redirect to the rewritable URL instead of directly into the current theme.<br />
- Pager fixed in the manage photo comments page so that you can page past the first 2 pages.<br />
- Membership.GetRoles result set creation updated to ensure roles and role icons are re-populated after cache expiration<br />
- Updated default Regex validation patterns for user names and passwords and ensured that these patterns always match the entire string when set.<br />
- Updated sql to only change the regex pattern if the pattern [a-zA-Z]+[^\&lt;\&gt;]* was in the UsernameRegex before<br />
- Added tabindex=&quot;-1&quot; to all TinyMCE buttons to prevent tab-stops when navigating into the editor using the keyboard.<br />
- Added validation of RSS feed URLs and external avatar URLs to ensure they are HTTP-based.<br />
- Updated SearchBarrel to require Read access from applications supporting Read permissions.<br />
- Adding &#39;]&#39; to a post no longer causes the post to pass the duplicate post check.<br />
- Disabling post emoticons now hides the emoticon radio button list from the Forum options tab<br />
- File Gallery comment URL&#39;s now work correctly, displaying the entry they belong to<br />
- Corrected issue preventing section filters from being saved.<br />
- Updated the form adapter to only update the form&#39;s action attribute when the page&#39;s URL has been rewritten by CS to ensure compatibility with external, non-rewritten pages within CS.<br />
- Updated the thread queries used by blog and file gallery search indexing to specify IgnorePermissions=true so that all blogs and file gallery posts are indexed.<br />
- Corrected infinite redirect issue when an invalid character exists in the URL.<br />
- Changed const string cacheKey = &quot;UserLookupTable&quot; to include SettingsID<br />
- Photo Gallery now supports HTMLEncoding a submitted user name field<br />
- Added ApplicationName to the UserRoleNames cache key<br />
- Corrected page height issue in IE when using tabbed panes.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2007-11-12 01:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-12 01:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b6%b2%e7%ab%99%e5%8d%87%e7%b4%9a-communityserver-2007-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>348</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-11-12 12:11:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-11-12 12:11:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[果然是超有效率的~

來試試看]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon G9 入手, 不過...</title>
		<link>http://columns.chicken-house.net/2007/11/05/canon-g9-%e5%85%a5%e6%89%8b-%e4%b8%8d%e9%81%8e/</link>
		<pubDate>Mon, 05 Nov 2007 01:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/11/05/Canon-G9-e585a5e6898b2c-e4b88de9818e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
想了很久的 Canon PowerShot G9 終於狠下心的敗下去了, 買了英日機的水貨, 約比公司貨便宜三千塊... 其實已經買了兩個禮拜, 但是碰到一堆小障礙, 所以拖到現在才寫 BLOG...
</p>
<p>
打從 G6 就開始物色新機, G6 因為跟 G2 都採用 DIGIC chip, 功能效能都沒啥大長進, 連 video 也都是很兩光, 不考慮... S2 IS, S3 IS 沒有熱靴不考慮, S5 IS 撐了很久, 最後還是決定留在 G 系列. G7 換了 DIGIC II 則是大改版, 光圈變小, 翻轉 LCD 沒了, 連 RAW 都沒了... 不考慮. G9 跟 G7 差不多, 就是把 RAW 加回來, 換 DIGIC III ... 覺的還在可接受範圍內, 就敗了 [:D], 那 G8 呢? 很抱歉... Canon 沒出 G8 .. Orz.
</p>
<p>
事前雖然功課作足了, 不過買回來後還是碰到了些小障礙:
</p>
<ol>
	<li>畫質普普, 大部份情況跟 G2 半斤八兩, 不過有些時後 G2 還略勝一籌... 這是意料之中, 沒有很意外, 那麼小的 CCD 擠這麼多像素進去, 這是必然的. 只不過還是有點失望, 怎麼沒有奇跡出現..</li>
	<li>像素 12M, 拍下來的 raw file 足足有 12 ~ 15mb, jpeg 也有 3 ~ 4 mb, 如果用 RAW+JPEG 模式, 最多 18mb 就去了... 附的 32mb SD 真的是只能塞牙縫... 為了這個只好去買 SDHC 的記憶卡, 連帶的讀卡機都得換掉...</li>
	<li>RAW file 解不開... 這點最頭痛. Photoshop 元件更新後認不得 G9 拍的 .CR2, Canon 自己附的 Raw Image Converter 也不吃, DPP 3.0 也不吃, Raw Codec for Vista 1.0 也不吃, Microsoft Raw Image Viewer 也不吃, Google Picasa 可以讀, 不過顏色不正常... 試了一堆支援 .CR2 的軟體, 除了隨機光碟附的 ZoomBrowserEx 之外, 沒一個能用的 [:&#39;(]</li>
	<li>因為 (3) 的關係, 連帶的我自己寫的歸檔程式也不能動了...</li>
</ol>
<p>
不過還好, 除了這些缺點之外, 其它一切如預期, 老實說電子元件本身的改變, 跟鏡頭加上 IS 真的很不錯, 整體還是值得的... 這兩個禮拜就都在搞這些小問題... 因為 (3) 的關係, 只好改一下原本的歸檔程式, 同時改變習慣一定要用 RAW+JPEG 模式, 在歸檔的動作裡跳過 RAW --&gt; JPEG 這步驟的動作.. 勉強可用. 反正 8GB SD 卡暫時也拍不滿..
</p>
<p>
感謝老天, 就在前天, Canon 終於發怖了 Canon Raw Codec 1.2, 支援 G9 拍的 Raw File 了. 連帶的 G2 的 Raw 也在支援範圍內, 就改起程式來試看看... 不過情況也不怎麼樂觀. 細節就不講了, 以後另外再寫一篇, 我先寫初步得到的資訊:
</p>
<ol>
	<li>Codec 可以搭配 Microsoft .NET Framework 3.0 的 WPF ( Windows Presentation Foundation ) 使用. 雖然官方說 for Vista 32bits only, 不過我自己在 XP SP2 下也是可以用.</li>
	<li>15mb 的 .CR2, decode 速度... 有... 夠... 慢... [:@], Core2Duo 6300 竟然要解到快一分鐘... CPU 使用率約只有 50%, 改了改程式, 用 thread pool 一次解兩個 raw file, 一樣... CPU 使用率只有 5x%... 看來這個 codec 是 Single Thread Apartment 模式跑的... 雙核 CPU 派不上用場</li>
	<li>慢就算了, 不知是 codec 的問題, 還是 .net runtime callable wrapper 的關係, 透過 WPF 抓不到任何的 metadata (exif), 傳回的 BitmapMetadata 物件就是 null ...</li>
</ol>
<p>
天那, 這個 codec 對我等於完全沒用了 [:&#39;(], 歸檔程式就是靠一堆 exif 才能達到自動歸檔, 改檔名, 照片轉正... 現在不旦讀不到 exif, 同時一張解開就要花 60 sec...
</p>
<p>
看來用 RAW + JPEG 拍照的模式得撐上好一陣子了, 要改版就得等 canon raw codec 再改善一點了.. 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2007-11-05 01:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-05 01:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-g9-%e5%85%a5%e6%89%8b-%e4%b8%8d%e9%81%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>349</wp:comment_id>
			<wp:comment_author><![CDATA[jim]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.1adh.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-11-19 14:36:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-11-19 14:36:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我也是為了他的RAW想買它
所以去相機電確認了一個下午
證明它附的光碟是可以用的說
而且比DPP要多了 風格微調CCC 很讚歐]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>350</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-11-21 10:41:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-11-21 10:41:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是啊, 我這邊 RAW 的問題也陸續解決掉了, G9 真是好物 [Y]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>351</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-11-24 09:47:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-11-24 09:47:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[唉~你居然買了我現在最最最不考慮的品牌啊~
提醒你一下，他最近問題機種可是多多呢~~歡迎常逛DC板~~
還好你沒買賊店的公司貨，不然你遇到跟我類似的遭遇就欲哭無淚啦~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>352</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-05 08:14:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-05 08:14:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實 RAW + M(Jpg) 就足夠一般用了，只不過不知道 G9 有沒有這樣子的選項]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>353</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-05 19:10:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-05 19:10:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[有... 不過, 如果 RAW 就有足夠的資訊的話, JPEG 事後產生就好, 我還可以產生 100% quality, 但是 size 小一點的檔案, 方便觀看 [H], 空出來的空間也可以讓我多拍 20% 的照片...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>354</wp:comment_id>
			<wp:comment_author><![CDATA[vampire]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/tim13/vampire</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-13 23:52:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-13 23:52:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大大您好,我想請教您,如何將影片傳回G9播放?

影片我有使用ZoomBrowser EX轉檔過了,應該沒問題,問題在於G9找不到它來播放,即便我做了一個假THM檔,也騙不過它,只出現"無法辨識的影像,若您有法可解,煩請指導,謝謝您!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>355</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-14 02:56:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-14 02:56:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[新面孔 :D~~  你的兒子好可愛 [Y]

我沒把影片傳回 G9 過. 看你的作法應該可以確定 video 檔的格式沒問題, 只差在檔案找不到... (之前放相片, 如果檔名對而格式不對, G2 會顯式無法解讀xxx的格式).

canon 的檔案目錄跟檔名有一定的關係, G2 還很簡單, G9 多了自訂目錄啥的... 我就搞不懂了. 最保險的方式是隨便錄一段 video, 然後把它的 .avi 用你編好的新檔案蓋掉就好了 [:D]

至於那個 .thm, 其實就是個 .jpg 檔, 目的是你在相機選檔案時, 看到那個圖就是 .thm 的內容]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>356</wp:comment_id>
			<wp:comment_author><![CDATA[vampire]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/tim13/vampire</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-14 10:02:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-14 10:02:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，我也覺得小犬超可愛的（呵，不懂謙虛）．

看到您的回覆，滿懷希望地去測試，因為我沒想到這個點子，結果，還是不行，它會呈現原檔的縮圖且縮小許多，仍是"無法辨識的影像”，看來必須要能去編輯thm的真正內容，我有用過160X120的圖片存成同檔名.thm，也是不行．

影片我部份應該是沒問題，因為我在用ZoomBrowser EX轉檔前，已用AVIcodec找出它的編碼是M-JPG，安裝該CODE後用威導六轉檔，應該是ＯＫ吧．問題可能出在G9內的THM與AVI無法連結起來．有空把我的過程寫起來，再看眾家高手能否看出徵結點了．

打擾您了，謝謝！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>357</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-15 03:21:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-15 03:21:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我自己試了幾次, 有點結論...

1. 目錄跟檔名不能亂給. 就是要照它的格式就對了. MVI_####.AVI
2. .thm 雖然是張 jpg, 不過看來不是存縮圖用的. 我把 .thm 跟 .avi 拿不同的來配, 檔名改一樣放回去, 可以耶.. G9 會顯示正卻的 video 第一頁, 不會顯示 .thm 的內容
3. .thm 裡的 exif 才是主要有用的資訊. 其它我不曉得, 至少我確定 video 的長度是藏在 .thm 的 exif. 我 (2) 亂配的是拿 3 sec 的 .thm + 50 sec 的 .avi, 結果 G9 就只播放 .avi 的前三秒..
4. 我沒試另外重新轉檔, 取材的 AVI 都直接是 G9 拍的 video. 我有拿另一台 canon ixus 55 拍的 AVI 也可以.

光是 video length 放在 .thm 內這點, 你要拿 G9 當播放器就有點辛苦了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>358</wp:comment_id>
			<wp:comment_author><![CDATA[vampire]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xuite.net/tim13/vampire</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-15 09:22:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-15 09:22:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看來，必須從canon那裡知道thm的內容才比較好下手囉，本想利用它的3吋螢幕當成PMP來用的。

不好意思讓您百忙中花時間來測試，我了解路人隨便提個問題，一股熱忱一段時間就花掉了的甘苦，真的很感謝您。祝好！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>359</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-18 18:02:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-18 18:02:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[別客氣, 我自己有 G2, 我也很想知道能不能自己放 video 進去 play ...

最近正好在研究圖檔寫 exif 的問題, 有機會解出來的話再來公佈作法 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>360</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-19 03:17:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-19 03:17:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[打錯... 是 G9, 雖然我也真的有 G2 啦... 哈哈...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[jimmy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-12-29 22:45:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-12-29 22:45:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好
我能請你們幫我個忙嗎 我在國外買了一台G9
我沒有繁體中文的說明書
能是否請你寄說明書檔(pdf)到我的信箱 謝謝
32065687@yahoo.com.tw
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-10 02:19:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-10 02:19:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這就是所謂的網路小白嗎?
真可愛~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-11 02:53:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-11 02:53:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這麼喜歡啊 :D
就讓你帶回家好了.. 哈哈.. 你竟然還認真的回了 comment .. [Y]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>364</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-01-14 03:05:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-01-14 03:05:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[既然這麼可愛, 就帶回家吧 [H]

哈哈~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[NBuslo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-02 08:28:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-02 08:28:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我有"Canon 400D", 它的 .CR2 檔可以用 DPP 讀耶!
怎你的 DPP 無法讀"Canon G9"的 .CR2 檔?
難道 Canon G9 的 .cr2 檔 與 Canon 400D 的 .cr2 檔不一樣?

BTW, 怎 DPP 無法讀 Canon G2 的 .crw 檔阿?
還有, 明明是拍 still photo, 怎 Canon G2 也產生 .thm 阿?
那是做甚麼用的?
(先謝了)

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>366</wp:comment_id>
			<wp:comment_author><![CDATA[NBuslo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-02 08:38:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-02 08:38:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[.thm 不是 thumbnail 檔嗎?
不能直接從.raw產生嗎? 為何需要它?
用 Canon 400D 拍 still image, 就只有 .cr2 檔, 沒有 .thm 檔.

--
BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>367</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-04 02:54:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-04 02:54:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[NBuslo.. 新面孔 :D

看起來即使都是 .CR2 ，還是有點區別的。G9剛出來時一堆支援 .CR2 的軟體都不吃 G9 的檔案，不過陸續更新版本後就都沒問題了..

CANON 的 .thm 其實只是張很小的 JPG 檔 (160x120 px), G2 那個時代的 DIGIC 大概太慢了，因此偷留張 .thm 讓你在相機上預覽 RAW 檔時能夠很快看到畫面用的，不過用過都知道，G2 RAW file 在相機上面看，畫質慘不忍睹... 放大就全糊了，應該就是去放 .thm 檔而不是真的解 .CRW 檔的原因..

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>368</wp:comment_id>
			<wp:comment_author><![CDATA[NBuslo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nbuslo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-12 15:20:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-12 15:20:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝 chicken 的解說.

BTW, 根據 Canon 400D 所附的 DPP 的說明檔, 該版 DPP 應該有支援 .RAW 檔,
但, 根據我的實驗, Canon G2 所產生的 .RAW, 無法顯示耶. 怎這樣?
你們的情況如何?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>369</wp:comment_id>
			<wp:comment_author><![CDATA[NBuslo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nbuslo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-12 21:35:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-12 21:35:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不知道 Canon 的 .CR2 規格是甚麼時候推出的?
舊機款是否可以透過&quot;firmware&quot;的更新來變成&quot;.CR2&quot; instead of &quot;.CRW&quot;?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>370</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-18 19:21:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-18 19:21:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Orz, 我手上沒有 400D 附的 DPP 可以測，不過記得古早以前某相機附的 DPP 是可以開 G2 拍出來的 .CRW 檔...

CR2 也好幾年了，不過 CANON 應該沒這麼好心吧，哈哈，firmware大概只會改 BUG，新功能喜歡的話就是要你掏錢出來買新的... 我想心裡最ㄨ的應該是 G7 的用戶，全部 G 系列都有 RAW 檔，就 G7 沒有... 官方還硬掰了堆什麼高解析度相機拍出來的檔案，JPG 會比較好看之類的理由...

--
請輸入: &quot;月圓人團圓&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 6. 機櫃設備展示</title>
		<link>http://columns.chicken-house.net/2007/10/05/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-6-%e6%a9%9f%e6%ab%83%e8%a8%ad%e5%82%99%e5%b1%95%e7%a4%ba/</link>
		<pubDate>Fri, 05 Oct 2007 03:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/05/e6b0b4e99bbbe5b7a5e697a5e8aa8c-6-e6a99fe6ab83e8a8ade58299e5b195e7a4ba.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
寫到這裡, 該弄的都差不多了... 撇開還沒完全搞定的幾台 PC, 先來看看機櫃的設備... [:D]. 裡面的東西大部份都網拍買的, 我貼網址只是讓大家參考一下而以, 賣家我都不認識, 報我的名號沒有打折... 哈哈..
</p>
<p>
0. 雜物間
</p>
<blockquote>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3710(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3710(Canon PowerShot G2)" width="420" height="320" /> 
	</p>
	<p>
	不要以為我家雜物間這麼乾淨, 只是還沒開始擺東西而以 [H]. 這是間只有一坪左右的小房間, 因為空間規劃的關系不好利用, 就直接隔起來當作小儲藏室, 就優先被我佔下來當作機房了... 因為初期弄線很麻煩, 所以其它雜物都還沒擺進來. 之後這間前方跟左方的牆就都會去特力屋買鉻鐵架來擺, 堆滿東西後就真的變 &quot;雜物間&quot; 了...
	</p>
</blockquote>
<p>
1. 機櫃本體 [<a href="http://tw.f2.page.bid.yahoo.com/tw/auction/b35639309?u=rack115402" target="_blank">Y拍網址</a>]
</p>
<blockquote>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3711(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3711(Canon PowerShot G2)" width="200" height="260" /><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3715(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3715(Canon PowerShot G2)" width="260" height="200" />
	</p>
	<p>
	登登登登, 主角來了. 這就是我的機櫃, 高 15U, 本來還想會不會太大了? 沒想到擺進去剛剛好... 好險當初沒有買小一號的. 機櫃送來才發現怎麼有點大... 所幸尺寸都在預料之中, 沒有發生什麼擺不進去之類的問題. 這個機櫃我在網拍逛了半年有吧? 最早只是想買個小機櫃把吵人的PC還有一堆線的HUB收起來就好, 不過剛好有可能搬家, 就開始認真的逛了起來... 最後挑到這款.
	</p>
	<p>
	這款算是很完整的了, 該有的都有. 前門是透明壓克力, 上面的照片就是關起門的樣子, 背面也有一扇 (全金屬的), 不過我就拔掉了... 底下有輪子及支撐腳架, 底層老闆也幫我開了三個防虫線孔... 就是線可以穿過去, 但是蟑螂螞蟻之類的爬不進去... 內側有一個排插, 提供內部設備電力, 上方還有裝兩個抽風風扇, 不過開起來實在太吵... 最後我是捨棄背面的門, 沒有開風扇...
	</p>
	<p>
	整體來說品質還不錯啦, 還蠻堅固的, 也不會鬆鬆垮垮搖搖晃晃的, 要買的人可以考慮一下. 當初為了省錢, 沒有多買一個層板 (就中間放東西的鐵架), 後來才事後追加補買的... 要買的人切記不要省這些, 一定會用的到 :~~&nbsp; 
	</p>
</blockquote>
<p>
2. 機架式機殼 [<a href="http://tw.f3.page.bid.yahoo.com/tw/auction/c31066996?u=aaa4308" target="_blank">Y拍網址</a>]
</p>
<blockquote>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3713(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3713(Canon PowerShot G2)" width="420" height="320" />
	</p>
	<p>
	哈, 這個就沒特地拍照了. 沒啥特別的, 就一般機殼, 只是外型配合機架的尺寸, 高度是 4U, 內部就是裝標準的ATX主機板. 放硬碟的空間蠻夠用的, 我放了四顆HDD, 一顆光碟機... 這個機殼遠比我想像的重. 整個裝好至少有十公斤以上吧? 每次把機器扛上去我都在耽心, 一個不小心掉下來, 其它設備大概就全毀了, 因此我都會先把門給鎖起來, 以防小孩進來亂...
	</p>
	<p>
	左方都是擺硬碟的空間, 裡面藏了一個 8cm 風扇對著硬碟吹... 效果還不錯, 溫度大概都沒超過 40 度... 裡面有藏一片濾網, 灰塵不會直接全跑到裡面去... 這台電腦可是身負重任, 負責家裡的 NAT service ( 就是 ip 分響器 ), 同時包含對外的網路服務 ( web, dns, vpn .. ), 還有家裡的共用資料夾 ( RAID1 ), 傳真機...
	</p>
	<p>
	看起來裡面的配備好像很高級? 其實不是, 這台是之前一度被汰換下來, 後來又敗部復活的主機板, ASUS P2B-DS, 可以裝兩顆 Slot-1 的 CPU... 夠古董了吧? 我當兵前就在用的電腦, 可以想像年紀到底有多大了...
	</p>
</blockquote>
<p>
3. 電話總機 [<a href="http://tw.f5.page.bid.yahoo.com/tw/auction/e21725797?u=buzz11192000" target="_blank">Y拍網址</a>] &amp; 監控錄影機 [<a href="http://tw.f3.page.bid.yahoo.com/tw/auction/c31356141?u=mokoyo2004" target="_blank">Y拍網址</a>]
</p>
<blockquote>
	<p>
	<a href="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3716(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3716(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3716(Canon PowerShot G2)" width="244" height="184" /></a>
	</p>
	<p>
	電話總機 (上, 灰黑色的那台) 是我想好久, 終於有機會裝的東西. 我爸有兩線電話, 之前弄的每個地方都擺兩隻話機, 桌面空間都佔掉了, 而且話機太多, 有時電話線內的電力也推不動, 有雜音等等缺點... 加上這次搬回家, 多了一條電話線. 不弄分機不行了... 裝了之後可以一口氣解決掉上面的問題.
	</p>
	<p>
	本來原屋主有一套舊的Panasonic總機系統, 不過一來話機太舊, 只有兩隻來電顯示, 二來完全找不到手冊, 那堆功能跟本不知道怎麼用... 三來專用的系統話機有夠貴, 總機很舊, 佔的空間也很大.. 最後放棄. 新的我就完全以價位為考量, 挑了這款. 它沒啥特點, 唯一特點就是很簡單 &amp; 便宜. 話機用的是普通的電話, 這是優點也是缺點, 優點是你可以找到你喜歡的話機, 也不貴, 到處都有賣. 缺點則是普通話機絕對不會有專用分機的一些燈號及功能. 像是轉接, 或是這是第幾線等等的燈號. 你得完全靠記指令的方式, 像是拿起電話按 #11 用一線打出去, 按 ## 掛斷是保留等等...
	</p>
	<p>
	除此之外還真是蠻好用的, 第一, 安裝很簡單, 背後就三個 RJ11 讓你插外線, 另外八個 RJ11 就讓你插內線, 完全就跟 IP 分響器一樣簡單... 開電就可以用了. 它的燈號只有四個, 藍色是電源, 有開電就會亮, 另外三個紅色的則是外線使用狀況, 那一線正在講話燈就會亮... 不過, 都關在機櫃內我也不會去叮著看...
	</p>
	<p>
	監控錄影機則是我爸要裝的. 之前他找人來裝, 用電腦錄, 結果被它搞的快瘋了. 這種軟體寫的都爛爛的, 如果你電腦還兼日常用途, 同時錄監控畫面就真的很麻煩. 何況軟體 &amp; driver 還常常出小問題, 最後決定花點小錢, 直接買這種現成的. 這一台主機約 5000 左右, 裡面要另外加一顆 IDE 硬碟. 我把一顆舊的 160GB 裝進去... 它只有在畫面有動靜時才會開始錄影, 160GB 夠錄好幾天...
	</p>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/image_3.png" border="0" alt="image" width="420" height="397" />
	</p>
	<p>
	操作介面就不用提了, 實在是不怎麼好用. 各位可以想一下, 比大陸的DVD player選單還難懂, 就知道有多難用了. 我從來都搞不懂面版那堆按鈕要怎麼用... 我都是用網路搭它附的軟體來操作... 它的軟體還堪用, 該有的功能都有. 另外值得一題的是, 它也有 web interface. 沒有裝它的軟體也是可以看, 只要開 browser 就好. 不過它是用 java applet 寫的, browser 要先安裝好 JRE ..
	</p>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/image_6.png" border="0" alt="image" width="420" height="342" />&nbsp; 
	</p>
</blockquote>
<p>
4. 網路交換器 [<a href="http://tw.f2.page.bid.yahoo.com/tw/auction/b33739766?r=1137967708" target="_blank">Y拍網址</a>]
</p>
<blockquote>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3717(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3717(Canon PowerShot G2)" width="420" height="320" />
	</p>
	<p>
	這就沒啥特別了, 一台普通的 D-Link 24port switch hub 而以. 二手的, 網咖關門拿來拍賣的舊設備. 本來想買台 GBE 的, 不過實在是太貴了... 以後真的有需要再換...
	</p>
	<p>
	上面是 ADSL modem, 下面的只是 Patch Panel, 不是啥電子設備...
	</p>
</blockquote>
<p>
5. 乖乖 [這不是Y拍買的... <a href="http://community.chicken-house.net/blogs/sea/" target="_blank">家裡大人的網址</a>]
</p>
<blockquote>
	<p>
	<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6_2824/CRW_3718(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3718(Canon PowerShot G2)" width="420" height="320" /> 
	</p>
	<p>
	上圖 ADSL modem 左上方有沒有看到一包怪東西? 其實是我塞了一包小包乖乖... [H]
	</p>
	<p>
	待過機房的大概都聽過玩笑話, 就是 server 要擺一包乖乖才不會當機... 哈哈. 我真的請我家大人去超市時買了一包小包的回來. 我只愛吃五香的, 不過這次則是買椰子口味. 為什麼? 因為椰子口味包裝是綠的, 電腦的燈號綠色都是代表一切正常, 黃色就是警告要出問題了, 紅色通常都是有啥東西掛掉了... 買五香 or 巧克力的還得了? 哈哈... 
	</p>
	<p>
	以前還聽過, 有的公司新來的菜鳥 MIS 不懂事, 到機房作業時就把乖乖吃了, 結果造成大當機... Orz. 反正放一包好玩, 搞不好真的有效也說不定... 我真迷信, 哈哈...
	</p>
</blockquote>
<p>
沒想到忙了幾個禮拜, 也真的把這堆雜事給弄完了... 有興趣的人可以開始報名來我家參觀了... 哈哈 [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2007-10-05 03:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-05 03:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-6-%e6%a9%9f%e6%ab%83%e8%a8%ad%e5%82%99%e5%b1%95%e7%a4%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>383</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-05 07:46:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-05 07:46:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖...又重獎..害我不貼不行..

乖乖?嗯..我們機房都沒有..所以老當..

不過..有當機..才有需要MIS的存在..

如果不當機(根電視洗衣機一樣穩定)..MIS大概也不需要了


Bot Check (required)
請輸入 "叭樂雞萬歲" : "海娘娘萬歲"]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>384</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-07 14:30:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-07 14:30:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我要參觀，排隊哦~~~~~`]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 5. 配接 cable 線</title>
		<link>http://columns.chicken-house.net/2007/10/02/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-5-%e9%85%8d%e6%8e%a5-cable-%e7%b7%9a/</link>
		<pubDate>Tue, 02 Oct 2007 23:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/10/02/e6b0b4e99bbbe5b7a5e697a5e8aa8c-5-e9858de68ea5-cable-e7b79a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
這次施工就只有佈兩種線材. 我用 UTP 用來佈電話及網路用的線路, 而有線電視(第四台), 無線數位台(DVB), 還有監控系統, 我就通通統一用 cable 線來佈. cable 線我直接挑 RG/6U (美規的說法, 日規是說 5C2V). 買了兩綑大通128編的線, 一綑 100m, 不過這個剩的比較多..
</p>
<p>
開始印象最深的, 就是之前弄的裝牆上的第四台接頭, ouch, 訊號有夠糟, 來源訊號不算很棒, 不過至少普通電視看都還可以接受的程度, 一經過牆上的第四台插座, 整個雜訊糊到你想砸電視... 不過很明顯的問題是出在接頭.... 後來在Y拍看到<a href="http://tw.f2.page.bid.yahoo.com/tw/auction/b35515845?u=oneherts">這個賣家</a>的說詞, 很想回它一句 &quot;我實在不能同意你更多&quot; ... 沒錯, 我之前用的就是他講的 &quot;爛貨型&quot; ... 哈哈, 真的很爛, 不過你真的到店裡看, 絕大部份還真的都是賣這種... Orz
</p>
<p>
也因為有兩年前的教訓, 這次我就仔細研究了他的拍賣, 東西還蠻齊全的, 除了線材之外, 其它相關零件 &amp; 工具就直接跟他採購了. 其實要領只有一個, cable 傳遞的都是類比訊號, 如何確保訊號品質就是很頭痛的課題... 重要的就是線材跟接頭一定要在水準之上, 任何一個環結有雜訊進去, 就沒得救了. cable 外層都有至少一層的遮壁層, 靠金屬的屏蔽效應, 可以保護 core 內傳遞的訊號不被外介的電場及磁場干擾, 因此整個線路不能讓中間的銅軸漏到外面是最基本的. 之前買的[爛貨型]就是犯了這個大忌... 所以這次線材所有的接的地方, 一律都先裝第一篇講的那種接頭, 然後再裝到合適的地方. 線跟線中間接起來的部份也是, 兩頭都裝上接頭, 然後再用雙頭都是母的串接起來, 為的就是確保 SNR 不會變高的太離譜...
</p>
<p>
類比訊號真的很麻煩, 沒顧好的話, 訊號爛了就救不回來了. 因為要分接的線不少 (電視訊號要分四個點出去, 共五條線), 分配器能少接一個就少一個, 人家說 &quot;多個香爐多隻鬼&quot; 就是這樣, 每個器材的 frequency response 都不可能是很完美的一條水平線, 接太多通常高頻 or 低頻都會失真的比較多.. 我就直接買個一對五的分配器來用. 在挑選過程中才發現, 原來不是只有一對五那麼簡單, 通常這種分接的除了標記那個是 [IN] 之外, 還有特別標其中一個為 [OUT], 有的甚至會標上 -15dB 之類的, 通常這個 port 是訊號降低較少的, 讓你再串接下一個分配器用的... 沒接對你會發現, 有的線訊號很糟, 但是有的線還很棒, 強波器加下去可能其它的都變好, 而本來 ok 的那條訊號變太強, 又看不清楚了...
</p>
<p>
因為 cable 線又硬又粗, 接頭要拔也比較麻煩 (要用轉的), 因此這堆線我就沒塞進機櫃, 直接堆在外面... 反正機櫃也不能靠牆, 否則就會檔到門了. 那個 10cm 左右的空間剛好扔這堆線 &amp; UPS ... 機櫃裡就擺 PC 主機, Camera DVR, Phone Switch, ADSL modem, 24 ports Network Switch, Patch Panel...
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/5.cable_3E8A/CRW_3706(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3706(Canon PowerShot G2)" width="420" height="320" />
</p>
<p>
這我買的強波器, 右上是標 [OUT], 右下是 [OUT, -15dB], 放大增益較弱... 中間有兩個鈕可以調整放大的增益及斜率... 其實就是調整 frequency response 的高度及斜度, 控制你要放大高頻 or 低頻, 還有整體的放大率... 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/5.cable_3E8A/CRW_3705(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3705(Canon PowerShot G2)" width="420" height="320" />
</p>
<p>
我買的四分配+一分歧器.. 右上有標 [IN], 代表訊號源, 左上標 [OUT] 代表分岐, 會保留大部份訊號強度... 讓你拉到比較遠的地方 or 串下一個分配器, 剩下四個標 [BR] 代表 branch, 訊號強度平均分配出去..
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/5.cable_3E8A/CRW_3707(Canon%20PowerShot%20G2)_6.jpg" border="0" alt="CRW_3707(Canon PowerShot G2)" width="420" height="320" /> 
</p>
<p>
第一張圖的 [Out -15dB], 就是接到這裡來... 一分二的就沒有什麼 out / br 的區別了...
</p>
<p>
總共配了十一條 cable 線, 接頭我買了 50 個, 沒想到最後竟然也快用光了 @_@, 我本來還想剩一堆怎麼辦... 哈哈. 不過到剛住進來的那一天, 才真的把訊號接起來. 總算放心了, 從我媽那邊來的第四台訊號源, 中間經過兩個強波器, 一個分配器, 接了三四次, 最後到電視及電腦, 看起來的訊號依然很棒... 總算沒有白忙一場 [:D]
</p>
<p>
這次為了方便, 也為了以後接線方便, cable 我也直接跟網路一樣採星狀的佈線, 這樣好處是可以把所有強波器及分配器等都集中到同一個地方, 若要改接不同訊號源, 也可以很簡單的調整. 平常看到家裡的佈線好像沒人這樣弄的, 一來星狀會浪費很多線, 二來 cable 線又粗又硬, 線一多就全擠在一起, 管線太細跟本穿不了幾條. 不過優點也不少, 主要就是好管理, 而且對訊號的品質也比較好掌控..
</p>
<p>
這次沒放什麼照片... 哈哈, 就放張吳小皮的近照片好了 [H]
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/5.cable_3E8A/IMG_8456(Canon%20IXY%20DIGITAL%2055)_3.jpg" border="0" alt="IMG_8456(Canon IXY DIGITAL 55)" width="320" height="318" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2007-10-02 23:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-02 23:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-5-%e9%85%8d%e6%8e%a5-cable-%e7%b7%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>385</wp:comment_id>
			<wp:comment_author><![CDATA[fock.fock]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[focklimama@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-04 21:03:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-04 21:03:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問一下，你那個cable線的接頭叫啥名字，要用工具壓嗎，拍賣好像看不到也，謝謝。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>386</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-05 10:22:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-05 10:22:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[接頭的壓法，剛好前幾篇有:

http://columns.chicken-house.net/post/e6b0b4e99bbbe5b7a5e697a5e8aa8c-1-Cable-TV-e99da2e69dbf.aspx

我也是在網拍買的，你搜尋一下 &quot;手壓鉗&quot; 吧! 不過接頭別買錯喔...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 4. 配接電話線 &amp; 網路線</title>
		<link>http://columns.chicken-house.net/2007/09/26/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-4-%e9%85%8d%e6%8e%a5%e9%9b%bb%e8%a9%b1%e7%b7%9a-%e7%b6%b2%e8%b7%af%e7%b7%9a/</link>
		<pubDate>Wed, 26 Sep 2007 03:14:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/26/e6b0b4e99bbbe5b7a5e697a5e8aa8c-4-e9858de68ea5e99bbbe8a9b1e7b79a-amp3b-e7b6b2e8b7afe7b79a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
做到這個步驟, 漸漸脫離水電工的範圍了, 開始變成所有插電的東西都要管的 MIS ... Orz 線查好之後就要開始把設備給裝起來了. 這邊的工作就雜了點, 每個地方都同時進行... 包括網路, SERVER, 電話交換器, 監控錄影機, 還有第四台的強波器...
</p>
<p>
裝SERVER, 上機櫃, 還有裝 switch 跟配線等等的, 大概沒有人有興趣看, 趁這篇來講一下事先作的功課吧. 即使事前 survey 了兩個月, 到最後還是碰到一堆意外狀況... -_-&nbsp; 之前的工作通通都是 software development, 雖然都碰的到網路 &amp; server, 不過配線跟裝機都不算主要的工作, 因此也是一知半解的. 只壓一兩條線還可以買現成混過去, 這次要弄廿卅條線可不能這樣混...
</p>
<p>
首先光是線的接法就傷透腦筋, 因為有這些問題混在一起, 得一次解決掉. 網路線的接法就有兩種, T586A / 586B, 其實沒有什麼特別的規定, 兩端用一樣的壓法就是正常的線, 兩端不一樣就是所謂的跳線 (crossover), 看起來似乎沒差, 不過直到我查了 wikipedia 才發現, 原來 586A / B 的配線法是有典故的...
</p>
<p>
因為要一起處理電話線的關係, 也去查了 RJ11 的 pinout 定義, 無意間看到了<a href="http://www.tech-faq.com/lang/zh-TW/rj-11.shtml">對岸的文件</a>, 原來 RJ11 的 RJ 是指 &quot;註冊傑克&quot; ... 當下反應真是傻眼, 這是什麼鬼? 以後該設定 google 只要找英文及繁中就好... -_-, 去查英文的才知道是 <a href="http://en.wikipedia.org/wiki/Registered_jack">registered jack</a>, 登記有案的接頭規格就會有個編號, 就像 RJ-11, RJ-45,.. etc. 古早電話線只要二蕊就夠, 後來越來越多, 因此線的顏色也有定義, pinout 也有定義, 最中間一對線, 外圍第二對... 就像我找到的<a href="http://en.wikipedia.org/wiki/RJ11%2C_RJ14%2C_RJ25">這篇</a>.. 看起來紅綠黃黑那種線是舊式的, 新的都改成像網路線一樣, 單色跟半白的. 有了對照表也方便多了. 拿這張圖再跟 <a href="http://en.wikipedia.org/wiki/TIA/EIA-568-B">586A / 586B</a> 的 pinout 對照一下, 原來 586A 中間 4 pin 是跟 RJ11 相容的, 12 跟 78 再多兩對線就是 586A, 然後為了跳線才多了 586B ..
</p>
<p>
搞了半天, 原來是這樣. 看完才發現唸電信系, 對這些一點幫助都沒有... 哈哈, 跟同學聊過, 電信是不管這個的, 電匠才要管, 還叫我去考執照... 嘖嘖... 因為上一篇有提到, 電話線網路線都會接到 patch panel, 因此我就得做幾條 patch cord, 一頭是 RJ45, 另一頭是 RJ11, 因此決定統一都用 586A ... 這樣問題就單純多了.
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/4_2D9A/image_3.png" border="0" alt="image" width="420" height="278" /> 
</p>
<p>
因為都是事後寫的, 過程中沒拍到照片就來不及了, 照片中只有兩條線是接到 switch 的, 其它都是一頭網路一頭電話... 另一端就是接到電話總機. 這種線沒人在賣, 只能自己做... 如果沒有看完上面那堆文件, 還真搞不懂這種線要怎麼做... 順帶提一下, 電話總機就是這台, 閃藍光的, 產品網址在<a href="http://www.tomat.com.tw/PABX/CD2000A-T.htm">這裡</a> (<a href="http://www.tomat.com.tw/PABX/CD308A-con-t.htm">說明</a>), 可以接三外線八內線, 剛剛好夠我用. 這台大概在促銷, 比其它產品便宜很多, 主機加四台還不差的電話 (就普通的電話, 不是專用分機), ntd 2950... 很好裝, 背後有一堆電話插座, 接法就像 IP 分享器一樣, 把外線接在一頭, 內線就像 HUB 一樣插上去, 電源打開, 就搞定了...
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/4_2D9A/image_9.png" border="0" alt="image" width="420" height="210" /> 
</p>
<p>
&nbsp;
</p>
<p>
最後總算順利的把牆上的電話線接頭 (RJ11), 經過 patch panel (RJ45), patch cord (RJ45 + RJ11), 順利的接到電話總機 (RJ11) 了.. 接頭規格換來換去還真麻煩, 沒辦法..., 為了這個再去買一片電話用的 patch panel 實在太貴了, 一點都不划算... 只好出此下策.
</p>
<p>
這階段搞定後, 牆上的電話及網路接頭就算都完成了, 最後都能順利的接通到 network switch 及 telephone switch ... 最後補一下怎麼測這種線. 之前講到有買台測線器, 把網路線兩頭都插上測線器按個鈕, 看燈號就知道線有沒有問題. 測線器長這樣:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/4_2D9A/image_6.png" border="0" alt="image" width="420" height="320" /> 
</p>
<p>
我買的是很陽春的款式, 只能測 RJ45 跟 RJ11.. 看右邊的鑰匙鍊, 大概就想像的出整台的大小了, 很小一台, 7x 元而以, Y拍買的, 幫<a href="http://tw.page.bid.yahoo.com/tw/auction/1163911957?u=:partsworld66">賣家</a>打個廣告好了. 吃的是 9V 方型的電池, 電池都要跟測線器一樣貴了, 嘖嘖... 測線器本身是可以分兩塊的, 方便你拆開各接在線的兩端. 我的作法是多做兩條線 (下圖紅色的部份), 像這樣接起來, 按下開關就可以測:
</p>
<p>
<font color="#c0c0c0">測線器 <font color="#ff0000">o----------------o</font> 牆上的接頭 |------------//------------| PatchPanel <font color="#ff0000">o----------------o</font> 測線器</font>
</p>
<p>
運氣不錯, 所有的線都沒給我出問題, 通過測試... 下回講的是一樣的東西, 不過對象換成 cable tv ...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2007-09-26 03:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-26 03:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-4-%e9%85%8d%e6%8e%a5%e9%9b%bb%e8%a9%b1%e7%b7%9a-%e7%b6%b2%e8%b7%af%e7%b7%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>387</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://che.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-30 08:18:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-30 08:18:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太厲害了!!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>388</wp:comment_id>
			<wp:comment_author><![CDATA[Wayne]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nick.exe@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-22 01:28:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-22 01:28:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以請教一下 一頭是 RJ45, 另一頭是 RJ11 要怎麼接？ 顏色該怎麼對？最近對這個很苦惱，很幸運找到這篇。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>389</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-22 03:39:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-22 03:39:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[RJ45 那頭就照 586A 的規格接，看這張表有講那個 PIN 要對那個顏色的線:
http://en.wikipedia.org/wiki/TIA/EIA-568-B

RJ11 則是照這張表的對照表來接:
http://en.wikipedia.org/wiki/RJ11%2C_RJ14%2C_RJ25

不論要壓插座，或是要壓水晶接頭，都這這兩張表的規格就不會錯(記得用 586A)。
一般電話只用到二芯，等於只用到藍色那對線。有的分機要用四芯，則會用到藍橘兩對... 希望這篇對你有幫助 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>390</wp:comment_id>
			<wp:comment_author><![CDATA[Jacky]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jakilog@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-09 14:51:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-09 14:51:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實不用作一端 RJ-11, 一端 RJ-45 的線啦.
直接拿兩端都 RJ-11 的電話線接 panel 到電話總機就可以了
另外, 資訊面板的三個頭, 本錢夠的話, 其實直接用三個 RJ-45 也是沒問題的
因為 RJ-45 相容 RJ-11 呀...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>391</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-10 01:27:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-10 01:27:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jacky:

啊，耍寶了，原來我都在做白工... @@
我是試過RJ-11可以插進RJ45的插座沒錯，不過心裡就覺的毛毛的，也沒看過有人這樣用... 想想還是乖乖的壓一條RJ11+RJ45的線好了=_=

謝謝你的資訊啊:D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>392</wp:comment_id>
			<wp:comment_author><![CDATA[小朋]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Munching@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-05-04 06:58:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-05-04 06:58:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問一下，最近我家申請了光世代，不附掛電話。但我家只有一個內嵌牆壁的雙孔電話盒，且已接兩隻市話。那他還可以從那邊湊出第三條電話線以供寬頻使用嗎？
謝謝]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>393</wp:comment_id>
			<wp:comment_author><![CDATA[公雞]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tsaiwenhsiu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-08-25 22:12:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-08-25 22:12:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[師傅你太厲害了！
最近小弟想買西門子的有線電話，但只有大陸有賣
想託大陸的朋友買，但不知道他們大陸電話線頭的規格
符不符台灣的規格，可以在我們臺灣用嗎？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 3. 查線 &amp; 標線</title>
		<link>http://columns.chicken-house.net/2007/09/18/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-3-%e6%9f%a5%e7%b7%9a-%e6%a8%99%e7%b7%9a/</link>
		<pubDate>Tue, 18 Sep 2007 18:44:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/18/e6b0b4e99bbbe5b7a5e697a5e8aa8c-3-e69fa5e7b79a-amp3b-e6a899e7b79a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
當初沒事先跟水電師傅講好, 要在線上面標號, 結果拉了一大把線, 查線就變苦差事了 [:&#39;(] 後來想了半天, 每組面板都是一綑線 (有的三條有的四條), 共十一綑, 我要能找到是那一綑, 還要能對應到那一條是電話那一條是網路... 
</p>
<p>
雖然有買測線器, 兩頭裝上去按個鈕就知道對不對, 不過測線器的前題是接頭都要裝好啊... 我拉到機櫃的線不要裝接頭, 直接接在 patch panel 上面, 如果接頭都壓上去再拔掉, 也太浪費了... 想來想去這樣最快...
</p>
<ol>
	<li>先把面板裝好, 電話網路插座都裝好 (就是前兩篇講的)<br />
	- <a href="/post/e6b0b4e99bbbe5b7a5e697a5e8aa8c-1-Cable-TV-e99da2e69dbf.aspx">水電工日誌 1. Cable TV 面板</a><br />
	- <a href="/post/e6b0b4e99bbbe5b7a5e697a5e8aa8c-2-e8b387e8a88ae68f92e5baa7-2b-e99da2e69dbf.aspx">水電工日誌 2. 資訊插座 + 面板</a> </li>
	<li>一條線有四對線, 我同一捆的線都沒超過四條, 因此做了三個 RJ-45 網路接頭, 以 586A 的規範, 做了三個接頭, 分別短路橘,綠,棕這三對線, 另外做了一個 RJ-11 電話接頭, 短路藍色那對線<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3_1078A/CRW_3616(Canon%20PowerShot%20G2)%20(Custom)_3.jpg" border="0" alt="CRW_3616(Canon PowerShot G2) (Custom)" width="420" height="320" /> </li>
	<li>開始查線. 把剛才的接頭都裝上去, 然後另一頭用三用電錶一條一條量... 量到電阻很低的話 (大概 5 歐姆以內), 那就找到了, 一定是同一捆... 然後同一捆每一條都量一下, 看是那一對線短路, 就知道另一頭是那個插座了... </li>
	<li>TV cable 也差不多, 不過古早在交大宿舍用的網路線還是 BNC 接頭, 當時有幾個終端電阻還留著, 就直接拿來用了... 另一頭只要量到電阻是 50 歐姆就對了.. 第一張圖是合體的樣子, 因為 catv 的 f 頭跟 bnc 接不起來, 所以中間串了一個轉接頭, 為了插拔方便 (有十一條要測.. ), 多串了一個快速接頭. 第二張就是拆該的樣子..<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3_1078A/CRW_3619(Canon%20PowerShot%20G2)%20(Custom)_3.jpg" border="0" alt="CRW_3619(Canon PowerShot G2) (Custom)" width="420" height="320" /><br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3_1078A/CRW_3620(Canon%20PowerShot%20G2)%20(Custom)_3.jpg" border="0" alt="CRW_3620(Canon PowerShot G2) (Custom)" width="420" height="320" /> </li>
	<li>事先作好的 excel 表, 先把每個插座編好號碼, 然後找到機櫃那頭對應的線之後, 就用號碼環標一下號碼... <br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3_1078A/IMG_7769(Canon%20IXY%20DIGITAL%2055)%20(Custom)_5.jpg" border="0" alt="IMG_7769(Canon IXY DIGITAL 55) (Custom)" width="420" height="553" /> <br />
	</li>
</ol>
<p>
看起來蠻簡單的, 不過也是挺累的... 比如標號碼的原則怎麼標, 我也是想了好幾種編碼方式... 一盒號碼環買來是 0 ~ 9 各 10 個, 我那麼多條線一定要兩位數, 而一盒號碼環頂多標到 50 個號碼... 每條線兩端都要標個數字, 因此最多標 25 條線, 而我需要 25 對一樣的數字... 這時如何用有限的數字環標出足夠的數字, 就得先規劃一下了.. 如果直接 01 ~ 25 標下去一定不夠, 因為光是 01 ~ 09 就得用掉 20 個 0, 我那有那麼多 0 ... 
</p>
<p>
最後想到的方法是這樣, 每個數字分一半, 因為要兩對號碼, 因此我只能用 0 ~ 9 各五個來組合出 25 組不同號碼.. 再把 5 ~ 9 當十位數, 0 ~ 4 當個位數... 所以最後的數字為:
</p>
<p>
50, 51, 52, 53, 54<br />
60, 61, 62, 63, 64<br />
70, 71, 72, 73, 74<br />
80, 81, 82, 83, 84<br />
90, 91, 92, 93, 94
</p>
<p>
不過到後來又想, 牆上的插座其實不用再標號, 反正線不會跑掉, 而且只標 25 個號碼也不夠, 大概有 40 個號碼要標... 所以一條線只要在機櫃的那端標號就好... 這樣的話, 標號的規則又要調整一下... 這次直接分兩區, 0~4 各 10 個, 5~9 各 10 個, 組合出的號碼為:
</p>
<p>
00,01,02,03,04<br />
10,11,12,13,14<br />
20,21,22,23,24<br />
30,31,32,33,34<br />
40,41,42,43,44
</p>
<p>
55,56,57,58,59<br />
65,66,67,68,69<br />
75,76,77,78,79<br />
85,86,87,88,89<br />
95,96,97,98,99
</p>
<p>
剛剛好, 把所有的數字環都用光光... 哈哈. 真是無聊, 一定有人問幹嘛不多買一盒就好? 沒辦法, 工程師的鳥個性就是這樣, 不想個漂亮的解法解掉就是不大爽...
</p>
<p>
好不容易線都標好了, 也查好了, 下一步就是接線了... 把這堆線接到 patch panel, 或是接到電話總機, 強波器, DVR .... Orz..
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2007-09-18 18:44:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-18 18:44:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-3-%e6%9f%a5%e7%b7%9a-%e6%a8%99%e7%b7%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>394</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-19 00:02:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-19 00:02:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["工程師的鳥個性就是這樣, 不想個漂亮的解法解掉就是不大爽..."

工程師不會有鳥個性..所以這句話得改改..

"G的鳥個性就是這樣, 不想個漂亮的解法解掉就是不大爽..."

PS.最好這篇的 Bot Check (required) 還是 請輸入 "叭樂雞萬歲" ..嘛的..
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>395</wp:comment_id>
			<wp:comment_author><![CDATA[huei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-19 01:14:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-19 01:14:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看完這一系列，很難跟進耶~
好麻煩喔~hoho~
只能說 佩服了!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>396</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-19 08:39:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-19 08:39:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很好跟進啦..只要線拉好..然後有請拉樂雞水電工..就可以了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>397</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-19 23:01:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-19 23:01:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很好跟進啦 :D, 線沒那麼多條, 沒拉那麼多種線的話, 那倒是很簡單... 倒是綁線 (就是那種拉緊就打不開的塑膠繩) 要買一包, 不然那堆線很難對付..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>398</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-19 23:03:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-19 23:03:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 你注定要多打幾次 "叭樂雞萬歲" ... 認命吧 :D, 我可以給你看 source code, 我可沒有做弊... [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>399</wp:comment_id>
			<wp:comment_author><![CDATA[kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-21 15:55:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-21 15:55:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇塞，老大，你還真有閒工夫耶，等你老的時候，可以跟兒子說：老爸當年很神勇哦，經過精密的分析設計，就把查線和標線的工作做好勒，厲害吧!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>400</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-22 05:51:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-22 05:51:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖, 聽起來真酸...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 2. 資訊插座 + 面板</title>
		<link>http://columns.chicken-house.net/2007/09/14/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-2-%e8%b3%87%e8%a8%8a%e6%8f%92%e5%ba%a7-%e9%9d%a2%e6%9d%bf/</link>
		<pubDate>Fri, 14 Sep 2007 04:09:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/14/e6b0b4e99bbbe5b7a5e697a5e8aa8c-2-e8b387e8a88ae68f92e5baa7-2b-e99da2e69dbf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
繼上一篇 [Cable TV 面板] 後, 接下來是網路線跟電話線的面板... 這部份的工具就少的多了, 靠的完全是多花近一倍的錢買懶人用的資訊插座... 哈哈. 因為這次拉了很多條線, 每間房間都至少拉了兩條網路線, 因此電話線也懶的另外拉了, 直接也用網路線材, 拉星狀架構, 然後裝電話總機.
</p>
<p>
會這樣拉, 為的是以後如果不想要電話線了, 頭拔掉換一個就變網路了, 同時用星狀架構也好維護, 用電話交換器也不用耽心分機接太多會推不動等等問題...
</p>
<p>
扯遠了, 這些是後面幾篇要寫的, 直接切入正題, 面板...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3514(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3514(Canon PowerShot G2)" width="660" height="500" />
</p>
<p>
首先, 這是水電師傅幫我拉好的線, 線我是去買整箱的AMP Cat5e UTP 來用, 直接拉三條, 兩條網路用, 一條電話用... 這個線比 cable 細一點, 也軟一點, 所以我留的比較長, 大概 10 ~ 15 cm 都還塞的進牆壁...
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3528(Canon%20PowerShot%20G2)_2.jpg"></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3518(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3518(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3518(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
便宜好用的剝線刀, 線剪到適當長度後, 留個 2cm, 用剝線刀夾著繞一圈, 皮就剝掉了...
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3517(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3517(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3517(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
這就是貴鬆鬆的 3M 免工具的資訊插座, 這一定要推一下... 我是買最便宜的, Cat5e, 沒防塵蓋, 沒有接地... 一個要 NTD 78.. 普通的只要三四十啊... 不過這一定是值得的, 請繼續看. 還有更高級的一個要兩三百, 那種實在是買不下去, 這種就很好用了...
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3519(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3519(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3519(Canon PowerShot G2)" width="244" height="184" /></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3520(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3520(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3520(Canon PowerShot G2)" width="244" height="184" /></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3524(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3524(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3524(Canon PowerShot G2)" width="244" height="184" /></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3525(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3525(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3525(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
安裝就是這樣而以, 它的零件有兩片. 把小片的套環穿過剝好皮的線, 然後照著外面印的色碼標示, 把一樣顏色的線卡到縫裡, 多的線剪掉, 就完成第一步了. 通常壓這種東西最煩的就是 586A / B 的色碼實在不大好記, 這個接頭把順序調過了, 每對線都是白色的在前面, 有顏色的在後面, 做了一兩個頭之後連看都不用看就記起來了...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3527(Canon%20PowerShot%20G2)_2.jpg"></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3526(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3526(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3526(Canon PowerShot G2)" width="244" height="184" /></a><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3527(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3527(Canon PowerShot G2)" width="244" height="184" /><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3528(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3528(Canon PowerShot G2)" width="244" height="184" /> <a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3529(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3529(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3529(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
接下來要指揮艇組合了... 第二個零件就裝上去, 兩片黑黑的外殼把剛才第一片零件包起來, 扣住就完成了...
</p>
<p>
沒錯, 這樣就好了... 真沒意思, 這段跟本是在打屁 &amp; 貼圖而以嘛... 哈哈
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3531(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3531(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3531(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
接下來是電話線的接頭. 這部份就沒那麼好命了, 買不到像剛才那種好用的, 這個就是普通的電話插座, 沒啥特別的, 得靠壓線工具, 剛才的剝線刀就派上用場了... 這個一樣有彩色標示, 照著線的顏色卡進去就好了. 只不過這邊不像 3M 的那麼輕鬆...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3532(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3532(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3532(Canon PowerShot G2)" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3533(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3533(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3533(Canon PowerShot G2)" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3534(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3534(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3534(Canon PowerShot G2)" width="244" height="184" /></a><a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3535(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3535(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3535(Canon PowerShot G2)" width="244" height="184" /></a> 
</p>
<p>
第一張圖是剝線刀的前端, 很陽春的壓線器, 把卡好的線用頭擠進去, 自然會有金屬片刺破線的外皮, 直接接觸到裡面的銅線... 六個接點都弄好後把多的線剪掉就好了. 不過這個稍微難弄了點, 以前沒有買工具, 用美工到弄半天弄到手很痛... 這次有買工具, 不過也是不小心壓壞一個接頭.. [:&#39;(]
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3537(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3537(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3537(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
接頭都裝好後, 再來就是面板了, 面板我是直接在 Y 拍一起買 3M 的, 剛才那三個頭就一個一個塞進去...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;<a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3538(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3538(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3538(Canon PowerShot G2)" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3539(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3539(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3539(Canon PowerShot G2)" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3540(Canon%20PowerShot%20G2)_2.jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/2_30A2/CRW_3540(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_3540(Canon PowerShot G2)" width="244" height="184" /></a>
</p>
<p>
塞好的樣子 (背面), 另一張是正面... 然後鎖在牆上就完成了. 其實面板還有附一些小配件, 左右兩條長條型的凹槽, 是可以放張紙片進去, 然後有個透明的塞路路片可以蓋住. 一方面作標示, 另一方面把醜醜的螺絲擋起來...
</p>
<p>
另外它也有附三片彩色的小片, 可以直接裝在每個孔的上方, 讓你用彩色作標示. 這邊我還沒想好要怎麼標, 就暫時沒裝上去...
</p>
<p>
這邊的進度就快多了, 大概十分鐘不到就搞定一片面板... 不過麻煩的開始了. 拉線時忘了請水電幫我把線標上號碼 :~~~~ 總共卅條線怎麼找啊 :~~~~ 這就值得再寫一篇了... 哈哈... 敬請期待續集 :D
</p>
<p>
&nbsp;
</p>
<p>
--<br />
3M 面板跟插座當初買的不大夠, 我想再補買幾個, 有沒有人要一起買?
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date><![CDATA[2007-09-14 04:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-14 04:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-2-%e8%b3%87%e8%a8%8a%e6%8f%92%e5%ba%a7-%e9%9d%a2%e6%9d%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>401</wp:comment_id>
			<wp:comment_author><![CDATA[dodoho]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cheerfat@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-10 23:07:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-10 23:07:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[要搭配3M資訊面版的話
我網路的部分是用3M的資訊插座
那請問電話線的插座也有專門的嗎？
還是買一般水電行的即可？
感謝說明]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>402</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-11 20:09:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-11 20:09:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[那個面板跟插座都是標準規格的啦，隨便買都會合。

我只是剛好面板跟資訊插座都買 3M 的，電話的插座就是隨便買的...

只不過你別買到一般電源插座用的那種 size 就好.. ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>403</wp:comment_id>
			<wp:comment_author><![CDATA[thepiano]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thepiano@ms22.hinet.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-12 15:32:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-12 15:32:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問您 3M資訊插座 跟 資訊面板 是跟誰買的?
謝謝!
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>404</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-14 14:11:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-14 14:11:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我是在 Y 拍上面買的，有個賣家 (好像叫三明資訊還是啥的?) 專賣一堆 3M 的網路架設材料...

不過剛才看了一下，已經沒賣我用的這種 &quot;便宜&quot; (跟本不便宜，只是其它款更貴 =_=) 的插座了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>405</wp:comment_id>
			<wp:comment_author><![CDATA[nookie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wadebp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-31 20:40:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-31 20:40:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇文章放在bookmark裡好久了，最近總算可以自己來拉線了，請問像3M的那種資訊面板可以同時裝資訊插座跟有線電視的同軸插座嗎？從你的照片來看感覺電視的插座頗大的@@..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>406</wp:comment_id>
			<wp:comment_author><![CDATA[nookie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wadebp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-31 20:42:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-31 20:42:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[補個感謝，上一篇少打了@@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>407</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-01 19:39:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-01 19:39:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[一般插座或牆上的電源開關，好像叫 COSMO 還啥的，就是我用的 CATV 座，那種比較大顆，一個座最多裝三顆。 

但是 3M 資訊插座那種的規格比較小，可以插到 4 ~ 6 顆的面板都有。那種規格叫作 Keystone, 兩種不一樣。你要用 3M 資訊面版裝 CATV 的話，要買這種規格的才行。不過 CABLE 線很硬，實在是不大好裝 @@ 

找了一下網址，有像這種的: 
www.winfordeng.com/products/network/wjf1.php ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>408</wp:comment_id>
			<wp:comment_author><![CDATA[nookie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wadebp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-04 01:54:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-04 01:54:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[原來有這種標準規格在，長知識了！這幾天也看到國際牌有出一系列包括CATV跟資訊插座的面板與插座，看來又是一番考慮了，感謝站長！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>水電工日誌 1. Cable TV 面板</title>
		<link>http://columns.chicken-house.net/2007/09/12/%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-1-cable-tv-%e9%9d%a2%e6%9d%bf/</link>
		<pubDate>Wed, 12 Sep 2007 03:37:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/12/e6b0b4e99bbbe5b7a5e697a5e8aa8c-1-Cable-TV-e99da2e69dbf.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
新家室內裝潢差不多都好了 (除了工頭還有一兩個小地方還在磨菇之外..), 總算可以開始我的配線工程了. 第一步是把牆上穿出來的 cable 線作成蓋板, 方便使用. 有鑑於之前裝過類似的東西, 那個接頭就是要你把線剝開, 然後直接用螺絲把 coaxial cable 的外層及中間的銅軸固定起來, 那種接頭的訊號實在是糟的可以, 這次我特地上網找了其它的 solution, 最後買了壁內的接頭, 長啥樣? 其實就是一搬 catv 的頭, 只不過是可以裝在牆上的那種. 好處是線不用剝開, 訊號可以好好的躲在遮璧層裡面不會受到干擾, 缺點是你得壓個接頭在牆璧裡面, 材料貴一點就算了, 重點是牆裡挖的洞空間有限...
</p>
<p>
不囉唆了, 我邊弄還邊拍照, 有點手忙腳亂... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3495(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3495(Canon PowerShot G2)" width="500" height="380" />
</p>
<p>
這是原來的樣子, 水電幫我從牆裡把線拉出來, 我只留了10cm就把它剪掉. 其實是留越長越好, 因為只能剪短不能拉長了... 不過這種線 (RG/6U) 有夠硬, 加上最後有個接頭是硬的, 小小一個洞實在是塞不了多少電線... 留 10cm 已經很勉強了...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3496(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3496(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
買了一把專門剝 cable 的剝線刀, 超好用, 只要夾在線上面轉幾圈, 剝線刀拔下來, 線就切好了, 這張圖就是切完後把外面的鐵絲網撥開的樣子...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3497(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3497(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
接下來這是買來的接頭, 一顆十五元, 好處是它不需要用鉗子把外面的鐵殼壓到變型來固定接頭 (一般外面買的就是把鐵圈壓成六角型那種). 這種是線直接塞進接頭裡, 然後有手壓鉗把後面那塊藍色的塑膠擠到接頭內的空間, 完全擠進去後線就牢牢固定住了. 這種接法因為包覆的遮敝層沒有漏出來, 因此訊號的品質會好一些, 接頭當然也比較貴 [:&#39;(] (一般的大概三塊還是五塊錢而以... )
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3499(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3499(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3500(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3500(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
這把就是手壓鉗, 它會把藍色的塑膠擠進去, 就大功告成了, 很簡單, 也很輕鬆, 叔叔沒有練過, 小朋友盡量學...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3502(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3502(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
這是壓好的樣子, 看起來比一般店裡買到的高級多了, 真正算一算也沒有貴多少... 反正自己家裡用的, 不差這一點錢...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3503(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3503(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
接下來, 為了保護接頭不會進水氣 (其實是心理作用及視覺效果佔大多數), 在接頭跟線之間套一小段熱縮管... 我也沒去量要多長, 大概隨便剪了三公分就套上去了. 直徑是用 11mm 的, 一公尺廿幾塊... 我也忘了...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3504(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3504(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
熱縮管原則上是用吹風機吹就會縮起來, 不過我沒有吹風機 [:&#39;(] (還關在不知道那一個紙箱裡), 二來大半夜的開起來也吵, 三來太慢了, 我喜歡猛一點的招式... 就直接拿打火機烤一下...
</p>
<p>
套上熱縮管烤過之後就變這樣...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
接頭的部份到這裡就完成了, 就跟一般買現成的線差不多. 再來是面板的部份.:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3505(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3505(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
這是跟水電工多要的, 兩孔蓋板... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3507(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3507(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
這是另外去買的接頭, 兩頭都是母的, 剛才作好的接頭可以直接鎖上去.
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3508(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3508(Canon PowerShot G2)" width="500" height="380" />
</p>
<p>
蓋板有兩層, 裡面那層可以裝三顆這種接頭, 其實一般家裡看到的插座都是這樣用的, 選擇很多, 電話, 網路, 開關, 電力插座, TV, 甚至連定時開關, 感應開關(有人接進就自動打開那種) 都有這種規格, 總之你就是自己挑三顆就對了... 這張圖是裝了兩顆的樣子...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3510(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3510(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
把剛做好的接頭裝上去... 現在可以想像一下線為何不能留太長了... 接頭硬的部份就五公分長了, 線又很硬, 跟本轉不到兩圈就塞不進去了.. 我有兩條線, 留10cm就已經塞到手痛了, 最後裝好感覺好像隨時會爆開來一樣 -_-
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3512(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3512(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
最後把內層的蓋板鎖在牆上的樣子...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CableTV_3276/CRW_3513(Canon%20PowerShot%20G2)_3.jpg" border="0" alt="CRW_3513(Canon PowerShot G2)" width="500" height="380" /> 
</p>
<p>
再把漂亮的外層蓋板蓋上去, 完成, 收工... 明天待續, 再來是砸下重金買的 3M RJ-45 接頭... [H]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2007-09-12 03:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-12 03:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b0%b4%e9%9b%bb%e5%b7%a5%e6%97%a5%e8%aa%8c-1-cable-tv-%e9%9d%a2%e6%9d%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>409</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-13 01:01:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-13 01:01:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這個SOLUTION 真的太好了
為什麼現在才說!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>410</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-13 01:48:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-13 01:48:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[誰叫你要比我早搬家... 哈哈
等到你家要重新裝潢時, 我這堆工具跟剩下的材料可以給你用 [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>411</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-13 13:05:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-13 13:05:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[等我買房子時，就可以用得到了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>412</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-13 18:27:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-13 18:27:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[要買了嗎? [:D]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Finally...</title>
		<link>http://columns.chicken-house.net/2007/09/11/finally/</link>
		<pubDate>Tue, 11 Sep 2007 03:35:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/11/Finally.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
雖然只有一台電腦連上線, 雖然家裡有 22 ports 只接好了 2 ports, 電話線則是一條都沒接, 不過... 最重要的 blog server 上線啦 [:D]
</p>
<p>
看到地上一堆線, 就會想... 當初幹嘛拉那麼多條? Orz...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2007-09-11 03:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-11 03:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[finally]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>413</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-11 12:26:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-11 12:26:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[像主機代管嗎?
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>414</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-11 14:20:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-11 14:20:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[代管會陪錢吧 [H], 那個小機櫃擺兩台就滿了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>停機搬家了 :D</title>
		<link>http://columns.chicken-house.net/2007/09/06/%e5%81%9c%e6%a9%9f%e6%90%ac%e5%ae%b6%e4%ba%86-d/</link>
		<pubDate>Thu, 06 Sep 2007 17:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2007/09/06/e5819ce6a99fe690ace5aeb6e4ba86-D.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
明天早上 (2007/09/07)就要停機了, 從停機到上線, 要忙的事還真不少...
</p>
<p>
2007/09/07 早上, 中華電信移機, 電話網路都不通<br />
2007/09/08 搬家 全部東西裝箱, 然後搬過去拆箱..<br />
當水電工, 把線路都弄好..<br />
電腦要換機殼, 重裝, 上機櫃, blah blah... 
</p>
<p>
Orz, 這堆要弄完, 大概要再等一個周末才有辦法, 所以下次網站上線至少就是 2007/09/17 ... 敬請期待.. [:D]
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2007-09-06 17:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-06 17:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%81%9c%e6%a9%9f%e6%90%ac%e5%ae%b6%e4%ba%86-d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>[RUN! PC] 2008 六月號</title>
		<link>http://columns.chicken-house.net/2008/06/03/run-pc-2008-%e5%85%ad%e6%9c%88%e8%99%9f/</link>
		<pubDate>Tue, 03 Jun 2008 23:29:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/03/RUNPC-2008-06.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/RUNPC2008_14A41/IMG_8698%20(Canon%20PowerShot%20G9)_1.jpg" border="0" alt="IMG_8698 (Canon PowerShot G9)" width="468" height="275" /> 
</p>
<p>
&nbsp;
</p>
<p>
運氣不錯，還有續集耶 [:D] 
</p>
<p>
沒想到這些有點冷門的內容，雜誌社還願意刊... 真是太感謝了... 隔了兩個月刊出第二篇了。不過這次稿擠，最後簡介跟網址沒貼出來，讀者大概都看不到這邊吧，沒關係，看的到的就是有緣人...。 
</p>
<p>
一樣，一方面只是留個紀念，另一方面讓讀者 (如果真的有的話) 有個留話的地方。文章內提到的 SAMPLE CODE 在<a href="http://demo.chicken-house.net/runpc/2008-04/2008-04.zip" target="_blank">這裡</a>。想要線上試試範例程式的可以到 <a href="http://demo.chicken-house.net/runpc/2008-06/" target="_blank">這裡</a> 執行看看。 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2008-06-03 23:29:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-03 23:29:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2008-%e5%85%ad%e6%9c%88%e8%99%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[主婦]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-04 15:09:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-04 15:09:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[雖然我看不懂,不過還是要說蠻厲害的嘛~


--
BotCheck(請輸入 "叭樂雞萬歲" : 叭樂雞萬歲)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>250</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-04 22:40:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-04 22:40:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我一直期待海公公的文章,能登出GQ,獨家報導,壹週刊這類的雜誌上...XD

--
BotCheck(請計算答案: 4 + 3 =  7)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>FlickrProxy #4 - 修正同步上傳的問題</title>
		<link>http://columns.chicken-house.net/2008/06/03/flickrproxy-4-%e4%bf%ae%e6%ad%a3%e5%90%8c%e6%ad%a5%e4%b8%8a%e5%82%b3%e7%9a%84%e5%95%8f%e9%a1%8c/</link>
		<pubDate>Tue, 03 Jun 2008 15:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/03/FlickrProxy-4-e4bfaee6ada3e5908ce6ada5e4b88ae582b3e79a84e5958fe9a18c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
寫到這，越寫越拖抬了... 這次沒有加上任何 &quot;新功能&quot;，有的只是修正使用上的一些問題而以... 
</p>
<p>
&nbsp;
</p>
<p>
首先，還是要感謝愛用者 <a href="http://michadel.chicken-house.net/blogs/michadel/default.aspx" target="_blank">小熊子</a> 的回報，照片初次被下載時會觸發上傳到 Flickr 的動作，上傳完成才重新引導 Request 到 Flickr 存取照片。如果在這一連串動作尚未完成前，就有第二個 Request 跑來的話，那這張照片就會被傳到 Flickr 兩次...。Orz，枉費我還<a href="/wp-content/be-files/archive/tags/RUNPC/default.aspx" target="_blank">投搞</a>這些並行處理的文章，怎麼可以犯這種錯... 
</p>
<p>
就跟很多 BUG 一樣，難在沒想到，難在沒發現，難在不知道原因...，不然修正 BUG 倒是很簡單的事，感謝回報這個 BUG 的<a href="http://michadel.chicken-house.net/blogs/michadel/default.aspx" target="_blank">恩公</a>... 找到問題後剩下的 ISSUE 就迎刃而解了，要做的就是把關鍵的程式碼包裝在臨界區 (<a href="http://en.wikipedia.org/wiki/Critical_section" target="_blank">CRITICAL SECTION</a>) 內，以防這段 CODE 同時間執行多次。這段 CODE 不能太大，鎖定範圍太大會影響效能 (好不容易換了<a href="/post/Next-Ten-Years.aspx" target="_blank">四核CPU</a>，鎖太大就糟踏這顆 CPU 了...)，最後找出關鍵應該是 [判定是否需要上傳到 FLICKR] 及 [建立 FLICKR 副本檔] 這兩個動作，一定要包括在內，拆開的話就不能保證結果正確了。 
</p>
<div>
<strong>修正過的程式，加上 LOCK 鎖定部份程式碼</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            string flickrURL = null;            lock (this.GetType())            {                if (File.Exists(this.CacheInfoFile) == false)                {                    //                    //  CACHE INFO 不存在，重新建立                    //                    this.BuildCacheInfoFile(context);                    context.Response.AddHeader(&quot;X-FlickrProxy&quot;, &quot;Upload&quot;);                }            }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">string</span> flickrURL = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">lock</span> (<span class="kwrd">this</span>.GetType())
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">if</span> (File.Exists(<span class="kwrd">this</span>.CacheInfoFile) == <span class="kwrd">false</span>)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    {
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        <span class="rem">//  CACHE INFO 不存在，重新建立</span>
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">this</span>.BuildCacheInfoFile(context);
</pre>
<pre>
<span class="lnum">  10:  </span>        context.Response.AddHeader(<span class="str">&quot;X-FlickrProxy&quot;</span>, <span class="str">&quot;Upload&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    }
</pre>
<pre>
<span class="lnum">  12:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
寫好後，這段 CODE 越看越不順眼，雖然我的網站流量沒那麼大啦 [H]，不過怎麼可以這麼短視... 這段 CODE 的問題還是一樣，鎖定的範圍 &quot;太大了&quot; !! 會嚴重影響效能.. (如果流量真的很大的話) 
</p>
<p>
怎麼說? 不過才兩行，那到底是要縮到多小? 不不，問題其實不在於 LOCK 的區段到底有多少 CODE，而是該 LOCK 的只有對同一張照片的 Http Request 才該被阻檔下來，同時間有多個 Http Request 來下載不同張照片，以現在的點閱率來說我應該要高興吧... 幹嘛還去 LOCK 它? 不過上面的 CODE 就是在做這件事，不分青紅皂白只要是有上傳到 FLICKR 的動作就一率 LOCK。更糟的是如果有一張照片正在上傳中，其它照片的 Http Request 也都會被迫停下來等它傳完... 
</p>
<p>
&nbsp;
</p>
<p>
該要有個改進的版本了。LOCK過度也是初次碰到 Multi-threading Programming 的人很容易犯的錯誤，接下來看看第二個版本: 
</p>
<div>
<strong>修正過的版本，只會LOCK同一個檔案的REQUEST:</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            lock (this.LockHandle)            {                if (File.Exists(this.CacheInfoFile) == false)                {                    //                    //  CACHE INFO 不存在，重新建立                    //                    this.BuildCacheInfoFile(context);                    context.Response.AddHeader(&quot;X-FlickrProxy&quot;, &quot;Upload&quot;);                }            }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">lock</span> (<span class="kwrd">this</span>.LockHandle)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">if</span> (File.Exists(<span class="kwrd">this</span>.CacheInfoFile) == <span class="kwrd">false</span>)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="rem">//  CACHE INFO 不存在，重新建立</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">this</span>.BuildCacheInfoFile(context);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        context.Response.AddHeader(<span class="str">&quot;X-FlickrProxy&quot;</span>, <span class="str">&quot;Upload&quot;</span>);
</pre>
<pre>
<span class="lnum">  10:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
看起來只有第一行 LOCK STATEMENT 裡指定的物件不一樣而以。沒錯，這裡跟第一段 CODE 的差別只在於 LOCK 的標的物不一樣。同一個物件只能被 LOCK 一次，當物件被 LOCK 還沒放開時，第二個人想要 LOCK 同一個物件，很抱歉... 得先等第一個人願意放掉它才可以。LOCK不同物件就各不相干了。沒錯，這就是我要的邏輯。所以這個問題的關鍵在於，我如何讓每張照片有專屬的 &quot;物件&quot; 來 LOCK ? 
</p>
<p>
檔名的字串物件? 不適合... 可能有多個字串值相同，但是是不同物件... FileInfo? 也不行，因為找不到文件會保證同一個檔案拿到的 FileInfo 物件會是同一個... 沒辦法，只好自己弄一個。來看一下 LockHandle 的實作: 
</p>
<div>
<strong>LockHandle Property 實作的程式碼</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        private object LockHandle        {            get            {                string hash = this.GetFileHash();                lock (_locks)                {                    if (_locks.ContainsKey(hash) == false)                    {                        _locks.Add(hash, new object());                    }                }                return _locks[hash];            }        }        private static Dictionary&lt;string, object&gt; _locks = new Dictionary&lt;string, object&gt;();
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">private</span> <span class="kwrd">object</span> LockHandle
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    get
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        <span class="kwrd">string</span> hash = <span class="kwrd">this</span>.GetFileHash();
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="kwrd">lock</span> (_locks)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        {
</pre>
<pre>
<span class="lnum">   8:  </span>            <span class="kwrd">if</span> (_locks.ContainsKey(hash) == <span class="kwrd">false</span>)
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            {
</pre>
<pre>
<span class="lnum">  10:  </span>                _locks.Add(hash, <span class="kwrd">new</span> <span class="kwrd">object</span>());
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            }
</pre>
<pre>
<span class="lnum">  12:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">return</span> _locks[hash];
</pre>
<pre>
<span class="lnum">  14:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>}
</pre>
<pre>
<span class="lnum">  16:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> Dictionary&lt;<span class="kwrd">string</span>, <span class="kwrd">object</span>&gt; _locks = <span class="kwrd">new</span> Dictionary&lt;<span class="kwrd">string</span>, <span class="kwrd">object</span>&gt;();
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
其實以值來說，拿檔名就足夠拿來示別了，只不過有大小寫的問題要處理。拿檔案的內容做 MD5 實在有點殺雞用牛刀，不過因為處理照片本來就需要算檔案的 MD5 了，現成的就拿來用一下...。這裡我簡單的做了個 Dictionary，就放沒什麼用的 OBJECT，我只要這個 PROCESS 在有生之年，同一個檔案都會拿到同一個 OBJECT 就足夠了... 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
都寫到這還有什麼不滿意的? 還是有... 哈哈。因為我在測試時有過一個頁面，同一頁會放一堆圖檔...。試想一下當我瀏覽這頁面會發生什麼事? 
</p>
<p>
&quot;同時間 IE 發出了數個 HttpRequest 來跟我的程式要圖檔，如果正巧都是第一次，嗯，有限的頻寬要一次上傳多張圖檔到 Flickr，不就更慢了?&quot; 
</p>
<p>
就算我的頻寬沒問題，同一瞬間這麼多 UPLOAD 的動作，引起 Flickr 的 &quot;關切&quot; 就不好了... 我是不是應該要限制一下同時上傳的數量才對? 就像 FlashGet 可以限制同時下載的數量一樣... 
</p>
<p>
哈，不就是之前寫過的文章，用 SEMAPHORE ? 沒錯... 怎麼老覺的這篇像在替我其它文章打廣告用的... 事實上不見得要動用到 SEMAPHORE，如果你要限制的是一次只能一個 UPLOAD 動作，直接用各種的 LOCK 機制就夠了。如果你要限制並行的 UPLOAD 動作是兩個以上，甚至更動態隨著 LOADING 變化等等，才需要動用到 SEMAPHORE ... 
</p>
<p>
既然要 DEMO，就 DEMO 實際一點的 CODE 吧。假設我要限制並行 UPLOAD 的數量不超過 2 個，則需要把 CODE 改成這樣。首先要先準備好 SEMAPHORE 物件: 
</p>
<div>
<strong>準備 SEMAPHORE，事先插好兩根旗子</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        public static Semaphore FlickrUploaderSemaphore = new Semaphore(2, 2);
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> Semaphore FlickrUploaderSemaphore = <span class="kwrd">new</span> Semaphore(2, 2);
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
真正執行上傳動作的部份要加上 SEMAPHORE 的管控: 
</p>
<div>
<strong>用 SEMAPHORE 控制同步執行的數量</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            FlickrUploaderSemaphore.WaitOne();            photoID = flickr.UploadPicture(this.FileLocation);            FlickrUploaderSemaphore.Release();
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>FlickrUploaderSemaphore.WaitOne();
</pre>
<pre>
<span class="lnum">   2:  </span>photoID = flickr.UploadPicture(<span class="kwrd">this</span>.FileLocation);
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>FlickrUploaderSemaphore.Release();
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
嗯，真是小題大作，不過這種機會不拿來練習練習，真正碰到怎麼寫的出來? 如果各位對於在 ASP.NET 上怎麼使用 LOCK 及 SEMAPHORE 不大熟的，可以參考一下我<a href="/wp-content/be-files/archive/tags/RUNPC/default.aspx" target="_blank">投稿</a>的文章... 萬分感謝 [:D] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2008-06-03 15:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-03 15:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flickrproxy-4-%e4%bf%ae%e6%ad%a3%e5%90%8c%e6%ad%a5%e4%b8%8a%e5%82%b3%e7%9a%84%e5%95%8f%e9%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>FlickrProxy #3 - 終於搞定大圖網址錯誤的問題</title>
		<link>http://columns.chicken-house.net/2008/05/21/flickrproxy-3-%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a%e5%a4%a7%e5%9c%96%e7%b6%b2%e5%9d%80%e9%8c%af%e8%aa%a4%e7%9a%84%e5%95%8f%e9%a1%8c/</link>
		<pubDate>Wed, 21 May 2008 01:15:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/05/21/FlickrProxy-3-e7b582e696bce6909ee5ae9ae5a4a7e59c96e7b6b2e59d80e98cafe8aaa4e79a84e5958fe9a18c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
&nbsp;
</p>
<p>
由於在使用 Flickr API 時, 老是碰到上傳成功後, 結果拿到的照片 URL 不能看的問題... 被它整了好久, 不過總算解決了 @_@... 原來 API 拿到的資料是錯的, 嘖... 
</p>
<p>
說來話長, 不過既然花時間解決了就要記錄一下... 問題大概是這樣. 上傳照片完成之後可以拿到 photoId, 代表某一張放在 Flickr 上的照片. 之後透過 PhotosGetInfo(photoId) 這個 API 可以取得這張照片的相關資訊, 當然也有 MediumUrl, LargeUrl... 等等 properties 可以用. 
</p>
<p>
很直覺嘛, 要秀大圖我就直接拿 LargeUrl 就好, 偏偏有時是好的, 有時是壞的... API 傳回來的東西應該不會錯吧? 我心裡是這樣想的. 不過跟 Flickr 網站的 url 對照一下才發現, 竟然有時是不同的... 一路追下去, google 跟作者在 codeplex 網站上的 forums 都找了, 才發現... 
</p>
<p>
PhotosGetInfo( ) 抓到的只是一堆 ID, 然後用 Flickr 公布的網址格式 &quot;湊&quot; 出各種 URL. 然而過去 Flickr 層經有一次改變部份網址的格式, 當你的圖檔不是很大時, Flickr 判定沒有另外存一張大圖的需要了, 就直接跳到原圖 (original size). 而原圖的網址格式又不一樣, 因此當圖檔太小時, API 抓到的 LargeUrl 就會是錯的... 
</p>
<p>
My God,.... 為了這種鳥問題害我多白了好幾根頭髮... 找到原因後找 solution 就簡單了. 因應這個問題, 也多了一組 API: PhotosGetSizes( ), 直接連回 Flickr 明確的查詢可用的 size 有幾種, 連同它的網址及一堆相關資訊一起傳回來... 改用這個 API 傳回的資訊, 結果就正確了, 沒有圖掛掉的問題... Orz 
</p>
<p>
&nbsp;
</p>
<p>
不能怪人家 API 寫的不好, 只能怪自己功課沒作足... 不看文件直接拿 API 就用, 看名字猜用法才會這樣.. code 改一改就 ok 了, 少了這個不確定性, 原本畫蛇添足加上去的確認圖檔的動作也不用了.. 貼一下修改前跟修改後的 code: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>使用 PhotoInfo 物件 (可能會出現 photo not available) </strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            PhotoInfo pi = flickr.PhotosGetInfo(photoID);            string flickrURL = null;            string size = null;            try            {                flickrURL = this.CheckFlickrUrlAvailability(pi.MediumUrl);                size = &quot;medium&quot;;                flickrURL = this.CheckFlickrUrlAvailability(pi.LargeUrl);                size = &quot;large&quot;;                flickrURL = this.CheckFlickrUrlAvailability(pi.OriginalUrl);                size = &quot;original&quot;;            }            catch { }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>PhotoInfo pi = flickr.PhotosGetInfo(photoID);
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">string</span> flickrURL = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">string</span> size = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">try</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>{
</pre>
<pre>
<span class="lnum">   6:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.MediumUrl);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    size = <span class="str">&quot;medium&quot;</span>;
</pre>
<pre>
<span class="lnum">   8:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.LargeUrl);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    size = <span class="str">&quot;large&quot;</span>;
</pre>
<pre>
<span class="lnum">  10:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.OriginalUrl);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    size = <span class="str">&quot;original&quot;</span>;
</pre>
<pre>
<span class="lnum">  12:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  13:  </span><span class="kwrd">catch</span> { }
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<div>
<strong>改用 PhotosGetSizes( ) API</strong><span class="copycode">[copy code]</span> 
</div>
<div style="display: none">
<pre style="display: none">
            foreach (Size s in flickr.PhotosGetSizes(photoID).SizeCollection)            {                XmlElement elem = null;                elem = cacheInfoDoc.CreateElement(&quot;size&quot;);                elem.SetAttribute(&quot;label&quot;, s.Label);                elem.SetAttribute(&quot;source&quot;, s.Source);                elem.SetAttribute(&quot;url&quot;, s.Url);                elem.SetAttribute(&quot;width&quot;, s.Width.ToString());                elem.SetAttribute(&quot;height&quot;, s.Height.ToString());                cacheInfoDoc.DocumentElement.AppendChild(elem);            }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">foreach</span> (Size s <span class="kwrd">in</span> flickr.PhotosGetSizes(photoID).SizeCollection)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    XmlElement elem = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   4:  </span>    elem = cacheInfoDoc.CreateElement(<span class="str">&quot;size&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    elem.SetAttribute(<span class="str">&quot;label&quot;</span>, s.Label);
</pre>
<pre>
<span class="lnum">   6:  </span>    elem.SetAttribute(<span class="str">&quot;source&quot;</span>, s.Source);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    elem.SetAttribute(<span class="str">&quot;url&quot;</span>, s.Url);
</pre>
<pre>
<span class="lnum">   8:  </span>    elem.SetAttribute(<span class="str">&quot;width&quot;</span>, s.Width.ToString());
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    elem.SetAttribute(<span class="str">&quot;height&quot;</span>, s.Height.ToString());
</pre>
<pre>
<span class="lnum">  10:  </span>    cacheInfoDoc.DocumentElement.AppendChild(elem);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>}
</pre>
</div>
</div>
<p>
&nbsp;
</p>
<p>
嗯, 終於搞定. FlickrProxy 正式邁入實用的階段... 收工! 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<!-- end of code area -->
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2008-05-21 01:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-21 01:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flickrproxy-3-%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a%e5%a4%a7%e5%9c%96%e7%b6%b2%e5%9d%80%e9%8c%af%e8%aa%a4%e7%9a%84%e5%95%8f%e9%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<wp:comment>
			<wp:comment_id>251</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.darkthread.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-21 12:22:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-21 12:22:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不看文件直接拿 API 就用-->看了忽然冷汗直流，這是在說我嗎?
自從罹患重度資訊焦慮症之後，漸漸失去靜下來看文件的能力，總想著拿到Sample, Library就快動手把東西搞出來，反正遇到問題再解。看似衝勁十足動作很快，但有時會懷疑，我是否在用最有效率的方式生產??

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>252</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-23 17:04:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-23 17:04:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[文件啊文件,多少罪惡假汝之名而行之..嘖...



--
BotCheck(請輸入 "海娘娘永遠是對的" : 海娘娘永遠是對的)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>253</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-29 11:45:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-29 11:45:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[RTFM!

--
BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>FlickrProxy #2 - 實作</title>
		<link>http://columns.chicken-house.net/2008/05/19/flickrproxy-2-%e5%af%a6%e4%bd%9c/</link>
		<pubDate>Mon, 19 May 2008 01:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/05/19/FlickrProxy-2-e5afa6e4bd9c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
整個進度算是很順利，初版已經可以運作了，而且也成功的套用在<a href="http://michadel.chicken-house.net/blogs/michadel/default.aspx" target="_blank">小熊子的 BLOG</a> 上... 因為過去已經有幾個<a href="/post/e4b889e5808be5a5bde794a8e79a84-ASPNET-HttpHandler.aspx" target="_blank">類似的 HttpHandler</a> 的 code 可以直接拿來改了，反而真正的瓶頸是在瞭解如何操控 FlickrNet 這個 .NET 版的 Flickr API 身上 Orz。FlickrNet 碰到的問題後面再說明，先來看一下整個 Project 的源頭: system design。 
</p>
<p>
&nbsp;
</p>
<p>
這個程式的目標很明確，就是我不想改變任何的使用習慣，我要讓 blogger (比如我家大人) 完全不用理會 flickr 這東西的存在，也不需要在寫文章時去傷腦筋該把照片先放到 Flickr 然後再放到網頁上這類瑣事.. 因此我需要的是在 blog server 上有某些自動的機制，能夠自動把照片丟到 flickr 上，也能夠自動的把網頁上要顯示的照片轉到 flickr 那邊。而必要時，這些機制都能夠取消或調整，不會影響到 blog 的資料等等問題。 
</p>
<p>
初步的想法就是從接手這些圖檔的 HttpHandler 著手。如果前端 (BROWSER) 到 BLOG SERVER 上要求下載照片的要求都能經過我的控制，理論上我就能達成這個目的。因為前端的 Http Request 不需要修改，因此我這次的任務不需要像<a href="http://www.darkthread.net/" target="_blank">黑暗大哥</a>那樣辛苦的去<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/05/10/replace-html-of-asp-net.aspx" target="_blank">調整每一頁的 HTML code</a> (雖然我的方法也沒多輕鬆.. Orz)，這是我決定採用這個方式的主要優點。HTML不用改，我也不用改變原本上傳圖檔的方式，因此所有的調整都不會影響到最重要的 DATA，所有改變都是可以還原的。 
</p>
<p>
負責處理照片的 Http Handler 只要能依照這流程作事就夠了，因此等等會看到的程式碼也是很簡單: 
</p>
<ol>
	<li>接收 Http Request，如果條件符合 (確認這是要轉到 Flickr 的照片，檔案大小超過指定值... 等等) 則進行下一個步驟，否則就像一般的靜態檔案一樣，直接回傳檔案內容。 </li>
	<li>先檢查 CACHE 是否已經有對應的資訊 ( ASP.NET 內建的 Cache, 及在暫存目錄建立的 cache file ... 等等 )，有的話直接把 Http Request 重新導向到 Flickr 上同一張照片的網址。 </li>
	<li>如果 (2) 不成立的話，就要執行主要的動作 - 上傳到 Flickr 並且建立必要的 CACHE 資訊，然後重複 (2) 的動作。主要的動作包括: 
	<ul>
		<li>計算 HASH，建立 CACHE 檔案 </li>
		<li>透過 Flickr API，把檔案丟到 Flickr 服務上，並且取得 URL 等資訊 </li>
		<li>把取得的資訊放在 CACHE 檔案裡 </li>
		<li>執行 (2)，直接把 Http Request 重新導向到 Flickr URL</li>
	</ul>
	</li>
</ol>
<p>
這樣就完成了。我把它畫成 UML Sequency Diagram: 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/1_3.png" border="0" alt="1" width="620" height="682" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
接下來就是看 Code 了，寫這樣的程式，關鍵有幾個，大部份都是 IIS / ASP.NET 的設定要正確，讓 IIS 能把 REQUEST 轉到你的程式，剩下的就沒什麼特別的了。對 HttpHandler 不熟的人可以先參考一下這幾篇 ( From MSDN ): 
</p>
<p>
<a href="ms-help://MS.MSDNQTR.v90.en/dv_vwdcon/html/f5d7bdde-f52d-4f5e-8f86-397378ed1024.htm">How to: Configure an HTTP Handler Extension in IIS</a><br />
<a href="ms-help://MS.MSDNQTR.v90.en/dv_vwdcon/html/d5633f9a-03fb-4ccc-a799-dc67d656fa60.htm">How to: Register HTTP Handlers</a><br />
<a href="ms-help://MS.MSDNQTR.v90.en/dv_vwdcon/html/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b.htm">HTTP Handlers and HTTP Modules Overview</a><br />
<a href="ms-help://MS.MSDNQTR.v90.en/dv_vwdcon/html/daa90a3b-47d7-45f7-98cc-188fa56424c9.htm">Walkthrough: Creating a Synchronous HTTP Handler</a> 
</p>
<p>
在 IIS 上寫這些東西，比較麻煩的是 configuration，反而不是程式... 初學者常會卡在這裡，而這部份的行為正好又跟 Visual Studio 內建的 DevWeb 差很多 (真的差很多... 有時連抓到的 Path Info 都會不一樣 @_@)，強烈建議開發階段就直接在 IIS 上面開發... 
</p>
<p>
要克服的第一個設定，就是 IIS。預設情況下，IIS 看到圖檔的 request，毫不考慮就會把內容丟回去了，你程式怎麼寫都沒機會攔到，所以要在應用程式對應這邊，先把 *.JPG 的控制權交給 .NET Framework 的 ISAPI filter .. 
</p>
<p>
有兩個選擇，你心藏夠力的話可以把所有的 Request 都指到 .NET Framework，或是只指定 .JPG 就好。我這邊是以 .JPG 為例: 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_6.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_thumb_2.png" border="0" alt="image" width="433" height="247" /></a> 
</p>
<p>
仔細看一下可以發現，其實所有 ASP.NET 的附檔名，通通都是指向同一個 ISAPI Filter: aspnet_isapi.dll。至於每一種附擋名會有什麼不同的行為，那是 .NET 自己關起門來解決的事，這邊不用傷腦筋... 直接 COPY 別的設定過來最快.. 
</p>
<p>
&nbsp;
</p>
<p>
IIS 的部份搞定了，如果現在就透過 IIS 去看網站上的 .JPG，全部都會破圖... 因為所有的 Request 全都被 .NET 接管了。除非你整個 WEB APP 的 .JPG 都要透過你的 HTTP HANDLER，否則請先在 WEB.CONFIG 裡加上這段: 
</p>
<p>
加在 /configuration/system.web/httpHandlers 下 (這是 XPath): 
</p>
<div>
<strong>用內建的 StaticFileHandler 來處理 *.JPG 的 Http Request</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    &lt;httpHandlers&gt;      &lt;add path=&quot;*.jpg&quot; verb=&quot;*&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;    &lt;/httpHandlers&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span>  <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">path</span><span class="kwrd">=&quot;*.jpg&quot;</span> <span class="attr">verb</span><span class="kwrd">=&quot;*&quot;</span> <span class="attr">type</span><span class="kwrd">=&quot;System.Web.StaticFileHandler&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">&lt;/</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
System.Web.StaticFileHandler 是 ASP.NET 內建的，是跟 IIS 預設一樣的行為，就是原封不動的把檔案的 BINARY DATA 照傳回去而以。預設的還有其它幾個，Forbidden 等等的都可以用同樣的方式指定。 
</p>
<p>
這一段加上去等於繞了一圈，IIS把 .JPG 交給 ASP.NET，而 ASP.NET 又原封不動的傳了回去。沒錯，一切都是為了後面作準備... 接下來要把未來會放照片的目錄，重新指定 HttpHandler。我的例子是 ~/storage 下的 *.JPG 通通都要轉到 Flickr，因此我在 Web.config 加上這段 (當然，你直接放在 ~/storage/web.config 也是可以): 
</p>
<div>
<strong>重新指定在 ~/storage 目錄下的 HttpHandlers</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
  &lt;location path=&quot;storage&quot;&gt;    &lt;system.web&gt;      &lt;httpHandlers&gt;        &lt;add path=&quot;*.jpg&quot; verb=&quot;*&quot; type=&quot;ChickenHouse.Web.HttpHandlers.FlickrProxyHttpHandler,App_Code&quot; /&gt;      &lt;/httpHandlers&gt;    &lt;/system.web&gt;  &lt;/location&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;</span><span class="html">location</span> <span class="attr">path</span><span class="kwrd">=&quot;storage&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span>  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">&lt;</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span>      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">path</span><span class="kwrd">=&quot;*.jpg&quot;</span> <span class="attr">verb</span><span class="kwrd">=&quot;*&quot;</span> <span class="attr">type</span><span class="kwrd">=&quot;ChickenHouse.Web.HttpHandlers.FlickrProxyHttpHandler,App_Code&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">&lt;/</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   6:  </span>  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span><span class="kwrd">&lt;/</span><span class="html">location</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
設定的部份大功告成，剩下的就是程式碼了。看一下主要的部份: 
</p>
<div>
<strong>FlickrProxyHttpHandler 主程式片段</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            //            //  確認 CACHE 目錄已存在            //            if (Directory.Exists(this.CacheFolder) == false)            {                Directory.CreateDirectory(this.CacheFolder);            }            XmlDocument cacheInfoDoc = new XmlDocument();            string flickrURL = null;            if (File.Exists(this.CacheInfoFile) == false)            {                //                //  CACHE INFO 不存在，重新建立                //                flickrURL = this.BuildCacheInfoFile(context);            }            else            {                //                //  CACHE INFO 已經存在。確認 CACHE 的正確性後就可以直接導到 FLICKR URL                //                string cacheKey = &quot;flickr.proxy.&quot; + this.GetFileHash();                flickrURL = context.Cache[cacheKey] as string;                if (flickrURL == null)                {                    cacheInfoDoc.Load(this.CacheInfoFile);                    flickrURL = cacheInfoDoc.DocumentElement.GetAttribute(&quot;url&quot;);                    context.Cache.Insert(                        cacheKey,                        flickrURL,                        new CacheDependency(this.CacheInfoFile));                                    }            }            context.Response.Redirect(flickrURL);
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="rem">//  確認 CACHE 目錄已存在</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">if</span> (Directory.Exists(<span class="kwrd">this</span>.CacheFolder) == <span class="kwrd">false</span>)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>{
</pre>
<pre>
<span class="lnum">   6:  </span>    Directory.CreateDirectory(<span class="kwrd">this</span>.CacheFolder);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>}
</pre>
<pre>
<span class="lnum">   8:  </span>XmlDocument cacheInfoDoc = <span class="kwrd">new</span> XmlDocument();
</pre>
<pre class="alt">
<span class="lnum">   9:  </span><span class="kwrd">string</span> flickrURL = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">  10:  </span><span class="kwrd">if</span> (File.Exists(<span class="kwrd">this</span>.CacheInfoFile) == <span class="kwrd">false</span>)
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>{
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="rem">//  CACHE INFO 不存在，重新建立</span>
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    flickrURL = <span class="kwrd">this</span>.BuildCacheInfoFile(context);
</pre>
<pre>
<span class="lnum">  16:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  17:  </span><span class="kwrd">else</span>
</pre>
<pre>
<span class="lnum">  18:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  20:  </span>    <span class="rem">//  CACHE INFO 已經存在。確認 CACHE 的正確性後就可以直接導到 FLICKR URL</span>
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  22:  </span>    <span class="kwrd">string</span> cacheKey = <span class="str">&quot;flickr.proxy.&quot;</span> + <span class="kwrd">this</span>.GetFileHash();
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    flickrURL = context.Cache[cacheKey] <span class="kwrd">as</span> <span class="kwrd">string</span>;
</pre>
<pre>
<span class="lnum">  24:  </span>    <span class="kwrd">if</span> (flickrURL == <span class="kwrd">null</span>)
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    {
</pre>
<pre>
<span class="lnum">  26:  </span>        cacheInfoDoc.Load(<span class="kwrd">this</span>.CacheInfoFile);
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>        flickrURL = cacheInfoDoc.DocumentElement.GetAttribute(<span class="str">&quot;url&quot;</span>);
</pre>
<pre>
<span class="lnum">  28:  </span>        context.Cache.Insert(
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>            cacheKey,
</pre>
<pre>
<span class="lnum">  30:  </span>            flickrURL,
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            <span class="kwrd">new</span> CacheDependency(<span class="kwrd">this</span>.CacheInfoFile));
</pre>
<pre>
<span class="lnum">  32:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>}
</pre>
<pre>
<span class="lnum">  34:  </span>context.Response.Redirect(flickrURL);
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
刪掉了一些無關緊要的 CODE。主程式很簡單，就上面提到了邏輯而以。想辦法取得照片在 Flickr 那邊的正確網址，Redirect回去就好。如何得知網址? 第一次如何把照片傳上去? 這次來看看主角: BuildCacheInfoFile。 
</p>
<div>
<strong>Method: BuildCacheInfoFile( )</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        private string BuildCacheInfoFile(HttpContext context)        {            Flickr flickr = new Flickr(                ConfigurationManager.AppSettings[&quot;flickrProxy.API.key&quot;],                ConfigurationManager.AppSettings[&quot;flickrProxy.API.security&quot;]);            flickr.AuthToken = ConfigurationManager.AppSettings[&quot;flickrProxy.API.token&quot;];            string photoID = flickr.UploadPicture(this.FileLocation);            PhotoInfo pi = flickr.PhotosGetInfo(photoID);            string flickrURL = null;            try            {                flickrURL = this.CheckFlickrUrlAvailability(pi.MediumUrl);                flickrURL = this.CheckFlickrUrlAvailability(pi.LargeUrl);                flickrURL = this.CheckFlickrUrlAvailability(pi.OriginalUrl);            }            catch { }            XmlDocument cacheInfoDoc = new XmlDocument();            cacheInfoDoc.LoadXml(&quot;&lt;proxy /&gt;&quot;);            cacheInfoDoc.DocumentElement.SetAttribute(                &quot;src&quot;,                this.FileLocation);            cacheInfoDoc.DocumentElement.SetAttribute(                &quot;url&quot;,                flickrURL);            cacheInfoDoc.DocumentElement.SetAttribute(                &quot;photoID&quot;,                photoID);            cacheInfoDoc.Save(this.CacheInfoFile);                        return flickrURL;        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">private</span> <span class="kwrd">string</span> BuildCacheInfoFile(HttpContext context)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    Flickr flickr = <span class="kwrd">new</span> Flickr(
</pre>
<pre>
<span class="lnum">   4:  </span>        ConfigurationManager.AppSettings[<span class="str">&quot;flickrProxy.API.key&quot;</span>],
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        ConfigurationManager.AppSettings[<span class="str">&quot;flickrProxy.API.security&quot;</span>]);
</pre>
<pre>
<span class="lnum">   6:  </span>    flickr.AuthToken = ConfigurationManager.AppSettings[<span class="str">&quot;flickrProxy.API.token&quot;</span>];
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">string</span> photoID = flickr.UploadPicture(<span class="kwrd">this</span>.FileLocation);
</pre>
<pre>
<span class="lnum">   8:  </span>    PhotoInfo pi = flickr.PhotosGetInfo(photoID);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    <span class="kwrd">string</span> flickrURL = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">  10:  </span>    <span class="kwrd">try</span>
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    {
</pre>
<pre>
<span class="lnum">  12:  </span>        flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.MediumUrl);
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.LargeUrl);
</pre>
<pre>
<span class="lnum">  14:  </span>        flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.OriginalUrl);
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    }
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="kwrd">catch</span> { }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    XmlDocument cacheInfoDoc = <span class="kwrd">new</span> XmlDocument();
</pre>
<pre>
<span class="lnum">  18:  </span>    cacheInfoDoc.LoadXml(<span class="str">&quot;&lt;proxy /&gt;&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    cacheInfoDoc.DocumentElement.SetAttribute(
</pre>
<pre>
<span class="lnum">  20:  </span>        <span class="str">&quot;src&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        <span class="kwrd">this</span>.FileLocation);
</pre>
<pre>
<span class="lnum">  22:  </span>    cacheInfoDoc.DocumentElement.SetAttribute(
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        <span class="str">&quot;url&quot;</span>,
</pre>
<pre>
<span class="lnum">  24:  </span>        flickrURL);
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    cacheInfoDoc.DocumentElement.SetAttribute(
</pre>
<pre>
<span class="lnum">  26:  </span>        <span class="str">&quot;photoID&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>        photoID);
</pre>
<pre>
<span class="lnum">  28:  </span>    cacheInfoDoc.Save(<span class="kwrd">this</span>.CacheInfoFile);
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>    <span class="kwrd">return</span> flickrURL;
</pre>
<pre>
<span class="lnum">  30:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
寫這段，其實時間都花在怎麼用 Flickr API。Flickr API 很重視使用者的安全。認證部份一定要使用者親自到 Flickr 網站登入，同時按下授權後，API才能正常使用。經過這一連串動作，可以拿到三組序號: 
</p>
<ol>
	<li>API Key </li>
	<li>Share Security Key </li>
	<li>Token</li>
</ol>
<p>
其中 (1) 及 (2) 是使用者要自己到 Flickr 網站申請的 (<a href="http://www.flickr.com/services/api/keys">http://www.flickr.com/services/api/keys</a>)，第三個 TOKEN 就是要程式呼叫過程中會要求使用者連上網啟用後才能得到的。這邊我沒另外寫程式，我是直接用 <a href="http://www.codeplex.com/FlickrNet" target="_blank">FlickrNet</a> 的作者提供的 <a href="http://www.codeplex.com/FlickrNet/Wiki/View.aspx?title=Examples&amp;referringTitle=Home" target="_blank">SAMPLE CODE</a>，照著操作就可以拿到 TOKEN 了。 
</p>
<p>
有了這三段序號 API 才能正常運作。之後只要上傳 (第七行) 取得 photoID 回來就算完成。接下來第 12 行取得網址就 OK 了。 
</p>
<p>
&nbsp;
</p>
<p>
不過這邊也是卡最久的地方... 有人說 flickr server 忙的時後連到照片網址，有時會出現 &quot;photo not available&quot; 的訊習，有時又正常。有人則說某些照片只會有特定 SIZE，像是 original / large size 的有時也會發生 &quot;photo not available&quot; 的狀況... 
</p>
<p>
試了幾次，實在是抓不出它的規則，也找不出避開的辦法... 只好硬著頭皮，每個取得的網址就都用 HTTP 硬給它試看看... 因為 Flickr API 取得網址的 property 在失敗時會丟出 EXCEPTION，因此這段 code 寫成這樣: 
</p>
<div>
<strong>取得 SIZE 最大的可用網址</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            try            {                flickrURL = this.CheckFlickrUrlAvailability(pi.MediumUrl);                flickrURL = this.CheckFlickrUrlAvailability(pi.LargeUrl);                flickrURL = this.CheckFlickrUrlAvailability(pi.OriginalUrl);            }            catch { }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">try</span>
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.MediumUrl);
</pre>
<pre>
<span class="lnum">   4:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.LargeUrl);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    flickrURL = <span class="kwrd">this</span>.CheckFlickrUrlAvailability(pi.OriginalUrl);
</pre>
<pre>
<span class="lnum">   6:  </span>}
</pre>
<pre class="alt">
<span class="lnum">   7:  </span><span class="kwrd">catch</span> { }
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
CheckFlickrUrlAvailability() 是我自己寫的，就是真正連到 Flickr 判定到底照片能不能從這網址下載... 任一行只要發生 EXCEPTION 就會跳出，flickrURL 變數就可以保留最後一個 (最大) 可用的網址...。 
</p>
<p>
&nbsp;
</p>
<p>
好，程式碼看完了... 最後來看看<a href="http://demo.chicken-house.net/MediaProxy/storage/HTMLPage.htm" target="_blank">測試網站</a>。我放了一個很簡單的網頁，簡單的幾行 HTML，加上一張圖。 
</p>
<div>
<strong>測試用的 HTML 檔</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;    &lt;title&gt;Untitled Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;hr /&gt;&lt;img src=&quot;smile_sunkist.jpg&quot; mce_src=&quot;smile_sunkist.jpg&quot; alt=&quot;test image&quot; /&gt;&lt;hr /&gt;&lt;/body&gt;&lt;/html&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="kwrd">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">=&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">&lt;</span><span class="html">head</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span>Untitled Page<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   6:  </span><span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span><span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span><span class="kwrd">&lt;</span><span class="html">hr</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">  10:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span><span class="kwrd">&lt;</span><span class="html">img</span> <span class="attr">src</span><span class="kwrd">=&quot;smile_sunkist.jpg&quot;</span> <span class="attr">alt</span><span class="kwrd">=&quot;test image&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span><span class="kwrd">&lt;</span><span class="html">hr</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">  14:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  16:  </span><span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  17:  </span><span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
網頁上看到的結果: 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_8.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_thumb_3.png" border="0" alt="image" width="578" height="586" /></a> 
</p>
<p>
&nbsp;
</p>
<p>
這有啥好看的? 只是證明 USER 看起來完全正常而以... 哈哈，拿出 Fiddler 看一下: 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_10.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_thumb_4.png" border="0" alt="image" width="621" height="229" /></a> 
</p>
<p>
&nbsp;
</p>
<p>
#0 及 01 都是正常情況下就會有的 HTTP REQUEST，代表 IE 要下載 HTML 跟 JPG。不過在下載 JPG 檔，卻收到了 302 (OBJECT MOVE) 的重新導向的結果，因此 IE 就接著再到 Flickr 去下載照片，最後秀在網頁上。不過照片真的有出現在 Flickr 上嗎? 用我的帳號登入看看... 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_12.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/FlickrProxy2_EC39/image_thumb_5.png" border="0" alt="image" width="929" height="705" /></a> 
</p>
<p>
&nbsp;
</p>
<p>
哈哈，果然出現了。看來這沒幾行的 CODE 真正發恢它的作用了。網站什麼都不用改，只要加上這 HttpHandler，配合調一些設定，馬上下載圖片的頻寬就省下來了。不過最少還是得花一次頻寬啦。BLOGGER把圖檔傳上來就不說了，圖檔第一次有人來看的時後，程式還是需要把檔案傳出去，放到 Flickr 上。不過一旦放成功了，以後第二次第三次.... 的頻寬就都省下來了。要花的只有 Fiddler 抓到的 #1 那少少的 302 REDIR 回應而以。 
</p>
<p>
&nbsp;
</p>
<p>
這個 Project 告一段落，後續還是會繼續改進，不過就都是小地方的調整，一些重構及把舊的 code 整理在一起的動作而以。對程式碼有興趣的人可以再跟我聯絡。 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2008-05-19 01:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-19 01:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flickrproxy-2-%e5%af%a6%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>FlickrProxy #1 - Overview</title>
		<link>http://columns.chicken-house.net/2008/05/16/flickrproxy-1-overview/</link>
		<pubDate>Fri, 16 May 2008 03:39:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/05/16/FlickrProxy-1-Overview.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
久久沒動手寫 code，手又開始癢了... 前陣子跟<a href="http://michadel.chicken-house.net/blogs/">小熊子</a>聊的時後想到一個新的 IDEA，就順手記下來。像我們這種自己用ADSL架的小型網站，瓶頸都是卡在頻寬。愛拍照的<a href="http://michadel.chicken-house.net/blogs/">小熊子</a>最在意的當然就是網站擺照片所需要的頻寬... 解決方式其實有一堆，像是 Live Writer 就有個很有名的 <a href="http://www.flickr4writer.com">PLUGIN</a>，可以直接插入你放在 Flickr 的照片... 
</p>
<p>
其實這類的 solution 很多，但是用起來就覺的不大喜歡，怎麼說? 倒不是說軟體不好用，而是它的作法。這類 plug-ins 都是幫你一次把事情作好，幫你上傳到 <a href="http://www.flickr.com/">flickr</a>，幫你查出 link，幫你產生HTML片段，貼到 WLW... 這種作法的問題在於你張貼文章時，這些資訊就得確定下來。你沒辦法裝了這個外掛，就把你八百年前貼的照片一起轉到 flickr，你也被這個外掛還有你的 flickr 帳號綁死了，未來換帳號的話，或是你沒有 WLW 可以用時，這些功能都沒有了。 
</p>
<p>
我比較喜歡的是 server side 的 solution，如果是透明的 (像 PROXY) 更好，如果隨時可以不要或是改設定最好，這樣我不但不用綁死在我的某個 flickr 帳號上，甚至不用綁在 flickr 這樣的服務... 
</p>
<p>
過去 (沒想到已經快四年了 -_- ) 其實我作過幾個類似的 <a href="/post/e4b889e5808be5a5bde794a8e79a84-ASPNET-HttpHandler.aspx">HttpHandler</a>，都是用一樣的理念去開發的。這次想的是利用 Flickr 提供的 API，來做一樣的事。 
</p>
<p>
簡單的說，如果我能夠寫個程式，能夠在 Run Time 動態去檢查網站上某張圖檔有沒有傳到 flickr 上? 如果沒有且判定不需要，則像一般網站一樣直接在 Http Response 傳回圖檔的內容。如果需要則自動上傳到 flickr，最後把這個 Http Request 重新導向到 flickr 上的照片網址。 
</p>
<p>
這樣作法最後的結果跟 WLW 搭配 flickr plugins 差不多，差別在一個是靠 client 端，在你張貼文章時幫你處理掉一連串的動作，我的作法是統一在 server 端，在觀看文章內容時才做這件事。效能一定不如 WLW + Flickr plugin 好，不過就是多了彈性。我可以隨時關掉這個功能，隨時換相片服務，另一個更重要的是我自己保有一份完整的網站跟檔案資料。如果我的 BLOG 資料散在各地各個服務，我要備份或是還原等等也都很辛苦... 
</p>
<p>
講了一堆都是廢話，其實這篇主題只有一個，就是想到好點子又要開始動手寫 code 了 [:D] ，有點成果之後會陸續在貼幾篇相關的文章。在之前作了 <a href="http://demo.chicken-house.net/MediaProxy/storage/GoogleNews.htm" target="_blank" title="PS: Google News 存下來的 HTML，所有的圖檔都用這樣的作法轉到另一個目錄，有興趣的可以開 Fiddler 看看就知道">POC</a> ( Prove Of Concept )，證明這個技巧是可行的，剩下的就是真正動手寫了。另外也有一個目的，就是想把<a href="/post/e4b889e5808be5a5bde794a8e79a84-ASPNET-HttpHandler.aspx" target="_blank">之前寫的另外兩個 HttpHandler</a> 整合起來，弄成統一的 provider 架構來實作。 
</p>
<p>
想的很美，照片就轉到 Flickr，影片就轉到 <a href="http://www.youtube.com/" target="_blank">YouTube</a> ... 不過影片那邊的難度就高的多了，現在的實作只是從 HTTP 自動轉到 RTSP 而以.. ZIP 檔現在是虛擬化成一個資料夾，未來看看能不能自動轉到 <a href="http://skydrive.live.com/" target="_blank">Microsoft SkyDrive</a> 之類的服務.... 
</p>
<p>
好，先寫到這裡，敬請期待下集 [:D] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2008-05-16 03:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-16 03:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flickrproxy-1-overview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
	</item>
	<item>
		<title>Next Ten Years...</title>
		<link>http://columns.chicken-house.net/2008/05/12/next-ten-years/</link>
		<pubDate>Mon, 12 May 2008 03:08:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/05/12/Next-Ten-Years.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
經過一個禮拜的準備，總算在這週末完成移機的動作了... 為什麼標題叫 &quot;Next Ten Years&quot; ? 因為換下來的 server 已經陪我十年了，不知道這次換的新 SERVER 能不能陪我再撐十年? 
</p>
<p>
沒想到當年的 ASUS P2B-DS 這麼耐用，中間換了 CPU，換了 RAM，機殼，顯示卡，連硬碟光碟都換過好幾次了，唯獨主機板跟 Power 都沒換過... 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4278%20(Canon%20PowerShot%20G2).jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4278%20(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_4278 (Canon PowerShot G2)" width="244" height="184" /></a>&nbsp;<br />
舊 server 拆掉前
</p>
<p>
&nbsp;
</p>
<p>
其實舊 server 能撐這麼久也不是沒有原因的，除了硬體都沒壞之外，老實說跑跑簡單的 NAT / DHCP / DNS 也都夠用，跑現在這個網站 (BLOG + SQL) 也都撐的住。不過規格時在是不饒人啊，現在已經買不大到 IDE 的硬碟了，就算買的到也很不划算。前陣子弄了張 PCI 的 4 ports SATA card，結果也因為BIOS實在太古董了，裝上硬碟就停在那邊不開機 @_@，舊硬碟只要 COPY 大檔，SQL 2005 Express 就給我罷工... 最後跟同事借了台量耗電的機器，舊SERVER一開機就要 150W... 以它的處理能力來說實在不划算，所以才會忍不住去敗了零件來換...
</p>
<p>
本來換機的 roadmap 規劃的很漂亮，想說等到 2009 Q1 ~ Q2，INTEL換了新的架構後，現在的桌機 (P5B-E Plus + E6300) 拿來當SERVER，桌機就換新的... 不過實在是受不了硬碟一直維持不到 5% 剩餘空間，加上每次一挪空間網站就給我掛掉，就改變策略直接買來換掉現在的SERVER，桌機就將就點用吧...
</p>
<p>
這次換的配備，都是以省電為主要訴求，規格就挑同級裡最低階的:
</p>
<table border="1" cellspacing="0" cellpadding="2" width="400">
	<tbody>
		<tr>
			<td width="200" valign="top">CPU</td>
			<td width="200" valign="top">Intel Core2 Quad Q9300</td>
		</tr>
		<tr>
			<td width="200" valign="top">RAM</td>
			<td width="200" valign="top">A牌 DDR2-800 2GB x 4</td>
		</tr>
		<tr>
			<td width="200" valign="top">主機板</td>
			<td width="200" valign="top">Intel Q35 (ASUS P5E-VM DO)</td>
		</tr>
		<tr>
			<td width="200" valign="top">硬碟</td>
			<td width="200" valign="top">WD7500AACS (750GB) x 3</td>
		</tr>
		<tr>
			<td width="200" valign="top">Power</td>
			<td width="200" valign="top">S牌 330W</td>
		</tr>
	</tbody>
</table>
<p>
一直覺的SERVER還要找張VGA卡裝上去實在是很雞肋，跟本用不到幾次，不過不裝又很麻煩... 雖然2003號稱可以支援，不過我想還是別自找麻煩好了 [H]，主機板就鎖定 Q35 的，因為它定位在商用機種，內建 VGA，同時又保有基本的效能... 不會像其它內建顯示晶片的板子，要嘛RAM只能插兩條，不然就是SATA只有四個...
</p>
<p>
CPU挑了四核最入門的 Q9300，為什麼不挑 Q6600 ? 差一千五左右，不過耗電量跟溫度都有差，因為我堆SERVER的房間通風很差，太熱實在很麻煩，就挑了Q9300. 硬碟挑的是WD GP系列，閒的時後轉速可以自動從7200降到5400，正好符合我的需求。我一向不大在意硬碟有多快... 反正快慢頂多差個10%，實在沒差多少，容量多一點，溫度低一點比較實在..
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4285%20(Canon%20PowerShot%20G2).jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4285%20(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_4285 (Canon PowerShot G2)" width="244" height="184" /></a> 
</p>
<p>
裝好的新 SERVER
</p>
<p>
&nbsp;
</p>
<p>
舊 SERVER 把機殼塞的滿滿的，相對之下新SERVER就顯的小多了，多插張網路卡就一切搞定了，之前插的滿滿的 (網卡 x 2 + USB + VGA ...) 耗電量也省的多，之前只接一顆硬碟，只要 70W... 四顆硬碟都加上去應該也不到 100W... 早知道買 330W 的 POWER 幹嘛...
</p>
<p>
&nbsp;
</p>
<p>
移機的過程就不提了，原本還很謹慎的弄台IP分享器，想說換機過程中至少讓家裡對外網路是通的，事實證明這完全是多此一舉... 家裡會上網的人全都睡覺去了 [H]... 不過還是要感謝一下提供IP分享器的米國人 [:D] (沒錯，Honga 就是你..)，貼張照片感謝一下:
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4274%20(Canon%20PowerShot%20G2).jpg"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/NextTenYears_2C30/CRW_4274%20(Canon%20PowerShot%20G2)_thumb.jpg" border="0" alt="CRW_4274 (Canon PowerShot G2)" width="244" height="184" /></a> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
換完後又設定東設定西，檔案這裡搬過來那裡搬過去，總算弄完了。最後除了舊的 Modem 找不到 windows 2003 x64 driver 之外，其它一切正常。因為系統都重灌了，有缺啥設定漏掉的，或是發現網站那裡不正常的再通知我吧!
</p>
<p>
&nbsp;
</p>
<p>
--------<br />
趁機借問一下，有沒有推薦的 USB Modem (我只要拿來收發傳真而以)，有 2003 x64 驅動程式的? 網站是找到幾款，不過都是天價，不然就是市面上買不到... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2008-05-12 03:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-12 03:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[next-ten-years]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>254</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-12 22:03:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-12 22:03:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(沒錯，Honga 就是你..)

雞..要曝光自己網站用這句就對了..已經是排名第一名了

http://www.google.com.tw/search?hl=zh-TW&q=%28%E6%B2%92%E9%8C%AF%EF%BC%8CHonga+%E5%B0%B1%E6%98%AF%E4%BD%A0..%29%EF%BC%8C&btnG=Google+%E6%90%9C%E5%B0%8B&meta=&aq=f

--
BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-13 08:10:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-13 08:10:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝剛大師又熬夜了，這個問題是在香港發現的，使用了鄰居的 3M wifi ...

--
BotCheck(請輸入 "叭樂雞萬歲" : 叭樂雞萬歲)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>256</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[che@michadel.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-18 08:11:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-18 08:11:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[圖片看不到哩…點進去還要密碼]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-18 12:15:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-18 12:15:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[搞定... 

原本看 BlogEngine.NET 是靠 HttpHandler 去處理附檔的問題, 每個目錄都可以用...
轉檔時圖檔就乾脆不指定路逕了, 結果陰錯陽差, 跑到 ~/Admin/xxxx 底下, 被 ASP.NET 的驗證機制檔下來
就轉到 Login 畫面了

看來該指定的路逕還是不能省]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>停機公告</title>
		<link>http://columns.chicken-house.net/2008/05/05/%e5%81%9c%e6%a9%9f%e5%85%ac%e5%91%8a/</link>
		<pubDate>Mon, 05 May 2008 17:17:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/05/05/shutdown-20080505.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
因為現在 SERVER 已經是換機櫃, 藏在雜物間了, 拔機器很麻煩... 隨便換個東西就要半天一天的, 因此先公告一下. 
</p>
<p>
時間不是這週末 (2008/05/10 ~ 11), 就是下週末 (2008/05/17 ~ 18), 會被影響的人請事先作好心理準備吧 [H] 
</p>
<p>
誰會被影響? 不多啦, 只有... 
</p>
<ol>
	<li>忠實讀者 (老闆說客戶永遠要擺第一)</li>
	<li>在我家上網的人 (除了家人外, 還有用我無線網路的好鄰居...)</li>
	<li>網站 Hosting 在我這邊的人</li>
	<li>DNS Hosting 在我這邊的人</li>
	<li>那堆到對岸上班, 老用我的 VPN 上網的同學</li>
	<li>沒了...</li>
</ol>
<p>
看起來好像很多? 哈哈... 加一加不知道有沒有十個人? [H] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2008-05-05 17:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-05 17:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%81%9c%e6%a9%9f%e5%85%ac%e5%91%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>Canon CR2 --&#062; .JPEG 速度加倍.. 該換 Core2 Quad 了嘛?</title>
		<link>http://columns.chicken-house.net/2008/04/10/canon-cr2-jpeg-%e9%80%9f%e5%ba%a6%e5%8a%a0%e5%80%8d-%e8%a9%b2%e6%8f%9b-core2-quad-%e4%ba%86%e5%98%9b/</link>
		<pubDate>Thu, 10 Apr 2008 02:03:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/04/10/Canon-CR2-gt3b-JPEG-e9809fe5baa6e58aa0e5808d-e8a9b2e68f9b-Core2-Quad-e4ba86e5989b.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
看來是換四核心CPU的時機到了 [H] 
</p>
<p>
之前弄了半天的歸檔程式，效能都卡在 .CR2 -&gt; .JPG 這段。雖然祭出了 ThreadPool，也想盡辦法把獨立的工作湊在一起，盡量提升 CPU 的利用率，不過得到的效果有限，因為最後都是剩下 .CR2 的檔案轉不完啊，其它拿來填空檔的工作早就做完了，實在不成比例... 整體效能還是卡在最慢的 Canon Codec 身上... 
</p>
<p>
這次無意間想到，單一 process 內，Canon Codec 有過多不能重複進入的問題 (不能同時利用到兩顆CPU)，那麼拆成兩個獨立的 process 是否就解決了? 
</p>
<p>
想一想還蠻可行的，通常為了安全，都只需要做到 process 內的 LOCK 就夠了，不需要做到全域的 LOCK，除非要 LOCK 的資源是跨 process 會用的到的才需要這樣做... 在真正改程式下去之前，當然要先驗證一下... 
</p>
<p>
用之前的 LIB 簡單寫了個執行檔，就單純的把 .CR2 轉 .JPG 而以。寫好後同時 RUN 兩份，讚! CPU 利用率飆到 80% (雖然離理想的 100% 還有段距離) ... 不過在我的 E6300 CPU，同時跑兩份，執行速度倒沒有下降，差不多.. 
</p>
<p>
確定這方式有效之後，花了點時間改我的歸檔程式，把轉檔部份抽成 .exe 然後由歸檔程式來啟動，一樣維持同時有兩個 .CR2 轉檔程序進行。耶! 情況不錯，轉一個檔案一樣要 70 秒，但是 70 秒過後可以轉完兩個檔案... 平均起來等於速度加倍了... 
</p>
<p>
之前一直不想用這個方法，因為一來 IPC (inter-process communication) 是件麻煩事，不想去碰，二來啟動另一個 process，參數的傳遞也是個麻煩事，大概就只能靠檔案或是 arguments ... 或多或少都要處理到一些 parsing 的問題... 三來執行的回傳值也是一樣，總之都碰到 IPC 的問題就不想去碰他了 
</p>
<p>
不過這次評估了一下，這些動作麻煩歸麻煩，至少不是花運算資源的動作，跟一張照片轉 70 秒，一次動則上百張的量比起來，怎麼算都划算... 
</p>
<p>
真糟糕，這樣下去是不是代表該換 Q9450 了? 咳咳... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2008-04-10 02:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-10 02:03:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-cr2-jpeg-%e9%80%9f%e5%ba%a6%e5%8a%a0%e5%80%8d-%e8%a9%b2%e6%8f%9b-core2-quad-%e4%ba%86%e5%98%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>258</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-15 07:29:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-15 07:29:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真糟糕，這樣下去是不是代表該換 Q9450 了? 咳咳...

幫你回答..是!!沒錯!!

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-15 22:56:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-15 22:56:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga, 你真是勸敗第一名...

--
BotCheck(請計算答案: 8 - 1 =  7)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>搭配 CodeFormatter，網站須要配合的設定</title>
		<link>http://columns.chicken-house.net/2008/04/04/%e6%90%ad%e9%85%8d-codeformatter%ef%bc%8c%e7%b6%b2%e7%ab%99%e9%a0%88%e8%a6%81%e9%85%8d%e5%90%88%e7%9a%84%e8%a8%ad%e5%ae%9a/</link>
		<pubDate>Fri, 04 Apr 2008 11:22:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/04/04/e690ade9858d-CodeFormatterefbc8ce7b6b2e7ab99e9a088e8a681e9858de59088e79a84e8a8ade5ae9a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
題外話，這個 plugins 又有小改版了，原網址可以 [<a href="http://www.chicken-house.net/files/chicken/ChickenHouse.LiveWriterAddIns.zip">下載</a>].. 
</p>
<p>
到這邊差不多告一個段落了，歡迎各位下載回去用。只不過有些功能，你的BLOG SERVER要配合調整才會有效。統一說明一下: 
</p>
<p>
1. <strong><font color="#ff0000">CSS</font></strong> 
</p>
<p>
我喜歡用這個函式庫的主要原因，是因為它長出來的HTML很乾淨，因為樣式的部份都拆出來到CSS了。不過缺點也是你必需另外想辦法把CSS放上去... 附上原廠提供的CSS內容，看你的BLOG SERVER可以怎麼改就怎麼改。以我用的CommunityServer為例，只要進入DashBoard，到修改版面的地方，它提供 &quot;Custom Styles (Advanced)&quot; 頁面，把 CSS 貼進去就搞定了! 
</p>
<div>
<strong>C# Code Formatter CSS</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
.csharpcode, .csharpcode pre{	font-size: small;	color: black;	font-family: Consolas, &quot;Courier New&quot;, Courier, Monospace;	background-color: #ffffff;	/*white-space: pre;*/}.csharpcode pre { margin: 0em; }.csharpcode .rem { color: #008000; }.csharpcode .kwrd { color: #0000ff; }.csharpcode .str { color: #006080; }.csharpcode .op { color: #0000c0; }.csharpcode .preproc { color: #cc6633; }.csharpcode .asp { background-color: #ffff00; }.csharpcode .html { color: #800000; }.csharpcode .attr { color: #ff0000; }.csharpcode .alt {	background-color: #f4f4f4;	width: 100%;	margin: 0em;}.csharpcode .lnum { color: #606060; }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
.csharpcode, .csharpcode pre
</pre>
<pre>
{
</pre>
<pre class="alt">
  font-size: small;
</pre>
<pre>
  color: black;
</pre>
<pre class="alt">
  font-family: Consolas, &quot;Courier New&quot;, Courier, Monospace;
</pre>
<pre>
  background-color: #ffffff;
</pre>
<pre class="alt">
  /*white-space: pre;*/
</pre>
<pre>
}
</pre>
<pre class="alt">
.csharpcode pre { margin: 0em; }
</pre>
<pre>
.csharpcode .rem { color: #008000; }
</pre>
<pre class="alt">
.csharpcode .kwrd { color: #0000ff; }
</pre>
<pre>
.csharpcode .str { color: #006080; }
</pre>
<pre class="alt">
.csharpcode .op { color: #0000c0; }
</pre>
<pre>
.csharpcode .preproc { color: #cc6633; }
</pre>
<pre class="alt">
.csharpcode .asp { background-color: #ffff00; }
</pre>
<pre>
.csharpcode .html { color: #800000; }
</pre>
<pre class="alt">
.csharpcode .attr { color: #ff0000; }
</pre>
<pre>
.csharpcode .alt 
</pre>
<pre class="alt">
{
</pre>
<pre>
  background-color: #f4f4f4;
</pre>
<pre class="alt">
  width: 100%;
</pre>
<pre>
  margin: 0em;
</pre>
<pre class="alt">
}
</pre>
<pre>
.csharpcode .lnum { color: #606060; }
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
不過別急著貼!!! 如果你想要下一個功能的話，CSS 還要再多貼一段... 
</p>
<p>
&nbsp;
</p>
<p>
2. <strong><font color="#ff0000">COPY CODE</font></strong> 
</p>
<p>
這個功能不難，就透過 JavaScript 把一段文字放到剪貼簿就完成了。不過麻煩的是這些 CODE 怎樣偷渡到文章內容裡... 我用的 CS 預設會把 &lt;SCRIPT&gt; 給檔掉，直接在HTML裡加SCRIPT是行不通的。當然可以改communityserver.config，不過這樣有點麻煩，不喜歡這樣改... 於是我搬出了 HTC.. 
</p>
<p>
HTC 的原理很簡單，CSS是統一管理各種樣式，而DHTML的一堆事件，像 onclick=&quot;...&quot; onload=&quot;...&quot; 等等事件為什麼不能像CSS一樣統一管理呢? 可以的，只不過這就要靠 IE 才支援的 HTC (HTML Component) 才辦的到。後起之秀JQuery其實也有差不多的功能，不過要搭配 CS 的話，一樣得想辦法把 &lt;SCRIPT&gt; 給藏到HTML裡有點麻煩... 所以最後我還是選用 HTC 的方式來實作這個功能。 
</p>
<p>
設定很簡單，CSS 再加一段就好: 
</p>
<div>
<strong>加上HTC支援的CSS</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
.copycode {cursor:hand; color:#c0c0ff; display:none; behavior:url(&#39;/themes/code.htc&#39;); }
</pre>
</div>
<div style="border: 1px solid">
<pre class="csharpcode">
.copycode {cursor:hand; color:#c0c0ff; display:none; behavior:url(<span class="str">&#39;/themes/code.htc&#39;</span>); }
</pre>
</div>
<!-- end of code area -->
</div>
<p>
再來就是把這個 <a href="/themes/code.htc">HTC</a> 檔案放到 CSS 裡指定的目錄，以上面的CSS來說，你應該把HTC放在 /Themes/Code.HTC 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
SERVER 的部份這樣就大功告成了。未來在插入CODE時，只要勾選這個選項 [產生出來的HTML會包含原始程式碼]: 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CodeFormatter_9FE0/image_9.png" border="0" alt="image" width="658" height="445" /> 
</p>
<p>
&nbsp;
</p>
<p>
最後輸出的成果就會像這樣，標題右方的 [copy code] 功能就正常了。按下去之後，SAMPLE CODE 就會自動複製到剪貼簿，不會因為加了一堆格式，讓你複製下來的 CODE 不能直接使用... 
</p>
<div>
<strong>MSDN Sample Code</strong><span class="copycode">[copy code]</span> 
</div>
<div style="display: none">
<pre style="display: none">
using System;public class Sample {    void Method() {    Object Obj1 = new Object();    Object Obj2 = new Object();    Console.WriteLine(Obj1.Equals(Obj2)); //===&gt; false    Obj2 = Obj1;    Console.WriteLine(Obj1.Equals(Obj2)); //===&gt; true    }}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">using</span> System;
</pre>
<pre>
<span class="lnum">   2:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> Sample {
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">void</span> Method() {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    Object Obj1 = <span class="kwrd">new</span> Object();
</pre>
<pre>
<span class="lnum">   6:  </span>    Object Obj2 = <span class="kwrd">new</span> Object();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    Console.WriteLine(Obj1.Equals(Obj2)); <span class="rem">//===&gt; false</span>
</pre>
<pre>
<span class="lnum">   8:  </span>    Obj2 = Obj1;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    Console.WriteLine(Obj1.Equals(Obj2)); <span class="rem">//===&gt; true</span>
</pre>
<pre>
<span class="lnum">  10:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>}
</pre>
</div>
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
這個功能，在預覽的時後就沒加上去了。另外預覽的畫面也做了點調整，一方面不是直接用IE開啟HTML檔，因為這樣會有一堆安全警告的訊息，我改用HTA (HTML APPLICATION)來實作預覽的功能。為了感謝提供這個LIB的原作者，我也在預覽的畫面裡加上他的首頁了。最後，當然也要讚助一下我自己的網站... 哈哈 [H] 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CodeFormatter_9FE0/image_8.png" border="0" alt="image" width="804" height="604" /> 
</p>
<p>
&nbsp;
</p>
<p>
好，這個PLUGINS大概就告一個段落，未來大概就修正BUG了，需要的人歡迎下載使用。如果要散佈請注明出處。 
</p>
<p>
[<a href="http://www.chicken-house.net/files/chicken/ChickenHouse.LiveWriterAddIns.zip">下載位置</a>]<!-- end of code area --> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2008-04-04 11:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-04 11:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%90%ad%e9%85%8d-codeformatter%ef%bc%8c%e7%b6%b2%e7%ab%99%e9%a0%88%e8%a6%81%e9%85%8d%e5%90%88%e7%9a%84%e8%a8%ad%e5%ae%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>[RUN! PC] 2008 四月號</title>
		<link>http://columns.chicken-house.net/2008/04/03/run-pc-2008-%e5%9b%9b%e6%9c%88%e8%99%9f/</link>
		<pubDate>Thu, 03 Apr 2008 23:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/04/03/RUNPC-2008-04.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/RUNPCApril2008ASP.NET1_1DCB/IMG_6727%20(Canon%20PowerShot%20G9).jpg" alt="IMG_6727 (Canon PowerShot G9)" width="640" height="298" border="0" />

沒錯，我的文章在四月號的 RUN! PC 刊出來了，之前花了些時間在研究執行緒跟 ASP.NET 搭配起來用的技術問題，有點小心得，就整理了一下投稿了，運氣還不錯，雜誌社也願意刊出。初次投稿花了不少時間，花在重新思考 sample code 怎麼寫比較能突顯主題，圖表要怎麼畫才清楚明瞭等等瑣事上面，原來當個專欄作家 (我沒有專欄啦，只是投稿而以) 也不是這麼簡單的...

文章的內容嘛，看雜誌就知道了，這篇是留著作個紀念，同時也是讓看了這篇文章有話要說的讀者們，有個留下 comments 的地方。

文章裡提到的 sample code 可以到 [<a href="http://demo.chicken-house.net/runpc/2008-04/2008-04.zip">這裡</a>] 下載，懶的抓回去執行的人，也可以直接到 [<a href="http://demo.chicken-house.net/runpc/2008-04/">這裡</a>] 試 RUN 看看文章裡提到的範例。

在執行這個範例程式之前，請先注意一下，IE預設只會對同一個網站建立兩個Http Connection，因此有可能會看到不一樣的測試結果。如果想要調大這個限制，請修改下列的註冊機碼，或是下載本文的範例程式，匯入[<a href="http://demo.chicken-house.net/runpc/2008-04/ie.reg">IE.reg</a>]註冊機碼。

<strong>調整IE同時連線數的註冊機碼</strong>
<div style="border: 1px solid;">
<div class="csharpcode">
<pre class="alt">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
</pre>
<pre><span class="str">"MaxConnectionsPerServer"</span>=dword:00000008
</pre>
<pre class="alt"><span class="str">"MaxConnectionsPer1_0Server"</span>=dword:00000008
</pre>
</div>
</div>
相關連結: [<a href="http://demo.chicken-house.net/runpc/2008-04/2008-04.zip">範例程式下載</a>] [<a href="http://demo.chicken-house.net/runpc/2008-04/">執行範例程式</a>] [<a href="http://demo.chicken-house.net/runpc/2008-04/ie.reg">下載調整IE連線上限的註冊檔</a>]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2008-04-03 23:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-03 23:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2008-%e5%9b%9b%e6%9c%88%e8%99%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[WRITER]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://newmannet.spaces.live.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-05 13:28:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-05 13:28:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好：
我也想在 RUN！PC 投稿
一直找不到門路
請問我該如何做
謝謝

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>261</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-06 23:19:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-06 23:19:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您可以試試 mail 到: editor@runpc.com.tw
祝你好運! [:D]

--
BotCheck(請輸入 "海娘娘永遠是對的" : 海娘娘永遠是對的)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>262</wp:comment_id>
			<wp:comment_author><![CDATA[WRITER]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://newmannet.spaces.live.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-07 09:43:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-07 09:43:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[3Q 
感謝您
我會試試
如果沒人沒回信 再來請教您 ︿︿

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>263</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-07 12:17:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-07 12:17:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是利害~恭禧投稿成功~~

--
BotCheck(請計算答案: 6 + 4 =  10)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>264</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-09 22:36:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-09 22:36:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不知道出版社要刊登前有沒有校稿校的很辛苦...^^

--
BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>265</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-16 01:39:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-16 01:39:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好優秀~ (Y)

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>266</wp:comment_id>
			<wp:comment_author><![CDATA[kennyshu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kennyshu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://kennyshu.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-17 21:31:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-17 21:31:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不知道是否有提供電子檔讓網友下載學習？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>267</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-18 02:40:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-18 02:40:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我自己是有檔案啦 :D

不過不曉得自己貼出來有沒有違背跟出版社的約定 @_@

沒問題我再放出來 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>268</wp:comment_id>
			<wp:comment_author><![CDATA[kennyshu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kennyshu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://kennyshu.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-22 23:36:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-22 23:36:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[希望沒有!
因為畢竟已經是去年的文章了，應該已經沒有利益衝突吧？
大大發表的文章都是精華，好想學習multi-threading啊～～～～]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>BotCheck 改版...</title>
		<link>http://columns.chicken-house.net/2008/04/01/botcheck-%e6%94%b9%e7%89%88/</link>
		<pubDate>Tue, 01 Apr 2008 01:54:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/04/01/BotCheck-e694b9e78988.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
有鑑於好奇心強的網友，回應時老愛研究 BotCheck 跟內容的關聯性... (Honga 就是你...)，一時興起把 BotCheck 的 ASCX 改寫了一下，會在驗証通過時，把 BotCheck 的題目及答案附加在 comment 的後面，就像這樣: 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/BotCheck_1ADE/image_3.png" border="0" alt="image" width="433" height="143" /> 
</p>
<p>
免的每次都在那邊貼這次的 BotCheck 是啥.. 哈! 特此留念! 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date><![CDATA[2008-04-01 01:54:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-01 01:54:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[botcheck-%e6%94%b9%e7%89%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>269</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-02 07:14:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-02 07:14:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖..跟我哪有關係..你只是手癢對吧..

告訴你..去看這一篇的Bot Check..

您說是吧?


--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>270</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-02 07:42:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-02 07:42:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Honga 就是你" 可以帶你到安德魯的網站..不錯吧

http://tw.search.yahoo.com/search?fr=yfp&ei=UTF-8&p=Honga+%E5%B0%B1%E6%98%AF%E4%BD%A0

換言之..你的網站有可能會被這些搜索引擎搞慢了..

保重..

請問. 需要謹慎發言嘛?







--
BotCheck(請計算答案: 7 x 6 =  42)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>271</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-02 21:08:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-02 21:08:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga 你紅了... 哈哈
你發言有謹慎過嘛，不用耽心..

--
BotCheck(請輸入 "叭樂雞萬歲" : 叭樂雞萬歲)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Code Formatter 更新: 複製CODE及HTML預覽</title>
		<link>http://columns.chicken-house.net/2008/03/31/code-formatter-%e6%9b%b4%e6%96%b0-%e8%a4%87%e8%a3%bdcode%e5%8f%8ahtml%e9%a0%90%e8%a6%bd/</link>
		<pubDate>Mon, 31 Mar 2008 01:39:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/03/31/Code-Formatter-e69bb4e696b0-e8a487e8a3bdCODEe58f8aHTMLe9a090e8a6bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
無聊的宅男沒事又改起這個Live Writer的外掛程式了。原本的版本還不錯用，不過就是覺的少了點什麼... 除了加個框之外，跟網站版本也沒什麼差別嘛。用了一陣子，又加了兩個小功能上去... 
</p>
<p>
&nbsp;
</p>
<p>
<strong>COPY CODE</strong> 
</p>
<p>
這個功能是從MSDN學來的，MSDN文章的範例程式碼，都會附個鈕讓讀者按，按一下程式碼就會被覆製到簡貼簿... 這個功能還蠻實用的，因為我常常這樣貼... 哈哈，不曉得看我 BLOG 的人有沒有這習慣? 不管了，我的BLOG，我寫的PLUGINS，我說好用的東西當然要加上去... 底下是改版後的外掛程式，張貼程式碼的樣子: 
</p>
<p>
----------------[以下開始]------------------ 
</p>
<div>
<strong>測試用的 C# Code Sample..</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        //        // 不重要的程式碼... 拿來當 Model 用的...        //        private int CountLeadingSpaces(string line)        {            int count = 0;            foreach (char ch in line)            {                if (ch == &#39; &#39;)                {                    count++;                }                else                {                    break;                }            }            return count;        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="rem">// 不重要的程式碼... 拿來當 Model 用的...</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="rem">//</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">private</span> <span class="kwrd">int</span> CountLeadingSpaces(<span class="kwrd">string</span> line)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>{
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">int</span> count = 0;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">foreach</span> (<span class="kwrd">char</span> ch <span class="kwrd">in</span> line)
</pre>
<pre>
<span class="lnum">   8:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">if</span> (ch == <span class="str">&#39; &#39;</span>)
</pre>
<pre>
<span class="lnum">  10:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            count++;
</pre>
<pre>
<span class="lnum">  12:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">else</span>
</pre>
<pre>
<span class="lnum">  14:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>            <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  16:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="kwrd">return</span> count;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>}
</pre>
</div>
</div>
</div>
<p>
----------------[結束]----------------------- 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
HTML PREVIEW 
</p>
<p>
另一個無聊的功能，是過去在寫些HTML相關的文章，常常要做這樣的動作: 一方面要想辦法把HTML秀到網頁上，就得用這種外掛來處理，不過另一方面又要讓讀者直接看一下HTML顯示出來的效果，一樣的CODE又要切到HTML編輯模式貼一次... 這次就是要省掉這個懶人工夫... 一次到位。來試一下這個功能: 
</p>
<p>
----------------[以下開始]------------------ 
</p>
<div>
<strong>HTML測試</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
&lt;H3&gt;這是H3的效果&lt;/H3&gt;&lt;H3&gt;這是H3的效果&lt;/H3&gt;&lt;H3&gt;這是H3的效果&lt;/H3&gt;&lt;H3&gt;這是H3的效果&lt;/H3&gt;&lt;H3&gt;這是H3的效果&lt;/H3&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;</span><span class="html">H3</span><span class="kwrd">&gt;</span>這是H3的效果<span class="kwrd">&lt;/</span><span class="html">H3</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">&lt;</span><span class="html">H3</span><span class="kwrd">&gt;</span>這是H3的效果<span class="kwrd">&lt;/</span><span class="html">H3</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">&lt;</span><span class="html">H3</span><span class="kwrd">&gt;</span>這是H3的效果<span class="kwrd">&lt;/</span><span class="html">H3</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">&lt;</span><span class="html">H3</span><span class="kwrd">&gt;</span>這是H3的效果<span class="kwrd">&lt;/</span><span class="html">H3</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">&lt;</span><span class="html">H3</span><span class="kwrd">&gt;</span>這是H3的效果<span class="kwrd">&lt;/</span><span class="html">H3</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<br />
<br />
<strong>HTML Preview</strong> 
<div style="border: 1px solid">
<h3>這是H3的效果</h3>
<h3>這是H3的效果</h3>
<h3>這是H3的效果</h3>
<h3>這是H3的效果</h3>
<h3>這是H3的效果</h3>
</div>
</div>
<p>
----------------[結束]----------------------- 
</p>
<p>
&nbsp;
</p>
<p>
好，展示完畢，沒什麼突破的進展，純粹自己好用而以[H]。我也不曉得有沒有人在用，懶的打包放網站了，需要的人再跟我要... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2008-03-31 01:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-31 01:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code-formatter-%e6%9b%b4%e6%96%b0-%e8%a4%87%e8%a3%bdcode%e5%8f%8ahtml%e9%a0%90%e8%a6%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="html"><![CDATA[HTML/CSS]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>272</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-02 07:20:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-02 07:20:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最好是只有改這樣..

明明加了廣告 !! 別以為我們不知道 !!

告訴你..還是一句老話..

請參考 Bot Check

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>273</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-02 16:24:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-02 16:24:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[啥廣告? 你指網站的 link 嘛 [H]
告訴你, 真正有廣告的版本你還沒看到...

--
BotCheck(請輸入 "月圓人團圓" : 月圓人團圓)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>274</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-03 14:20:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-03 14:20:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不就是在上面..Google提供的廣告

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>275</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-04 02:25:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-04 02:25:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Honga 我太高估你了 [H]
我還以為我還沒發表的東西你已經看到了... 哈哈...

上面的廣告加了一個多月了，你現在才看到...

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>WLW Plugins: Code Formatter</title>
		<link>http://columns.chicken-house.net/2008/03/07/wlw-plugins-code-formatter/</link>
		<pubDate>Fri, 07 Mar 2008 20:10:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/03/07/WLW-Plugins-Code-Formatter.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
最近常常貼一些需要附上程式碼的文章, 我都借助 [<a href="http://manoli.net/csharpformat/">c# code format</a>] 這網站幫忙轉, 轉成好看一點的 HTML code.. 然後 Live Writer 切到原始碼的模式去改 HTML, 然後再切回來際續編... 
</p>
<p>
人果然是懶惰的動物, 之前久久寫一篇還好, 最近就開始不耐煩了... 試了一套 Syntax Highlight 的 WLW plugins, 畫面不錯, 不過中文會亂掉.. 想說 c# code format 這網站的主人有 share source code, 我就把它拿來包成 Windows Live Writer Plugins 好了... 
</p>
<p>
就是這念頭開始寫這個 project, 蠻好寫的, 兩三個小時過去就堪用了, 經過幾天試用慢慢改成現在的樣子, 先現寶一下, 放幾張圖: 
</p>
<p>
&nbsp;
</p>
<p>
[圖 1] 編輯畫面<br />
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/WLWPluginsCodeFormatter_11BC9/image_5.png" border="0" alt="image" width="652" height="450" /> 
</p>
<p>
&nbsp;
</p>
<p>
[圖 2] 預覽畫面 (底下當然要加點廣告... )<br />
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/WLWPluginsCodeFormatter_11BC9/image3.png" border="0" alt="image" width="615" height="464" /> 
</p>
<p>
&nbsp;
</p>
<p>
結果就不用貼圖了, 底下這段就是用這 plugins 貼進來的... 
</p>
<p>
&nbsp;
</p>
<p>
<strong>[程式 1] 這是測試程式</strong> 
</p>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">using</span> System;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">using</span> System.IO;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">using</span> System.Threading;
</pre>
<pre>
<span class="lnum">   4:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> Program {
</pre>
<pre>
<span class="lnum">   6:  </span>  <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args) {
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    Console.WriteLine(<span class="str">&quot;Hello!!&quot;</span> );
</pre>
<pre>
<span class="lnum">   8:  </span>  }
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>}
</pre>
</div>
</div>
<p>
&nbsp;
</p>
<p>
看起來效果還不錯, 雖然跟之前差不多, 不過手工的部份少很多, 貼上, 按 OK, 就收工了! 這個 c# code format 提供的 library 還不賴, 效果也是我試用幾種 lib 後比較滿意的, 滿意的地方是: 
</p>
<ol>
	<li>Pure C# 開發的, 程式很短, 不過看的出作者功力不錯, 架構啥都棒. </li>
	<li>用習慣了, 之前都用它網站版本的. 很熟悉它轉出來的格式. </li>
	<li>轉出來的 code 比較乾淨. 不過它需要另外搭配它的 CSS. </li>
	<li>Unicode, 沒有什麼中文亂碼的問題.</li>
</ol>
<p>
當初最主要用它的原因就是 (3), 其它捨棄 CSS 的結果, 就是產生出來的 HTML 參著一大堆 color code, 老實說這種 HTML code 看起來就很痛苦. 我是不想看啦, 不過我必需切到 HTML view 去貼上這堆字啊...&nbsp; c# code format 雖然要另外補上 .css, 不過看起來就清爽多了. 我直接把它附的 CSS 貼到我用的 community server 的 custom themes 裡 (部落格管理裡面就可以直接加, 不用改檔案), 用起來就很輕鬆愉快了 :D 
</p>
<p>
要來看 code 嗎? 其實 code 就沒什麼好看的了, 需要的直接抓回去看吧. 倒是不常寫 WinForm 的我, 竟然被內建的 ComboBox 小整了一下... WinForm 內建的 ComboBox 功能很完整, Items 可以放 object, 然後再指定 ValueMember, DisplayMember... blah blah. 當然也有直接提供最簡單的 Text Editor, 一行字就是一個 Item ... 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/WLWPluginsCodeFormatter_11BC9/image_8.png" border="0" alt="image" width="148" height="112" /> 
</p>
<p>
不過, 我要的是很簡單的 Value / Display 分別指定就好, 就是這個 plugins 讓 user 選擇格式的地方 (如上圖), 我希望第一項的 Value 是 &quot;HTML&quot;, 而顯示的是 &quot;HTML / XML / ASP.NET&quot;, 這樣簡單的要求, 我心裡想... 這麼簡單, 一定可以直接用 Designer 填一填就搞定, 不用再去寫 code, 就可以 init 完成.. 
</p>
<p>
沒想到找了半天還真的找不到! :@ 翻了 MSDN, Microsoft community 等等技術支援網站通通都沒有. 教的都是一堆我覺的拖褲子放屁的作法... 不過是五個固定的選單而以啊... 
</p>
<p>
到最後, 宣告放棄, 妥協了... 我這個功能最後是用這幾行 code 搞定的... ㄨ!!! 本來一行 code 都不想寫的... 
</p>
<p>
&nbsp;
</p>
<strong>替 ComboBox 設定初始值的程式碼片段:</strong> 
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1: </span>comboBox1.DisplayMember = <span class="str">&quot;Value&quot;</span>;
</pre>
<pre>
<span class="lnum">   2: </span>comboBox1.ValueMember = <span class="str">&quot;Key&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">   3: </span>comboBox1.Items.Add(<span class="kwrd">new</span> KeyValuePair&lt;<span class="kwrd">string</span>, <span class="kwrd">string</span>&gt;(<span class="str">&quot;HTML&quot;</span>,  <span class="str">&quot;HTML / XML / ASP.NET&quot;</span>));
</pre>
<pre>
<span class="lnum">   4: </span>comboBox1.Items.Add(<span class="kwrd">new</span> KeyValuePair&lt;<span class="kwrd">string</span>, <span class="kwrd">string</span>&gt;(<span class="str">&quot;CS&quot;</span>,    <span class="str">&quot;C#&quot;</span>));
</pre>
<pre class="alt">
<span class="lnum">   5: </span>comboBox1.Items.Add(<span class="kwrd">new</span> KeyValuePair&lt;<span class="kwrd">string</span>, <span class="kwrd">string</span>&gt;(<span class="str">&quot;VB&quot;</span>,    <span class="str">&quot;Visual Basic.NET&quot;</span>));
</pre>
<pre>
<span class="lnum">   6: </span>comboBox1.Items.Add(<span class="kwrd">new</span> KeyValuePair&lt;<span class="kwrd">string</span>, <span class="kwrd">string</span>&gt;(<span class="str">&quot;MSH&quot;</span>,   <span class="str">&quot;MSH (PowerShell)&quot;</span>));
</pre>
<pre class="alt">
<span class="lnum">   7: </span>comboBox1.Items.Add(<span class="kwrd">new</span> KeyValuePair&lt;<span class="kwrd">string</span>, <span class="kwrd">string</span>&gt;(<span class="str">&quot;SQL&quot;</span>,   <span class="str">&quot;T-SQL&quot;</span>));
</pre>
<pre>
<span class="lnum">   8: </span>comboBox1.SelectedIndex = 1;
</pre>
</div>
</div>
<p>
&nbsp;
</p>
<p>
哈, 最後這邊收的不大漂亮, 不過不管了, 還好沒幾行. 這個 plugins 需要的就自己抓去用吧, 以後可能會不定時更新. 有啥改進意見可以留話給我, 不過嘛, 當然是有空 &amp; 想改才有動力去開 visual studio .. [H] 
</p>
<p>
&nbsp;
</p>
<p>
--<br />
下載: <a href="http://www.chicken-house.net/files/chicken/ChickenHouse.LiveWriterAddIns.zip">code formatter plugins</a> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2008-03-07 20:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-07 20:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wlw-plugins-code-formatter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<wp:comment>
			<wp:comment_id>276</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-08 17:22:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-08 17:22:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>教的都是一堆我覺的拖褲子放屁的作法... 

這才是普世之下的王道啊
對於我這種二十幾歲的小伙子來說^^,只剩左右手
都是用 CopySourceAsHtml,只要動個滑鼠幾下就好
不用重新造輪子,也不用脫褲子放屁^^

http://www.jtleigh.com/people/colin/software/CopySourceAsHtml/

不過它產生的HTML裡的CSS都是inlne的
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>277</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-08 18:11:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-08 18:11:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這東西古早前就用過，visual studio 的 plugins...
不過它的缺點是一定要從 visual studio 的 TEXT EDITOR copy 下來才有用，但是很多時後老人家 copy 的來源是 notepad ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>278</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-09 17:17:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-09 17:17:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小版本更新，可以重下載一次。
沒啥特別的就不另外貼文章了，請自行取用，thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>279</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-11 04:38:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-11 04:38:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[原來Combobox 問題是這樣來的..

微軟的東西..恩..可以用就好.. 



]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>280</wp:comment_id>
			<wp:comment_author><![CDATA[dotjum]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.dotblogs.com.tw/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-04-27 12:10:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-04-27 12:10:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi 我是點部落-IT技術知識社群的 Dotjum ，
WLW 的程式碼 CodeHighlight，我目前使用這套
Insert Code 針對中文的處理是正常的顯示，
我們站上有各朋友，有再把他再加上捲軸功能。
InserCode原始檔案http://www.codeplex.com/insertcode/Release/ProjectReleases.aspx?ReleaseId=840
捲軸功能
瓶水相逢.Net增加捲軸功能的。
http://www.dotblogs.com.tw/chhuang/archive/2008/04/14/2901.aspx



--
BotCheck(請計算答案: 7 x 3 =  21)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tips: 遠端桌面連線的小技巧</title>
		<link>http://columns.chicken-house.net/2008/03/05/tips-%e9%81%a0%e7%ab%af%e6%a1%8c%e9%9d%a2%e9%80%a3%e7%b7%9a%e7%9a%84%e5%b0%8f%e6%8a%80%e5%b7%a7/</link>
		<pubDate>Wed, 05 Mar 2008 18:49:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/03/05/Tips-e981a0e7abafe6a18ce99da2e980a3e7b79ae79a84e5b08fe68a80e5b7a7.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
查了文件, 才發現可以這樣用... 平常連到 server 用的遠端桌面連現, 常碰到幾個問題: 
</p>
<ol>
	<li>每次都要打 IP, 能不能拉捷逕出來, 我常連的那台只要點兩下就自動登入? </li>
	<li>只有那幾種解析度可以選, 沒有我要的... </li>
	<li>遠端桌面連進去的畫面, 跟本機的不一樣. 看不到某些在本機才看的到的訊息... </li>
</ol>
<p>
原來這些都有解啊... (1) 最簡單, 把設定存檔就好, 就附圖的資訊, 底下有 [Save As], 以後直接點兩下存好的檔案就好了. 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_1082C/image_3.png" border="0" alt="image" width="411" height="464" /> 
</p>
<p>
&nbsp;
</p>
<p>
再來, (2) 跟 (3) 其實也有解, 只要先打開 DOS Prompt, 輸入&nbsp; MSTSC /? 就會出現這個說明畫面: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_1082C/image_6.png" border="0" alt="image" width="573" height="633" /> 
</p>
<p>
&nbsp;
</p>
<p>
答案就在影片中... 加上 /w:1440 /h:900 參數, 就可以用寬螢幕的解析度 1440 x 900 來搖控遠端的 server 了. 想要看 console (本機) 的畫面嘛? 比如有時 service 的 error message 只會秀在 console.. 這時只要加上 /console 參數就好. 整段指令如下: 
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/Tips_1082C/image_8.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_1082C/image_thumb_2.png" border="0" alt="image" width="508" height="127" /></a> 
</p>
<p>
開出來的視窗: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_1082C/image_11.png" border="0" alt="image" width="640" height="389" /> 
</p>
<p>
嗯, 看寬螢幕的果然比較爽, 當然這樣也就有機會用雙螢幕了. 小技巧, 需要的人可以參考看看! 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2008-03-05 18:49:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-05 18:49:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips-%e9%81%a0%e7%ab%af%e6%a1%8c%e9%9d%a2%e9%80%a3%e7%b7%9a%e7%9a%84%e5%b0%8f%e6%8a%80%e5%b7%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>281</wp:comment_id>
			<wp:comment_author><![CDATA[dmwc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dmwc@ruri.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.ruri.com.tw/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-15 15:29:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-15 15:29:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[MSTSC 的 /console 好像只有 Win2003 才有? XP/Vista 應該是要用 /admin 取代]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>282</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-15 17:43:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-15 17:43:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是喔? 這我倒沒試過 :P 印像中 XP / Vista 的 MSTSC, 都被 windows update 更新過好幾次，我的 XP 已經更新到新的也都是用 /console 這參數...

不過感謝你提供 /admin 這參數，這我還真沒用過，那天 /console 不能用就來試試，thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Memory Management (III) - .NET CLR ?</title>
		<link>http://columns.chicken-house.net/2008/03/03/memory-management-iii-net-clr/</link>
		<pubDate>Mon, 03 Mar 2008 03:56:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/03/03/Memory-Management-(III)-NET-CLR-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[續 [<a href="/post/Memory-Management-(II)---Test-Result.aspx">上篇</a>] &amp; [<a href="/post/Memory-Management---(I)-Fragment-.aspx">上上篇</a>]，同樣的問題，我改用 .NET 開發是不是就搞定了? 其實這篇才是我要寫的重點，只不過引言寫太高興，就是兩篇文章了，咳咳... 有人在問，為什麼我老是寫些冷門的文章? 沒辦法... 大家都在寫的東西我就沒興趣寫了，文筆沒別人好，網站沒別人漂亮，連範例程式都沒別人炫，只好挑些沒人寫的內容...

大部份討論這主題的文章，講的都是 GC, GC 的 generation，IDisposable，還有 Heap 等等，不過這些知識都無法直接回答這次問題。底下的例子你會發現，預設的 GC 也無法解決 memory fragment 的問題，不過實際上是有解的，只是還要動用到秘技...

&nbsp;

回題，先來看看之前的問題為什麼會是個問題? 萬惡之首都在: 指標 (POINTER)。

因為有 pointer，因此 C 絕對不能 *自動* 幫你調整記憶體位置，也就一定會有這種問題。看到為何我在上篇提到的程式碼要把 pointer 的值印出來? 因為這代表我可以輕易拿的到實際的位址，因此任何重新定址 (relocation) 的動作一定會影響到程式的執行。所以最根本的解決辦法就是把 pointer 這東西拿掉。

年紀較輕的程式語言，如我常提到的 Java 跟 C#，都完完全全的把 pointer 從語言內移掉了，只留下 reference 這類差不多的東西。除了拿不到絕對的 address 之外，其它功能一個都不缺。但是這樣帶來的好處是很明顯的，除了一般書上講到爛的理由: "更安全，更簡易" 之外，很重要的一點就是，像 CLR or JavaVM 這種環境，開始有機會去搬移記憶體配置的區塊，徹底的由系統層面解決這種問題了。

.NET / Java 回收記憶體的動作是自動的，就是常聽到的 Garbage Collection，而上面提到的 relocation，就是指在回收時順便把剩下已配置的空間排在一起，搬移記憶體區塊所需要的重新定址動作。這種類型的 GC 有個特別的名辭，叫作 compact collection。理論上，.NET 已經具備這樣的條件了，應該要有能力可以解決這樣的問題。

不過 "可以解決" 跟 "已經解決" 仍然有一段差距，那麼現在的 .NET CLR 到底行不行? 一樣的範例程式用 C# 改寫一下，同樣的試看看，不過這次懶的再放好幾種版本試試看了，除了最大可用記憶體可能有差別之外，其它應該都統一了。我只針對 .NET 2.0 (x86) 一種版本測試，一樣，鐵齒的讀者們，有興趣就抓回去試一試...。

整段程式碼跟之前 C 版本大同小異，就是照順序配置 64mb 的 byte[]，直到丟出 OutOfMemoryException，然後跳著釋放，接著再配置 72mb 的 byte[]，看看能不能配置成功? 直到再丟出 OutOfMemoryException 為止，能配置多少記憶體? 這邊為了方便，我直接在 vista x86 系統上測試:

&nbsp;

測試的結果令我想殺人，竟然是 FAIL ? 放掉的空間拿不回來...

<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_3.png" alt="without GC" width="604" height="394" border="0" />

&nbsp;

後來想到，程式移除 reference，不見得會立刻釋放記憶體，總得等垃圾車 (Garbage Collect) 來收拾一下... 手動呼叫了 GC，也強迫指定要回收所有的 Generation 了 (呼叫: GC.Collect(GC.MaxGeneraion) ) 再試一次:

<a href="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_5.png"><img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_thumb_1.png" alt="with GC" width="604" height="394" border="0" /></a>

&nbsp;

結果好不到那裡去，難到我沒用市政府的垃圾袋嘛? [:@] 查了一下 MSDN，常見的 generation 問題也試過，沒有用。90% 講 CLR GC 的問題都在探討 generation 的問題...  查到某 Java 名人的<a href="http://www.microsoft.com/taiwan/msdn/columns/DoNet/garbage_collection.htm">文章</a>，提到了 compact collection 比較接近，不過沒有講怎麼明確的啟動這樣的 GC 啊... 後來去翻 .NET runtime 裡關於 garbage collection 的設定，發現還有這玩意... gcConcurrent / gcServer:

gcConcurrent: Specifies whether the common language runtime runs garbage collection on a separate thread.

gcServer: Specifies whether the common language runtime runs server garbage collection.

講的很清楚，不過對我沒啥用。gcConcurrent可能的影響是，也許呼叫後系統還在GC，我的程式就先跑下去了? 因此這東西關掉也許有幫助，再來試一次:

<a href="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_7.png"><img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_thumb_2.png" alt="gcConcurrent Disabled" width="604" height="394" border="0" /></a>

&nbsp;

真慘，一點幫助都沒有... 放掉的 768MB，只撈回 72MB，再來看一下最後一個 gcServer，看它的 HELP 看不大出來什麼是 "server garbage collection" ? 算了，試一下比較快:

<a href="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_9.png"><img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/MemoryManagementIII.NETCLR_330F/image_thumb_3.png" alt="gcServer Enabled" width="604" height="394" border="0" /></a>

&nbsp;

Bingo，看來這個參數下下去才是我預期的結果，放掉了 576MB，後面撈了 648MB 回來。這樣的作法，已經完全不會受到 memory fragment 問題的影響，証實了 compact collection 是有發恢它的效用的，只不過這個參數實際的作用，翻遍了 Google / MSDN，得到的都是很模菱兩可的答案，不外乎是你的程式如果是 blah blah blah 的話就要用 gcServer，這樣會比較好之類的，不過實際的差別則看不大出來。沒有任何一篇文件明確提到 server gc 會做 compact collection (如果這篇不算的話，哈哈)，而 workstation gc 不會，也許前面的方式也會觸發 compact collection也說不定，只是時機不成熟...

抱著不可能的希望，用 Reflector追看看，果然不出所料，Reflector也看不到細節，因為全都呼叫 native code 去了。不過這次的測試，至少確定了，在啟用 gcServer option 之後，CLR 的 GC 是會進行 compact collection 的。

寫到這裡，本系列文章結束，只是為了在新的平台驗證古早的問題而以，果然時代在進步，以前耽心的問題現在都不再是問題了。這一連串試下來，學到了一課，原來 gcServer 有這個差別，算是值回票價了。最後把我的測試程式碼貼一下，一樣，歡迎拿去各種平台試一下，有不一樣的結果也記得通知我一聲!

&nbsp;

&nbsp;

[Program.cs]

<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="lang:c# decode:true ">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace ClrMemMgmt
{
    class Program
    {
        static void Main(string[] args) {
            List&lt;byte[]&gt; buffer1 = new List&lt;byte[]&gt;();
            List&lt;byte[]&gt; buffer2 = new List&lt;byte[]&gt;();
            List&lt;byte[]&gt; buffer3 = new List&lt;byte[]&gt;();
            
            //            
            //    allocate             
            //            
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("1. Allocate 64mb block(s) as more as possible...");
            try
            {
                while (true)
                {
                    buffer1.Add(new byte[64 * 1024 * 1024]);
                    Console.Write("#");
                    buffer2.Add(new byte[64 * 1024 * 1024]);
                    Console.Write("#");
                }
            }
            catch (OutOfMemoryException)
            {
            }
            Console.WriteLine();
            Console.WriteLine("   Total {0} blocks were allocated ( {1} MB).", (buffer1.Count + buffer2.Count), (buffer1.Count + buffer2.Count) * 64);
            
            //        
            //    free  
            //        
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("2. Free Blocks...");
            buffer2.Clear();
            Console.WriteLine("   Total: {0} blocks ({1} MB)", buffer1.Count, buffer1.Count * 64);

            //        
            //  GC  
            //            
            GC.Collect(GC.MaxGeneration);  
                 
            //           
            //    allocate  
            //          
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("3. Allocate 72mb block(s) as more as possible...");
            try
            {
                while (true)
                {
                    buffer3.Add(new byte[72 * 1024 * 1024]);
                    Console.Write("#");
                }
            }
            catch (OutOfMemoryException)
            {
            }
            Console.WriteLine();
            Console.WriteLine("   Total: 64mb x {0}, 72mb x {1} blocks allocated( {2} MB).\n", buffer1.Count, buffer3.Count, buffer1.Count * 64 + buffer3.Count * 72);
            Console.ReadLine();
        }
    }
}</pre>
&nbsp;

&nbsp;

&nbsp;

&nbsp;

[configuration file]

<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="lang:xhtml decode:true ">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;  
  &lt;runtime&gt;    
    &lt;!--&lt;gcConcurrent enabled="false" /&gt;--&gt;    
    &lt;!--&lt;gcServer enabled="true" /&gt;--&gt;  
  &lt;/runtime&gt;
&lt;/configuration&gt;</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2008-03-03 03:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-03 03:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memory-management-iii-net-clr]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>283</wp:comment_id>
			<wp:comment_author><![CDATA[sumtec@beijing]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sumtec@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-22 12:36:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-22 12:36:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不知道是否能看到这个评论，因此只好中英文双解了：
造成这个问题的原因是，你用了工作站垃圾收集模式。该模式是并发的，也就是和你的程序所在线程同时跑。你在做GC.Collect的时候没有等待这个回收完成，因此垃圾没有回收完，你就已经开始申请了，此时当然没有可以申请的空间。至于选用了gcServer=true能成功，是因为服务器垃圾收集模式不是并发的，会中断当前的线程，直到垃圾收集完成之后才返回，所以当GC.Collect返回的时候，就已经释放完所有空间了。

As I don't know if your browser can display GB18030 encoded text, I have to reply you in both Chinese and English, hope you can see it:
The cause of the problem is that the WinForm/Console application runs garbage collection in workstation mode, which by default will run gc collection in a thread other than the one which calls the GC.Collect. As a result, when GC.Collect returns, few memory has been released. When you allocates memory right after GC.Collect, you will probably fail.

After you set gcServer=&quot;true&quot;, the gc collection will run in the same thread as the one running the the code which calls the GC.Collect. Which means, after GC.Collect returns, all the memory has been released. That's exactly what you saw.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>284</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-23 16:28:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-23 16:28:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多謝您提供的資訊 :D

本站使用 UTF-8，基本上 GB18030 都會先被轉成 UNICODE 再貼上來，沒問題啦。

我推測這個 GC 的問題也是跟你講的一樣，只不過我找不到官方的文件說明這兩者之間的明確差異。gcConcurrent 看來就是在控制是否並行的，workstation mode 加上去也不見效果。不知您這些資訊是從那裡看到的? 有網址或網站的話可否提供? 感謝!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Memory Management (II) - Test Result</title>
		<link>http://columns.chicken-house.net/2008/03/03/memory-management-ii-test-result/</link>
		<pubDate>Mon, 03 Mar 2008 03:14:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/03/03/Memory-Management-(II)-Test-Result.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[該來揭曉謎底了，在人氣不怎麼高的地方拋這些冷門的問題，看的我都覺的 "這版主真是不自量力" .. 咳咳.. 為了把之前的心得，在現在的主流作業系統及平台再驗證一次，只好自己花了點小工夫，把 C 挖出來寫個測試程式，不過 C / C++ 實在太久沒寫了，已經忘到連語法都得翻 HELP 的程度 :~ 花了些時間才搞定。

不過也因為這樣，連帶的查了一下如何編譯 x64 的程式碼，還有一些相關的設定項目。這次測試只測了 windows 的環境，沒辦法，這把年紀實在沒力氣再去摸第二種 OS 了，如果有善心人事要幫我測的話，我倒是很樂意把你測的結果一起放上來! 程式碼請看 [<a href="#03">註3</a>]

不多說廢話，測試主要會針對三種環境來測試:
<ol>
	<li>一般的 x86 (win32)</li>
	<li>在 x64 下的 32 位元執行環境 (wow64)</li>
	<li>原生的 x64 程式</li>
</ol>
原本還想加上 /3GB options 來測的，不過這樣跟 (2) 幾乎是一樣的，只差在 3GB 跟 4GB 的可用空間而以，差異不大，當然就省下來了 [H]

測試結果就直接抓畫面附在底下了。程式碼當然都是同一份。原始 project 放在 [這裡]。其實這次問題的關鍵，跟 windows / linux，32/64，都沒有直接關係，唯一有關的是，<strong><span style="color: #ff0000;">你的 memory address space 到底有沒有用完</span></strong>... 怎麼說? 先來看結果:
<ol>
	<li>x86 build (run under windows 2003 standard x64):
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/b924c2e3d4b2_2526/image_11.png" alt="" width="604" height="472" border="0" /></li>
	<li>x86 build + /LARGEADDRESSAWARE option (under 2003 x64)
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/b924c2e3d4b2_2526/image3_1.png" alt="" width="604" height="472" border="0" /></li>
	<li>x64 build
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/b924c2e3d4b2_2526/image6_1.png" alt="" width="604" height="472" border="0" /></li>
</ol>
看不出個所以然? 簡單畫個表格整理一下測試結果:

測試環境統一為 Windows 2003 x64 版本，可用記憶體為 2GB，分頁檔有 4GB。
<table style="border: 1px solid;" border="0" width="600" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td style="background-color: #d0d0d0;" valign="top" width="150">測試項目</td>
<td style="background-color: #d0d0d0;" valign="top" width="150">測試 #01</td>
<td style="background-color: #d0d0d0;" valign="top" width="150">測試 #02</td>
<td style="background-color: #d0d0d0;" valign="top" width="150">測試 #03</td>
</tr>
<tr>
<td style="background-color: #d0d0d0;" valign="top" width="150">執行環境</td>
<td style="border: 1px solid;" valign="top" width="150">32Bits (WOW64)</td>
<td style="border: 1px solid;" valign="top" width="150">32Bits (WOW64)</td>
<td style="border: 1px solid;" valign="top" width="150">64Bits (Native)</td>
</tr>
<tr>
<td style="background-color: #d0d0d0;" valign="top" width="150">Build Options</td>
<td style="border: 1px solid;" valign="top" width="150">x86</td>
<td style="border: 1px solid;" valign="top" width="150">x86 + LargeAddressAware</td>
<td style="border: 1px solid;" valign="top" width="150">x64</td>
</tr>
<tr>
<td style="background-color: #d0d0d0;" valign="top" width="150">可定址空間 / 實際可用空間</td>
<td style="border: 1px solid;" valign="top" width="150">2048MB / 1920MB</td>
<td style="border: 1px solid;" valign="top" width="150">4096MB / 3904MB</td>
<td style="border: 1px solid;" valign="top" width="150">8TB / 4032MB</td>
</tr>
<tr>
<td style="background-color: #d0d0d0;" valign="top" width="150">問題的測試結果 / 可以配置的 72mb 區塊</td>
<td style="border: 1px solid;" valign="top" width="150">NO / 2</td>
<td style="border: 1px solid;" valign="top" width="150">NO / 2</td>
<td style="border: 1px solid;" valign="top" width="150">YES / 27</td>
</tr>
</tbody>
</table>
這結果大概會跌破一堆人的眼鏡，雖然板上回應的很冷清，不過私下 MSN 問了幾個人，有很肯定的，也有不確定的，當然也有亂猜猜的很肯定的 (S＊M，就是你...)，不過答案都很兩極，不是都不行，不然就是都可以...

就理論上來說，分頁的記憶體管理方式，的確是不能解決在 virtual memory address space 過度分散 (fragment) 的問題，如果程式或作業系統沒有作適度的 defrag，那麼你要挖一塊記憶體的要求一定會失敗，但是為什麼測試 #03 會通過? 因為實際可用的 Memory ( Physical RAM + Swap File ) 也不過 6GB，你的程式需索無度，要求超過的怎麼樣也生不出來。6GB 扣掉其它 OS / AP 用掉的，跟理論上能用的 8TB 實在是差太多，造成你的 virtual memory address space 跟本不可能用完。當然 *不可能* 這字眼別用太滿，十年前也是認為 4GB 跟本不可能用完，不過我現在的 PC 就已經裝了 6GB ... [:$] 上表中列了一些較特別的參數，像是明明是 32 位元，怎麼可定址空間是 2048MB ? 還有 LargeAddressAware 是什麼? 這些屬 windows 較特別的規矩，我在文章最後面的 [<a href="#01">註1</a>] 說明一下。

現在的 PC，隨便都是 1GB / 2GB RAM，加上分頁檔，超過 4GB 跟本是件很普通的事，意思是寫不好的程式，的確是已經會面臨到這樣的困境了，明明記憶體還夠用，但是系統卻回報 Out Of Memory ...。只可惜這樣的問題，OS一點忙都幫不上。因為 OS 沒有辦法替你做 Memory Defragment 的動作 [<a href="#02">註2</a>]。<a href="/post/Memory-Management---(I)-Fragment-.aspx">上一篇</a>我有畫張記憶體配置的圖，只能用來說明 #01 / #02 的情況，換成 #03 就不大適用了。只要可定址空間夠大，基本上你只需要考慮你配置的記憶體總量有沒有超過可用的記憶體就好，是不大需要在意是不是有 fragment 的問題，除非你的可配置空間跟可用空間很接近，這問題才會浮現出來。就像積木買來，積木的體積跟盒子差不多大，你要全擺進去就得花點工夫安排一下，否則一定會有一些是收不進去的一樣 (幫吳小皮收玩具的感想... -_-)。不過如果你換一個大盒子，或是把整個房間當成大盒子來看，隨便丟都沒問題，連會不會撞在一起都不用耽心，一定不會有空間夠卻放不進去的問題，這就是差別。

這測試結果看起來很可怕，感覺起來只要是 32 位元的程式，加上是 server or services，會長時間運作的，好像都有可能碰到這種問題。這不算是 Memory Leak (因為記憶體是真的有成功的被釋放)，那麼 Java / .NET 宣稱的 Garbage Collection 回收機制到底會不會碰到這個問題? 別耽心，等著看下一篇就知道了 [H]

&nbsp;

&nbsp;

&nbsp;

--

註 1. /LARGEADDRESSAWARE:

32 位元系統可定址空間應該是 2^32 = 4GB 沒錯，不過 Microsoft 把它一分為二，規劃一半是給 Kernal，另一半才是給 APP 使用。意思是你的程式再怎麼用只能用到 2GB。不過這種問題幾年前就浮現出來了，Microsoft 特地在 OS 上加了 /3GB 這種參數，可以把 OS : AP = 2GB : 2GB 的規劃，調整為 1GB : 3GB。不過相對的程式在編譯時也要加上 /LARGEADDRESSAWARE 參數，才有可能讓 AP 取得 2GB 以上的記憶體。

所以即使在 x64 下執行的 x86 應用程式，跟本沒有 OS 那 2GB 的需求，一般 x86 APP 在 64 位元作業系統下仍然只能用到 2GB，但是不同參數編譯出來的程式碼，就能用到 4GB (如果是在加上 /3GB 的 x86 OS，則大約是 3GB)

&nbsp;

註 2. 為什麼 OS 不能替 Memory 執行 Defragment 的動作?

原因很簡單，測試的程式是用 C / C++ 這類可以直接存取 pointer 的程式語言寫的。試想一下 OS 如果替你把已配置的記憶體區塊挪一挪會發生什麼事? 你拿到的 pointer 全都成了廢物，因為它指向的記憶體，可能已經不是當時你認識的資料了... 因為資料有可能被強迫搬家，你的通訊錄再也沒有用，老朋友就失聯了...

因此，別的程式語言不一定，但是允許你直接使用 pointer 的語言，這類的問題你閃不掉，一定得自己想辦法...

&nbsp;

註 3. 測試程式碼

這段 code 我做了點改變，因為 4kb block size 實在太小了 (相對於 4GB 上限)，印出訊息一大堆，執行又慢，因此我自己把問題的參數調整一下，把問題的 4kb 改成 64mb，而最後要配置的 5kb 則改成 72mb。若對這段 code 有興趣的人，可以直接 copy 去用。我直接把 source code 貼在底下 ( C++ 語法忘了一大半 :P，因此用的都是單純的 C ... 除了 conio.h 之外，應該隨便都能成功編譯吧，看誰有興趣可以拿到 Linux 下去試看看....):

&nbsp;

&nbsp;

<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="lang:c++ decode:true csharpcode  ">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;conio.h&gt;
#include &lt;malloc.h&gt;

void init_buffer(void *ptr, unsigned int size) {
    if (ptr == NULL) return;

    //for (int count = 0; count &lt; size / sizeof(long); count++) {
    //    ((long *)ptr)[count] = 0;
    //}
}

int main(const int&amp; args) {
    void *buffer1[4096];
    void *buffer2[4096];
    void *buffer3[4096];

    //
    //    allocate
    //
    printf("\n\n");
    printf("1. Allocate 64mb block(s) as more as possible...\n");

    int total = 0;
    for (int count = 0; count &lt; 4096; count++) {
        buffer1[count] = buffer2[count] = NULL;
        buffer1[count] = malloc(64 * 1024 * 1024);

        if (buffer1[count] == NULL) break;
        init_buffer(buffer1[count], 64 * 1024 * 1024);
        printf("#");
        total++;

        buffer2[count] = malloc(64 * 1024 * 1024);

        if (buffer2[count] == NULL) break;
        init_buffer(buffer2[count], 64 * 1024 * 1024);
        printf("#");
        total++;
    }

    printf("\n   Total %d blocks were allocated ( %d MB).\n", total, total * 64);


    //
    //    free
    //
    printf("\n\n");
    printf("2. Free Blocks...\n");

    for (int count = 0; count &lt; 4096; count++) {
        if (buffer2[count] == NULL) break;
        free(buffer2[count]);
        buffer2[count] = NULL;
        total--;
        printf("#");
    }

    printf("\n   Total: %d blocks (%d MB)\n", total, total * 64);
    

    //
    //    allocate
    //
    printf("\n\n");
    printf("3. Allocate 72mb block(s) as more as possible...\n");

    int total2 = 0;
    for (int count = 0; count &lt; 4096; count++) {
        buffer3[count] = malloc(72 * 1024 * 1024);
        if (buffer3[count] == NULL) break;
        printf("#");
        total2++;
    }

    printf("\n   Total: 64mb x %d, 72mb x %d blocks allocated( %d MB).\n", total, total2, total * 64 + total2 * 72);
    printf("\nDump Blocks Address:\n");

    for (int count = 0; count &lt; 4096; count++) {
        if (buffer1[count] == NULL) break;
        printf("  64mb block ponter: [%08p] ~ [%08p] \n", buffer1[count], (long)buffer1[count] + 64 * 1024 * 1024);
    }

    for (int count = 0; count &lt; 4096; count++) {
        if (buffer3[count] == NULL) break;
        printf("  72mb block ponter: [%08p] ~ [%08p] \n", buffer3[count], (long)buffer3[count] + 72 * 1024 * 1024);
    }


    _getch();
    return 0;
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2008-03-03 03:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-03 03:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memory-management-ii-test-result]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>285</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.darkthread.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-03 05:35:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-03 05:35:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘿... 不用做實驗就知道結果感覺不賴。
莫怪小弟不回應，原因有二:
1.命題規定用"C/C++"，超出小麻瓜的能力範圍，那個...
2.本想用.NET來驗證一下，料想應該會靠Garbage Collection殺敵制勝，不過懶懶病發，所以...
(謎之聲: 沒交作業就沒交，理由一大堆)
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>286</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-03 10:43:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-03 10:43:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[.NET 倒真的可以試一下, 會發現 console app 跟 asp.net app 差很多 (如果你真的敢在 asp.net 下面試的話)... 因為這樣試過一輪, 也意外的發現以前不知道的事 [H]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>287</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-06 20:50:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-06 20:50:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>為什麼我老是寫些冷門的文章

嘿嘿..我們能期待一個很冷的人,可以寫出很熱的文章嗎? ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>288</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-06 22:09:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-06 22:09:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>>為什麼我老是寫些冷門的文章
>嘿嘿..我們能期待一個很冷的人,可以寫出很熱的文章嗎? 

說的也是,你應該不大喜歡瘦瘦的文章.. [H]
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Memory Management - (I). Fragment ?</title>
		<link>http://columns.chicken-house.net/2008/02/26/memory-management-i-fragment/</link>
		<pubDate>Tue, 26 Feb 2008 21:07:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/26/Memory-Management-(I)-Fragment-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
程式越寫, 越覺的課本教的東西很重要... 最近碰到一些記憶體管理的問題, 想到以前學 C 跟 OS 時, 大家都有個理想.. 
</p>
<p>
&quot;只要 OS 支援虛擬記憶體, 以後寫 code 都不用耽心 Memory 不夠...&quot; 
</p>
<p>
聽起來很合理, 虛擬記憶體本來就是讓開發人員省事的機制啊... 當然前提不超過硬體限制, 像是 32 位元的程式就不能超過 4GB. Virtual Memory 也帶來很多好處. 除了可以以硬碟空間換取記憶體空間之外, 因為 swap 需要的 paging 機制, 也間接的解決了 &quot;PHYSICAL&quot; Memory Fragment 的問題. 
</p>
<p>
怎麼說? 邏輯的記憶體位址, 對應到實體的記憶體位址, 不一定是連續的. 有點像是硬碟的一個大檔案, 實際上可能是散在硬碟的好幾個不連續區塊. 除了效能問題之外, 是沒有任何不同的. 
</p>
<p>
因為這堆 &quot;便民&quot; 的機制, 現在的程式設計師還會考慮這種問題的人, 少之又少. 有的還聽不懂你在問啥... 以前在 BBS 討論版看到一個問題, 印像很深刻, 算一算十來年了還記得... 把這問題貼一下, 主題就是 programmer 到底該不該耽心 memory fragment 的問題? 實驗的方式很有趣: 
</p>
<ol>
	<li>連續以固定 size (ex: 4KB) allocate memory, 直到沒有記憶體為止 </li>
	<li>開始 free memory. 不過是跳著釋放. 比如 (1) 取得的一連串記憶體, 只放奇數位子 1st, 3rd, 5th, 7th .... </li>
	<li>挑戰來了, 這時應該清出一半空間了. 如果我再 allocate 5KB 的記憶體, OS 會成功清給我? 還是會失敗?</li>
</ol>
<p>
簡單畫張圖說明，就像這樣: 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/MemoryManagementI.Fragment_45D5/image_3.gif" border="0" alt="image" width="500" height="380" /> 
</p>
<p>
(1) 就是在可用的定址空間內盡量塞，因為虛擬記憶體的關係，不管實體記憶體夠不夠，都能夠使用。 
</p>
<p>
(2) 就是跳著釋放記憶體後的分佈情況。 
</p>
<p>
(3) 圖上看來已經沒有能夠容納 &quot;大一點&quot; 區塊的空間了，那麼 [?] 這個區塊到底還放不放的下? 
</p>
<p>
來來來, 大挑戰... 這種程式千萬別在自己家裡亂玩... 也別在你按不到 reset 開關的電腦亂玩 (ex: 遠端連到機房的 server) ... 前題是用 C / C++ 這類可以直接操作 pointer 的 language. OS 不限, 覺的 Linux 強就用 Linux, 喜歡 Gates 的就用 windows... 32 / 64 位元都可以... 
</p>
<p>
先賣個關子, 結果會是怎麼樣? 不同的 OS 會有不同的結果嗎? 64位元會有不同嗎? 有興趣可以試看看，懶的寫 code 也可以猜看看! 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2008-02-26 21:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-26 21:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memory-management-i-fragment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>292</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-28 00:10:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-28 00:10:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小熊子呼叫黑暗大哥~
快呀~ 輸熊不輸陣啊~ ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>困難重重的 x64</title>
		<link>http://columns.chicken-house.net/2008/02/26/%e5%9b%b0%e9%9b%a3%e9%87%8d%e9%87%8d%e7%9a%84-x64/</link>
		<pubDate>Tue, 26 Feb 2008 02:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/26/e59bb0e99ba3e9878de9878de79a84-x64.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
即使是做足了功課，還是敗下陣來... Orz 
</p>
<p>
之前 Vista x64 用的都還不錯，直到加上 4GB 之後，才是惡夢的開始... 之前貼了一篇 6GB 很爽的 POST，之前插上去只偵測到4.8GB，想說小事情，一定是 BIOS Remap沒打開的關係，果然一開就是 6GB，一切正常，就貼了 POST .. 
</p>
<p>
不過隔一兩天，想開個 MCE 來看電視，怎麼沒訊號? 查了半天確定線路都正常，才想到之前剛裝好不是都 OK 嗎? MCE 還列為重點測試項目之一，driver早都打聽好了，怎麼還會這樣? 就一個一個設定 rollback 試看看... 
</p>
<p>
搞半天，問題出在想都沒想到的地方... 我的 TV 卡，在Vista x64開了Memory Remap後就會出問題了。Device Manager沒有任何異狀，但是MCE就一直說訊號微弱... 跟本沒辦法看. Memory Remap 關掉就正常了。寫Mail去圓剛跟華碩的客服反應，果然再怎樣還是要買大廠的... 
</p>
<p>
ASUS 有回，不過沒用... 
</p>
<p>
圓剛? 沒人鳥我... 
</p>
<p>
雖然切回 4.8GB 還是戡用，不過多買的 4GB 只能當 2.8GB 不到，感覺有點鳥... 加上裝了 X64 有一半以上的軟體都是 X86 ... 看起來實在有點礙眼... 其實現階段用 X64 也是有些缺點的，第一就是很多軟體及 DLL 都要分兩套， x64 + x86，很佔空間。第二，一樣的程式 x64 吃的 memory 比較多，為何? 每個 Pointer 都多兩倍空間... 多少都會有影響... 第三，幾乎用到 COM 元件的都得靠 WOW，效能有點下滑... 所以暫時還是換回 x86 版了. 
</p>
<p>
換回 x86 vista 後第一件事就是試試電視卡，在 x86 mode 下開不開 REMAP 就都正常，看來 Driver 要負一點責任，不過工作忙，暫時就不理它了，下次擇日再挑戰一次 x64. Ram 裝太多果然還是有一堆問題，新問題是我的主機板 (ASUS P5B-E Plus) 如果開了 BIOS Remap，進 Vista 後只能看到 2048MB Ram @_@，關掉反而還有 2.8GB... 搞什麼飛機... 
</p>
<p>
又是搞了半天，確定無解，網路上很多人跟我一樣... 本想就讓它 2.8GB 吧，不過又讓我發現了個評價不錯的 Ram Disk 軟體: &quot;Gavotte Ramdisk&quot; 
</p>
<p>
評價不外呼是免費，沒有容量限制，很穩定等等，不過它有個特異功能倒是 RAM 插太多的人要試試... 它可以把像我這樣失去的 RAM 挖回來用!! 
</p>
<p>
真的蠻神奇的，只要 Vista 起用 PAE (Physical Address Extension)，這套 RAM DISK 就能自動把 OS 不會抓來用的 RAM 當成 RAMDISK. 不過不開 BIOS Remap 就沒輒... 因此當場我的組態變成: RAM: 2GB, RamDisk: 4GB ... 
</p>
<p>
真的是 Orz，我要那麼大的 RamDisk 幹嘛? 像網路一堆人把 Page File 放到 RamDisk 上的作法又覺的有點蠢，雖然很多時後非得要 Page File 不可，不過把 RAM 不夠時某些 RAM 的資料搬到 DISK，而這 DISK 又是 RAM 模擬的，感覺就像是做了一堆白工... 算了，拔掉 2GB 吧，剩下 2GB 就當 TEMP 用，可以塞 TEMP 的就塞過去.. 
</p>
<p>
看起來 x64 還是小問題多多，沒那個人生跟他耗的話，還是過一陣子再試試吧，反正照這情勢，RAM很快就會漲到不得不換 X64 的地步了，往好的方面想，這應該會加速廠商移到 x64 的腳步吧? [H] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2008-02-26 02:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-26 02:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%b0%e9%9b%a3%e9%87%8d%e9%87%8d%e7%9a%84-x64]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
		<wp:comment>
			<wp:comment_id>293</wp:comment_id>
			<wp:comment_author><![CDATA[Ammon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-27 01:17:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-27 01:17:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我的主機板也是 ASUS P5B-E Plus ，但我用的是 WinXP x86，4G的Ram，PAE以從boot.ini啟動
 
想請教關於 RamDisk 這段設定，RamDisk的部分是直接開啟2G嗎? pagefile 能否放到 RamDisk上?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>爽一下, 6GB RAM ...</title>
		<link>http://columns.chicken-house.net/2008/02/13/%e7%88%bd%e4%b8%80%e4%b8%8b-6gb-ram/</link>
		<pubDate>Wed, 13 Feb 2008 04:40:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/13/e788bde4b880e4b88b2c-6GB-RAM-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/6GBRAM_41C2/image_7.png" border="0" alt="image" width="660" height="414" /> 
<p>
哇哈哈, 雖然現在RAM便宜到翻掉, 不過要突破4GB的先天限制, 還真花了不少功夫... 不想用 Server 版的 OS, 也不想用 PAE 等等其它不乾不脆的方式, 走的是換 64 Bits OS 這條路, 總算成功了, 當然要貼來紀念一下. 
</p>
<p>
原本有 2GB RAM, 想趁過年加個 4G 來用用... 過年期間跑了光華商場, 無奈帶了小皮問了好幾家店, 每家都說沒貨 @_@, 說是大盤過年前一周就因為盤點, 都停止出貨, 買不到 2GB DDR2 ... 只好等過完年了... 
</p>
<p>
回想才幾年前, 想說4GB這麼大, 對於當時的RAM容量 (4MB算很奢侈了) 跟本是天文數字, 跟本沒在想那天 RAM 超過 4GB 怎麼辦... 沒想到現在隨便就超過了... 我看未來會帶動 x64 升級的理由不是效率也不是安全性... 完全只是為了能用超過 4GB 的 RAM 吧... 反正 RAM 這麼便宜... 
</p>
<p>
扯遠了, 這篇純脆是突破多年來的限制, 紀念一下而以 [H], 想敗的人快點去敗吧, 很值得的... [:D] 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2008-02-13 04:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-13 04:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%88%bd%e4%b8%80%e4%b8%8b-6gb-ram]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>294</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-13 09:26:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-13 09:26:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[爽成這樣!! 連Bot check都要來檢查一下...

Bot Check (required)
    請計算答案: 4 + 2 = 6]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>295</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-14 10:22:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-14 10:22:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>回想才幾年前, 想說4GB這麼大, 對於當時的RAM容量 (4MB算很奢侈了) 跟本是天文數字

4MB( 486DX2)的年代,應該也超過10年了吧,
對你來說居然是"才幾年前"的事...orz

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>296</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-26 20:57:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-26 20:57:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我也來爽一下~ :d

有看到你前後兩天精闢的留言, (Y)!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>再度換裝 Vista ... Vista Ultimate (x64)</title>
		<link>http://columns.chicken-house.net/2008/02/12/%e5%86%8d%e5%ba%a6%e6%8f%9b%e8%a3%9d-vista-vista-ultimate-x64/</link>
		<pubDate>Tue, 12 Feb 2008 04:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/02/12/e5868de5baa6e68f9be8a39d-Vista-Vista-Ultimate-(x64).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
暨之前<a href="/wp-content/be-files/archive/2007/03/27/vista.aspx">升級到 VISTA</a> 的經驗, 到最後不適用又換回 XP 到現在, 差一個月就一年了 (真久), 這陣子因為陸陸續續解決掉一些問題, 加上一些誘因, 不得不換到 VISTA, 於是又再度換了一次...
</p>
<p>
這次會想換, 主要有幾個原因:
</p>
<ol>
	<li>因為硬碟滿了, 過年前買了顆 750G 的新硬碟, 可以有辦法裝新 OS 而不影響到舊系統</li>
	<li>想加 RAM, 不過原本已經是 2GB 了, 32 位元的系統 (XP) 再加上去效益不大, 想直接換到 64 位元, 個人用我也不大想換 server 版的 OS, 不大好用. 可用的 memory 雖然能突破 4GB, 但是它終究是 32 位元的系統, 對於記憶體的使用仍有一堆限制, 換成 x64 才是正途.</li>
	<li>原本用的是 XP MCE2005, 如果要保有 MCE 的功能, 又要64位元, 那只剩 Vista x64</li>
	<li>Canon Raw Codec 已推出, 常用的轉檔作業都已經用 .NET Framework 3.0 改寫完成, 加上先前在 VM 試過, 可以初步解決 Canon Raw Codec 不支援 x64 的問題. 過去的障礙已經排除</li>
	<li>想開始研究一下 IIS7, Win2008 還太遙遠, 直接用現成的 vista 比較快</li>
	<li>家裡大人已經用 vista 好一段時間了, 看她用也沒啥問題...</li>
	<li>內建的東西夠多, 我是只要內建的堪用就會用的人... 內建 DVD codec, 基本的 Video DVD 編輯程式對我還蠻有用的</li>
	<li>雖然 Vista 沒啥重要的大改進, 但是每個小地方的改良加起來也不少</li>
	<li>Tablet PC 功能. 前陣子弄了塊陽春的數位板, 可以直接用現成的 for Tablet PC 軟體. 又是跟 MCE 一樣的例子, 過去是有特定版本的 XP, 沒辦法同時保有 Tablet PC / Media Center / x64 等好處, 只有換 Vista 一途...</li>
	<li>雖然 Vista 預先載入你常用 AP 的功能常被罵到臭頭, 但是我倒是不介意多餘的 RAM 先拿去當 Cache 使用. 幾個常用的大型軟體, 在 Vista 下載入的速度還真的快很多, 雖然是錯覺, 但是至少也是有用到...</li>
	<li>過去 Visual Studio 2005 在 Vista 上有些小問題 (要加裝 patch), 在 x64 下問題更多... 尤其是 debugging 時. 現在 Visual Studio 2008 出來, 這類問題都解決的差不多了</li>
	<li>Vista SP1 快出了, 時機應該成熟了, 預先準備一下...</li>
	<li>最重要的原因: 都買了正版 Vista 了, 放著不用是怎樣... [H]</li>
</ol>
<p>
補充個事後才發現的好處, Vista Complete PC 是內建的磁碟備份工具, 類似 GHOST 那樣, 是把你整顆硬碟做成映像檔. Microsoft 當然用它推廣的格式 *.vhd, 正好跟我常用的 Virtual PC / Virtual Server 的格式一致. 多好用? 簡單在 Vista 內點兩下就可以做 Disk Image, 以後需要的話可以直接用 Vista DVD 還原, 就像 GHOST 一樣. 或是直接用 Virtual Server 2005 R2 SP1 附的工具: <a href="/post/Using-VHDMount-with-Virtual-PC.aspx">VHDMOUNT</a>, 直接掛起來用 [Y]
</p>
<p>
另外一點也要特別提一下. 原本搜遍了 GOOGLE, 得到的答案清一色都是 Canon Raw Codec 不支援 Vista X64. 官方說法跟使用者討論都是這樣. 我是硬著頭皮先在 VM 裡試了一下, 耶? 至少還可以安裝上去. 不過果然不行. 我自己寫的<a href="/post/Canon-Raw-Codec-2b-WPF-12c-WPF-Image-Codec2c-Metadata.aspx">轉檔工具</a>不能用, 如預期的找不到對應的 Codec. 在 Windows Live Gallery 及檔案總管下也不能直接看到 .CR2 的縮圖...
</p>
<p>
不過想到過去跟 X64 + WOW (是 Windows On Windows, 不是魔獸世界) 奮戰的經驗, 其實 Microsoft 做的 32 位元回朔相容作的還不錯. 只是有一個大前題: 32 / 64 兩種 CODE 不能混在一起執行. 同一個處理程序 (Process) 內必需都是 32 或是 64 位元的 code. 第一個碰到這種問題的就是各式軟應體的 driver. 硬體的就不說了, 軟體的像一堆 &quot;虛擬&quot; 裝置, virtual cdrom, virtual disk, virtual network adapter ... 等等. 第二個碰到的就是各式的 DLL, 它本來就是讓你載入到你的 Process 內使用的, 像一堆 ODBC driver, COM 元件, ActiveX Control, Video Codec, 加上 WPF 使用的 Image Codec, 都在此列. 這種才是真正的問題, 就像 Microsoft 可以把 IE 重新用 64 位元改寫, 但是它無法替所有的 ActiveX Control 改寫為 64 位元, 因此未來的五年內, 光是 IE 這東西, 你大概還是甩不掉 32 位元版本...
</p>
<p>
這類相容問題通常都是整套用 32 位元版本就可以解決, 就像 IE 你只要開啟 32 位元版本的話, 即使你是在 x64 OS, 也不會有太大問題. 32 位元的程式在 64 位元 OS 下執行, 還附帶了一些額外的好處. 記憶體管理就佔了不少便宜. 光是記憶體各種管理的動作就快很多 (以前看過相關文章, 不過找不到了 [:P], 下次寫 code 來測看看), 加上 32 位元的基本限制: 4GB memory size, 因為 OS 已經是 64 位元了, 4GB 可用的定址空間不用再切 2GB 給 OS 使用... 因此你的程式可用的定址空間也從 2GB 擴張到 4GB, 不無小補.
</p>
<p>
想到這些案例, 我就試了一下... 我自己寫的歸檔工具不能跑, 如果我把它切到 32 位元模式呢? 改了改 compile option, target platform 從原本的 &quot;Any CPU&quot; 改為 &quot;x86&quot;, 耶! 可以了耶... 程式能正確的抓到 Canon Codec, 並且正確的解碼跟抓到 metadata.
</p>
<p>
再試一下 Windows Live Gallery, Microsoft 還算有良心, 裝好後就有兩種 32/64 版本. 我開了 32 位元版, .CR2 的照片也都可以正確顯示.. 哇哈哈... 讚 [Y]
</p>
<p>
不過 Windows Live Gallery 有些地方要注意, 它似忽載入後會留著, 類似古早的 OLE server 一樣的技術, 跑起來後就會留在系統內, 待下次有人要執行時繼續使用. 因此如果沒有在 BOOT 後第一次就開正確的版本, 以後就有可能你開 32 位元版, 它還是跑 64 位元的給你看...
</p>
<p>
這個問題可以解決, 算是讓我願意換 Vista x64 最主要的原因, 不然我大概會傻傻的等到 Canon 好心的推出 64 位元版的 codec 才換吧 [H], 這次升級 Vista 應該不會再像上次一樣, 用一用就換回去了... 想換 x64 的人就不用再撐了, 上吧!!!
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2008-02-12 04:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-12 04:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%86%8d%e5%ba%a6%e6%8f%9b%e8%a3%9d-vista-vista-ultimate-x64]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>原來是 IPv6 搞的鬼...</title>
		<link>http://columns.chicken-house.net/2008/08/12/%e5%8e%9f%e4%be%86%e6%98%af-ipv6-%e6%90%9e%e7%9a%84%e9%ac%bc/</link>
		<pubDate>Tue, 12 Aug 2008 22:33:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/12/e58e9fe4be86e698af-IPv6-e6909ee79a84e9acbc.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
以前 (古早以前) 寫過一個簡單的 LIBRARY，就是去抓現在連上網頁的 CLIENT IP，然後簡單的套上 NET MASK，看看是不是在指定的網段內? 是的話就作些特別的處理 blah blah... 原本的 code 有點雜，我精簡之後變這樣，如果是 192.168.2.0 / 24 這範圍內的使用者連到這網頁，就會顯示 &quot;Is Intranet? YES&quot; ... 夠簡單吧? (怎麼連幾篇都這種不入流的 sample code ...)
</p>
<p>
這段 code 一直都運作的很好，沒碰過什麼大問題，不過就是把 IP address 切成四個 bytes, 然後利用位元運算併成 unsing integer, 方便跟後面的 netmask 作 bits and ...。不過某日興沖沖裝好 vista x64 + IIS7 之後發現，程式竟然不動了!? 
</p>
<p>
&nbsp;
</p>
<p>
先來看一下原始碼:
</p>
<p>
&nbsp;
</p>
<div>
<strong>ASP.NET 程式範例</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
&lt;%@ Page Language=&quot;C#&quot; Trace=&quot;true&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;script runat=&quot;server&quot;&gt;    protected void Page_Load(object sender, EventArgs e)    {        this.Trace.Warn(System.Net.IPAddress.Parse(this.Request[&quot;REMOTE_HOST&quot;]).AddressFamily.ToString());        this.IPLabel.Text = this.IsInSubNetwork(            &quot;192.168.2.0&quot;,            &quot;255.255.255.0&quot;,            this.Request.ServerVariables[&quot;REMOTE_HOST&quot;]) ? (&quot;YES&quot;) : (&quot;NO&quot;);    }    private bool IsInSubNetwork(string network, string mask, string address)    {        uint netval = _IP2INT(network);        uint maskval = _IP2INT(mask);        uint addval = _IP2INT(address);        return (netval &amp; maskval) == (addval &amp; maskval);    }        private uint _IP2INT(string address)    {        string[] segments = address.Split(&#39;.&#39;);        uint ipval = 0;        foreach (string segment in segments)        {            ipval = ipval * 256 + uint.Parse(segment);        }        return ipval;    } &lt;/script&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head runat=&quot;server&quot;&gt;    &lt;title&gt;Untitled Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;    &lt;div&gt;    Is Intranet? &lt;asp:Label ID=&quot;IPLabel&quot; runat=&quot;server&quot; /&gt;    &lt;/div&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="asp">&lt;%@ Page Language=&quot;C#&quot; Trace=&quot;true&quot; %&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="kwrd">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">runat</span><span class="kwrd">=&quot;server&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)
</pre>
<pre>
<span class="lnum">   6:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        <span class="kwrd">this</span>.Trace.Warn(System.Net.IPAddress.Parse(<span class="kwrd">this</span>.Request[<span class="str">&quot;REMOTE_HOST&quot;</span>]).AddressFamily.ToString());
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">this</span>.IPLabel.Text = <span class="kwrd">this</span>.IsInSubNetwork(
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            <span class="str">&quot;192.168.2.0&quot;</span>,
</pre>
<pre>
<span class="lnum">  10:  </span>            <span class="str">&quot;255.255.255.0&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            <span class="kwrd">this</span>.Request.ServerVariables[<span class="str">&quot;REMOTE_HOST&quot;</span>]) ? (<span class="str">&quot;YES&quot;</span>) : (<span class="str">&quot;NO&quot;</span>);
</pre>
<pre>
<span class="lnum">  12:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  14:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    <span class="kwrd">private</span> <span class="kwrd">bool</span> IsInSubNetwork(<span class="kwrd">string</span> network, <span class="kwrd">string</span> mask, <span class="kwrd">string</span> address)
</pre>
<pre>
<span class="lnum">  16:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        <span class="kwrd">uint</span> netval = _IP2INT(network);
</pre>
<pre>
<span class="lnum">  18:  </span>        <span class="kwrd">uint</span> maskval = _IP2INT(mask);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        <span class="kwrd">uint</span> addval = _IP2INT(address);
</pre>
<pre>
<span class="lnum">  20:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        <span class="kwrd">return</span> (netval &amp; maskval) == (addval &amp; maskval);
</pre>
<pre>
<span class="lnum">  22:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    
</pre>
<pre>
<span class="lnum">  24:  </span>    <span class="kwrd">private</span> <span class="kwrd">uint</span> _IP2INT(<span class="kwrd">string</span> address)
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    {
</pre>
<pre>
<span class="lnum">  26:  </span>        <span class="kwrd">string</span>[] segments = address.Split(<span class="str">&#39;.&#39;</span>);
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  28:  </span>        <span class="kwrd">uint</span> ipval = 0;
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        <span class="kwrd">foreach</span> (<span class="kwrd">string</span> segment <span class="kwrd">in</span> segments)
</pre>
<pre>
<span class="lnum">  30:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            ipval = ipval * 256 + <span class="kwrd">uint</span>.Parse(segment);
</pre>
<pre>
<span class="lnum">  32:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  34:  </span>        <span class="kwrd">return</span> ipval;
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>    }
</pre>
<pre>
<span class="lnum">  36:  </span> 
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  38:  </span><span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  40:  </span><span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">=&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  41:  </span><span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">=&quot;server&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">  42:  </span>    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span>Untitled Page<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  43:  </span><span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">  44:  </span><span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">=&quot;form1&quot;</span> <span class="attr">runat</span><span class="kwrd">=&quot;server&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">  46:  </span>    <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>    Is Intranet? <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">ID</span><span class="kwrd">=&quot;IPLabel&quot;</span> <span class="attr">runat</span><span class="kwrd">=&quot;server&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">  48:  </span>    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">  50:  </span><span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">  51:  </span><span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
後來追了半天才意外發現問題出在這... 打開 ASP.NET Trace, 看一下 REMOTE_ADDR 到底抓到啥子東西? 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_21.png" border="0" alt="image" width="514" height="233" /> 
</p>
<p>
&nbsp;
</p>
<p>
嘖嘖嘖，搞半天原來是 Vista 預設把 IPv6 給開了起來，IIS7 / DevWeb 都中獎，直接回報 IPv6 格式的 IP Address 回來... 怎麼解? 這種問題說穿了就不值錢，強迫用 IPv4 就好。我試過幾種可行的方式，有:
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<ol>
	<li>直接用 IPv4 的位址連線: 這簡單，以我來說，URL 從 <a href="http://localhost/default.aspx">http://localhost/default.aspx</a> 改成 <a href="http://192.168.100.40/default.aspx">http://192.168.100.40/default.aspx</a> 就好了。不過這樣對 DevWeb 就沒用了，DevWeb 只接受來自 localhost 的連線...<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_22.png" border="0" alt="image" width="546" height="222" /> <br />
	<br />
	<br />
	<br />
	</li>
	<li>改 IIS 設定，直接綁到 IPv4 的位址，不過這招試不出來，似呼沒啥用，localhost 不會連到 192.168.100.40，而我直接打這 IP 的話就會變成範例1...<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_23.png" border="0" alt="image" width="510" height="288" /><br />
	<br />
	</li>
	<li>改 c:\windows\system32\drivers\etc\hosts<br />
	無意間 PING 看看 localhost, 才發現連 localhost 都被對應到 IPv6 了... <br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_29.png" border="0" alt="image" width="495" height="262" /> <br />
	<br />
	打開 C:\windows\system32\drivers\etc\hosts 這檔案看一看，果然...<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_28.png" border="0" alt="image" width="627" height="353" /> <br />
	<br />
	<br />
	把 IPv6 那行拿掉後再試試 ping localhost ...<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_27.png" border="0" alt="image" width="470" height="188" />&nbsp;<br />
	<br />
	<br />
	耶! 這次 IP 就變成 IPv4 的了... 開 IE, 連 <a href="http://localhost/default.aspx">http://localhost/default.aspx</a> 看看，it works!<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_26.png" border="0" alt="image" width="467" height="215" /><br />
	<br />
	因為這招是直接把 localhost 對應到 127.0.0.1，因此對於鎖 localhost 的 WEBDEV 也可以用。<br />
	<br />
	</li>
	<li>大絕招: 直接關掉 IPv6 ...<br />
	真是個沒品的傢伙，打不過就來這套... <br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_25.png" border="0" alt="image" width="404" height="499" /><br />
	<br />
	<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/IPv6_13D1E/image_24.png" border="0" alt="image" width="500" height="223" /> <br />
	這樣也可以...</li>
</ol>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
碰到這種怪問題，一時之間還熊熊不知道是那裡掛掉，還真是麻煩... 特地記一下這篇，讓一樣吃過 IPv6 苦頭的人參考一下。至於怎樣作才對? 當然是用 &quot;正規&quot; 的方式來處理 IP Address...&nbsp;&nbsp; System.Net.IPAddress 類別包含一個靜態方法: IPAddress Parse(string ipaddress), 用它可以把字串格式的 IP 換成這個類別的 instance, 用它內建的 property: AddressFamily，看看值是 enum 型態的 InterNetwork 還是 InterNetworkV6 就知道了，不要像我當年年少不更事一樣，自己硬去拆字串... Orz
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2008-08-12 22:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-12 22:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8e%9f%e4%be%86%e6%98%af-ipv6-%e6%90%9e%e7%9a%84%e9%ac%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
	</item>
	<item>
		<title>x64 programming #2: ASP.NET + ODBC (讀取 CSV)</title>
		<link>http://columns.chicken-house.net/2008/07/26/x64-programming-2-asp-net-odbc-%e8%ae%80%e5%8f%96-csv/</link>
		<pubDate>Sat, 26 Jul 2008 00:17:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/26/x64-2-ASPNET-2b-ODBC-(e8ae80e58f96-CSV).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>今天的範例超簡單，簡單到很沒水準的地步... 難道本 columns 的水準降低了嘛? 咳咳... 不多說，今天的例子也不需要解釋，直接來看 sample code:</p> <p>&nbsp;</p> <div><b>Default.aspx.cs 程式碼</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>  <div style="display: none"><pre id="codeData" style="display: none">using System;
using System.Data;
using System.Web.UI.WebControls;
using System.Data.Odbc;

public partial class _Default : System.Web.UI.Page 
{
    protected void Page_Load(object sender, EventArgs e)
    {
        DataSet ds = new DataSet();
        OdbcConnection conn = new OdbcConnection("Driver={Microsoft Text Driver (*.txt; *.csv)};DBQ=" + Server.MapPath("~/App_Data"));
        OdbcDataAdapter adpt = new OdbcDataAdapter("select * from [database.txt]", conn);
        adpt.Fill(ds);

        this.DataGrid1.DataSource = ds.Tables[0];
        this.DataGrid1.DataBind();
    }
}
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">using</span> System;</pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> System.Data;</pre><pre class="alt"><span class="lnum">   3:  </span><span class="kwrd">using</span> System.Web.UI.WebControls;</pre><pre><span class="lnum">   4:  </span><span class="kwrd">using</span> System.Data.Odbc;</pre><pre class="alt"><span class="lnum">   5:  </span>&nbsp;</pre><pre><span class="lnum">   6:  </span><span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> _Default : System.Web.UI.Page </pre><pre class="alt"><span class="lnum">   7:  </span>{</pre><pre><span class="lnum">   8:  </span>    <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)</pre><pre class="alt"><span class="lnum">   9:  </span>    {</pre><pre><span class="lnum">  10:  </span>        DataSet ds = <span class="kwrd">new</span> DataSet();</pre><pre class="alt"><span class="lnum">  11:  </span>        OdbcConnection conn = <span class="kwrd">new</span> OdbcConnection(<span class="str">"Driver={Microsoft Text Driver (*.txt; *.csv)};DBQ="</span> + Server.MapPath(<span class="str">"~/App_Data"</span>));</pre><pre><span class="lnum">  12:  </span>        OdbcDataAdapter adpt = <span class="kwrd">new</span> OdbcDataAdapter(<span class="str">"select * from [database.txt]"</span>, conn);</pre><pre class="alt"><span class="lnum">  13:  </span>        adpt.Fill(ds);</pre><pre><span class="lnum">  14:  </span>&nbsp;</pre><pre class="alt"><span class="lnum">  15:  </span>        <span class="kwrd">this</span>.DataGrid1.DataSource = ds.Tables[0];</pre><pre><span class="lnum">  16:  </span>        <span class="kwrd">this</span>.DataGrid1.DataBind();</pre><pre class="alt"><span class="lnum">  17:  </span>    }</pre><pre><span class="lnum">  18:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>真的是沒什麼特別的 code, 連 exception 都沒處理... 難道 .aspx 有什麼特別的嘛? 來看看:</p>
<div><b>Default.aspx</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">&lt;%@ Page Language="C#" AutoEventWireup="true"  CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head runat="server"&gt;
    &lt;title&gt;Untitled Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
    &lt;asp:DataGrid ID="DataGrid1" runat="server" /&gt;
    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true"  CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="kwrd">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="kwrd">&gt;</span></pre><pre class="alt"><span class="lnum">   3:  </span><span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">   4:  </span><span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span></pre><pre class="alt"><span class="lnum">   5:  </span>    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span>Untitled Page<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">   6:  </span><span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span></pre><pre class="alt"><span class="lnum">   7:  </span><span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">   8:  </span>    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span></pre><pre class="alt"><span class="lnum">   9:  </span>    <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">  10:  </span>    <span class="kwrd">&lt;</span><span class="html">asp:DataGrid</span> <span class="attr">ID</span><span class="kwrd">="DataGrid1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="kwrd">/&gt;</span></pre><pre class="alt"><span class="lnum">  11:  </span>    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">  12:  </span>    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span></pre><pre class="alt"><span class="lnum">  13:  </span><span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">  14:  </span><span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span></pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>真的沒啥特別的，再來看看 CSV 檔的內容好了，看看有沒有什麼特別的...</p>
<div><b>~/App_Data/database.txt</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">name,email
chicken,chicken@chicken-house.net
peter,peter@chicken-house.net
annie,annie@chicken-house.net
nancy,nancy@chicken-house.net</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>name,email</pre><pre><span class="lnum">   2:  </span>chicken,chicken@chicken-house.net</pre><pre class="alt"><span class="lnum">   3:  </span>peter,peter@chicken-house.net</pre><pre><span class="lnum">   4:  </span>annie,annie@chicken-house.net</pre><pre class="alt"><span class="lnum">   5:  </span>nancy,nancy@chicken-house.net</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>咳，想扁我的忍一下... 這支程式大概只比 "Hello World" 好一點，會看本 BLOG 的大概用看的就知道結果是什麼了吧? 不就把所有的內容套到 DataGrid 裡顯示出來? 像這樣:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="350" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x642ASP.NETODBCCSV_42B/image_3.png" width="608" border="0"> </p>
<p>&nbsp;</p>
<p>真是沒營養的內容... 現在要開始進入主題了。執行環境是 Vista x64 + Visual Studio 2008，這個 web site 是透過 DevWeb 來執行的，不是透過 IIS... 反正都一樣嘛，測完可以 RUN (這種程式應該不會有什麼 BUG，頂多打錯字編譯錯誤..) 後就收工了，把它 DEPLOY 到 IIS 上面 ( windows 2003 x64, IIS6 ) 跑看看:</p>
<p>&nbsp;</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="386" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x642ASP.NETODBCCSV_42B/image_6.png" width="660" border="0"> </p>
<p>&nbsp;</p>
<p>掛了... 當然... 不然這篇是要討論什麼? 老實說這是我親身碰到的例子，從這錯誤訊息還真摸不著頭腦，完全搞不懂發生什麼事。該裝的都裝了，也都沒錯，為什麼會這樣?&nbsp; 二話不說，先確定系統的 ODBC 是正常的，最好的方式就是找現成的程式試看看，就可以初步判定是我的問題 OR 系統的問題。到控制台的 ODBC Data Source Administrator 看看，先建個同樣的 ODBC data source...</p>
<p>&nbsp;</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="375" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x642ASP.NETODBCCSV_42B/image_9.png" width="497" border="0"> </p>
<p>真是見鬼了，我的 windows 95 vpc 能用的 odbc driver 都比這裡多... 看來真的是沒有 ODBC driver，那我裝的 ADODB 是裝到那裡去了?</p>
<p>科學的實驗都講求先假設，再控制變因，然後證明假設是正確的... 不過現在一點線索都沒有，只能靠運氣了。會有這篇也真的是運氣好，聯想到是不是 x64 的問題? 用我謹有的知識: x64 / x86 兩種模式的程式不能同時出現在單一 process, 為了證明這件事，就特地在 SERVER 安裝了 excel, 用 excel 來開啟 odbc, 竟然可以?</p>
<p>解這問題，裝 office 是一年多前的事了，現在也沒畫面好抓，就跳過去... 想到 x64 一堆東西都有兩種版本，控制台是不是也有? 真該好好拿箱仙草蜜，拜一拜交大門口的土地公... Bingo! 執行了32位元版的 ODBC Data source Administrator (c:\Windows\SysWOW64\odbccp32.cpl), 結果出現了這畫面:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="433" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x642ASP.NETODBCCSV_42B/image_12.png" width="613" border="0"> </p>
<p>真是好狗運，如果沒矇對的話，不知道還要搞多久... 這時才恍然大悟，原來 x64 要求所有的 driver 都要是 64 位元版，加上單一 process 不能混用 x86 / x64 兩種模式的 code，就是指這個... driver 不只是 "硬體" 的 driver，連各種軟體的都算。廣義一點來說，ODBC driver, OleDB Provider 也都算 driver 的一種，各種 Plug-Ins，甚至是各種 COM 元件 (只要是 In-Process 的都算)，到 COM 的延伸... IE ActiveX Control，Media Player 用的 Codec ... 通通都算...</p>
<p>我終於體會到要轉移到 x64 有多麻煩了。在 DOS 年代或是 WIN 3.1 年代，每個軟體都很獨立，換到 WIN32 沒什麼問題。現在的軟體就不一樣，轉到 x64 都可以跑，不過要用到的各種共用元件就不一定了。拿掉 COM 的話，VB / ASP 大概就什麼都不剩了吧...</p>
<p>回題，來看看這問題怎麼解。雖然搞清楚原因，但是我的程式還是不能動。CSV 其實還可以用文字檔硬解，不過我實際工作上碰到的例子是要解讀上傳的 EXCEL 檔的內容... EXCEL 我可沒辦法硬搞... 不過現在方向清楚了，只要有辦法把程式從 64 位元模式改成 32 位元模式執行，就可以抓的到 32 位元模式下的 ODBC Data Source, 程式就正常了。不過該怎麼告訴 IIS6，我的程式需要的執行環境是 32 位元?</p>
<p>&nbsp;</p>
<p>上網查了一下 x64 版的 IIS 如何執行 x86 模式的程式? 找到這篇:</p>
<p><a href="http://support.microsoft.com/kb/894435/zh-tw">http://support.microsoft.com/kb/894435/zh-tw</a></p>
<p>IIS 6.0 同時支援 32 位元模式及 64 位元模式。但是，IIS 6.0 不支援同時在 64 位元版的 Windows 上執行兩種模式。ASP.NET 1.1 只能在 32 位元模式中執行。ASP.NET 2.0 可以在 32 位元模式或 64 位元模式中執行。因此，如果要同時執行 ASP.NET 1.1 和 ASP.NET 2.0，您必須在 32 位元模式中執行 IIS。<br>
<p>實際切換的動作在這篇也有寫... 
<p><strong>ASP.NET 2.0 的 32 位元版本<br></strong>如果要執行 32 位元版的 ASP.NET 2.0，請依照下列步驟執行： 1. 按一下 [開始]，再按一下 [執行]，輸入 cmd，然後按一下 [確定]。 <br>2. 輸入下列命令以啟用 32 位元模式：<br>cscript %SYSTEMDRIVE%\inetpub\adminscripts\adsutil.vbs SET W3SVC/AppPools/Enable32bitAppOnWin64 1 <br>3. 輸入下列命令以安裝 ASP.NET 2.0 (32 位元) 的版本，以及在 IIS 根目錄和下列位置底下安裝指令碼對應：<br>%SYSTEMROOT%\Microsoft.NET\Framework\v2.0.40607\aspnet_regiis.exe -i <br>4. 請確定在 Internet Information Services Manager 的 Web Service Extension 清單中，將 ASP.NET 2.0.40607 版 (32 位元) 的狀態設定為 Allowed。 
<p>&nbsp;</p>
<p>切換過後，再重新執行一次，一切就正常了:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="329" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x642ASP.NETODBCCSV_42B/image_15.png" width="514" border="0"> </p>
<p>&nbsp;</p>
<p>雖然在 x64 下執行 x86 的程式，也是有一堆額外的好處，不過看起來就是不大爽... IIS6 只能二選一，兩種模式只能挑一種。這個問題到了 IIS7 就獲得解決了。 IIS7 允許同時存在這兩種模式的 Application ..</p>
<p>其實在 x64 下的問題還很多，不過大都不外乎這模式，x64 / x86 的 dll 不能混用。現今軟體都用一堆元件，你得確保每一個用到的元件都有 x64 版，如果有一個沒有? 乖乖的切回 x86 來執行吧...。類似的小狀況其實還蠻多的，下回多列幾種我碰到的狀況，以免各位跟我一樣碰釘子還試個老半天... 敬請期帶第三集 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2008-07-26 00:17:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-26 00:17:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x64-programming-2-asp-net-odbc-%e8%ae%80%e5%8f%96-csv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[esserei@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-03 03:31:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-03 03:31:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[check this

http://env3.niceword.cn/index.php/article/search/34735.html

--
請輸入: &quot;叭樂雞萬歲&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-03 04:12:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-03 04:12:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我已經變話題人物了嘛? 咳咳..

--
請輸入: &quot;海娘娘永遠是對的&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[dean]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[t611209g@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-09 20:16:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-09 20:16:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好,
不知方便請教你一問題嗎,
我遇到與你相同的問題,照你的方式去做,仍沒成功.
我的主機沒有安裝odbc,想請教你是否需要安裝才會成功呢?
當我要去安裝win2008的odbc時(控制台-ODBC選項,只有SQL NATIVE CLIENT和SQL SERVER,其他驅動程式都沒有),卻找不到32位元的odbc.
我的環境是win2008 64bit, vs2008

謝謝你的指導
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>207</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-13 19:15:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-13 19:15:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我試了 windows 2008 standard R2 (x64), 一樣有 32 位元版本的 ODBC 控制台。
你的情況應該是開錯，開到 64 位元版本了。

2008 R2 的執行檔路逕在這裡:

C:\Windows\SysWOW64\odbcad32.exe]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[robert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[robert788@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-29 16:01:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-29 16:01:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[~/App_Data/database.txt
database.txt這個我放在以下路徑，為什麼一直說找不到
C:\inetpub\wwwroot\App_Data]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[robert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[robert788@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-29 16:32:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-29 16:32:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[~/App_Data/database.txt
想請問大大是不是把database.txt放在底下路徑，我一直試都說抓不到database.txt這個檔
C:\inetpub\wwwroot\App_Data]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>x64 programming #1: 環境變數及特殊目錄..</title>
		<link>http://columns.chicken-house.net/2008/07/25/x64-programming-1-%e7%92%b0%e5%a2%83%e8%ae%8a%e6%95%b8%e5%8f%8a%e7%89%b9%e6%ae%8a%e7%9b%ae%e9%8c%84/</link>
		<pubDate>Fri, 25 Jul 2008 02:56:47 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/25/x64-programming-1-e792b0e5a283e8ae8ae695b8e58f8ae789b9e6ae8ae79baee98c84.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>被 X64 折騰了這麼久，總要留些戰蹟下來... 先從每個人都會碰到的目錄路徑調整開始吧...</p> <p>有些目錄大家都耳熟能詳，像是 c:\Program Files\ 之類的，不過如果你的程式把這種路徑寫死了，你就要注意了... 因為到了 x64 位元下的 x86 相容模式，路徑就完全不一樣了... 先來看這一段程式執行結果是啥? 別急著看解答，猜一下..</p> <div><b>印出所有 SpecialFolder</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> <div style="display: none"><pre id="codeData" style="display: none">            Console.WriteLine("Spacial Folder(s):");
            foreach (Environment.SpecialFolder value in Enum.GetValues(typeof(Environment.SpecialFolder)))
            {
                Console.WriteLine("{0}: {1}", value, Environment.GetFolderPath(value));
            }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>Console.WriteLine(<span class="str">"Spacial Folder(s):"</span>);</pre><pre><span class="lnum">   2:  </span><span class="kwrd">foreach</span> (Environment.SpecialFolder <span class="kwrd">value</span> <span class="kwrd">in</span> Enum.GetValues(<span class="kwrd">typeof</span>(Environment.SpecialFolder)))</pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    Console.WriteLine(<span class="str">"{0}: {1}"</span>, <span class="kwrd">value</span>, Environment.GetFolderPath(<span class="kwrd">value</span>));</pre><pre class="alt"><span class="lnum">   5:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Visual Studio Platform 設定為 x86，在 Vista x64 下執行的結果是:</p>
<p>Spacial Folder(s):<br>Desktop: D:\HomeDisk\chicken\Desktop<br>Programs: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu\Programs<br>Personal: D:\HomeDisk\chicken\Documents<br>Personal: D:\HomeDisk\chicken\Documents<br>Favorites: D:\HomeDisk\chicken\Favorites<br>Startup: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br>Recent: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Recent<br>SendTo: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\SendTo<br>StartMenu: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu<br>MyMusic: D:\HomeDisk\chicken\Music<br>DesktopDirectory: D:\HomeDisk\chicken\Desktop<br>MyComputer: <br>Templates: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Templates<br>ApplicationData: C:\Users\chicken\AppData\Roaming<br>LocalApplicationData: C:\Users\chicken\AppData\Local<br>InternetCache: C:\Users\chicken\AppData\Local\Microsoft\Windows\Temporary Internet Files<br>Cookies: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Cookies<br>History: C:\Users\chicken\AppData\Local\Microsoft\Windows\History<br>CommonApplicationData: C:\ProgramData<br>System: C:\Windows\system32<br><font color="#ff0000"><strong>ProgramFiles: C:\Program Files (x86)<br></strong></font>MyPictures: D:\HomeDisk\chicken\Pictures<br><font color="#ff0000"><strong>CommonProgramFiles: C:\Program Files (x86)\Common Files</strong></font>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>改成 x64 / Any CPU，在 Vista x64 下執行的結果是:</p>
<p>Spacial Folder(s):<br>Desktop: D:\HomeDisk\chicken\Desktop<br>Programs: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu\Programs Personal: D:\HomeDisk\chicken\Documents<br>Personal: D:\HomeDisk\chicken\Documents<br>Favorites: D:\HomeDisk\chicken\Favorites<br>Startup: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br>Recent: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Recent<br>SendTo: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\SendTo<br>StartMenu: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Start Menu<br>MyMusic: D:\HomeDisk\chicken\Music<br>DesktopDirectory: D:\HomeDisk\chicken\Desktop<br>MyComputer:<br>Templates: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Templates<br>ApplicationData: C:\Users\chicken\AppData\Roaming<br>LocalApplicationData: C:\Users\chicken\AppData\Local<br>InternetCache: C:\Users\chicken\AppData\Local\Microsoft\Windows\Temporary Internet Files<br>Cookies: C:\Users\chicken\AppData\Roaming\Microsoft\Windows\Cookies<br>History: C:\Users\chicken\AppData\Local\Microsoft\Windows\History<br>CommonApplicationData: C:\ProgramData<br>System: C:\Windows\system32<br><strong><font color="#ff0000">ProgramFiles: C:\Program Files</font></strong><br>MyPictures: D:\HomeDisk\chicken\Pictures<br><strong><font color="#ff0000">CommonProgramFiles: C:\Program Files\Common Files</font></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>再來看一段 code, 把所有的環境變數印出來:</p>
<div><b>印出所有的環境變數..</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">            Console.WriteLine("Environment Variable(s):");
            IDictionary evs = Environment.GetEnvironmentVariables();
            foreach (string key in evs.Keys)
            {
                Console.WriteLine("{0}: {1}", key, evs[key]);
            }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>Console.WriteLine(<span class="str">"Environment Variable(s):"</span>);</pre><pre><span class="lnum">   2:  </span>IDictionary evs = Environment.GetEnvironmentVariables();</pre><pre class="alt"><span class="lnum">   3:  </span><span class="kwrd">foreach</span> (<span class="kwrd">string</span> key <span class="kwrd">in</span> evs.Keys)</pre><pre><span class="lnum">   4:  </span>{</pre><pre class="alt"><span class="lnum">   5:  </span>    Console.WriteLine(<span class="str">"{0}: {1}"</span>, key, evs[key]);</pre><pre><span class="lnum">   6:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>x86:</p>
<p>&nbsp;</p>
<p>Environment Variable(s):<br>Path: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files\Intel\DMIX<br>TEMP: C:\Users\chicken\AppData\Local\Temp<br>SESSIONNAME: Console<br>PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC<br>USERDOMAIN: CHICKEN-PC<br><strong><font color="#ff0000">PROCESSOR_ARCHITECTURE: x86<br>ProgramW6432: C:\Program Files<br></font></strong>TRACE_FORMAT_SEARCH_PATH: <a href="file://\\NTREL202.ntdev.corp.microsoft.com\34FB5F65-FFEB-4B61-BF0E-A6A76C450FAA\TraceFormat">\\NTREL202.ntdev.corp.microsoft.com\34FB5F65-FFEB-4B61-BF0E-A6A76C450FAA\TraceFormat</a><br>APPDATA: C:\Users\chicken\AppData\Roaming<br>windir: C:\Windows<br>LOCALAPPDATA: C:\Users\chicken\AppData\Local<br><strong><font color="#ff0000">CommonProgramW6432: C:\Program Files\Common Files<br></font></strong>TMP: C:\Users\chicken\AppData\Local\Temp<br>USERPROFILE: C:\Users\chicken<br><strong><font color="#ff0000">ProgramFiles: C:\Program Files (x86)<br>CommonProgramFiles(x86): C:\Program Files (x86)\Common Files<br></font></strong>FP_NO_HOST_CHECK: NO<br>HOMEPATH: \Users\chicken<br>COMPUTERNAME: CHICKEN-PC<br>ProgramData: C:\ProgramData<br><strong><font color="#ff0000">PROCESSOR_ARCHITEW6432: AMD64<br></font></strong>USERNAME: chicken<br>NUMBER_OF_PROCESSORS: 4<br>PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 23 Stepping 7, GenuineIntel<br>WecVersionForRosebud.1054: 2<br>SystemRoot: C:\Windows<br>ComSpec: C:\Windows\system32\cmd.exe<br>LOGONSERVER: \\CHICKEN-PC<br>DFSTRACINGON: FALSE<br><strong><font color="#ff0000">ProgramFiles(x86): C:\Program Files (x86)<br></font></strong>VisualStudioDir: D:\HomeDisk\chicken\Documents\Visual Studio 2008<br>SystemDrive: C:<br><strong><font color="#ff0000">CommonProgramFiles: C:\Program Files (x86)\Common Files<br></font></strong>PROCESSOR_LEVEL: 6<br>PROCESSOR_REVISION: 1707<br>PROMPT: $P$G<br>ALLUSERSPROFILE: C:\ProgramData<br>VS90COMNTOOLS: C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\<br>PUBLIC: C:\Users\Public<br>OS: Windows_NT<br>HOMEDRIVE: C:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>x64:</p>
<p>Environment Variable(s):<br>COMPUTERNAME: CHICKEN-PC<br>VisualStudioDir: D:\HomeDisk\chicken\Documents\Visual Studio 2008<br>HOMEPATH: \Users\chicken<br>LOCALAPPDATA: C:\Users\chicken\AppData\Local<br>USERNAME: chicken<br><strong><font color="#ff0000">PROCESSOR_ARCHITECTURE: AMD64<br></font></strong>Path: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files\Intel\DMIX<br><strong><font color="#ff0000">CommonProgramFiles(x86): C:\Program Files (x86)\Common Files<br>ProgramFiles(x86): C:\Program Files (x86)<br></font></strong>PROCESSOR_LEVEL: 6<br>LOGONSERVER: \\CHICKEN-PC<br>HOMEDRIVE: C:<br>USERPROFILE: C:\Users\chicken<br>SystemRoot: C:\Windows<br>TEMP: C:\Users\chicken\AppData\Local\Temp<br>WecVersionForRosebud.1054: 2<br>PUBLIC: C:\Users\Public<br>ALLUSERSPROFILE: C:\ProgramData<br>FP_NO_HOST_CHECK: NO<br>APPDATA: C:\Users\chicken\AppData\Roaming<br>DFSTRACINGON: FALSE<br>ProgramData: C:\ProgramData<br>PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC<br>OS: Windows_NT<br>CommonProgramFiles: C:\Program Files\Common Files<br>PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 23 Stepping 7, GenuineIntel<br>ComSpec: C:\Windows\system32\cmd.exe<br>TRACE_FORMAT_SEARCH_PATH: <a href="file://\\NTREL202.ntdev.corp.microsoft.com\34FB5F65-FFEB-4B61-BF0E-A6A76C450FAA\TraceFormat">\\NTREL202.ntdev.corp.microsoft.com\34FB5F65-FFEB-4B61-BF0E-A6A76C450FAA\TraceFormat</a><br>PROMPT: $P$G<br>SystemDrive: C:<br>PROCESSOR_REVISION: 1707<br>ProgramFiles: C:\Program Files<br>NUMBER_OF_PROCESSORS: 4<br>VS90COMNTOOLS: C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\ <br>TMP: C:\Users\chicken\AppData\Local\Temp<br>SESSIONNAME: Console<br>windir: C:\Windows<br>USERDOMAIN: CHICKEN-PC
<p>&nbsp;</p>
<p>有差異的地方我用紅色的字標出來了，看來程式還真的不能亂寫，那種寫好 RUN 了沒事就交差的人要注意了，哈哈.. 千萬不要雞婆自己湊路徑就是這樣... 其實同樣的狀況發生在好幾個地方，Win32 API 會重新導向， 32/64 用的是不同版本，Registry Key 也會重新導向，File System 也會重新導向...。</p>
<p>不過比較特別的是 c:\windows\system32 這目錄，文件上說會自動重新導向到 c:\windows\syswow64 下 (如果你是在 x64 環境下執行 x86 的程式)，不過上面的例子抓到的路徑依舊是 c:\windows\system32 ( x86 / x64 都一樣 )，甚至是我在 x86 版本寫個檔案到 c:\windows\system32 下，回到 x64 的檔案總管看，它還真的在 c:\windows\system32\ 下...</p>
<p>不過當程式需要載入原本在 c:\windows\system32 下的檔案，或是呼叫到原本 windows 內建在這目錄下的 .dll / .exe 的話，還真的會被重新導向到 c:\windows\syswow64 ... 有興趣的朋友可以自己去這個目錄下逛一逛，該有的檔案都有，不過通通是 32 位元的版本.. </p>
<p>所以裝 x64 有個缺點，C:\ 會變比較肥... 哈哈，因為什麼東西都擺兩份，Orz...</p>
<p>不過我用的方式都是土法鍊鋼，看起來像自己試出來的... 其實這樣不好，我是亂練的，大家不要學... 要寫 x64 程式的人，MSDN 這一個章節一定要看一下:</p>
<p>&nbsp;</p>
<p><strong>Programming Guide for 64-bit Windows</strong></p>
<p><a title="http://msdn.microsoft.com/en-us/library/bb427430(VS.85).aspx" href="http://msdn.microsoft.com/en-us/library/bb427430(VS.85).aspx">http://msdn.microsoft.com/en-us/library/bb427430(VS.85).aspx</a></p>
<p>&nbsp;</p>
<p>這個章結的內容不多，翻一翻就看完了，裡面才是正解啊，不要再相信一些沒有根據的說法了... (咳，我又沒禿頭..)，下次來講 IIS6 + x64 碰到的一堆靈異事件...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2008-07-25 02:56:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-25 02:56:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x64-programming-1-%e7%92%b0%e5%a2%83%e8%ae%8a%e6%95%b8%e5%8f%8a%e7%89%b9%e6%ae%8a%e7%9b%ae%e9%8c%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>x86? x64? 傻傻分不清楚...</title>
		<link>http://columns.chicken-house.net/2008/07/23/x86-x64-%e5%82%bb%e5%82%bb%e5%88%86%e4%b8%8d%e6%b8%85%e6%a5%9a/</link>
		<pubDate>Wed, 23 Jul 2008 00:52:49 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/23/x86-x64-e582bbe582bbe58886e4b88de6b885e6a59a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>雖然常在 x86 / x64 兩種模式下打轉，不過一不留神還真的會吃到虧... 最近平常下班跟工作都碰到 x64 的問題，因此這裡記一下心得，免的以後又吃到虧... 這篇又是無聊的碎碎唸 + 流水帳，沒耐心的人就直接跳過去吧 :D</p>  <p>&#160;</p>  <p>除非你的程式非得用 C/C++ 不可，否則想要平順的從 x86 跨到 x64 的環境，最簡單的方式還是用 .NET。不過別以為你用 .NET 然後編譯的 PLATFORM 選 ANY CPU 就可以高枕無憂，好戲現在才開始...。</p>  <p>&#160;</p>  <p>碎碎唸的內容太雜了，先列個摘要:</p>  <ol>   <li>16 位元到 32 位元 v.s. 32 位元到 64 位元</li>    <li>x64 + wow</li>    <li>同時使用 x86 only COM / x64 only COM</li> </ol>  <p>&#160;</p>  <p>過去從 16 位元模式轉到 32 位元模式的路我沒有經歷過，雖然我寫過 16 bits 的程式，不過大都是像俄羅斯方塊，或是貪吃蛇之流的小程式，寫爽的... 也沒怎麼在用，跟本沒有轉移的問題。DOS時代我一直撐著，沒怎麼在用 WIN 3.1，後來 IBM OS/2 出來我有認真的用了一下，直到 Win95 的年代才開始真正在用 Windows... </p>  <p>不過 Windows 95 用了沒多久，實在受不了它的穩定性 (之前被 OS/2 慣壞了)，就直接跳到 NT4 workstation，從此就一路一直用 NT 家族的作業系統 ( NT4、2000、XP... )，大部份時間都是窩在 32 位元的環境下作業。</p>  <p>&#160;</p>  <p>Microsoft 替 32 -&gt; 64 鋪的路，跟 16 -&gt; 32 不大一樣。16 -&gt; 32 靠的是 v86 mode 來提供 16 位元的相容模式，在 windows 下則是以 wowexec 把所有的 16 位元成式集中在這個 process 下執行。不過到了 32 -&gt; 64 的年代，提供相容環境的作法已經不一樣了，直接在 user mode 下提供相容的模式，唯一的限制是同一個 process 不能同時存在兩種模式的 code，要嘛 32 要嘛 64，一定要選邊站就是了。只要你不碰到 COM 這類 in-process 的程式，都不會有太大的問題。</p>  <p>另外系統的目錄也開始分兩份...。安裝過 64 位元版的 windows 就知道，Program Files目錄變成兩個 ( Program Files / Program Files (x86) )，而 System32 目錄也變兩個了 ( System32 / SysWow64 )，其它像是 Registry 等也都有兩份...。</p>  <p>&#160;</p>  <p>談談我碰過的幾個案例，工作上碰到的例子很多，其實自己寫的都是 script / assembly，都不大需要跟平台榜在一起。不過寫過 ASP / VB 的都知道，拿掉 COM 元件的話，大概就什麼都不剩了... 只要你需要的 COM 元件有一個沒有提供 64 位元版，很抱歉... 你就要乖乖回到 32 位元模式...。像 JET / ODBC driver 就沒有 64 位元版...。不過 .NET 倒是得天獨厚，因為有類似 Java VM 的 CLR 擋在 .NET 及 OS 之間，因此絕大部份的 .NET 2.0 程式碼都可以自在的跨 x86 / x64 兩種模式執行，除了... 除了我碰到的情況之外 -_-。</p>  <p>&#160;</p>  <p>討厭的是這些自己寫的 .NET / SCRIPT 程式，沒有特別指定的話當然都會用原生的 64 位元模式執行，直到出錯你找半天找不到問題，無意之間才想到是 32/64 的鳥問題...，害我抓最久的就是 .NET 包裝的 SMTP 元件，CDO 沒有提供 64 位元版，但是 .NET 編譯成 ANY CPU 模式卻又沒有任何問題，直到執行時才給你 run time error ...。另一個例子是我自己在用的 WPF Image Codec... 因為我有用到 CANON 提供的 RAW CODEC，但是 CANON 遲遲不肯推出 64 位元版... Orz，我只好將就著點在 Vista x64 下跑 32 位元的版本。第一步就是重新 compile 自己寫的 Media Filer，通通編譯成 x86 platform。</p>  <p>&#160;</p>  <p>程式看起來跑的好好的，不過問題現在才開始。家裡大人常愛用相機拍 AVI 下來，原本的程式是叫用 Media Encoder 把 AVI 重新編碼程我要的規格。32位元下呼叫 CSCRIPT.exe, 然後再叫用 WMEnc.vbs 出來轉檔... 才發現問題大條了，怎麼找不到元件? @_@</p>  <p>&#160;</p>  <p>我一直以為 Microsoft 的東西，64位元版都會一次安裝兩種版本... 結果原來要個別去抓 32 / 64 位元的 Media Encoder 9 回來裝才能用... 好，硬碟就花下去，裝兩種就裝兩種...。執行過後又發現怪怪的，透過 media encoder components 啟動 media encoder 轉檔，怎麼轉完就停在 100% 不會自動關掉? 實在是搞不定，試了 64 位元版的沒問題，只好想辦法改用 64 位元版的 media encoder ...。</p>  <p>&#160;</p>  <p>它ㄨ的，問題一個接著一個來... 弄到這裡才發現，32 位元模式下的程式，沒辦法叫 64 位元版的 COM 元件來幫我做事，Orz... 如果換 64 位元的話，又用不到 Canon Raw Codec ...。最後沒辦法，只好程式大搬家，拆成幾個獨立的 .exe，各自用適合的版本運作... 以功能來說，這樣已經達成我的目的了。正好並行效果不大好的 Canon Raw Codec，在這樣的模式下還能吃掉四核CPU的80%運算能力，算是偷笑了... 這篇雜七雜八的 x64 / x86 大亂鬥就到這裡為止，謝謝觀賞 :D。</p>  <p>&#160;</p>  <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="491" alt="image" src="/wp-content/be-files/WindowsLiveWriter/x86x64_146BF/image_9.png" width="660" border="0" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2008-07-23 00:52:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-23 00:52:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[x86-x64-%e5%82%bb%e5%82%bb%e5%88%86%e4%b8%8d%e6%b8%85%e6%a5%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
	</item>
	<item>
		<title>Canon Raw Codec 1.3 Released !</title>
		<link>http://columns.chicken-house.net/2008/07/10/canon-raw-codec-1-3-released/</link>
		<pubDate>Thu, 10 Jul 2008 15:07:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/10/Canon-Raw-Codec-13-Released-!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
不知為何突然想到要上網看看，有沒有新版的...，沒想到還真的有，嚇...
</p>
<p>
不過都是無關痛癢的 update (對我來說啦)，除了新機種的支援之外，更新說明裡沒有提到效能的增進，也沒提到 x64 的支援什麼時後才會有，嘖嘖...。
</p>
<p>
主要的修正，一方面是增加 EOS Kiss X2/ EOS DIGITAL REBEL XSi/ EOS 450D DIGITAL 2 的支援 (大概是像當年 1.2 出來之前，G9 的 .CR2 都解不出來一樣的狀況吧)，還有 &quot;正式&quot; 支援了 Vista SP1。舊的 1.2 我在 Vista SP1 也一直都用的好好的，不知道到底差在那?
</p>
<p>
就睹它可能 &quot;順便&quot; 修正了一些小 BUG 吧，既然有新版的就來試看看。下載網址在這裡:
</p>
<p>
<a href="http://www.microsoft.com/prophoto/downloads/tools.aspx">http://www.microsoft.com/prophoto/downloads/tools.aspx</a>
</p>
<p>
OS 選單選了 &quot;Windows Vista&quot; 後才會出現，Canon RAW Codec 1.3，請享用 :D
</p>
<p>
&nbsp;
</p>
<p>
--
</p>
<p>
[2008-07-12 補充]
</p>
<p>
1.3 版的 CODEC 不知道什麼地方跟 1.2 版不大相容 @_@，裝了我的歸檔程式就跑不動了。更新說明裡有提到一段，說是新版的 CODEC 跟 <a href="http://www.microsoft.com/prophoto/downloads/tools.aspx">Microsoft Pro Photo Tools </a>不相容，如果有使用這軟體的用戶請不要升級...
</p>
<p>
還沒仔細去追原因，就還原回 1.2 了。上去看了一下版本還真有點亂 @_@，1.2版就有兩個，一個檔名是 RC120UPD_7L.EXE (古早的版本)，這幾天又放了一份新的，檔名是 CRC120UPD_7L.EXE ...
</p>
<p>
然後新的 1.3 版檔名是 RC130UPD_7L.EXE ....
</p>
<p>
測試之後只有最古早的 RC120UPD_7L.EXE 我的歸檔程式可以用，另外兩份都不行... 加上跟 Microsoft Pro Photo Tools 不相容 (這是 MS 用 .NET 開發的小工具)，<strong>所以有在用 .NET 3.0 + WPF 的人就不要更新了，以免出包 @_@</strong>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2008-07-10 15:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-10 15:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-raw-codec-1-3-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-12 00:51:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-12 00:51:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嘖，補個相容性問題，害我搞半天 :@

1.3 版看來跟 .NET 3.0 + WPF 不大相容，有這種用途的人先別升級到 1.3 ..


--
問: 6 x 4 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>為什麼一堆推文的按鈕都不見了?</title>
		<link>http://columns.chicken-house.net/2008/07/07/%e7%82%ba%e4%bb%80%e9%ba%bc%e4%b8%80%e5%a0%86%e6%8e%a8%e6%96%87%e7%9a%84%e6%8c%89%e9%88%95%e9%83%bd%e4%b8%8d%e8%a6%8b%e4%ba%86/</link>
		<pubDate>Mon, 07 Jul 2008 01:48:44 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/07/e782bae4bb80e9babce4b880e5a086e68ea8e69687e79a84e68c89e98895e983bde4b88de8a68be4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="155" alt="image" src="/wp-content/be-files/WindowsLiveWriter/8dc7a0549a69_196F/image_12.png" width="660" border="0"></p> <p>前兩天突然發現，怎麼一堆文章原本有推文數字的，怎麼都不見了?</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="218" alt="image" src="/wp-content/be-files/WindowsLiveWriter/8dc7a0549a69_196F/image_14.png" width="660" border="0"> </p> <p>網站有問題怎麼可以不追查個水落石出? 連到推推王找一下當時的推文... 耶? 還在啊，旁邊還有推文記錄...。</p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="241" alt="image" src="/wp-content/be-files/WindowsLiveWriter/8dc7a0549a69_196F/image_13.png" width="660" border="0"> </p> <p>怪的是從推推王點回來看我的文章，Oops!</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>越看越不對，把網址印出來比對一下才發現，我這邊的網址已經不一樣了!!&nbsp; </p> <p><a title="http://columns.chicken-house.net/post/FlickrProxy-1---Overview.aspx" href="http://columns.chicken-house.net/post/FlickrProxy-1---Overview.aspx">http://columns.chicken-house.net/post/FlickrProxy-1---Overview.aspx</a> (推推王那邊的網址)</p> <p><a title="http://columns.chicken-house.net/post/FlickrProxy-1-Overview.aspx" href="http://columns.chicken-house.net/post/FlickrProxy-1-Overview.aspx">http://columns.chicken-house.net/post/FlickrProxy-1-Overview.aspx</a> (我這邊實際的網址)</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>真妖獸，馬上聯想到前幾天升級 BE1.4 可能會有影響，就搬出 VSS 來比對一下，果然 1.3 跟 1.4 在自動產生 SLUG (SLUG 就是指 POST 網址後面那一串) 的規責有調整過:</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="469" alt="image" src="/wp-content/be-files/WindowsLiveWriter/8dc7a0549a69_196F/image_3.png" width="660" border="0"> </p> <p>&nbsp;</p> <p>&nbsp;</p> <p>嗯，肉眼看的出的調整，包括逗號被移掉，連續多個 -- 也會被替換成 - ，這個案例就是原網址的 "---" 換成 "-" 後就連不到了 :@</p> <p>&nbsp;</p> <p>本來想寫個程式修一下，後來想想跟本沒幾篇，就直接到推推王改掉了事，哈哈... 結案!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2008-07-07 01:48:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-07 01:48:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%82%ba%e4%bb%80%e9%ba%bc%e4%b8%80%e5%a0%86%e6%8e%a8%e6%96%87%e7%9a%84%e6%8c%89%e9%88%95%e9%83%bd%e4%b8%8d%e8%a6%8b%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
	</item>
	<item>
		<title>[BlogEngine Extension] PostViewCount 1.0</title>
		<link>http://columns.chicken-house.net/2008/07/06/blogengine-extension-postviewcount-1-0/</link>
		<pubDate>Sun, 06 Jul 2008 04:13:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/06/BlogEngine-Extension-PostViewCount-10.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
這篇拖好久了，本來上禮拜要寫，結果正好碰到 <a href="http://www.codeplex.com/blogengine/Release/ProjectReleases.aspx?ReleaseId=9451" target="_blank">BlogEngine 1.4 RELEASE</a>，就一直拖到現在...。之前找到一個給 BlogEngine 用的 <a href="http://mosesofegypt.net/?tag=/blogengine.net+extensions" target="_blank">Counter Extension</a>，以功能來說還不錯用，不過用久了就開始不滿足了。正好翻到<a href="http://rtur.net/blog/post/2008/07/04/Writing-extensions-for-BlogEngine-14-(part-1).aspx" target="_blank">這篇教學文章</a>，算是官方文章了吧 (BlogEngine 作者之一寫的教學文)? 所以就動起自己寫的念頭。舊的其實沒什麼不好，不過缺了這幾項我想要的功能: 
</p>
<ol>
	<li>只有計 Total Count (謎: 不然你要 counter 記什麼?) </li>
	<li>資料檔的結構及 I/O 的設計有點 Orz... 
	<ol>
		<li>讀寫 XML 的 CODE 寫的很... Orz </li>
		<li>沒有處理同時讀寫的問題 (後面寫的資料可能會蓋掉前面的，我的點閱率不知道少了幾百次 :D) </li>
		<li>要有 CACHE 來加速處理速度</li>
	</ol>
	</li>
</ol>
<p>
&nbsp;
</p>
<p>
既然要重寫，當然要寫個合用的. 底下是我對於新的 COUNTER 期望: 
</p>
<ol>
	<li>要能記流水帳。<br />
	流水帳就是不只要記總數，我還要知道每次點閱的時間，來源 IP ... 等等<br />
	( <a href="http://blog.darkthread.net/" target="_blank">darkthread</a> 指示: 當你流量大的時後就不會去在意這個了... Orz, 真是一針見血... )<br />
	</li>
	<li>要處理多執行緒下讀寫資料檔的問題，這部份 Code 必需為 ThreadSafe。<br />
	</li>
	<li>妥善利用 CACHE，降低 (2) 的複雜度。<br />
	</li>
	<li>COUNTER COMPACT<br />
	配合 (1) 的需求，流水帳記錄太多的話也會造成問題，COUNTER要能適當的刪除舊的 HIT RECORD。</li>
</ol>
<p>
&nbsp;
</p>
<p>
決定好後就動工了! 既然問題都圍繞在 data storage 上，先來看看原來的檔案格式: 
</p>
<div>
<strong>原有的 ~/App_Data/PostViews.xml 片段:</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;&lt;posts&gt;    &lt;post id=&quot;b43ec49e-e9a2-4696-bcc7-2ba1667ecda9&quot;&gt;781&lt;/post&gt;    &lt;post id=&quot;f1411c11-11ed-4f35-b383-0c6c8b2b963a&quot;&gt;603&lt;/post&gt;    &lt;post id=&quot;e7b57492-652b-4247-bcd4-bc3ac2e56318&quot;&gt;589&lt;/post&gt;    &lt;post id=&quot;7e2c2c88-240c-40ea-8477-2c96880adc8e&quot;&gt;556&lt;/post&gt;    &lt;post id=&quot;0fda9c32-d294-4f09-85cd-41dab8e677cb&quot;&gt;678&lt;/post&gt;    ......&lt;/posts&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">=&quot;1.0&quot;</span> <span class="attr">encoding</span><span class="kwrd">=&quot;utf-8&quot;</span> <span class="attr">standalone</span><span class="kwrd">=&quot;yes&quot;</span>?<span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">&lt;</span><span class="html">posts</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">&lt;</span><span class="html">post</span> <span class="attr">id</span><span class="kwrd">=&quot;b43ec49e-e9a2-4696-bcc7-2ba1667ecda9&quot;</span><span class="kwrd">&gt;</span>781<span class="kwrd">&lt;/</span><span class="html">post</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">&lt;</span><span class="html">post</span> <span class="attr">id</span><span class="kwrd">=&quot;f1411c11-11ed-4f35-b383-0c6c8b2b963a&quot;</span><span class="kwrd">&gt;</span>603<span class="kwrd">&lt;/</span><span class="html">post</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">&lt;</span><span class="html">post</span> <span class="attr">id</span><span class="kwrd">=&quot;e7b57492-652b-4247-bcd4-bc3ac2e56318&quot;</span><span class="kwrd">&gt;</span>589<span class="kwrd">&lt;/</span><span class="html">post</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">&lt;</span><span class="html">post</span> <span class="attr">id</span><span class="kwrd">=&quot;7e2c2c88-240c-40ea-8477-2c96880adc8e&quot;</span><span class="kwrd">&gt;</span>556<span class="kwrd">&lt;/</span><span class="html">post</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">&lt;</span><span class="html">post</span> <span class="attr">id</span><span class="kwrd">=&quot;0fda9c32-d294-4f09-85cd-41dab8e677cb&quot;</span><span class="kwrd">&gt;</span>678<span class="kwrd">&lt;/</span><span class="html">post</span><span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   8:  </span>    ......
</pre>
<pre class="alt">
<span class="lnum">   9:  </span><span class="kwrd">&lt;/</span><span class="html">posts</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
很普通的格式，配合我的需求，新的檔案結構我打算改成這樣: 
</p>
<div>
<strong>新的 ~/App_Code/counter/{post-id}.xml 檔的片段內容:</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;counter base=&quot;8828&quot;&gt;  &lt;hit time=&quot;2008-06-29T12:42:51&quot; referer=&quot;&quot; remote-host=&quot;66.249.73.185&quot; user-agent=&quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; /&gt;  &lt;hit time=&quot;2008-06-29T13:04:15&quot; referer=&quot;http://www.google.com.tw/search?complete=1&amp;amp;hl=zh-TW&amp;amp;cr=countryTW&amp;amp;rlz=1B3GGGL_zh-TWTW237TW238&amp;amp;q=%E9%A6%99%E6%B8%AFg9&amp;amp;start=30&amp;amp;sa=N&quot; remote-host=&quot;124.10.1.162&quot; user-agent=&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-TW; rv:1.9) Gecko/2008052906 Firefox/3.0&quot; /&gt;  &lt;hit time=&quot;2008-06-29T13:04:20&quot; referer=&quot;&quot; remote-host=&quot;66.249.73.185&quot; user-agent=&quot;Mediapartners-Google&quot; /&gt;  ......&lt;/counter&gt;
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">=&quot;1.0&quot;</span> <span class="attr">encoding</span><span class="kwrd">=&quot;utf-8&quot;</span>?<span class="kwrd">&gt;</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">&lt;</span><span class="html">counter</span> <span class="attr">base</span><span class="kwrd">=&quot;8828&quot;</span><span class="kwrd">&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>  <span class="kwrd">&lt;</span><span class="html">hit</span> <span class="attr">time</span><span class="kwrd">=&quot;2008-06-29T12:42:51&quot;</span> <span class="attr">referer</span><span class="kwrd">=&quot;&quot;</span> <span class="attr">remote-host</span><span class="kwrd">=&quot;66.249.73.185&quot;</span> <span class="attr">user-agent</span><span class="kwrd">=&quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">   4:  </span>  <span class="kwrd">&lt;</span><span class="html">hit</span> <span class="attr">time</span><span class="kwrd">=&quot;2008-06-29T13:04:15&quot;</span> <span class="attr">referer</span><span class="kwrd">=&quot;http://www.google.com.tw/search?complete=1&amp;amp;hl=zh-TW&amp;amp;cr=countryTW&amp;amp;rlz=1B3GGGL_zh-TWTW237TW238&amp;amp;q=%E9%A6%99%E6%B8%AFg9&amp;amp;start=30&amp;amp;sa=N&quot;</span> <span class="attr">remote-host</span><span class="kwrd">=&quot;124.10.1.162&quot;</span> <span class="attr">user-agent</span><span class="kwrd">=&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-TW; rv:1.9) Gecko/2008052906 Firefox/3.0&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>  <span class="kwrd">&lt;</span><span class="html">hit</span> <span class="attr">time</span><span class="kwrd">=&quot;2008-06-29T13:04:20&quot;</span> <span class="attr">referer</span><span class="kwrd">=&quot;&quot;</span> <span class="attr">remote-host</span><span class="kwrd">=&quot;66.249.73.185&quot;</span> <span class="attr">user-agent</span><span class="kwrd">=&quot;Mediapartners-Google&quot;</span> <span class="kwrd">/&gt;</span>
</pre>
<pre>
<span class="lnum">   6:  </span>  ......
</pre>
<pre class="alt">
<span class="lnum">   7:  </span><span class="kwrd">&lt;/</span><span class="html">counter</span><span class="kwrd">&gt;</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
其中, /counter/@base 是給你作弊用的，這數字你填多少就是多少，然後再加上底下有幾筆 &lt;hit /&gt; 記錄，總數就出來了。很簡單的格式，而流水帳就是記在 &lt;hit /&gt; 這個 XML ELEMENT 的 ATTRIBUTES 上。目前記的有時間，IP，REFERRER 而以。等到網站人數暴增 (幻想嘛?)，COMPACT的動作就免不了了，預留的 /counter/@base 就派上用場了。COUNTER 在必要時就能刪掉多餘的 &lt;hit /&gt; 記錄，再把刪掉的筆數加到 /counter/@base 上，讓最後點擊總數不變，又能控制記錄檔的大小。 
</p>
<p>
&nbsp;
</p>
<p>
邏輯確定後就可以開始動工了，不過另外要解決技術問題，就是 ThreadSafe 的部份。這部份讓我煩惱了一下，因為在 File System 就提供了 FILE LOCK 的機制可以用，不過取得 LOCK 失敗是會引發 EXCEPTION，而不是像其它的 THREAD 控制機制會 WAIT。因此最後我決定 FILE LOCK 的機制做第二層保障 ，主要的 LOCK 機制還是自己來，用基本的 Monitor 來實作。要實做 LOCK 的前題，是要有明確的 LOCK &quot;對像&quot;。兩個 thread lock 同一個物件，後面 lock 的 thread 會被 block 暫停執行，直到前一個先 lock 同一個物件的 thread 釋放之後才會被喚醒，因此要先解決兩個同 ID 的 COUNTER 能拿到同一個物件，才能實作 LOCK 機制。這物件就好幾位合適的候選人，第一種方法是 COUNTER 本身，第二種方法則是替每個 counterID 產生一個無用的物件，就單純拿來 LOCK 用。 
</p>
<p>
&nbsp;
</p>
<p>
要用 (1) 成本太高，一來就必需實作 <a href="http://en.wikipedia.org/wiki/Flyweight_pattern" target="_blank">Flyweight</a> 這個 design pattern，這個設計模式並不難，只要實作 <a href="http://en.wikipedia.org/wiki/Factory_method_pattern" target="_blank">factory pattern</a>再搭配個 Dictionary&lt;string, Counter&gt; 物件就可以搞定，但是我最後沒有選擇這個作法。因為最糟的情況下有可能會讓整個系統可能會用到的 counter 通通被放到這個 dictionary ，沒有被釋放回收的機會，因為沒有明確的時間點可以把這物件從 dictionary 移掉，移不掉的話永遠就會留著一個 object reference 指向這 COUNTER 物件，reference 只要存在，它就永遠不會被 GC 收掉...。不過這還是有解，只要用 <a href="http://en.wikipedia.org/wiki/Weak_reference" target="_blank">WeakReference</a> 就可以解決了，不過我只是要作個簡單的 Counter，搬出這一堆東西會不會太過頭了? 
</p>
<p>
&nbsp;
</p>
<p>
因此我選擇了第二個方法。一樣用 <a href="http://en.wikipedia.org/wiki/Flyweight_pattern" target="_blank">flyweight pattern</a>，只不過我放的是拿來 lock 的物件。我是直接 new object() 就拿來用了，物件很小我就不用耽心建立太多個又不能回收的問題...，而 counter 就讓它回歸最簡單的用法，需要就 new 一個出來，用完就丟著等著被回收。 
</p>
<p>
&nbsp;
</p>
<p>
每次都是講的話比 CODE 還多，來看看程式碼: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>COUNTER 物件的 SYNC 機制</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        // 所有 COUNTER 用的 SYNC 物件 DICTIONARY        private static Dictionary&lt;string, object&gt; _counter_syncroot = new Dictionary&lt;string, object&gt;();        // 取得這個 COUNTER 用的 SYNC 物件        private object SyncRoot        {            get            {                return Counter._counter_syncroot[this._counterID];            }        }        private Counter(string counterID)        {            this._counterID = counterID;            //            //  建立 SYNC 物件 (如果沒有的話)            //            lock (Counter._counter_syncroot)            {                if (Counter._counter_syncroot.ContainsKey(this._counterID) == false)                {                    Counter._counter_syncroot.Add(this._counterID, new object());                }            }            //  略 ....        }        public void Hit()        {            lock (this.SyncRoot)            {                //                //  LOCK 後再開始更新檔案內容。 程式碼 略...                //            }        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// 所有 COUNTER 用的 SYNC 物件 DICTIONARY</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> Dictionary&lt;<span class="kwrd">string</span>, <span class="kwrd">object</span>&gt; _counter_syncroot = <span class="kwrd">new</span> Dictionary&lt;<span class="kwrd">string</span>, <span class="kwrd">object</span>&gt;();
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="rem">// 取得這個 COUNTER 用的 SYNC 物件</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">private</span> <span class="kwrd">object</span> SyncRoot
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>{
</pre>
<pre>
<span class="lnum">   6:  </span>    get
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">return</span> Counter._counter_syncroot[<span class="kwrd">this</span>._counterID];
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    }
</pre>
<pre>
<span class="lnum">  10:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  11:  </span><span class="kwrd">private</span> Counter(<span class="kwrd">string</span> counterID)
</pre>
<pre>
<span class="lnum">  12:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="kwrd">this</span>._counterID = counterID;
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    <span class="rem">//  建立 SYNC 物件 (如果沒有的話)</span>
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    <span class="kwrd">lock</span> (Counter._counter_syncroot)
</pre>
<pre>
<span class="lnum">  18:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        <span class="kwrd">if</span> (Counter._counter_syncroot.ContainsKey(<span class="kwrd">this</span>._counterID) == <span class="kwrd">false</span>)
</pre>
<pre>
<span class="lnum">  20:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>            Counter._counter_syncroot.Add(<span class="kwrd">this</span>._counterID, <span class="kwrd">new</span> <span class="kwrd">object</span>());
</pre>
<pre>
<span class="lnum">  22:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    }
</pre>
<pre>
<span class="lnum">  24:  </span>    <span class="rem">//  略 ....</span>
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>}
</pre>
<pre>
<span class="lnum">  26:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> Hit()
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>{
</pre>
<pre>
<span class="lnum">  28:  </span>    <span class="kwrd">lock</span> (<span class="kwrd">this</span>.SyncRoot)
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>    {
</pre>
<pre>
<span class="lnum">  30:  </span>        <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>        <span class="rem">//  LOCK 後再開始更新檔案內容。 程式碼 略...</span>
</pre>
<pre>
<span class="lnum">  32:  </span>        <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>    }
</pre>
<pre>
<span class="lnum">  34:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
這問題解決掉後，剩下的就是單純把我要的邏輯實作出來，這部份我相信讀者的程度都不用我多講了，有需要的看 CODE 就看的懂。請直接<a href="/wp-content/be-files/PostViewCounter.cs" target="_blank">下載最後面的程式碼</a>就好。 
</p>
<p>
&nbsp;
</p>
<p>
另外一個要提一下的是跟 BlogEngine 本身 Extension 相關的，這部份也花了點時間研究該怎麼寫。BlogEngine 的 Extension 寫法比較特別一點，一般這種外掛都是採 Provider 的方式實作 ( factory pattern 加上 abstract class )，先定義好這個 Provider 能作什麼事，然後每個寫 Extension 的人就自己繼承這類別來修改，再靠 Factory 動態的建立正確的 Extension 物件來使用。不過在這部份 BlogEngine 採用完全不同的作法來設計它的架構: Event Handler。 
</p>
<p>
&nbsp;
</p>
<p>
Provider 依賴的是事先定義好的 ProviderBase (abstract class) 類別。這個類別定義了多少東西給底下的人覆寫，就決定了寫外掛的人能處理多少事。好處是簡單，架構清楚。缺點是能讓你擴充的功能，在 DESIGN TIME 就決定了，要多一個能 &quot;擴充&quot; 的地方，就得改 ProviderBase 類別定義，這很有可能會讓現有的 Extension 不能跑...。換成 EVENT 的方式就沒有跟程式碼綁的那麼緊了。多了新的功能，多定義一些事件就夠了。BlogEngine 就是採這種方式來實作它的 Extension ..&nbsp; 
</p>
<p>
&nbsp;
</p>
<p>
另外比較特別的是，BlogEngine 替每個 Extension 規劃好存放設定的地方。 1.3 版是所有的 Extension 共用一個設定檔， 1.4 則是有獨立的設定檔可以用。不過這些改變倒是沒有影響到它提供的 API。對於 API 來說，設定檔提供每個 Extension 一個像是 DataTable 那樣的 data storage, 讓你自訂欄位名，型別，然後能讓你一筆一筆的加進去，可以有多筆資料，而 BlogEngine Runtime 會負責幫你管理好這些設定。 
</p>
<p>
&nbsp;
</p>
<p>
這部份帶入門就好，用法還是去查官方文件比較快。我簡單貼一下這部份 CODE 跟畫面上提供的設定頁面給大家看看: 
</p>
<div>
<strong>準備設定值的 SCHEMA 及載入目前的設定值</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    public PostViewCounter()	{        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(OnPostServing);        ExtensionSettings settings = new ExtensionSettings(&quot;PostViewCounter&quot;);        settings.AddParameter(            &quot;MaxHitRecordCount&quot;,             &quot;最多保留筆數:&quot;);        settings.AddParameter(            &quot;HitRecordTTL&quot;,             &quot;最長保留天數:&quot;);        settings.AddValues(new string[] { &quot;500&quot;, &quot;90&quot; });        //settings.ShowAdd = false;        //settings.ShowDelete = false;        //settings.ShowEdit = true;        settings.IsScalar = true;        settings.Help = &quot;設定 counter hit records 保留筆數及時間。只有在筆數限制內且沒有超過保留期限的記錄才會被留下來。&quot;;                ExtensionManager.ImportSettings(settings);        _settings = ExtensionManager.GetSettings(&quot;PostViewCounter&quot;);    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>  <span class="kwrd">public</span> PostViewCounter()
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>      Post.Serving += <span class="kwrd">new</span> EventHandler&lt;ServingEventArgs&gt;(OnPostServing);
</pre>
<pre>
<span class="lnum">   4:  </span>      ExtensionSettings settings = <span class="kwrd">new</span> ExtensionSettings(<span class="str">&quot;PostViewCounter&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>      settings.AddParameter(
</pre>
<pre>
<span class="lnum">   6:  </span>          <span class="str">&quot;MaxHitRecordCount&quot;</span>, 
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>          <span class="str">&quot;最多保留筆數:&quot;</span>);
</pre>
<pre>
<span class="lnum">   8:  </span>      settings.AddParameter(
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>          <span class="str">&quot;HitRecordTTL&quot;</span>, 
</pre>
<pre>
<span class="lnum">  10:  </span>          <span class="str">&quot;最長保留天數:&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>      settings.AddValues(<span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">&quot;500&quot;</span>, <span class="str">&quot;90&quot;</span> });
</pre>
<pre>
<span class="lnum">  12:  </span>      <span class="rem">//settings.ShowAdd = false;</span>
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>      <span class="rem">//settings.ShowDelete = false;</span>
</pre>
<pre>
<span class="lnum">  14:  </span>      <span class="rem">//settings.ShowEdit = true;</span>
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>      settings.IsScalar = <span class="kwrd">true</span>;
</pre>
<pre>
<span class="lnum">  16:  </span>      settings.Help = <span class="str">&quot;設定 counter hit records 保留筆數及時間。只有在筆數限制內且沒有超過保留期限的記錄才會被留下來。&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>      ExtensionManager.ImportSettings(settings);
</pre>
<pre>
<span class="lnum">  18:  </span>      _settings = ExtensionManager.GetSettings(<span class="str">&quot;PostViewCounter&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>  }
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
對應的設定頁面: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/BlogEngineExtensionCounter_1285/image_3.png" border="0" alt="image" width="660" height="231" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
最後講了半天，真正想自己動手寫的人應該不多吧 :D，只是想下載回去裝來用的人就不用聽我前面廢話一堆了，只要下載這檔案，放到 ~/App_Code/Extension 下，就安裝完成了... 咳咳，連安裝手冊都省了。檔案 COPY 好後就會在 Extension Manager 裡看到我寫的外掛，就可以開始用了。有任何意件歡迎留話給我 :D 
</p>
<p>
&nbsp;
</p>
<p>
檔案下載: <a href="/wp-content/be-files/PostViewCounter.cs" title="http://columns.chicken-house.net/wp-content/be-files/PostViewCounter.cs">http://columns.chicken-house.net/wp-content/be-files/PostViewCounter.cs</a> 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2008-07-06 04:13:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-06 04:13:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blogengine-extension-postviewcount-1-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="beext"><![CDATA[BlogEngine Extension]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>[BlogEngine.NET] Widgets</title>
		<link>http://columns.chicken-house.net/2008/07/02/blogengine-net-widgets/</link>
		<pubDate>Wed, 02 Jul 2008 03:08:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/07/02/BlogEngineNET-Widgets.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>原本只是想找找有沒有 BlogEngine.NET Extension 存放自訂設定值的說明，無意間找到這個令人 Orz 的東西，BlogEngine.NET 專用的 Widgets ...</p> <p>Widgets 這名字到處都有人用，指的不外乎是能留在桌面或是網頁的 "小工具"。拜物件技術所賜，這種東西越來越好作了。當年還在用 ET 的時代，一篇報告要插張圖，就有一堆技巧得拿出來用... 先下好控制碼把位子空出來，列印... 然後再印張圖，貼上去..</p> <p>中間年代有些工具可以直接插圖的就不管了，真正有革命性的改變，是 WIN3.1 時代的 OLE (Object Linkage and Embedded) ，其實這也不是 Microsoft 先發展出來的，較早是 APPLE 的 OpenDoc ... 這些物件的技術開始可以讓兩種獨立的 AP，在同一份文件或是畫面上共同處理一樣的資料...。</p> <p>幹嘛扯這些? 因為我碩士論文就是弄這些五四三的物件導向技術，哈哈...。沒什麼，只是看到 BlogEngine Widget 這麼好寫，沒幾行 CODE 就搞定，那當年我的研究論文跟本是寫好玩的.. @_@</p> <p>&nbsp;</p> <p><a title="http://rtur.net/blog/post/2008/03/24/BlogEngine-Widgets-Tutorial.aspx" href="http://rtur.net/blog/post/2008/03/24/BlogEngine-Widgets-Tutorial.aspx">http://rtur.net/blog/post/2008/03/24/BlogEngine-Widgets-Tutorial.aspx</a></p> <p>原本要找 Extension, 後來逛到這位強者的網站，它擺了一段很簡單的 CODE，就是之前研究過一陣子的 FlickrNet。它寫了一個簡單的 USER CONTROL，透過 FlickrNet 抓幾張圖回來，顯示在 User Control 的範圍內。</p> <p>另外他寫了另一個 User Control，用來編輯第一個 User Control 可能會用到的設定值，畫面上幾個 Text Box 也搞定了。</p> <p>然後，放到 BlogEngine.NET 的 ~/Widgets/ 目錄下就好了? 簡單到想打人...</p> <p>&nbsp;</p> <p>現在回頭來看看，這樣做出來的 widget 能幹嘛? 我現在用的版面，右側有一堆 "BOX"，有 Google 的廣告，有 "安德魯是誰?"，有最新回應...，沒錯，在 BlogEngine 1.4 之後，這些就變成真正的元件了。大概就像 Microsoft 的 Web Parts 一樣。網頁的主人可以很簡單的在畫面上拉一塊新的 "widget" 出來，直接用拖拉的方式放到喜歡的位子，按下 [EDIT]，畫面就會切到編輯用的 User Control，OK就存檔...</p> <p>要做到這堆事，你只要會寫 USER CONTROL，照 BE 的規舉，繼承指定的 CLASS，把檔案放到指定的目錄就好了... Orz</p> <p>&nbsp;</p> <p>有時後東西弄的太簡單也很令人洩氣，尤其是 BLOG 剛搬完家，差不多要完工時 @_@，才發現 BlogEngine 在 2008/06/30 推出 1.4 版，主要就是加上 widget 的功能... 哈哈，那個<a href="http://www.michadel.net/" target="_blank">小熊子</a>應該比我更想哭吧 (H)</p> <p>&nbsp;</p> <p>不過事情倒還很順利，之前有作好準備，花了一兩個小時試一下就動工了，動啥工? 看看底下的版本... 已經搬到 1.4 版了 :D，唯一美中不足的是，過去花太多工夫在這個樣板上面，所以只好連樣板一起搬過來... 而這個樣版並不支援 Widget 的功能。看來又有得忙了... </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2008-07-02 03:08:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-02 03:08:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blogengine-net-widgets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-02 06:16:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-02 06:16:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這麼好用哦 widget ，那一定要升級上來試試看，

不過我倒是先將 xuite + blogspot 的內容搬過來先

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[BlogEngine.NET] 改造工程 - 整合 FunP 推推王</title>
		<link>http://columns.chicken-house.net/2008/06/29/blogengine-net-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b-%e6%95%b4%e5%90%88-funp-%e6%8e%a8%e6%8e%a8%e7%8e%8b/</link>
		<pubDate>Sun, 29 Jun 2008 23:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/29/CustomizeBlogEngineNET-FunP.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/post/e68ea8!!!.aspx" target="_blank">古早以前</a>，曾替我的 BLOG 加上推推王的小貼紙，不過當時也僅止於把 CODE 加上去而以，成效不大好...。這次搬家搬到 BlogEngine 後，又開始一樣的循環了..，要不要加上這些共用書籤? 要加那一套? 目前台灣用的最多就是<a href="http://www.hemidemi.com/" target="_blank">黑米</a>跟<a href="http://www.funp.com/" target="_blank">推推王</a>了。 </p> <p>原本挑了黑米，只因為它有提供 [<a href="http://www.hemidemi.com/blogtools/hemi_card" target="_blank">黑米卡</a>]，正好取代掉 BlogEngine 右邊那塊 [關於作者] .. 不過試用的情況不怎麼理想，除了速度有點慢之外，同一頁放太多 (幾十個) 的速度也很慢，也許跟 BlogEngine 我選用的樣板有點不合，速度太慢時有時整個版面就毀了，下載到一半就掛掉... </p> <p>相對之下，看了看 FunP 提供的 SCRIPT，看起來 CODING STYLE 比較合我的胃口，速度也快一些，沒碰到會讓我版面掛掉的問題。另外使用上的流程 FunP 也簡單一點，本來想兩家的書籤都放的，到最後就決定支持一下交大的學弟，就全力跟 <a href="http://www.funp.com/" target="_blank">FunP 推推王</a>整合好了。 </p> <p>動手前先計劃了一下，毫無目的的把一堆 CODE 加上去，我最忌誨這樣弄了，看起來一點主題都沒有。常看到別人的 BLOG 滿滿一堆標籤，從國內的 FunP，黑米，MyShare，到國外的DELICIUS，還有一堆叫不出名字的，一字排開落落長... </p> <p>BlogEngine 原本也有內建一些，不過被我拿掉了。底下列出我調整的前後差異: </p> <ol> <li>捨棄內建的 Rating 機制，直接用推文就好。  <li>版面我希望類似原有 CS 的樣式，正好拿推文按鈕來取代原本的計數器  <li>就鎖定一個共用書簽就好，把原有左下方的其它都拿掉  <li>Tags 我也決定捨棄不用，以分類為主。因此左下的 Tags 就移掉了  <li>分類放右下很礙眼，移到右上  <li>不爽被盜文，加上一段智財權的聲明  <li>加上自己補的計數器... (說來話長，請見下一篇)  <li>推文時自動帶出文章的基本資訊，如標題，內文，標簽等等</li></ol> <p>&nbsp; </p> <p>原 CS 的樣式: </p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="191" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETFunP_11CED/image_10.png" width="660" border="0"> </p> <p>&nbsp; </p> <p>&nbsp; </p> <p>修改前: </p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="263" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETFunP_11CED/image_11.png" width="660" border="0"> </p> <p>修改後: </p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="233" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETFunP_11CED/image_12.png" width="660" border="0"> </p> <p>&nbsp; </p> <p>看了一下推推王的<a href="http://funp.com/tools/buttongen.php" target="_blank">工具</a>，不外乎都是插入一段 &lt;SCRIPT&gt; 標簽，然後用 document.write( ) 或是 eval 等等 client side script 的方式產生片 HTML Code, 缺點就是繞了一大圈，出了問題也常讓人搞不清楚問題在那裡。花了點時間追一下，追出最後插在網頁的 HTML CODE 長這樣: </p> <div><span class="copycode">[copy code]</span>  <div style="display: none"><pre style="display: none">    &lt;IFRAME	width=60 	height=55	marginWidth=0 	marginHeight=0 	frameBorder=0 	scrolling=no 	src="http://funp.com/tools/buttoniframe.php?url=xxxxxxxxxxxxxx&amp;s=1" mce_src="http://funp.com/tools/buttoniframe.php?url=xxxxxxxxxxxxxx&amp;s=1"&gt;    &lt;/IFRAME&gt;
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>  <span class="kwrd">&lt;</span><span class="html">IFRAME</span>
</pre><pre><span class="lnum">   2:  </span><span class="attr">width</span>=<span class="attr">60</span> 
</pre><pre class="alt"><span class="lnum">   3:  </span><span class="attr">height</span>=<span class="attr">55</span>
</pre><pre><span class="lnum">   4:  </span><span class="attr">marginWidth</span>=<span class="attr">0</span> 
</pre><pre class="alt"><span class="lnum">   5:  </span><span class="attr">marginHeight</span>=<span class="attr">0</span> 
</pre><pre><span class="lnum">   6:  </span><span class="attr">frameBorder</span>=<span class="attr">0</span> 
</pre><pre class="alt"><span class="lnum">   7:  </span><span class="attr">scrolling</span>=<span class="attr">no</span> 
</pre><pre><span class="lnum">   8:  </span><span class="attr">src</span><span class="kwrd">="http://funp.com/tools/buttoniframe.php?url=xxxxxxxxxxxxxx&amp;s=1"</span><span class="kwrd">&gt;</span>
</pre><pre class="alt"><span class="lnum">   9:  </span>  <span class="kwrd">&lt;/</span><span class="html">IFRAME</span><span class="kwrd">&gt;</span>
</pre></div></div><!-- end of code area --></div>
<p>&nbsp; </p>
<p>&nbsp; </p>
<p>&nbsp; </p>
<p>看起來就是直接產生一個帶著指定參數的 &lt;IFRAME ...&gt;，於是我在 BlogEngine Themes 版面就直接產生 &lt;IFRAME&gt; ...底下是 BlogEngine THEME 目錄下的 PostView.ascx 片段: </p>
<div><strong>在 PostView.ascx 顯示推文按鈕的片段</strong><span class="copycode">[copy code]</span> 
<div style="display: none"><pre style="display: none">    &lt;%        Regex _stripHTML = new Regex("&lt;[^&gt;]*&gt;", RegexOptions.Compiled);        string PostTextContent = _stripHTML.Replace(Post.Content, "");        int maxLength = 70;                    string EncodedAbsoluteLink = Page.Server.UrlEncode(Post.AbsoluteLink.ToString());        string EncodedPostTitle = Page.Server.UrlEncode(Post.Title);        string EncodedPostBody = Page.Server.UrlEncode((PostTextContent.Length &gt; maxLength) ? (PostTextContent.Substring(0, maxLength) + "...") : (PostTextContent));        string TagsQueryString = "";        foreach (BlogEngine.Core.Category cat in Post.Categories)        {            TagsQueryString += string.Format("&amp;tags[]=" + Page.Server.UrlEncode(cat.Title));        }    %&gt;        &lt;IFRAME	width=60 	height=55	marginWidth=0 	marginHeight=0 	frameBorder=0 	scrolling=no 	src="http://funp.com/tools/buttoniframe.php?url=&lt;%=EncodedAbsoluteLink %&gt;&amp;s=1"&gt;    &lt;/IFRAME&gt;
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>  <span class="asp">&lt;%</span>
</pre><pre><span class="lnum">   2:  </span>      Regex _stripHTML = <span class="kwrd">new</span> Regex(<span class="str">"&lt;[^&gt;]*&gt;"</span>, RegexOptions.Compiled);
</pre><pre class="alt"><span class="lnum">   3:  </span>      <span class="kwrd">string</span> PostTextContent = _stripHTML.Replace(Post.Content, <span class="str">""</span>);
</pre><pre><span class="lnum">   4:  </span>      <span class="kwrd">int</span> maxLength = 70;
</pre><pre class="alt"><span class="lnum">   5:  </span>      <span class="kwrd">string</span> EncodedAbsoluteLink = Page.Server.UrlEncode(Post.AbsoluteLink.ToString());
</pre><pre><span class="lnum">   6:  </span>      <span class="kwrd">string</span> EncodedPostTitle = Page.Server.UrlEncode(Post.Title);
</pre><pre class="alt"><span class="lnum">   7:  </span>      <span class="kwrd">string</span> EncodedPostBody = Page.Server.UrlEncode((PostTextContent.Length &gt; maxLength) ? (PostTextContent.Substring(0, maxLength) + <span class="str">"..."</span>) : (PostTextContent));
</pre><pre><span class="lnum">   8:  </span>      <span class="kwrd">string</span> TagsQueryString = <span class="str">""</span>;
</pre><pre class="alt"><span class="lnum">   9:  </span>      <span class="kwrd">foreach</span> (BlogEngine.Core.Category cat <span class="kwrd">in</span> Post.Categories)
</pre><pre><span class="lnum">  10:  </span>      {
</pre><pre class="alt"><span class="lnum">  11:  </span>          TagsQueryString += <span class="kwrd">string</span>.Format(<span class="str">"&amp;tags[]="</span> + Page.Server.UrlEncode(cat.Title));
</pre><pre><span class="lnum">  12:  </span>      }
</pre><pre class="alt"><span class="lnum">  13:  </span>  <span class="asp">%&gt;</span>
</pre><pre><span class="lnum">  14:  </span>  <span class="kwrd">&lt;</span><span class="html">IFRAME</span>
</pre><pre class="alt"><span class="lnum">  15:  </span><span class="attr">width</span>=<span class="attr">60</span> 
</pre><pre><span class="lnum">  16:  </span><span class="attr">height</span>=<span class="attr">55</span>
</pre><pre class="alt"><span class="lnum">  17:  </span><span class="attr">marginWidth</span>=<span class="attr">0</span> 
</pre><pre><span class="lnum">  18:  </span><span class="attr">marginHeight</span>=<span class="attr">0</span> 
</pre><pre class="alt"><span class="lnum">  19:  </span><span class="attr">frameBorder</span>=<span class="attr">0</span> 
</pre><pre><span class="lnum">  20:  </span><span class="attr">scrolling</span>=<span class="attr">no</span> 
</pre><pre class="alt"><span class="lnum">  21:  </span><span class="attr">src</span><span class="kwrd">="http://funp.com/tools/buttoniframe.php?url=&lt;%=EncodedAbsoluteLink %&gt;&amp;s=1"</span><span class="kwrd">&gt;</span>
</pre><pre><span class="lnum">  22:  </span>  <span class="kwrd">&lt;/</span><span class="html">IFRAME</span><span class="kwrd">&gt;</span>
</pre></div></div><!-- end of code area --></div>
<p>&nbsp; </p>
<p>這是推文的部份，如果要張貼的話就不一樣了，要放的是把文章的預設資訊都帶過去，免的到時要重新輸入一次... 這部份的 CODE 比較囉唆，不過產生出來的 CODE 比較單純，就是個 &lt;A&gt; LINK 而以，不過因為帶的資訊比較多，所以部份 CODE 是由上面的 CODE 事先產生好，這裡才拿來用的:</p>
<div><b>產生推文按鈕的部份</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">    &lt;a href="http://funp.com/push/submit/add.php?url=&lt;%=EncodedAbsoluteLink %&gt;&amp;s=&lt;%=EncodedPostTitle %&gt;&amp;t=&lt;%=EncodedPostBody %&gt;&lt;%=TagsQueryString %&gt;&amp;via=tools" title="貼到funP"&gt;
	&lt;img src="http://funp.com/tools/images/post_03.gif" border="0"/&gt;
    &lt;/a&gt;
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>  <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="http://funp.com/push/submit/add.php?url=&lt;%=EncodedAbsoluteLink %&gt;&amp;s=&lt;%=EncodedPostTitle %&gt;&amp;t=&lt;%=EncodedPostBody %&gt;&lt;%=TagsQueryString %&gt;&amp;via=tools"</span> <span class="attr">title</span><span class="kwrd">="貼到funP"</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">&lt;</span><span class="html">img</span> <span class="attr">src</span><span class="kwrd">="http://funp.com/tools/images/post_03.gif"</span> <span class="attr">border</span><span class="kwrd">="0"</span><span class="kwrd">/&gt;</span></pre><pre class="alt"><span class="lnum">   3:  </span>  <span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp; </p>
<p>果然效果好多了，也不會再碰到版面掛掉等等鳥問題，只不過載入 [封存] 頁面時，一次四五百個 &lt;IFRAME&gt; 同時在跑，IE也是跑的很吃力.... </p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="291" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETFunP_11CED/image_3.png" width="660" border="0"> </p>
<p>&nbsp; </p>
<p>&nbsp; </p>
<p>&nbsp; </p>
<p>同樣的技巧也拿來修改 ~/archive.aspx 這頁。這頁原本是把所有的文章按照分類一篇一篇列出來，捨棄原有的 RATING 機制不用，直接用推文的機制取代。因此這頁原本顯示 RATING 分數的地方就被我改成推推王的推薦次術了。我的文章有兩百多篇，出現過的地方都列一次，加一加總共會出現近五百個推文按鈕 @_@，自然也不可能用原本官方的作法產生按鈕，直接用上面挖出來的方法，修改 archive.aspx.cs: </p>
<div><strong>~/archive.aspx.cs 顯示推文按鈕的片段程式</strong><span class="copycode">[copy code]</span> 
<div style="display: none"><pre style="display: none">          if (BlogSettings.Instance.EnableRating)          {              HtmlTableCell rating = new HtmlTableCell();              rating.InnerHtml = string.Format(                @"&lt;IFRAME   marginWidth=0   marginHeight=0   src='http://funp.com/tools/buttoniframe.php?url={0}&amp;amp;s=12'   frameBorder=0   width=80   scrolling=no   height=15&gt;&lt;/IFRAME&gt;",                 (post.AbsoluteLink.ToString()));              rating.Attributes.Add("class", "rating");              row.Cells.Add(rating);          }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>          <span class="kwrd">if</span> (BlogSettings.Instance.EnableRating)
</pre><pre><span class="lnum">   2:  </span>          {
</pre><pre class="alt"><span class="lnum">   3:  </span>              HtmlTableCell rating = <span class="kwrd">new</span> HtmlTableCell();
</pre><pre><span class="lnum">   4:  </span>              rating.InnerHtml = <span class="kwrd">string</span>.Format(
</pre><pre class="alt"><span class="lnum">   5:  </span>                <span class="str">@"
<pre><span class="lnum">   6:  </span>&lt;IFRAME 
</pre>
<pre class="alt"><span class="lnum">   7:  </span>  marginWidth=0 
</pre>
<pre><span class="lnum">   8:  </span>  marginHeight=0 
</pre>
<pre class="alt"><span class="lnum">   9:  </span>  src='http://funp.com/tools/buttoniframe.php?url={0}&amp;amp;s=12' 
</pre>
<pre><span class="lnum">  10:  </span>  frameBorder=0 
</pre>
<pre class="alt"><span class="lnum">  11:  </span>  width=80 
</pre>
<pre><span class="lnum">  12:  </span>  scrolling=no 
</pre>
<pre class="alt"><span class="lnum">  13:  </span>  height=15&gt;
</pre>
<pre><span class="lnum">  14:  </span>&lt;/IFRAME&gt;", 
</pre>
</span>
</pre><pre class="alt"><span class="lnum">  15:  </span>                (post.AbsoluteLink.ToString()));
</pre><pre><span class="lnum">  16:  </span>              rating.Attributes.Add(<span class="str">"class"</span>, <span class="str">"rating"</span>);
</pre><pre class="alt"><span class="lnum">  17:  </span>              row.Cells.Add(rating);
</pre><pre><span class="lnum">  18:  </span>          }
</pre></div></div><!-- end of code area --></div>
<p>&nbsp; </p>
<p>嗯，看起來效果好多了，至少我自己看起來順眼多了 :D </p>
<p>下一篇預告一下，下一篇會推出我自己寫的 PostViewCounter Extension，主要就是拿來作每篇文章的點閱率。BlogEngine 沒內建，找來的現成的又不是很合用，索性就自己寫了一個，請期待續篇 :D </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date><![CDATA[2008-06-29 23:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-29 23:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blogengine-net-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b-%e6%95%b4%e5%90%88-funp-%e6%8e%a8%e6%8e%a8%e7%8e%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alex7342@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-01 02:29:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-01 02:29:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你出運了～

多一些人盜用你的文章，你的知名度就會大增，然後你就可以出書賺版費了～

--
請輸入: &quot;叭樂雞萬歲&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alex7342@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-01 02:37:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-01 02:37:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[什麼是ｇｒａｖａｔａｒ啊
為什麼是Ｇｒａｖａｔａｒ啊？

--
問: 8 x 6 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-01 13:41:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-01 13:41:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gravatar: Globally Recognized Avatar

又是一個不知道誰想出來的新單字..

--
問: 8 x 7 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>很抱歉，本站不歡迎來自 [百度] (Baidu.com) 的訪客 !!</title>
		<link>http://columns.chicken-house.net/2008/06/28/%e5%be%88%e6%8a%b1%e6%ad%89%ef%bc%8c%e6%9c%ac%e7%ab%99%e4%b8%8d%e6%ad%a1%e8%bf%8e%e4%be%86%e8%87%aa-%e7%99%be%e5%ba%a6-baidu-com-%e7%9a%84%e8%a8%aa%e5%ae%a2/</link>
		<pubDate>Sat, 28 Jun 2008 00:50:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/28/e5be88e68ab1e6ad89efbc8ce69cace7ab99e4b88de6ada1e8bf8ee4be86e887aa-e799bee5baa6-(Baiducom)-e79a84e8a8aae5aea2-!!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
沒什麼特別的，只是針對<a href="/post/e58f88e8a2abe79b9ce69687e4ba86-.aspx">這次的盜文事件</a>，我很不滿意百度 (Baidu.com) 的處理方式而以。
</p>
<p>
幾個月前曾<a href="/post/e58fafe683a12c-e7ab9fe784b6e581b7e8b2bce68891e79a84e69687e7aba0-.aspx">發生過</a> BLOGGER.COM 有人直接把我的文章一字不漏的貼在他的 BLOG 上，沒有標示文章出處，最後用我破破的英文跟 GOOGLE 反映之後，GOOGLE 立即作了處理，<a href="/post/e981b2e4be86e79a84e6ada3e7bea9.aspx">關閉那位使用者的網頁</a>。
</p>
<p>
這次碰到類似的情況，有耐心的人就聽我講完這無聊的故事吧。無意間我在對岸的入口網站 [百度知道] (類似奇摩知識+的網站)，發現有人拿我的文章，<a href="http://zhidao.baidu.com/question/35002663.html">一字不漏的貼上去</a>回答問題賺點數，一樣沒有標示文章出處，感到非常的不滿，馬上註冊了帳號，留下回應表示該文侵犯了我的權益，要求引用文章要註明出處，同時也跟<a href="http://tieba.baidu.com/f?kz=419005957">站方反應</a>了這個情況，要求站方作妥善的處理。
</p>
<p>
原本以為事情會像上次一樣，跟 GOOGLE 一樣的處理方式結束。沒料到...
</p>
<ol>
	<li>隔天，發現我的留言被刪了? 嗯... 再補一次。</li>
	<li>跟站方反應的結果? 竟然說這個不尊重智財權的使用者沒有違反規定???? 所以不做任何處理。</li>
	<li>另一方面，留言留了不斷的被刪除，到現在已經被刪了第五次了，第六次的留言不知道會留到什麼時後...。</li>
</ol>
<p>
很無聊的戲就這樣一直演下去... 就是不斷的抗議又被刪除，跟站方反應卻又不理睬...。看來小蝦米是對抗不了大鯨魚的，也只能這樣了。其實我除了文章被盜貼之外沒有什麼具體的損失，就是心理很不爽而以，而更離譜的是百度站方處理的態度...。
</p>
<p>
資訊隨手可得，不代表資訊是可以任意踐踏的。免費的資訊，不用付費不代表就不需要尊重，也許對岸還有很多使用者沒建立起這樣的觀念，但是百度站方的處理方式也令我跌破眼鏡，有這樣的站方難怪會縱容這樣的使用者... :@
</p>
<p>
身為渺小不起眼 BLOG 主人，我也只能用消極的抗議，來表示我的不滿。除了寫這篇文章以外，也順帶來個 ASP.NET HttpModule 教學...。針對這次事件，我特地在本站加上了這個 HttpModule，只要查出使用者是透過任何由百度提供的 LINK 而連到本站的話，都會顯示這頁抗議的畫面，如下:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/image_3.png" border="0" alt="image" width="660" height="218" /> 
</p>
<p>
顯示了 60 秒抗議畫面後，就會自動進如原本要連結的頁面。在透過正規的管道而得不到妥善的處置，我也只能用消極的抗意來表達我的不滿。請看到的人留個 MESSAGE 支持一下吧，或是有推推王帳號的人也幫忙推一下，一起對不重視智慧財產權的百度表答不滿 &amp; 抗議!
</p>
<p>
&nbsp;
</p>
<p>
抗議之餘，本站再怎樣也是討論進階 .NET 技術的網站，就拿這次的案例，看看這樣的 HttpModule 該怎麼處理! 未來如果你也不幸碰到這樣的事件 (最好不要碰到)，可以拿出來用一用! 要替網站加上這樣的功能很簡單，只要在 Web.config 把你寫的 HttpModule 掛上就好。一旦掛上，所有針對這個網站的 Http Request 都會經過你的 HttpModule 處理，任何一個 LINK 都跑不掉!
</p>
<p>
&nbsp;
</p>
<div>
<strong>ASP.NET HttpModule開發範例: 把所有來自百度的使用者，引導到抗議的畫面!</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
public class SiteBlockerHttpModule : IHttpModule{    public void Init(HttpApplication context)    {        context.AuthenticateRequest += new EventHandler(context_AuthenticateRequest);    }    void context_AuthenticateRequest(object sender, EventArgs e)    {        HttpApplication application = sender as HttpApplication;        string referer = application.Context.Request.ServerVariables[&quot;HTTP_REFERER&quot;];        if (string.IsNullOrEmpty(referer) == false)        {            Uri refererURL = new Uri(referer);            if (refererURL.Host.ToUpperInvariant().Contains(&quot;BAIDU.COM&quot;) == true)            {                application.Context.Server.Transfer(&quot;~/Blogs/ShowBlockedMessage.aspx&quot;);            }        }    }}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> SiteBlockerHttpModule : IHttpModule
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">public</span> <span class="kwrd">void</span> Init(HttpApplication context)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        context.AuthenticateRequest += <span class="kwrd">new</span> EventHandler(context_AuthenticateRequest);
</pre>
<pre>
<span class="lnum">   6:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   8:  </span>    <span class="kwrd">void</span> context_AuthenticateRequest(<span class="kwrd">object</span> sender, EventArgs e)
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    {
</pre>
<pre>
<span class="lnum">  10:  </span>        HttpApplication application = sender <span class="kwrd">as</span> HttpApplication;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        <span class="kwrd">string</span> referer = application.Context.Request.ServerVariables[<span class="str">&quot;HTTP_REFERER&quot;</span>];
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">if</span> (<span class="kwrd">string</span>.IsNullOrEmpty(referer) == <span class="kwrd">false</span>)
</pre>
<pre>
<span class="lnum">  14:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>            Uri refererURL = <span class="kwrd">new</span> Uri(referer);
</pre>
<pre>
<span class="lnum">  16:  </span>            <span class="kwrd">if</span> (refererURL.Host.ToUpperInvariant().Contains(<span class="str">&quot;BAIDU.COM&quot;</span>) == <span class="kwrd">true</span>)
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>            {
</pre>
<pre>
<span class="lnum">  18:  </span>                application.Context.Server.Transfer(<span class="str">&quot;~/Blogs/ShowBlockedMessage.aspx&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>            }
</pre>
<pre>
<span class="lnum">  20:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    }
</pre>
<pre>
<span class="lnum">  22:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
--
</p>
<p>
後記: 針對這次事件的記錄:
</p>
<ol>
	<li>2008&lrm;年&lrm;6&lrm;月&lrm;22&lrm;日, &rlm;&lrm;下午 11:59:16，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第一次張貼抗議的回應.jpg" target="_blank">第一次張貼抗議的回應</a>&nbsp; </li>
	<li>2008&lrm;年&lrm;6&lrm;月&lrm;23&lrm;日, &rlm;&lrm;上午 11:44:50，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第二次張貼抗議的回應.jpg" target="_blank">第二次張貼抗議的回應</a>&nbsp; </li>
	<li>2008&lrm;年&lrm;6&lrm;月&lrm;23&lrm;日, &rlm;&lrm;下午 04:53:44，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第三次張貼抗議的回應.jpg" target="_blank">第三次張貼抗議的回應</a>&nbsp;</li>
	<li>&lrm;2008&lrm;年&lrm;6&lrm;月&lrm;23&lrm;日, &rlm;&lrm;下午 11:32:05，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第四次張貼抗議的回應.jpg" target="_blank">第四次張貼抗議的回應</a>&nbsp;</li>
	<li>&lrm;2008&lrm;年&lrm;6&lrm;月&lrm;25&lrm;日, &rlm;&lrm;下午 08:08:14，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第五次張貼抗議的回應.jpg" target="_blank">第五次張貼抗議的回應</a>&nbsp;</li>
	<li>2008&lrm;年&lrm;6&lrm;月&lrm;26&lrm;日, &rlm;&lrm;下午 07:26:36，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/第六次張貼抗議的回應.jpg" target="_blank">第六次張貼抗議的回應</a>&nbsp;</li>
	<li>&lrm;2008&lrm;年&lrm;6&lrm;月&lrm;28&lrm;日, &rlm;&lrm;上午 12:58:54，<a href="/wp-content/be-files/WindowsLiveWriter/Baidu.com_BED/百度站方的回應.jpg" target="_blank">百度站方的回應</a><br />
	&nbsp;</li>
</ol>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2008-06-28 00:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-28 00:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%88%e6%8a%b1%e6%ad%89%ef%bc%8c%e6%9c%ac%e7%ab%99%e4%b8%8d%e6%ad%a1%e8%bf%8e%e4%be%86%e8%87%aa-%e7%99%be%e5%ba%a6-baidu-com-%e7%9a%84%e8%a8%aa%e5%ae%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-30 12:10:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-30 12:10:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[百度一向都很垃圾的。用百度的都是低端用户。到纳斯达克圈了钱就NBHH了。

--
問: 7 x 3 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-02 16:47:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-02 16:47:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用戶本來就有好有壞, 就算是 GOOGLE 也是一樣.
不過站方放著不管就很離譜了.

--
借問一下, NBHH 是啥意思? 猜不出來..

--
請輸入: &quot;年年行大運&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-04 02:18:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-04 02:18:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[呵呵，搞IT的人怎么忘了去google上搜这个关键词 “nbhh 什么意思”
虽然我也是搞软件的，但是对于这些搜索网站或者什么门户网站的盈利模式真的还不懂。靠个卖个关键词，排个序就赚钱，而且还很贵，那以后问路都要要钱了。这些网站还往往被风险投资眷顾，真是搞不懂。 “哥们，去前门怎么走啊”“告诉你免费的路线要走三个小时，走一个小时的路线要10块，走2分钟能到的路线要100块，你看着办吧。。。”
。
--
請輸入: &quot;叭樂雞萬歲&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sea@ms16.url.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-06 03:23:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-06 03:23:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[以後寫文章前可在最前頭標明&quot;擅自轉載者是小孬孬喔!&quot;...不然也可以寫&quot;陳水扁萬歲或支持台灣獨立&quot;之類的...:P


--
問: 3 + 1 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-06 04:20:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-06 04:20:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，我開始想把底下的國旗換成綠色的那一面... :P

--
問: 8 - 7 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[ask0302]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[77058333@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-22 17:40:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-22 17:40:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[NBHH = 牛逼哄哄 
习惯就好了 百度的管理人员是惯出来的 对博主的遭遇表示同情 希望有朝一日 可以解决

另外 不觉得百度用户都是低端的这句话是正确的
单就简体中文的内容搜索来说 百度是要好于google的 境外内容就是google的好些
--
問: 5 + 1 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>221</wp:comment_id>
			<wp:comment_author><![CDATA[cleo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cleocn@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.cleocn.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-06 14:10:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-06 14:10:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[呵呵，
有些人（博主）也太不自觉，注明出处也不用付钱啊？
我也经常看到这样的事，
我经常看到网上有些文章，觉得很眼熟，仔细一看，原来就是我自己的文章“原版拷贝”过来了，
更气愤的修改（也可能是唯一修改）就是有些文章中会有用到我网站的URL作为例子，他就改成了自己的URL。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[Stone]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[teng@mweb.co.za]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-20 06:38:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-20 06:38:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[呵, 我是从百度找到你的网站的, 虽然被晾了几十秒, 但还是支持你的做法. :D
非常感谢你的文章, 学到不少东西.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Bot Checker 回來了!</title>
		<link>http://columns.chicken-house.net/2008/06/25/bot-checker-%e5%9b%9e%e4%be%86%e4%ba%86/</link>
		<pubDate>Wed, 25 Jun 2008 02:48:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/25/BotChecker.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哈哈，終於加回來了 :D
</p>
<p>
&nbsp;
</p>
<p>
為什麼原本在 CS 上很簡單就加上去的 Bot Checker, 在 BE 上弄到現在才好? 原因只有一個，就是 BE 在張貼回應時用了不少 AJAX 的機制，變的要插一段 CODE 進去要追半天 @_@...
</p>
<p>
很諷刺的是，AJAX 其實是 Community Server 用的比較兇，到處都要來一下... 反而 BlogEngine.NET 就中規中舉多了，很多地方就都乖乖的用 PostBack.. 唯讀回應的地方很突兀，感覺好像是特別要現一下回應的那個 TEXT EDITOR 還有 BBCODE 預覽的樣子... 那邊的 CODE 弄的實在是有點亂...
</p>
<p>
也是之前幾次都沒認真追啦... 追到一半覺的煩就去逛網站了，哈哈... 今天狠下心把它解決掉了。只不過卡著 AJAX，又不想跟它奮鬥，所以有些地方就偷懶混過去了。什麼意思? 意思就是攤開 HTML 原始碼，這個 Bot Checker 也是防不了 Bot 啦，不過我就賭我的站還有我的 Bot Checker 沒大到有人願意寫 Bot 來攻擊我.. 哈哈.. 來看看效果:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/Bot.BotChecker_2780/image_3.png" border="0" alt="image" width="554" height="302" /> 
</p>
<p>
&nbsp;
</p>
<p>
當然，張貼出去的回應也會帶著 Bot Checker 的問題。只不過礙於 AJAX，一堆東西被迫要移到 CLIENT SIDE 來處理，這邊就偷懶，題目產生完就先填到 [評論] 欄了，各位在填回應時，不爽附上 &quot;芭樂雞萬歲&quot; 的話，還是可以把它刪掉...
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/Bot.BotChecker_2780/image_6.png" border="0" alt="image" width="446" height="208" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
--<br />
題外話，在追 BE 的程式碼的過程中，發現 BE 也有 CAPTCHA ? 不過還真的找不到怎麼把它打開... 有興趣用 BlogEngine.NET 又想用正統的 CAPTCHA 驗證的人可以試看看
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2008-06-25 02:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-25 02:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bot-checker-%e5%9b%9e%e4%be%86%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-27 00:18:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-27 00:18:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah~ bot check 又回來囉....
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>利用 WPF 讀取 CANON (.CR2) 的 EXIF 及縮圖 (C# 範例程式說明)</title>
		<link>http://columns.chicken-house.net/2008/06/23/%e5%88%a9%e7%94%a8-wpf-%e8%ae%80%e5%8f%96-canon-cr2-%e7%9a%84-exif-%e5%8f%8a%e7%b8%ae%e5%9c%96-c-%e7%af%84%e4%be%8b%e7%a8%8b%e5%bc%8f%e8%aa%aa%e6%98%8e/</link>
		<pubDate>Mon, 23 Jun 2008 03:50:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/23/e588a9e794a8-WPF-e8ae80e58f96-EXIF-e58f8ae7b8aee59c96.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
因為有人<a href="/post/Canon-Raw-Codec-for-Vista--XP-x64-.aspx">留話</a>在詢問怎麼利用 WPF 處理這些動作，而這些又都是 Microsoft 文件及範例沒有寫的很清楚的部份... 有些範例有提到，但是 Microsoft 內建的 CODEC 正常，3RD PARTY 的 CODEC (像我碰到的 Canon Raw Codec) 就搞半天也搞不出來...。因為之前寫 <a href="/post/Canon-Digital-Camera-e79bb8e6a99fe78da8e4baab---e8a898e686b6e58da1e6adb8e6aa94e5b7a5e585b7.aspx">MediaFiler</a> 正好都碰過這些釘子，就順手寫起來以免以後又忘掉.. :P
</p>
<p>
&nbsp;
</p>
<p>
<strong>1. 讀取 Metadata</strong>
</p>
<p>
講 METADATA 也許會有些人一頭霧水，講 EXIF 搞不好還比較多人知道... EXIF 的規格有點混亂，就像 RSS 一樣，有好幾個派係，Microsoft 乾脆在 WPF 裡跳出來直接稱它做 METADATA，也搭配了 METADATA QUERY LANGUAGE 來避開像 EXIF 一堆必需事先定義好 PROPERTY NAME 的麻煩事...
</p>
<p>
所以所有的動作都集中在兩件事上面，一個是怎麼操作 METADATA ? 另一個是我要的資料到底藏在那? (你得知道什麼樣的 QUERY 才抓的到你要的資料?)
</p>
<p>
先看簡單的，貼段 SAMPLE CODE 就搞定了..
</p>
<div>
<strong>SAMPLE 1. 如何讀取 METADATA ?</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
                string srcFile = @&quot;SampleRawFile.CR2&quot;;                //                //  sample 1. read metadata                //                FileStream fs = File.OpenRead(srcFile);                BitmapMetadata metadata = BitmapDecoder.Create(                    fs,                    BitmapCreateOptions.None,                    BitmapCacheOption.None).Frames[0].Metadata as BitmapMetadata;                foreach (string query in queries)                {                    object result = metadata.GetQuery(query);                    Console.WriteLine(&quot;query[{0}]: {1}&quot;, query, result);                }                fs.Close();
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">string</span> srcFile = <span class="str">@&quot;SampleRawFile.CR2&quot;</span>;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="rem">//  sample 1. read metadata</span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>FileStream fs = File.OpenRead(srcFile);
</pre>
<pre>
<span class="lnum">   6:  </span>BitmapMetadata metadata = BitmapDecoder.Create(
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    fs,
</pre>
<pre>
<span class="lnum">   8:  </span>    BitmapCreateOptions.None,
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    BitmapCacheOption.None).Frames[0].Metadata <span class="kwrd">as</span> BitmapMetadata;
</pre>
<pre>
<span class="lnum">  10:  </span><span class="kwrd">foreach</span> (<span class="kwrd">string</span> query <span class="kwrd">in</span> queries)
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>{
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="kwrd">object</span> result = metadata.GetQuery(query);
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    Console.WriteLine(<span class="str">&quot;query[{0}]: {1}&quot;</span>, query, result);
</pre>
<pre>
<span class="lnum">  14:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>fs.Close();
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
扣掉 COMMENTS 只有12行... 哈哈，看起來好像也沒什麼好講的，關鍵就只有一個，STREAM別太早關掉...。以前我就吃過虧，試了好久才知道原來是我太雞婆，在第10行之前就把 fs 給關了，後面通通讀不出來...
</p>
<p>
不過關鍵的 queries (型別是 string[] )，內容到底是啥? 老實說我也不是很清楚 :P 先貼一下建立這字串陣列的 CODE:
</p>
<div>
<strong>建立 CR2 支援的 METADATA QUERY</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        private static string[] queries = new string[] {            &quot;/ifd/{ushort=256}&quot;,            &quot;/ifd/{ushort=257}&quot;,            &quot;/ifd/{ushort=258}&quot;,            &quot;/ifd/{ushort=259}&quot;,            &quot;/ifd/{ushort=262}&quot;,            &quot;/ifd/{ushort=270}&quot;,            &quot;/ifd/{ushort=271}&quot;,            &quot;/ifd/{ushort=272}&quot;,            &quot;/ifd/{ushort=273}&quot;,            &quot;/ifd/{ushort=274}&quot;,            &quot;/ifd/{ushort=277}&quot;,            &quot;/ifd/{ushort=278}&quot;,            &quot;/ifd/{ushort=279}&quot;,            &quot;/ifd/{ushort=282}&quot;,            &quot;/ifd/{ushort=283}&quot;,            &quot;/ifd/{ushort=284}&quot;,            &quot;/ifd/{ushort=296}&quot;,            &quot;/ifd/{ushort=306}&quot;,            &quot;/ifd/{ushort=315}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=33434}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=33437}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=34855}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=36864}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=36868}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37377}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37378}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37380}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37386}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37500}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=37510}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=40960}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=40961}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41486}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41487}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41488}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41728}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41985}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41986}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41987}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41988}&quot;,            &quot;/ifd/{ushort=34665}/{ushort=41990}&quot;,            &quot;/ifd/{ushort=34665}/OffsetSchema:offset&quot;        };
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span>[] queries = <span class="kwrd">new</span> <span class="kwrd">string</span>[] {
</pre>
<pre>
<span class="lnum">   2:  </span>    <span class="str">&quot;/ifd/{ushort=256}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="str">&quot;/ifd/{ushort=257}&quot;</span>,
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="str">&quot;/ifd/{ushort=258}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="str">&quot;/ifd/{ushort=259}&quot;</span>,
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="str">&quot;/ifd/{ushort=262}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="str">&quot;/ifd/{ushort=270}&quot;</span>,
</pre>
<pre>
<span class="lnum">   8:  </span>    <span class="str">&quot;/ifd/{ushort=271}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    <span class="str">&quot;/ifd/{ushort=272}&quot;</span>,
</pre>
<pre>
<span class="lnum">  10:  </span>    <span class="str">&quot;/ifd/{ushort=273}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    <span class="str">&quot;/ifd/{ushort=274}&quot;</span>,
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="str">&quot;/ifd/{ushort=277}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="str">&quot;/ifd/{ushort=278}&quot;</span>,
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="str">&quot;/ifd/{ushort=279}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    <span class="str">&quot;/ifd/{ushort=282}&quot;</span>,
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="str">&quot;/ifd/{ushort=283}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    <span class="str">&quot;/ifd/{ushort=284}&quot;</span>,
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="str">&quot;/ifd/{ushort=296}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    <span class="str">&quot;/ifd/{ushort=306}&quot;</span>,
</pre>
<pre>
<span class="lnum">  20:  </span>    <span class="str">&quot;/ifd/{ushort=315}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=33434}&quot;</span>,
</pre>
<pre>
<span class="lnum">  22:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=33437}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=34855}&quot;</span>,
</pre>
<pre>
<span class="lnum">  24:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=36864}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=36868}&quot;</span>,
</pre>
<pre>
<span class="lnum">  26:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37377}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37378}&quot;</span>,
</pre>
<pre>
<span class="lnum">  28:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37380}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37386}&quot;</span>,
</pre>
<pre>
<span class="lnum">  30:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37500}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=37510}&quot;</span>,
</pre>
<pre>
<span class="lnum">  32:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=40960}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=40961}&quot;</span>,
</pre>
<pre>
<span class="lnum">  34:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41486}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41487}&quot;</span>,
</pre>
<pre>
<span class="lnum">  36:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41488}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41728}&quot;</span>,
</pre>
<pre>
<span class="lnum">  38:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41985}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41986}&quot;</span>,
</pre>
<pre>
<span class="lnum">  40:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41987}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41988}&quot;</span>,
</pre>
<pre>
<span class="lnum">  42:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/{ushort=41990}&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>    <span class="str">&quot;/ifd/{ushort=34665}/OffsetSchema:offset&quot;</span>
</pre>
<pre>
<span class="lnum">  44:  </span>};
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
因為我之前處理的目標，是在做轉檔的動作，同時要忠實的把 METADATA 也複製過去，因此得到這列表對我來說很重要，但是搞懂每個項目的意義是啥我就不管了，先列出來再說... 需要的人請自行判斷....
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
2. 建立縮圖
</p>
<p>
WPF 架構滿分，但是效能多少會打折扣。JPEG實在看不大出來，拿CANON的CODEC來看就很清楚了。如果是以 .CR2 -&gt; .JPG，不作大小的縮放，CANON 自家的 DPP 大概要廿幾秒，CANON自家寫給 WPF 用的 CODEC 搭配 .NET 的 WPF 程式，則要 60 秒左右，測試的機器就我這台 Vista + 4GB RAM, CPU 是 Core2Duo E6300...
</p>
<p>
速度實在是不快，也不是用 .NET 寫效能太糟的原因，因為 VISTA 內建的秀圖程式也是靠同一個 CODEC，效能也差不多... 不過 CODEC 的架構設計的很好，如果我要的只是縮圖，那就不一樣了... 來看第二個範例:
</p>
<div>
<strong>SAMPLE 2. 建立原圖 (.CR2) 1/10 大小的 JPEG 縮圖</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
                Stopwatch timer = new Stopwatch();                timer.Start();                FileStream fs = File.OpenRead(srcFile);                FileStream fs2 = File.OpenWrite(Path.ChangeExtension(srcFile, &quot;.jpg&quot;));                BitmapDecoder source = BitmapDecoder.Create(                    fs,                    BitmapCreateOptions.None,                    BitmapCacheOption.None);                JpegBitmapEncoder target = new JpegBitmapEncoder();                target.Frames.Add(BitmapFrame.Create(                    new TransformedBitmap(source.Frames[0], new ScaleTransform(0.1, 0.1)),                    null,                    null,                    null));                target.QualityLevel = 90;                target.Save(fs2);                fs.Close();                fs2.Close();                timer.Stop();                Console.WriteLine(&quot;Create 0.1x thumbnail: {0} ms.&quot;, timer.ElapsedMilliseconds);
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>Stopwatch timer = <span class="kwrd">new</span> Stopwatch();
</pre>
<pre>
<span class="lnum">   2:  </span>timer.Start();
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>FileStream fs = File.OpenRead(srcFile);
</pre>
<pre>
<span class="lnum">   4:  </span>FileStream fs2 = File.OpenWrite(Path.ChangeExtension(srcFile, <span class="str">&quot;.jpg&quot;</span>));
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>BitmapDecoder source = BitmapDecoder.Create(
</pre>
<pre>
<span class="lnum">   6:  </span>    fs,
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    BitmapCreateOptions.None,
</pre>
<pre>
<span class="lnum">   8:  </span>    BitmapCacheOption.None);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>JpegBitmapEncoder target = <span class="kwrd">new</span> JpegBitmapEncoder();
</pre>
<pre>
<span class="lnum">  10:  </span>target.Frames.Add(BitmapFrame.Create(
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    <span class="kwrd">new</span> TransformedBitmap(source.Frames[0], <span class="kwrd">new</span> ScaleTransform(0.1, 0.1)),
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="kwrd">null</span>,
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="kwrd">null</span>,
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="kwrd">null</span>));
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>target.QualityLevel = 90;
</pre>
<pre>
<span class="lnum">  16:  </span>target.Save(fs2);
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>fs.Close();
</pre>
<pre>
<span class="lnum">  18:  </span>fs2.Close();
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>timer.Stop();
</pre>
<pre>
<span class="lnum">  20:  </span>Console.WriteLine(<span class="str">&quot;Create 0.1x thumbnail: {0} ms.&quot;</span>, timer.ElapsedMilliseconds);
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
範例程式也很簡單，扣掉計時的程式碼只有 16 行... 裡面兩個關鍵的參數，分別為第 11 行， 0.1 代表 Scale Transform 用的縮放比例，0.1 就是只要 1/10 的大小。如果你想要固定尺寸的縮圖，得先自行計算出這個 SCALE 的值。要單純的轉檔，就填 1.0 就好。
</p>
<p>
另一個參數是第15行的 90，它是指存成 JPEG 時要使用的 QUALITY，100 最好，越低失真越嚴重，但是相對的檔案大小也會大幅下降。一般用的 QUALITY 大約都在 75% ~ 90%，其實縮圖 75% 就夠了，反正看不大出來 (H)
</p>
<p>
&nbsp;
</p>
<p>
我用 CANON G9 拍出來的 RAW (4000 X 3000)，存成 400x300 JPEG，約要花費 1.5 秒，比原圖尺寸的 80 秒差太多了，可見 CODEC 一定針對這種需求作過最佳化，會有效避開縮圖時不必讀取的部份資料... 以加快速度。
</p>
<p>
同樣程式改成不縮圖看看，如果不縮圖的話，ScaleTransform也可以省了，直接把 Frame 加進去就好，原程式的 line 10 ~ line 14，換成這段:
</p>
<div>
<strong>不縮圖的替代程式碼</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
                target.Frames.Add(source.Frames[0]);
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>target.Frames.Add(source.Frames[0]);
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
嘖，只有一行也在貼... 沒錯，就是這樣而以。跑出來的時間約為 65 秒...
</p>
<p>
這部份我就沒仔細的拿 DPP 比較過了。不過當你縮圖的尺寸降低時，的確是能有效的加快速度。不過如果對於 ASP.NET WEB 應用程式來看，1.5 秒還是太慢了 @_@，十個人連上來就會想哭了，怎麼辦? 只好善用 CACHE，不然就<a href="/post/RUNPC-2008-06.aspx">買本六月號 RUN PC 看看我投的那篇文章</a>... 哈哈...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
----
</p>
<p>
PS: 這篇是寫給對岸的那位愛賞鳥的網友看的，希望有解決到你的問題。完成後也記得給我欣賞一下你們的攝影作品 :D
</p>
<p>
PS2: 範例程式放在這裡，請自行<a href="http://www.chicken-house.net/files/chicken/WPF_Samples.zip">下載</a>。圖檔請放同目錄的 SampleRawFile.CR2
</p>
<p>
PS3: 家裡大人不准我買 PS3 ...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2008-06-23 03:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-23 03:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%a9%e7%94%a8-wpf-%e8%ae%80%e5%8f%96-canon-cr2-%e7%9a%84-exif-%e5%8f%8a%e7%b8%ae%e5%9c%96-c-%e7%af%84%e4%be%8b%e7%a8%8b%e5%bc%8f%e8%aa%aa%e6%98%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-24 08:13:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-24 08:13:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;CANON 自家的 DPP 大概要廿幾秒，CANON自家寫給 WPF 用的 CODEC 搭配 .NET 的 WPF 程式，則要 60 秒左右
小熊子覺得 CANON for WPF 大圖轉出是故意 60 秒的，不然，其他廠商就不用跟他買 cr2 license or SDK 了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>225</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-24 10:02:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-24 10:02:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[記得 Canon Raw SDK 是不用錢的... 不過你想拿到那份 SDK 還挺囉唆的, 要提出你的開發計劃 blah blah ... 他們審過了就會寄光碟給你..

故意應該不至於, 影響的是一堆 vista / xp 的用戶, 而不是開發人員... 不過不重視是真的, 不然也不會到現在效能都沒改善, 連 x64 版的推出計劃都沒有 :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>226</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.natureandme.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-25 01:25:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-25 01:25:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多谢安德魯的帮助！：-）我会仔细研究你的code.感谢上帝感谢主，感谢互联网能够ｇｏｏｇｌｅ到你的ｂｌｏｇ．ＷＰＦ真是好东西，可惜现在用的人还不多。
送你几张以前拍的鸟片作为感谢！
[img]http://www.natureandme.net/attachments/month_0806/v20086511451.jpg[/img]
[img]http://www.natureandme.net/attachments/month_0803/k200834114134.jpg[/img]
[img]http://www.natureandme.net/attachments/month_0711/n200711523733.jpg[/img]
更多的小鸟，可以在我的ｂｌｏｇ里找到。我和台湾的鸟友一起在内地拍过，高兴得是过段时间就可以到台湾拍鸟啦！
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.natureandme.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-25 03:09:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-25 03:09:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[wish this article will help you find the metadata definition .
http://www.codeproject.com/KB/graphics/photoproperties.aspx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>228</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-25 03:34:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-25 03:34:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.exiv2.org/tags.html
This is detail definition of exif metadata library

--
問: 白熊跟灰熊誰比較厲害?
答: 灰熊]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-25 19:40:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-25 19:40:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[耶, 感謝..
這堆 EXIF 的定義就是之前翻半天懶的整理... 既然有人整理好那就賺到了 :D
有這堆定義的資料就實用多了, 不然 WPF 內建的那十來個 metadata property 實在是沒啥用...

--
問: 6 - 4 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[punkrock]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[punkrockrorb15@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-27 11:06:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-27 11:06:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大大你好~我想下戴這文章的範例程式，但是不能下戴
可以煩麻大大寄給我嗎？ 感謝你。
punkrockrorb15@yahoo.com.tw
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>231</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-28 11:10:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-28 11:10:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sorry, 搬了網站就忘了修下載的 LINK ... :P

範例程式現在可以正常下載了，請慢用 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>232</wp:comment_id>
			<wp:comment_author><![CDATA[punkrock]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[punkrockrorb15@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-01 09:01:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-01 09:01:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大大你好~範例程式已下戴 ^^
非常感謝你~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>又被盜文了... :@</title>
		<link>http://columns.chicken-house.net/2008/06/22/%e5%8f%88%e8%a2%ab%e7%9b%9c%e6%96%87%e4%ba%86/</link>
		<pubDate>Sun, 22 Jun 2008 22:58:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/22/e58f88e8a2abe79b9ce69687e4ba86-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>該說人紅嘛? 看起來也不是，就是正好我貼的文章又被盜用了。除了上次 [<a title="前言: Canon Raw Codec 1.2 + .NET Framework 3.0 (WPF)" href="http://columns.chicken-house.net/post/e5898de8a880-Canon-Raw-Codec-12-2b-NET-Framework-30-(WPF).aspx">這篇文章</a>] 被<a href="http://columns.chicken-house.net/post/e981b2e4be86e79a84e6ada3e7bea9.aspx">盜貼</a>到 BLOGGER 上之外，這次又發現另一篇被盜貼了。這次被盜貼的是我之前發表一篇 [<a href="http://columns.chicken-house.net/post/e58e9fe4be86-SystemNetMail-e4b99fe69c83e69c89-Bug-.aspx">原來 System.Net.Mail 也會有 Bug</a> ] 的文章，說明我碰到 Microsoft .NET Framework 的 BUG 及我挖掘問題真相的技術文章...。</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><a href="/wp-content/be-files/WindowsLiveWriter/3d9d9787df4d_1430E/image_2.png" target="_blank"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="260" alt="image" src="/wp-content/be-files/WindowsLiveWriter/3d9d9787df4d_1430E/image_thumb.png" width="212" border="0"></a> </p> <p>這次無意間用 GOOGLE 找相關文章找到的，兩篇都是在對岸的網站，一個是照文全貼，唯獨 "忘" 了註明出處。至少他還很忠實原味，範例程式中出現吳小皮吳小妹，還有他們在 chicken-house.net 的 EMAIL 都沒有改掉... 只是把它去頭去尾，翻成簡體中文就貼了上去.. </p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><a href="/wp-content/be-files/WindowsLiveWriter/3d9d9787df4d_1430E/image_4.png" target="_blank"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="260" alt="image" src="/wp-content/be-files/WindowsLiveWriter/3d9d9787df4d_1430E/image_thumb_1.png" width="212" border="0"></a> </p> <p>另一篇不是貼在他自己的 BLOG，而是貼在 "百度知道" 上面賺點數... 什麼是 "百度知道" ? 就是有點像台灣的奇魔知識+，在上面回答解決問題，賺分數用的。有人碰到了同一個 BUG 解不出來，對岸也有同胞很熱心的找到我的文章可以解決他的問題，就貼了上去... 一樣不小心 "忘" 了註明出處...。這位對岸同胞比較好一點，除了翻成簡體中文之外，其它就都照貼，沒有幫我去頭去尾...。</p> <p>&nbsp;</p> <p>其實寫 BLOG 就是要分享用的，也不要求說要啥版稅或費用的。轉貼文章很歡迎，不過就是要求個 "尊重" 而以。同一篇文章也有幫到一位對岸同胞，他有在我 BLOG 留回應，其實這樣很好啊，幫到他我自己也很有成就感。不過這樣不註明出處的轉貼，我分享的動力完全被破壞掉了，只是簡單的尊重這麼難嘛?</p> <p>&nbsp;</p> <p>這兩個地方我都留了 comment，請該篇文章的主人註明出處，也不曉得有沒有用。我把他們的網站都抓圖下來了，想看的請自己到圖中挖網址，我就不想貼在文章內了。不想因為我貼了這篇又增加他們網站的點擊率，我也不想要有我這邊 "引用" 他們文章的記錄，算是我無言的抗議吧。</p> <p>&nbsp;</p> <p>沒事，發發牢騷而以。希望以後不要再有這種狀況發生了...。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2008-06-22 22:58:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-22 22:58:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%88%e8%a2%ab%e7%9b%9c%e6%96%87%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:comment>
			<wp:comment_id>233</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-24 08:08:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-24 08:08:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[本來想了一堆方法防止盜文，都沒有打動大師，相信在大師的心中，還是相信人性本善，真是難得]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[BlogEngine.NET] 改造工程 - CS2007 資料匯入</title>
		<link>http://columns.chicken-house.net/2008/06/21/blogengine-net-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b-cs2007-%e8%b3%87%e6%96%99%e5%8c%af%e5%85%a5/</link>
		<pubDate>Sat, 21 Jun 2008 04:10:22 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/21/BlogEngineNET-e694b9e980a0e5b7a5e7a88b-CS2007-e8b387e69699e58cafe585a5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>自從搬到 BlogEngine.NET 之後，每天晚上都沒閒著，一點一點的慢慢把整個網站改成我要的樣子... 資料庫 / 檔案是我最在意的，當然要優先顧好，光這部份就花了一個多禮拜...</p> <p>最早找到了 CS2007 --&gt; BlogML --&gt; BlogEngine，大概把我想要的 90% 資料都轉過來了，不過看到那 10% 的資訊沒過來，心裡就很不是滋味...</p> <p>&nbsp;</p> <p>"這是我要一直保留下來的資料耶，現在沒把資料補回來，以後就永遠補不回來了..."</p> <p>&nbsp;</p> <p>就是心裡一直這樣想，所以... 重匯吧! 不然以後後悔也是補不回來的。首先當然是想先從 BlogEngine 匯入 BlogML 的工具下手，看了一下，沒提供 Source Code ? 再看一下，一篇文章一個 Web Service Call，一則回應也是一個 Web Service Call ... 感覺起來有點沒效率，不過不管了，我內容也不多 (兩百多篇文章) ... 既然有 Web Services，先看看它的 WSDL ...</p> <p>&nbsp;</p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="393" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETCS2007_3ABA/image_3.png" width="367" border="0"> <br><a title="http://columns.chicken-house.net/api/blogImporter.asmx" href="http://columns.chicken-house.net/api/blogImporter.asmx">http://columns.chicken-house.net/api/blogImporter.asmx</a></p> <p>&nbsp;</p> <p>沒幾個 WebMethod 嘛，不過看一看它的 Interface 就已經漏掉很多資訊沒轉進來了 (像是我要的原 CS PostID，事後作新舊網址對照表用，還有 PageViewCount... etc)，要改原程式也是個大工程，不但 CLIENT 要改，WEB METHOD 也要擴充... 我又不是非得遠端用 WEB SERVICES 執行匯入不可，就當下決定另外寫一個匯入程式還比較快...。重寫的話就得研究它的寫法，正好每個 WebMethod 都只作單一的動作，裡面的實作就是現成的範例... 省了不少熟悉 API 的時間 :P</p> <p>&nbsp;</p> <p>事後證明這作法沒錯，BlogEngine 的 LIB 蠻簡單易懂的，另外寫真的比較快... 就一切以原 .ASMX 的程式碼為藍本，寫了一個 .ASHX ，不作什麼事，就是把事先放在 ~/App_Data 下的 BLOGML 讀進來，一篇一篇 POST 處理，一個一個回應處理... 兩層迴圈就搞定原本那 90% 的匯入作業...</p> <p>&nbsp;</p> <p>接下來就是自訂的部份了。先來列一下那些是我要補的資訊:</p> <ol> <li>每篇 POST 的 COUNTER  <li>每則回應的詳細資訊  <li>每篇 POST 的 ID ( CS2007 內的 ID )，及匯入後的新 ID  <li>所有必要的網址修正 (圖檔，站內文章連結..)  <li>原程式的一些缺陷修正 (如前文提到，Modified Date錯誤的問題)</li></ol> <p>&nbsp;</p> <p>源頭就有東西要補了。如果一切基於 BlogML 的話，BlogML 沒定義到的資料就沒機會撈出來了。看了一下我還需要額外抓出來的資訊，像匿名的 COMMENTS 作者資訊，IP 等... 不過這些都用某種序列化的方式存在 CSDB，ㄨ!! 真麻煩... 在 CS2007 DB 內的 [cs_posts] 有這兩個欄位: PropertyNames, PropertyValues... 沒錯，全部壓成一個大字串，得自己寫程式去 PARSE ...</p> <p>CS2007 的作法是這樣，在 PropertyNames 欄位放的值長的像這樣 (包含 Name, 型別, 字串起始及結束位置):</p> <p><b>SubmittedUserName:S:0:3:TitleUrl:S:3:35:</b></p> <p>&nbsp;</p> <p>而在 PropertyValues 對應的值為:</p> <p><b>小熊子<a href="http://michadel.dyndns.org/netblog/">http://michadel.dyndns.org/netblog/</a></b></p> <p>&nbsp;</p> <p>拆起來有點小麻煩，PropertyNames 是 {Name}:{Type}:{StartPos}:{EndPos}: 的組合，有多組的話就一直重複下去。以 Comments 的 SubmittedUserName 來說，它的型別是 S ( String )，它的值就要從後面的 PropertyValues 整個字串的第 0 個字元 ~ 第 3 個字元之間的值 ( 小熊子 )，而 TitleUrl 則是第 3 個字元 ~ 第 35 個字元的值 ( <a href="http://michadel.dyndns.org/netblog/">http://michadel.dyndns.org/netblog/</a> ) ...</p> <p>看來用 T-SQL 拆或是用 XPath / XSLT 拆都有點辛苦，想想算了... 這段 CODE 跑不掉一定要寫... 就硬解出來吧。解出來後就可以修正 CS2007 匿名張貼的 Comment 沒正確顯示在 BlogML 內的問題。</p> <p>接下來要把 SQL 這堆資料倒成 XML 檔，偷吃步一下，找工具直接倒出來就好。反正只作一次，可以不要寫 CODE 就不要寫了... SQL2005 要把 QUERY 結果存成 XML 倒是很簡單，打開 SQL2005 Management Studio, 執行這段 QUERY:<br></p> <div><b>取得所有 comments 的額外 PropertyValues 的查詢指令</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> <div style="display: none"><pre id="codeData" style="display: none">select 
	PostID, 
	PostAuthor, 
	PropertyNames, 
	PropertyValues 
from cs_posts 
where ApplicationPostType = 4 
for xml auto</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">select</span> </pre><pre><span class="lnum">   2:  </span>  PostID, </pre><pre class="alt"><span class="lnum">   3:  </span>  PostAuthor, </pre><pre><span class="lnum">   4:  </span>  PropertyNames, </pre><pre class="alt"><span class="lnum">   5:  </span>  PropertyValues </pre><pre><span class="lnum">   6:  </span><span class="kwrd">from</span> cs_posts </pre><pre class="alt"><span class="lnum">   7:  </span><span class="kwrd">where</span> ApplicationPostType = 4 </pre><pre><span class="lnum">   8:  </span><span class="kwrd">for</span> xml auto</pre></div></div><!-- end of code area --></div>
<p><br>&nbsp;</p>
<p>會看到這樣的畫面:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="147" alt="image" src="/wp-content/be-files/WindowsLiveWriter/BlogEngine.NETCS2007_3ABA/image_8.png" width="507" border="0"> </p>
<p>&nbsp;</p>
<p>點下去就是 XML 了，手到加上頭尾的 Root Element 存檔就搞定了。接下來補段 CODE 把我要的 Property 拆出來存 XML 檔，第一步驟收工!</p>
<p>接下來這堆問題就以 (4) 最麻煩了。原本想的很天真，用文字編輯器把所有 XML 檔替換掉就沒事... 錯! 先從最單純的圖檔路逕來看吧..</p>
<p>&nbsp;</p>
<p><strong>[替換圖檔及下載檔案的網址]</strong></p>
<p>最基本的就是圖檔網址... 在 CS2007 裡圖檔是這樣放的 (WLW會幫你補上絕對路逕，不是用相對路逕)</p>
<p><a href="http://columns.chicken-house.net/blogs/chicken/xxxxxxx/xxx.jpg">http://columns.chicken-house.net/blogs/chicken/xxxxxxx/xxx.jpg</a></p>
<p>而看了 BlogEngine 的作法，它用 HttpHandler 的方式來提供前端下載圖檔，格式像這樣:</p>
<p><a href="http://columns.chicken-house.net/xxxxx/wp-content/be-files/xxx.jpg">http://columns.chicken-house.net/xxxxx/wp-content/be-files/xxx.jpg</a></p>
<p>而 BlogEngine 的設定檔是這樣寫的:</p>
<p>&nbsp;</p>
<div><b>BlogEngine 在 Web.config 內的 HttpHandler 區段</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">&lt;httpHandlers&gt;
	&lt;add	verb="*" 
		path="file.axd" 
		type="BlogEngine.Core.Web.HttpHandlers.FileHandler, BlogEngine.Core" 
		validate="false"/&gt;
	&lt;add	verb="*" 
		path="image.axd" 
		type="BlogEngine.Core.Web.HttpHandlers.ImageHandler, 
		BlogEngine.Core" 
		validate="false"/&gt;
	.....
&lt;/httpHandlers&gt;</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">&lt;</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span></pre><pre><span class="lnum">   2:  </span>  <span class="kwrd">&lt;</span><span class="html">add</span>  <span class="attr">verb</span><span class="kwrd">="*"</span> </pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="attr">path</span><span class="kwrd">="file.axd"</span> </pre><pre><span class="lnum">   4:  </span>    <span class="attr">type</span><span class="kwrd">="BlogEngine.Core.Web.HttpHandlers.FileHandler, BlogEngine.Core"</span> </pre><pre class="alt"><span class="lnum">   5:  </span>    <span class="attr">validate</span><span class="kwrd">="false"</span><span class="kwrd">/&gt;</span></pre><pre><span class="lnum">   6:  </span>  <span class="kwrd">&lt;</span><span class="html">add</span>  <span class="attr">verb</span><span class="kwrd">="*"</span> </pre><pre class="alt"><span class="lnum">   7:  </span>    <span class="attr">path</span><span class="kwrd">="image.axd"</span> </pre><pre><span class="lnum">   8:  </span>    <span class="attr">type</span><span class="kwrd">="BlogEngine.Core.Web.HttpHandlers.ImageHandler, </pre><pre class="alt"><span class="lnum">   9:  </span>    BlogEngine.Core"</span> </pre><pre><span class="lnum">  10:  </span>    <span class="attr">validate</span><span class="kwrd">="false"</span><span class="kwrd">/&gt;</span></pre><pre class="alt"><span class="lnum">  11:  </span>  .....</pre><pre><span class="lnum">  12:  </span><span class="kwrd">&lt;/</span><span class="html">httpHandlers</span><span class="kwrd">&gt;</span></pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>看起來不難，理論上我只要找到原網址，把 ~/blog/chicken/ 後的路逕切出來，前段改成 image.axd?picthre= 就可以了。</p>
<p>大致上是這樣沒錯，不過變數還不少... 因為有好幾種網址 @_@</p>
<ol>
<li>分家前&nbsp; ( <a href="http://community.chicken-house.net/blogs/chicken/xxxxx">http://community.chicken-house.net/blogs/chicken/xxxxx</a> ) 
<li>分家後&nbsp; ( <a href="http://columns.chicken-house.net/blogs/chicken/xxxxx">http://columns.chicken-house.net/blogs/chicken/xxxxx</a> ) 
<li>古早時代手工打的 ( /blogs/chicken/xxxxx ) 
<li>有些內建的要避開，像 ( <a href="http://columns.chicken-house.net/blogs/chicken/rss.aspx">http://columns.chicken-house.net/blogs/chicken/rss.aspx</a> )</li></ol>
<p>代換要嘛一次做完，要嘛一定要照 1 2 3 順序，否則先做 (3) 就會把 (1) (2) 都破壞掉了... 但是怎麼想程式都很不乾脆，雜七雜八的 CODE 一堆... 最後搬出&nbsp; <a title="http://regexlib.com/" href="http://regexlib.com/">http://regexlib.com/</a> 這個網站，它提供大量的 Regular Expression 的資料庫供你使用，也提供了線上版本讓你測試 MATCH 的結果，很好用! 一定要推一下...</p>
<p>最後定案的 Regular Expression 長這樣:</p>
<p>(http\://(columns|community)\.chicken\-house\.net)?/blogs/chicken/([a-zA-Z0-9\-_\./%]*)</p>
<p>一切都很順利，簡單的就精確的抓到要代換的範圍。補一下小插曲，最後轉完才發現漏掉 (4)，不過沒幾篇，就手動改掉了 :P，所以這段 REGEXP 是沒處理到 (4) 這種情況的...</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>[站內連結的修正]</strong></p>
<p>再來就開始麻煩了... 動手前我先想了一下，每篇文章要匯進去後才會知道它的新 ID，新網址... 在還不知道新網址之前有些內容的聯結就無法替換了，怎麼樣都不可能在 1 PASS 內解決這問題... 只能用 2 PASS 來處理了。</p>
<p>既然這樣，第一次匯入就不修站內聯結了，只要把新舊 ID 記下來就好...</p>
<p>頭痛的來了，CS2007 的網址格式有好幾種 @_@ (難怪它有專門一個 config 檔來設定幾十個 URL Rewrite 的設定...):</p>
<ol>
<li>/blogs/chicken/archive/2008/06/20/1234.aspx 
<li>/blogs/chicken/archive/2008/06/20/MyPostTitleHash.aspx 
<li>/blogs/1234.aspx</li></ol>
<p>其中 1234 是 CS2007 內部使用的 PostID .&nbsp; 再看看 BlogEngine 的網址格式:</p>
<ol>
<li>/post.aspx?id=xxxx-xxxx-xxxxxx-xxxxxxxxxxx 
<li>/post/xxxxxxxxxxxxxxxx.aspx (某種 TITLE 的 HASH，它稱作 SLUG)</li></ol>
<p>還好 BlogEngine 單純多了，只要抓到 (1) 的 ID，SLUG 就有 API 抓的到...</p>
<p>記得 CS 網址還有不需要 URL Rewrite 的版本 ( /blogs/xxxxx.aspx?postID=1234 這樣)，不過從來沒出現在我文章內容，就不理它了...</p>
<p>這裡的重點不是單純的代換了，還要精確的抓出 1234 這段 PostID .. 最後定案的 Regular Expression 長這樣:</p>
<p>(http\://(columns|community)\.chicken\-house\.net)?/blogs/chicken/archive/\d+/\d+/\d+/(\d+)\.aspx</p>
<p>果然人家說 Regular Expression 是 "WRITE ONLY LANGUAGE" 真有道理，寫完連我自己都看不懂這堆符號是在幹嘛... 最後新舊 ID 都抓到就可以產生出正確的新站內連結了..</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>[站外連結修正]</strong></p>
<p>我自己的 LINK 找到就可以修，不過寫在別人那邊的我那修的到啊... 因此就要靠上一篇講的，想辦法要去接有人點到舊的 CS LINK，然後當場做轉址的動作...</p>
<p>好在舊的文章不會再變多了，靠前面做出來的對照表就有足夠的資訊了... 成果看上一篇就知道了。這裡主要是靠 CSUrlMap.cs 這個我自己寫的 HttpHandler 來解決所有連到 /blogs/*.aspx 的連結...</p>
<p>方法差不多，我得從各種可能的網址格式，抓出舊的 CS PostID，然後查表，找出新的網址，把使用者引導到新的頁面... 貼一下主程式的部份:</p>
<div><b>CSUrlMap, 將 CS2007 的網址重新導向到 BlogEngine 網址的 HttpHandler</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">    public void ProcessRequest(HttpContext context)
    {
        if (matchRss.IsMatch(context.Request.Path) == true)
        {
            //  redir to RSS
            context.Response.ContentType = "text/xml";
            context.Response.TransmitFile("~/blogs/rss.xml");
        }
        else if (matchPostID.IsMatch(context.Request.Path) == true)
        {
            //  redir to post URL
            Match result = matchPostID.Match(context.Request.Path);

            if (result != null &amp;&amp; result.Groups.Count &gt; 0)
            {
                string csPostID = result.Groups[result.Groups.Count - 1].Value;

                if (this.MAP.postIDs.ContainsKey(csPostID) == true)
                {
                    context.Items["postID"] = this.MAP.postIDs[csPostID];
                    context.Items["redirDesc"] = "網站系統更新，原文章已經搬移到新的網址。";
                }
                else
                {
                    context.Items["redirDesc"] = "查無此文章代碼，文章不存在或是已被刪除。將返回網站首頁。";
                }
            }
            else
            {
                context.Items["redirDesc"] = "4444";
            }
        }
        else if (matchPostURL.IsMatch(context.Request.Path) == true)
        {
            context.Items["postID"] = this.MAP.postURLs[context.Request.Path];
            context.Items["redirDesc"] = "網站系統更新，原文章已經搬移到新的網址。";
        }
        else
        {
            context.Items["redirDesc"] = "查無此頁。將返回網站首頁。";
        }

        context.Server.Transfer("~/blogs/AutoRedirFromCsUrl.aspx");
    }</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> ProcessRequest(HttpContext context)</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">if</span> (matchRss.IsMatch(context.Request.Path) == <span class="kwrd">true</span>)</pre><pre><span class="lnum">   4:  </span>    {</pre><pre class="alt"><span class="lnum">   5:  </span>        <span class="rem">//  redir to RSS</span></pre><pre><span class="lnum">   6:  </span>        context.Response.ContentType = <span class="str">"text/xml"</span>;</pre><pre class="alt"><span class="lnum">   7:  </span>        context.Response.TransmitFile(<span class="str">"~/blogs/rss.xml"</span>);</pre><pre><span class="lnum">   8:  </span>    }</pre><pre class="alt"><span class="lnum">   9:  </span>    <span class="kwrd">else</span> <span class="kwrd">if</span> (matchPostID.IsMatch(context.Request.Path) == <span class="kwrd">true</span>)</pre><pre><span class="lnum">  10:  </span>    {</pre><pre class="alt"><span class="lnum">  11:  </span>        <span class="rem">//  redir to post URL</span></pre><pre><span class="lnum">  12:  </span>        Match result = matchPostID.Match(context.Request.Path);</pre><pre class="alt"><span class="lnum">  13:  </span>        <span class="kwrd">if</span> (result != <span class="kwrd">null</span> &amp;&amp; result.Groups.Count &gt; 0)</pre><pre><span class="lnum">  14:  </span>        {</pre><pre class="alt"><span class="lnum">  15:  </span>            <span class="kwrd">string</span> csPostID = result.Groups[result.Groups.Count - 1].Value;</pre><pre><span class="lnum">  16:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>.MAP.postIDs.ContainsKey(csPostID) == <span class="kwrd">true</span>)</pre><pre class="alt"><span class="lnum">  17:  </span>            {</pre><pre><span class="lnum">  18:  </span>                context.Items[<span class="str">"postID"</span>] = <span class="kwrd">this</span>.MAP.postIDs[csPostID];</pre><pre class="alt"><span class="lnum">  19:  </span>                context.Items[<span class="str">"redirDesc"</span>] = <span class="str">"網站系統更新，原文章已經搬移到新的網址。"</span>;</pre><pre><span class="lnum">  20:  </span>            }</pre><pre class="alt"><span class="lnum">  21:  </span>            <span class="kwrd">else</span></pre><pre><span class="lnum">  22:  </span>            {</pre><pre class="alt"><span class="lnum">  23:  </span>                context.Items[<span class="str">"redirDesc"</span>] = <span class="str">"查無此文章代碼，文章不存在或是已被刪除。將返回網站首頁。"</span>;</pre><pre><span class="lnum">  24:  </span>            }</pre><pre class="alt"><span class="lnum">  25:  </span>        }</pre><pre><span class="lnum">  26:  </span>        <span class="kwrd">else</span></pre><pre class="alt"><span class="lnum">  27:  </span>        {</pre><pre><span class="lnum">  28:  </span>            context.Items[<span class="str">"redirDesc"</span>] = <span class="str">"4444"</span>;</pre><pre class="alt"><span class="lnum">  29:  </span>        }</pre><pre><span class="lnum">  30:  </span>    }</pre><pre class="alt"><span class="lnum">  31:  </span>    <span class="kwrd">else</span> <span class="kwrd">if</span> (matchPostURL.IsMatch(context.Request.Path) == <span class="kwrd">true</span>)</pre><pre><span class="lnum">  32:  </span>    {</pre><pre class="alt"><span class="lnum">  33:  </span>        context.Items[<span class="str">"postID"</span>] = <span class="kwrd">this</span>.MAP.postURLs[context.Request.Path];</pre><pre><span class="lnum">  34:  </span>        context.Items[<span class="str">"redirDesc"</span>] = <span class="str">"網站系統更新，原文章已經搬移到新的網址。"</span>;</pre><pre class="alt"><span class="lnum">  35:  </span>    }</pre><pre><span class="lnum">  36:  </span>    <span class="kwrd">else</span></pre><pre class="alt"><span class="lnum">  37:  </span>    {</pre><pre><span class="lnum">  38:  </span>        context.Items[<span class="str">"redirDesc"</span>] = <span class="str">"查無此頁。將返回網站首頁。"</span>;</pre><pre class="alt"><span class="lnum">  39:  </span>    }</pre><pre><span class="lnum">  40:  </span>    context.Server.Transfer(<span class="str">"~/blogs/AutoRedirFromCsUrl.aspx"</span>);</pre><pre class="alt"><span class="lnum">  41:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>看程式說故事，大家都會吧 :D，結果就是上一篇各位看到的樣子... 已經沒力一行一行再說明下去了 :P</p>
<p>&nbsp;</p>
<p>寫到這邊真是大工程 @_@，動作都不困難，但是都是雜七雜八的工作，害我搞了一個禮拜... 不過到此為止搬家要處理的資料部份全部都完成了。下一篇就輕鬆多了，把網站的版面調整成我想要的樣式... 有興趣的人請多等一等吧 :D 主題會放在跟 <a href="http://www.funp.com/" target="_blank">FunP 推推王</a>的密切整合上... 敬請期待 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2008-06-21 04:10:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-21 04:10:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blogengine-net-%e6%94%b9%e9%80%a0%e5%b7%a5%e7%a8%8b-cs2007-%e8%b3%87%e6%96%99%e5%8c%af%e5%85%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>從 CommunityServer 2007 到 BlogEngine.NET</title>
		<link>http://columns.chicken-house.net/2008/06/19/%e5%be%9e-communityserver-2007-%e5%88%b0-blogengine-net/</link>
		<pubDate>Thu, 19 Jun 2008 03:26:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/19/e696b0e5b185e890bde68890-e690ace5aeb6e9818ee7a88be79a84e4ba94e59b9be4b889.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哈，不是我要搬家了，是網站搬家... 搬家是想了很久沒錯，只是決定搬到 BlogEngine.Net 倒是沒花幾天的時間，所以準備動作也是有點 LiLiLaLa .. 從 CommunityServer 這種成熟的系統搬到還很年輕的 BlogEngine.Net，其實碰到不少小麻煩，在這裡記錄一下給需要的人參考，也算功德一件! 
</p>
<p>
&nbsp;
</p>
<p>
要搬 BLOG，最直覺的就是用 <a href="http://blogml.org/">BlogML</a> 了，不錯，我用的 CommunityServer2007 <a href="http://www.codeplex.com/BlogML/Release/ProjectReleases.aspx?ReleaseId=171">有工具</a>可以匯出 BlogML，而 BlogEngine.Net 也有工具可以匯入 BlogML，想想真是太好了... 就先用 DevWeb 架了 BlogEngine.Net 起來試搬看看.. 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_8.png" border="0" alt="image" width="561" height="191" /> 
</p>
<p>
BlogEngine.Net 匯入的方式，是用 ClickOnce，直接從它的官方網站下載的 WinForm App 配合 BlogEngine.Net 本身提供的 Web Service 來進行匯入 BlogML 的動作，除了 BLOGML 之外也支援 RSS? 不過 RSS 怎麼試都試不出來，放棄... 直接用 BlogML ... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_7.png" border="0" alt="image" width="612" height="463" /> 
</p>
<p>
畫面很乾淨，它也很忠實的完成了它的工作... CommunityServer2007 的 BLOGML 匯入時出了點問題，文章的修改時間不知為何，BlogEngine.Net 都一直抓到 0000/01/01 00:00:00.000 ，而BlogEngine.Net 還會幫你修正時區的問題 (台灣時區，要 -8 小時才是標準時間)，結果一扣就變成負的，就送我一個 Exception ... Orz 
</p>
<p>
&nbsp;
</p>
<p>
匯入的第一步就得動用到 Visual Studio 2008，真不是好兆頭... 所性拿掉那行程式，就一切沒問題了，順利匯入! 架了台測試網站，研究了一兩天，實在是有點不滿意... 
</p>
<ol>
	<li><strong><font color="#0000ff">LINK 不對</font></strong><br />
	Windows Live Writer 很好心的幫你把上傳的圖檔都用絕對網址來表示，因此所有的圖都連回原本的網站，正常顯示沒有問題。不過搬家那有這樣搬的... 改!!!</li>
	<li><strong><font color="#0000ff">只搬了BLOG，文章沒有搬<br />
	</font></strong>只怪當時年輕，無聊去用 article 的功能，造成部份是 BLOG 文章，部份是 ARTICLE。CommunityServer2007是都有忠實的匯到 BLOGML，不過 BlogEngine.Net 的匯入工具略過它了... 改!!!</li>
	<li><strong><font color="#0000ff">站內 LINK 不對<br />
	</font></strong>圖檔 LINK 還好修，字串換一換就搞定，不過站内的文章戶連才是個問題... 改!!!</li>
	<li><strong><font color="#0000ff">站外 LINK 不對</font></strong><br />
	其實這一點是搬完家才發現的，剛搬好 PAGE VIEW 低的可憐... 看一看 LOG 都是 404 Page Not Found ... 改!!!</li>
	<li><strong><font color="#0000ff">沒有 COUNTER</font></strong><br />
	BlogEngine.Net 說實在話，以BLOG來說功能一點都不缺，不過很怪，竟然沒有最基本的 VIEW COUNT ? 所幸 BlogEngine.Net 有定好 Extension 的架構，要寫它的擴充程式很簡單，有個高手寫了 BlogEngine.Net 的 <a href="http://mosesofegypt.net/?tag=/blogengine.net+extensions">View Count Extension</a>... 畫面不怎麼樣，不過很實用... 裝!!!</li>
	<li><strong><font color="#0000ff">原有的 VIEW COUNT 沒匯入<br />
	</font></strong>廢話，BlogEngine.Net 本來就沒內建 VIEW COUNT，那是我自己裝了擴充程式才有... 資料要匯，當然也只能自己想辦法 :~~ 改!!!</li>
	<li><strong><font color="#0000ff">版面問題</font></strong><br />
	標準的版面我很喜歡，就是我要的那種素素的 STYLE，很標準的 ASP.NET Master / UserControl 架構，太棒了... 我要求的也不多，就放放廣告 (看廣告收益很有意思耶，好像電動裡打怪會賺錢或是經驗值那樣... 真的賺多少其實也不重要 :D)，還有幾個我自己寫的 CONTROL ... 改!!!</li>
	<li><strong><font color="#0000ff">我在CommunityServer加的功能</font></strong><br />
	沒辦法，自作孽，改了一堆只能自己搬... 有好幾個: 
	<ul>
		<li>Google Ads (可以用)</li>
		<li>FunP 推推王 (沒在用了)</li>
		<li><strike>Recent Comments</strike> (已經有內建，可以扔了)</li>
		<li><strike>皮哥芸妹年齡</strike> (跟太座的網站分家了，我這邊就不需要了)</li>
		<li>Bot Check (還沒搞定要怎麼改 :~)</li>
		<li>Code Formatter 在 BLOG SERVER 要配合的部份</li>
	</ul>
	</li>
</ol>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
上面這幾點，都是搬家時或多或少會碰到的小問題，不過很想哭的是，這六個最後都是搬出 Visual Studio 2008 出來才搞定的 @_@，什麼意思? 就是自己寫 CODE 來修啦... 真不知道該誇還是該罵，也因為這樣有機會 Trace 幾次它的 Code，忍不住想再誇它一次，要建起開發環境實在太容易了 [H] 哈哈...&nbsp; 它的 CODE 很精實，CODE 不多，架構很好，規規舉舉的很容易懂，這種 CODE 改起來真舒服.. (為什麼公司的 CODE 都沒有像這種的...)，修改的難度大概只有 CommunityServer 的 1/3 .. (CommunityServer的作者很猛，把 Microsoft 在 2.0 才推出的那套架構在 1.1 時代就都實做了一套 [Y]) 
</p>
<p>
&nbsp;
</p>
<p>
現在還有空在這裡慢慢打，當然是這些問題都解決完了，先看看成果吧，細節有空再補 HOWTO 文章。那些 LINK 不對的問題，各位翻翻舊文章，如果都看的到圖點的到東西，就是沒問題了。有問題的請再留話給我，我來修看看。 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_23.png" border="0" alt="image" width="388" height="484" /> 
</p>
<p>
來看看加上 Google Ads 的版面，老實說這個版跟 Google Ads 還真搭... 看起來就像同一套的.. 我只調了 CSS ，跟 MASTER PAGE.. 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_22.png" border="0" alt="image" width="644" height="393" /> 
</p>
<p>
再來是站內文章互連的 LINK。這邊讓我傷了幾秒鐘的腦筋... 就放棄原本只想寫寫批次檔代換的念頭了。轉檔前跟本不知道轉檔後的新 LINK 是長什麼樣子，轉檔後就錯失先改好 BLOGML 再匯入的機會了... 想了一下，無解，一定要動用到 2 PASS 才行... 就乖乖的改轉檔程式了。第一輪就是基本的匯入，然後在原本的 BLOGML 附記新的 LINK 及 BlogEngine.Net 的 PostID，然後 PASS 2 再把舊文章逐一翻出來 SEARCH &amp; REPLACE ... 上圖可以看到，內文 [四核 CPU] 的 LINK (在底下) 就已經是修正過的了，各位可以去試看看... 
</p>
<p>
&nbsp;
</p>
<p>
再來是站外的 LINK，站內我自己的可以改，站外可沒辦法... 拿最捧我場的 <a href="http://blog.darkthread.net/">Darkthread</a> 網站為例，<a href="http://blog.darkthread.net/blogs/darkthreadtw/search.aspx?q=chicken">搜尋一下</a>就有七八篇是連到我這邊，怎麼可以辜負大人的好意... 動搖國本也要改! 現在我的 BlogEngine.Net 已經可以接受舊系統的網址了，而且會正確的轉到同一篇文章的新網址。不過為了不讓大家 &quot;不知不覺&quot; 就轉過來，我特地加了一頁提示，因為書上教的，不要把錯誤隱藏起來 :D，你可以用防禦性的方式寫 CODE，但是務必加上 ASSERT 及 TRACE 提醒自己這裡要注意... (出自一本古董書: Writing Solid Code... 太古董了實在找不到 LINK ... ) 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_21.png" border="0" alt="image" width="644" height="413" />&nbsp; 
</p>
<p>
就挑這篇來示範吧，黑暗大哥的文章裡有個 LINK，存的是舊的 CommunityServer 格式 URL，點下去之後會跳到我的網站... 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_20.png" border="0" alt="image" width="644" height="282" /> 
</p>
<p>
倒數完或是你沒耐性直接按下去的話，就會跳到這篇文章... BINGO，原本的內容出現了! 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/8565b2db2c22_307D/image_19.png" border="0" alt="image" width="618" height="484" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
嗯，總算修正回來了。其實修正網址是搬家最頭痛的問題了，這個搞定其它都好說 :D&nbsp; 留給有興趣想從 CommunityServer 搬家到 BlogEngine.Net 的人參考... 
</p>
<p>
(小熊子別再撐了... 還有那個誰也是一樣...) 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2008-06-19 03:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-19 03:26:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%9e-communityserver-2007-%e5%88%b0-blogengine-net]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>234</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-20 13:17:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-20 13:17:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈~沒錯，小熊子就是你!!

不過這篇的 div 跑掉了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>235</wp:comment_id>
			<wp:comment_author><![CDATA[dmwc]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dmwc@ruri.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.ruri.com.tw/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-13 19:12:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-13 19:12:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我寫了一個替代原本的 code format 的 extension，這樣複製 code 時(其實是轉 CSModule 的 code)，才不會把行號複製進去

供您參考看看

http://www.ruri.com.tw/blogs/tech/archive/2008/09/13/Code-highlight-BlogEngine.net.aspx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>換訂閱的網址了!</title>
		<link>http://columns.chicken-house.net/2008/06/18/%e6%8f%9b%e8%a8%82%e9%96%b1%e7%9a%84%e7%b6%b2%e5%9d%80%e4%ba%86/</link>
		<pubDate>Wed, 18 Jun 2008 16:34:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/18/e68f9be8a882e996b1e79a84e7b6b2e59d80e4ba86!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>原本是把舊的訂閱網址都自動轉過來了, 不過想想這不是好方法, 舊的網址得一直掛在那邊.. 沒換的人一年後還是不會換, 因此還是提醒一下.</p>  <ol>   <li>FeedBufner (<a title="http://feeds.feedburner.com/andrewwu" href="http://feeds.feedburner.com/andrewwu">http://feeds.feedburner.com/andrewwu</a>):      <br />如果你原本是用 feed burner 的網址在訂閱, 可以繼續延用. 不過美中不足的是文章內的 link 有些是相對路逕, 運氣不好會掉圖.</li>    <li>原有 community server 的訂閱網址 (<a href="http://columns.chicken-house.net/blogs/chicken/rss.aspx">http://columns.chicken-house.net/blogs/chicken/rss.aspx</a>):      <br />沒啥好說, 改吧! 改成 (1) or (3) 都可以. 真的撐著不想改也可以, 舊網址只會一直看到這一篇題醒你要換訂閱網址...</li>    <li>新網址 (<a title="http://columns.chicken-house.net/syndication.axd" href="http://columns.chicken-house.net/syndication.axd">http://columns.chicken-house.net/syndication.axd</a>)      <br />以後文章訂閱的來源就是這裡了... 也可以點網站上方的 [訂閱] 功能...</li> </ol>  <p>大概就是這樣, 請大家繼續支持, 換到新網站, 繼續訂閱吧 :D   </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2008-06-18 16:34:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-18 16:34:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%9b%e8%a8%82%e9%96%b1%e7%9a%84%e7%b6%b2%e5%9d%80%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>FF3 Download Day...</title>
		<link>http://columns.chicken-house.net/2008/06/18/ff3-download-day/</link>
		<pubDate>Wed, 18 Jun 2008 03:39:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/18/FF3.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哈，不是指 Final Fantasy 3 ... 是指 Firefox 3, 今天是 Firefox 3 下載日，看看能不能創下單日內最高的下載次數世界紀錄... 我其實都用 IE 用慣了，也不趕著一定要今天下載，不過既然有世界紀錄，當然要來湊個熱鬧... :D
</p>
<p>
貼張照片紀念一下，以後可以跟小皮說 &quot;這個世界紀錄你老爸也有算一份...&quot;
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/FF3_336F/image_2.png"><img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/FF3_336F/image_thumb.png" border="0" alt="image" width="627" height="484" /></a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2008-06-18 03:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-18 03:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ff3-download-day]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>236</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kevinfan.abyss@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-18 13:46:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-18 13:46:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我在這留個言，皮皮就知道哥哥我也有出現在跟這個世界紀錄相關的事件中了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>換到 BlogEngine.Net 了!</title>
		<link>http://columns.chicken-house.net/2008/06/17/%e6%8f%9b%e5%88%b0-blogengine-net-%e4%ba%86/</link>
		<pubDate>Tue, 17 Jun 2008 02:01:24 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/17/e68f9be588b0-BlogEngineNet-e4ba86!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>也許有人只是覺的換版面而以... 原本是打算升級到 <a href="http://communityserver.org">CommunityServer 2008</a> 的，不過自從 Community Server 商業化之後，個人版限制越來越多，整套系統也越來越大，常常出了一些問題都沒辦法自己解決 (連 Error Message 都藏的很隱密 -_-)...</p>  <p>&#160;</p>  <p>其實上面這些也不算缺點，不然我也不會一路從 .Text 時代就用到現在，一用就用了四年多... 上禮拜無意間聽同時講到 <a href="http://www.codeplex.com/blogengine">BlogEngine.Net</a>，一時好奇抓下來看看，馬上就被它的簡易安裝嚇到了.. 有多簡單? 步驟如下:</p>  <ol>   <li>下載</li>    <li>解開</li>    <li>設定 IIS 虛擬目錄 / 用 DEV WEB 執行它</li>    <li>完成了</li> </ol>  <p>我已經很努力的把它寫複雜一點了... 它安裝就是這麼簡單，因為它可以不需要 DB (用一堆 XML 檔取代)，因此一行 web.config 都不用改就可以用了... 驚喜之餘，也吸引我更深入的多試了幾個功能...</p>  <p>&#160;</p>  <p>基本功能試過一次之後，發現它比 CS 還符合我的須要，怎麼說?</p>  <ol>   <li>很簡單     <br />不只是設定簡單，它的功能也很專一，就是一套BLOG而以。沒有複雜的會員機制，也沒有帳號申請，也沒有多套BLOG管理 (不過它支援多個作者)，除了 BLOG 也沒有其它功能... 不多不少，正好我要的都有!</li>    <li>Open Source     <br />雖然 CS 也有 Source Code 可以看，不過它的原始碼越來越難找了... 每次逛它的網站都要找半天才找的到 SDK 在那裡下載...</li>    <li>不需要 DB     <br />雖然我自己 HOSTING 我的網站，DB並不是什麼大問題。不過不需要 DB 對我也是個大利多。一方面網站備份更容易，另一方面除錯及改程式也更容易... 更好用的是，未來我可以把整個網站目錄燒到 DVD 上 (不過兩百多篇文章，不到100MB，燒什麼 DVD...)，只要再搭配 .NET 附的 DevWebServer，做個 AutoRun ... 想到可以幹嘛了嗎? 我的 BLOG 馬上就變成一份可以放在 CD，需要時就可以就地用 BROWSER 來看內容了!</li>    <li>CODE 精簡，程式碼架構佳     <br />這點又免不了跟 CS 拿來比較一下... CS 的作者也是高手，CODE寫的很漂亮，不過跟 BE 最大的差別是，CS實在太肥了。肥到什麼功能都要繞個兩三圈... 要修改雖然不難，但是都要花點時間...</li>    <li>免費! 免費!     <br />心理作用，其實賣錢的 CS 送的免費版本，功能比完整的 BlogEngine.NET 還多... 不過商業化之後難免會有些功能得付費才能使用... Orz</li>    <li>小巧，易用，速度快     <br />CS 即使是在 LOCAL 執行，速度都沒辦法讓人覺的 &quot;飛快&quot;，但是換了 BlogEngine.Net 就有這種感覺... 我目前的文章只有兩百多篇，不靠 DB 的速度都還很快。我試過灌了1000篇文章，速度依然很快... 我想這樣就夠了，我要寫到破千篇，不知道還要多久?</li> </ol>  <p>光是這幾個優點，就讓我決定試用只有一天的 BlogEngine.NET 換掉用了四年的 CS ... 剩下的問題只有 &quot;怎麼轉&quot; ? 各位看到現在都成功搬過來，那一定是搞定了... 哈哈... 沒錯，周末花了兩個晚上研究 + 寫匯入程式，今天就重新開張了 :D</p>  <p>轉檔的過程，改天再寫另一篇，有興趣的朋友請耐心等待續集...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2008-06-17 02:01:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-17 02:01:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%9b%e5%88%b0-blogengine-net-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="cs"><![CDATA[Community Server]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>237</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[che@michadel.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-18 08:07:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-18 08:07:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是太棒了，很美觀哦~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Jeffrey]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chaofu@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-27 20:43:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-27 20:43:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問BlogEngine.Net支不支援Multi User?

--
請輸入: &quot;吳剛伐桂&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-28 01:43:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-28 01:43:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以的，不過它不像 CS 的模式 (CS每個作者有獨立的版面，布景等等)，而是多個作者共同經營一個部落格的模式... 當然也是可以分別列出每個作者的文章啦，但是還是歸在同一個部落格下。

--
請輸入: &quot;海娘娘永遠是對的&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-28 06:34:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-28 06:34:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jeffrey ?!

嗯，應該是我看錯人，沒事(路過)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-28 16:48:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-28 16:48:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯, 你看錯了 (H)

--
請輸入: &quot;年年行大運&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>242</wp:comment_id>
			<wp:comment_author><![CDATA[wookaooo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[odoing@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-20 02:40:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-20 02:40:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[怎么安装的啊 我只是用Microsoft Web平台安装到了本地服务器 http://localhost/blog/ 怎么弄到空间里去啊 怎么这么麻烦 不能直接上传文件到空间运行安装码]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Canon Raw Codec for Vista / XP x64 ...</title>
		<link>http://columns.chicken-house.net/2008/06/11/canon-raw-codec-for-vista-xp-x64/</link>
		<pubDate>Wed, 11 Jun 2008 02:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/11/Canon-Raw-Codec-for-Vista-XP-x64-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
沒想到還真的有人在寫這東西...
</p>
<p>
<a href="http://www.ardfry.com/cr2-codec/" title="http://www.ardfry.com/cr2-codec/">http://www.ardfry.com/cr2-codec/</a>
</p>
<p>
&nbsp;
</p>
<p>
只不過這不是 CANON 官方出的，是有高手自己在寫，拿來賣錢用的... USD 29.95 元... 現在預購只要 USD 19.95...
</p>
<p>
我怎麼幫它打起廣告來了... 其實真的應該給他鼓勵一下，不過 20 元也不是小數目，這篇就當贊助作者的廣告吧，哈哈...
</p>
<p>
我自己? 之前找到的<a href="/post/e5868de5baa6e68f9be8a39d-Vista--Vista-Ultimate-(x64).aspx">在 Vista x64 下，用 WOW 來跑</a>的爛招就加減用... 我看看 CANON 啥時才會推出官方的 x64 版本 codec ... @_@
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2008-06-11 02:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-11 02:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-raw-codec-for-vista-xp-x64]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.natureandme.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-15 02:47:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-15 02:47:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，我正在编写一个免费的观鸟记录软件，原来的平台是WM6的，现在移植到PC上了，鸟友要求添加一个管理鸟儿的照片的功能，我现在正在弄WPF,读取RAW文档的图片信息，并且要能够和explorer一样能够预览thumbnail.无意当中google到你的博客，发现你对WPF很有经验，可否给点意见，现在RAW文档的Exif信息读不出来，JPG的可以。另RAW读取速度超慢，效率太低，还有如何生成thumbnail可以做预览？
我的blog http://www.natureandme.net 
my email lidan@vip.163.com
多谢指教！

DanLee

--
BotCheck(請計算答案: 5 - 4 =  1)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>244</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-16 03:50:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-16 03:50:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最近正好在忙著把部落格從 CommunityServer 轉移至 BlogEngine.NET 上，回的慢了點。

你碰過的問題我正好都碰過，也許對你有些幫助。

1. RAW 讀取及產生縮圖的效能太慢，這我也很頭痛，目前無解。我過去的幾篇文章都是把重點擺在如何能提高整體的轉檔效能，但是對單一張 RAW FILE 轉檔的效能則是完全派不上用場 :&lt;

如果你要做的也是批次轉多張 RAW 檔，倒是可以參考看看我過去的幾篇文章

http://columns.chicken-house.net/post/Canon-CR2---gt3b-JPEG-e9809fe5baa6e58aa0e5808d-e8a9b2e68f9b-Core2-Quad-e4ba86e5989b.aspx

http://columns.chicken-house.net/post/Canon-Raw-Codec-2b-WPF-12c-WPF-Image-Codec2c-Metadata.aspx

http://columns.chicken-house.net/post/e5898de8a880-Canon-Raw-Codec-12-2b-NET-Framework-30-(WPF).aspx



2. RAW 的 METADATA 讀不出來，過去我也吃盡了苦頭。最主要的問題有兩個，你可以看看你的程式是否碰到一樣的問題...
- 你讀取的是整個 Image 的 metadata ? 還是單一 frame 的 metadata ? frame 才讀的到資料
- Metadata 物件只是個空殼，過去我犯的錯誤是取得 Metadata 就把其它物件 CLOSE 了，結果讀取錯誤。你必需留著其它的物件 (像 file stream, image 等等) 直到相關資訊處理完畢後才能 CLOSE。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>245</wp:comment_id>
			<wp:comment_author><![CDATA[DanLee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lidan@vip.163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-22 00:49:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-22 00:49:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多谢您的回复！我再仔细研究一下。买了WPF的书正看呢。不过里边没有写关于读取RAW和EXIF信息的部分。都是一些入门的WPF的基础知识。
我在codeproject搜到一些code,里边有讲如何读取exif信息，但是文件我改为cr2，exif就读不出来了。我估计原因就如你说的一样。我的目的倒不是转换格式raw2jpg.这个工作就是DPP做起来也不轻松。我现在只希望能够产生一个thumbnail就可以了。我仔细观察了佳能DPP的工作模式，好像它的RAW预览图片有可能只是读取了一部分的RAW数据，这样预览起来速度更快一点，当然图片的质量肯定下降了。但是这种方法不知道canon 的 codec有没有开放或者WPF里有没有这样的method.
http://69.10.233.10/KB/graphics/EXIF_Info_in_NET_30.aspx
郁闷。。。。。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>246</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-23 03:59:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-23 03:59:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[簡單的整理了一下你的問題，請參考我貼的這篇新文章:

http://columns.chicken-house.net/post/e588a9e794a8-WPF-e8ae80e58f96-EXIF-e58f8ae7b8aee59c96.aspx

你可以參考你找到那篇 Code Project 的 CODE，裡面整理好的那張對照表，你可以拿來搭配我的 SAMPLE CODE 使用。

縮圖的部份請見我的第二個範例，照我的寫法就會有你期望的效果，縮圖時只會讀取一部份的 RAW DATA 加快速度。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>換了四核心，MCE就掛了...</title>
		<link>http://columns.chicken-house.net/2008/06/08/%e6%8f%9b%e4%ba%86%e5%9b%9b%e6%a0%b8%e5%bf%83%ef%bc%8cmce%e5%b0%b1%e6%8e%9b%e4%ba%86/</link>
		<pubDate>Sun, 08 Jun 2008 17:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/06/08/e68f9be4ba86e59b9be6a0b8e5bf83efbc8cMCEe5b0b1e68e9be4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
&nbsp;
</p>
<p>
這年頭，標題不下的聳動一點就沒人看了... 不過我生性保守，這標題可是一點也不誇張... 補一下前陣子狠下心買了顆 Q9300 來給 SERVER 用，發生的小障礙及處理過程。新的 CPU 裝在 SERVER 上， SERVER 關在機櫃裡看不到摸不到，當然是先裝到桌機享受一下，桌機用的是 Vista，平常會用用 MCE 看電視，還有錄電視下來慢慢看...
</p>
<p>
把桌機的 E6300 換掉，換 Q9300 上去，不錯，什麼東西都很正常，速度也快，溫度也低...。正當一切都很美好的時後，想說開個 MCE 來看電視，嘖... 掛了? 出現這個美化過的 General Protection Failure 畫面:
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/MCE_FB80/clip_image002_3.jpg" alt="" width="486" height="245" />
</p>
<p>
&nbsp;
</p>
<p>
點了建議選項，無解。點了 DETAIL 下去看，也看不出個所以然...
</p>
<p>
<img src="/wp-content/be-files/WindowsLiveWriter/MCE_FB80/clip_image002%5B6%5D_thumb.jpg" alt="" width="486" height="415" /> 
</p>
<p>
&nbsp;
</p>
<p>
Microsoft 這次算是有良心，沒有再寫 &quot;請聯絡您的系統管理員&quot; ... 別再叫 USER 找系統管理員了，最好這種五四三的問題跟外星人的數字，系統管理員都看的懂... 
</p>
<p>
&nbsp;
</p>
<p>
看了這些資料，也看不出問題在那，換了 Media Player 來播放之前 MCE 錄下來的 *.dvr-ms 也是出現一樣的錯誤，連 Media Player Classic 通通都一樣，害我懷疑起是不是 Microsoft 的 codec 寫的不好，在四核心CPU上會有什麼怪問題發生?
</p>
<p>
&nbsp;
</p>
<p>
不過越看越不對，隨便查了一下 GOOGLE，有一堆人用 Q9300 用 MCE 用的好好的啊... 回頭再來看看詳細的資訊，看到比較特別的，錯誤模組: Indiv01.key ? 這不像是 DLL 還是啥的，怎麼會錯在這? 就順手 GOOGLE 了一下...
</p>
<p>
沒啥用，只知道這是 Microsoft 的 DRM 用的秘鑰，再去查 Microsoft 的 support center，這次像樣多了，找到這篇:
</p>
<p>
<a href="http://support.microsoft.com/kb/891664">KB891664: 如果您的電腦硬體經過變更，Windows Media Digital Rights Management 系統可能會無法運作</a>
</p>
<p>
&nbsp;
</p>
<p>
真是它ㄨㄨㄨㄨㄨ的，找到問題了... 原來各種加秘的演算法都需要一個 KEY，來識別使用者，或是某一份發佈的媒體檔案。為了讓每一台 PC 有不同的 KEY，因此 Microsoft 會有自己的演算法來替每台 PC 產生一組 KEY，就是 Indiv01.key 這檔案的內容。產生 KEY 的過程中，硬體組態 (包含可用的 CPU 數量) 是來源的一部份，因此換了顆 CPU (核心個數有變化)，就會被 Microsoft 視為是換了台電腦了...。
</p>
<p>
&nbsp;
</p>
<p>
就是這鳥問題，MCE 認為我換了台新電腦，又用舊的 KEY，判定是 &quot;違法&quot; 的複製 Media，就給我擋了下來... 照著這篇文章的步驟，可以清除 DRM 的授權，一切重頭來過，果然就正常了! BINGO。
</p>
<p>
&nbsp;
</p>
<p>
有點鳥的問題，嘖嘖... 真正解決花了我十分鐘的時間 (包含 REBOOT)，不過在這之前卻懹我懊惱了好幾個小時...，這裡借題發洩一下 [:@]... 也給剛好也用 MCE 想換四核心 CPU 的人參考一下...
</p>
<p>
&nbsp;
</p>
<p>
這個故事告訴我們，沒事別亂換硬體，要換硬體請準備好耐心及奮戰到底的決心，不然就準備好重灌的準備... Orz
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2008-06-08 17:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-08 17:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%9b%e4%ba%86%e5%9b%9b%e6%a0%b8%e5%bf%83%ef%bc%8cmce%e5%b0%b1%e6%8e%9b%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>247</wp:comment_id>
			<wp:comment_author><![CDATA[Honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-10 08:57:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-10 08:57:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我想問題點是Microsoft 的 Error Message 做的太含蓄了.如果來個.. "你盜版 $#%^$#@%# "之類的..你大概就不會懊惱了..

--
BotCheck(請輸入 "年年行大運" : 年年行大運)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>248</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-10 09:40:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-10 09:40:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈, 很難得的是, 這套 vista ultimate 是正版的 [:D]

--
BotCheck(請輸入 "吳剛伐桂" : 吳剛伐桂)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>該如何學好 &quot;寫程式&quot; #2. 為什麼 programmer 該學資料結構 ??</title>
		<link>http://columns.chicken-house.net/2008/10/01/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-2-%e7%82%ba%e4%bb%80%e9%ba%bc-programmer-%e8%a9%b2%e5%ad%b8%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b/</link>
		<pubDate>Wed, 01 Oct 2008 04:09:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/01/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-2-e782bae4bb80e9babc-programmer-e8a9b2e5adb8e8b387e69699e7b590e6a78b-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[自從貼了上一篇 [<a href="/post/GoodProgrammer1.aspx">該如何學好 "寫程式"</a>] 一文，原本以為這種老生常談的內容沒什麼人會看，沒想到還有人給我回應.. :D 原來這種文章還是有市場的。接下來這篇，是延續上一篇，來談談要成為合格的 programmer, 我認為應該要俱備的 "內功" 是什麼。上篇我提到，我認知的 programmer，就是要有實作 (CODING) 的能力。要有能力把技術規格 (像是輸入格式，操作介面等等) 具體的寫成可以執行的程式碼。當然是要寫的又快又好，穩定不當機又沒 BUG ...。

&nbsp;

在這個階段 (programmer)，會一些具體的工具或是技術是必要的，但是它絕對不是主角。如何去運用你的工具才是關鍵。我認為 "<strong><span style="color: #ff0000;">資料結構</span></strong>" 就是能正確運用你的工具 (程式語言及函式庫) 最重要的知識。我常看到很多會一堆 "先進" 的技術，卻寫出很可笑的 code ... 。這種例子太多了，兩層迴圈擺錯順序，或是某些動作 *不小心* 擺到迴圈內，多花了好幾倍的時間在做冤枉事...。這種例子我通通把它規在基本功夫不好，或是常聽的邏輯觀念不佳。所以在上一篇我會提到，好的 programmer 至少能滿足我講的三個基本要求:
<ol>
	<li><span style="color: #008000;">丟一付洗過的撲克牌給你 (不要多，黑桃1 ~ 13就好)，你知道怎麼用 Bubble Sort / Quick Sort 的步驟把它排好嗎? 丟一個陣列，裡面隨便打幾個數字，你能寫程式把它由小到大排好印出來嗎? </span></li>
	<li><span style="color: #008000;">假設記憶體夠大的話，你有辦法把一百萬筆通訊錄資料讀到記憶體內 (用什麼物件都隨你)，然後還能用很快的速度找到你要的資料嗎? 不同的搜尋方式，你知道該用什麼樣的方式找才有效率嗎? </span></li>
	<li><span style="color: #008000;">以台灣高速公路為題 (中山高、北二高、國道二號)，你有辦法寫程式，讓使用者指定起點跟終點的交流道，然後替它找出建議的路線嗎? (把延路經過的交流到跟收費站列出來就好)</span></li>
</ol>
第一個只要你知道排序的方法，剩下的就是你有沒有本事把腦袋的想法寫成 CODE 而以。這個要求大部份的人都能過關，我就不多作解釋了。來看看第二個要求，它考驗的是你該用什麼樣的方式 "SEARCH" ?

我就以 C# 為例來說明這個問題該怎樣思考。以資訊系的 "資料結構" 這門課的角度來思考，你應該要找出個適合的資料結構 (Binary Tree, Heap, Linked List ... etc) 來存放這堆資料。不過資料結構這麼多種，你都要自己做嗎? .NET framework 已經在 System.Collection.Generic 這命名空間內提供了一堆好用的 Collection 給你用了，你該怎麼挑選才好? 課堂上老師不會教你實作的東西，而公司的前輩也不會教你這種基礎的東西，那你該怎麼把這兩者應用在一起?

就先從 (2) 的例子開始吧! 通訊錄最基本的要求，就是儲存的資料要能按照姓名/EMAIL/電話號碼排序。輸入名字後，要能很快的找到這個人完整的通訊錄。如果能像手機一樣，邊輸入名字就邊過濾名單，直到名字打完人就找到的話更好。在宣告了 class ContactData { ... } 類別來處理一筆資料後，下一步你會怎麼做?

&nbsp;
<div><strong>ContactData 類別定義</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true ">public class ContactData
{
    public string Name;
    public string EmailAddress;
    public string PhoneNumber;
    public void OutputData(TextWriter writer)
    {
        writer.WriteLine("Name:\t{0}", this.Name);
        writer.WriteLine("Email:\t{0}", this.EmailAddress);
        writer.WriteLine("Phone:\t{0}", this.PhoneNumber);
        writer.WriteLine();
    }
}</pre>
&nbsp;

&nbsp;

開始來看看，有基本功夫的 programmer 跟一般 "熟 C# 熟 .NET" 的 programmer 差在那裡吧! 程式很簡單，先產生一百萬筆假資料，然後去找 A123456 這個人的資料，接著再找出手機號碼為 0928-1234 開頭的所有人資料。事後會分別計算花掉的時間跟程式佔用的記憶體大小。

</div>
&nbsp;

1. 大概有 70% 的人，會選擇用 List&lt;ContactData&gt;，不為什麼，只因為他沒想到別的方法，或是直覺就覺的要這樣寫... 來看看這樣的 code:
<div><strong>用 List&lt;ContactData&gt; 寫的範例程式</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true ">private static void Sample1()
{
    Stopwatch timer = new Stopwatch();
    timer.Reset();
    timer.Start();
    // 產生假資料庫
    List&lt;ContactData&gt; contacts = new List&lt;ContactData&gt;();
    {
        for (int index = 999999; index &gt;= 0; index--)
        {
            ContactData cd = new ContactData();
            cd.Name = string.Format("A{0:D6}", index);
            cd.EmailAddress = string.Format("{0:D6}@chicken-house.net", index);
            cd.PhoneNumber = string.Format("0928-{0:D6}", index);
            contacts.Add(cd);
        }
    }
    Console.WriteLine("建資料花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
    timer.Reset();
    timer.Start();
    {
        // 搜尋 A123456 這個人的資料
        ContactData data = null;
        data = contacts.Find(delegate(ContactData x) { return x.Name == "A123456"; });
        Console.WriteLine("搜尋 A123456 花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
        //data.OutputData(Console.Out);
    }
    timer.Reset();
    timer.Start();
    {
        // 列出電話號碼為 0928-1234* 開頭的使用者
        foreach (ContactData match in contacts.FindAll(delegate(ContactData x) { return x.PhoneNumber.StartsWith("0928-1234"); }))
        {
            //match.OutputData(Console.Out);
        }
        Console.WriteLine("搜尋 0928-1234* 資料花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
    }
    Console.WriteLine("共使用記憶體: {0}MB", Environment.WorkingSet / 1000000);
}</pre>
&nbsp;

</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>憑良心說，寫的出這樣程式碼的人，已經算是高手了。因為這樣已經用到不少高級技巧，像是 delegate, anonums method, 還有知道 List&lt;T&gt;.Find( ) 怎麼用等等... 以下是他的執行結果:</div>
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/2.programmer_148DA/image_3.png" alt="image" width="459" height="143" border="0" />

&nbsp;

&nbsp;

2. 更進階一點的人 (另外 25%)，也許會額外加上 Dictionary 當作索引，來改善 search A123456 這筆資料的效率...
<div><strong>加上 Dictionary 當作索引的 code</strong><span class="copycode">[copy code]</span></div>
<div></div>
<div>
<pre class="lang:default decode:true ">// 略
// 產生假資料庫
Dictionary&lt;string, ContactData&gt; name_index = new Dictionary&lt;string, ContactData&gt;();
List&lt;ContactData&gt; contacts = new List&lt;ContactData&gt;();
{
    for (int index = 999999; index &gt;= 0; index--)
    {
        ContactData cd = new ContactData();
        cd.Name = string.Format("A{0:D6}", index);
        cd.EmailAddress = string.Format("{0:D6}@chicken-house.net", index);
        cd.PhoneNumber = string.Format("0928-{0:D6}", index);
        name_index.Add(cd.Name, cd);
        contacts.Add(cd);
    }
}
Console.WriteLine("建資料花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
timer.Reset();
timer.Start();
{
    // 搜尋 A123456 這個人的資料
    ContactData data = name_index["A123456"];
    //data = contacts.Find(delegate(ContactData x) { return x.Name == "A123456"; });
    Console.WriteLine("搜尋 A123456 花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
    //data.OutputData(Console.Out);
}
// 略</pre>
&nbsp;

</div>
<div></div>
<div></div>
<div></div>
<div>會寫到這樣，也算強者了。不但對 C# 夠熟，也有用 Collection 物件來當作索引的觀念。程式碼只有兩行不同，一個是多宣告了 Dictionary 物件 (第3行)，另一個是搜尋的地方 (第21行)。來看看執行結果:</div>
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/2.programmer_148DA/image_6.png" alt="image" width="474" height="142" border="0" />

&nbsp;

果然有效，建資料從 5151ms 變成 5843ms, 記憶體從 288MB 變成 340MB，不過 search(A123456) 卻快的嚇人， 0ms... 破錶了!

&nbsp;

但是這樣的 CODE 老實說只能算是及格而以，因為它沒有挑對 Collection 來用。怎麼說? 我的理由有這幾個:
<ol>
	<li>List&lt;T&gt; 的搜尋效能不好</li>
	<li>沒能滿足用多種排序方式的要求 (需要時要當場執行 List&lt;T&gt;.Sort( ))</li>
</ol>
如果這是某個 Mail Client 內的 CODE，產品經理一定會問:

"如果資料從一百萬筆，變成一億筆，程式的表現會是什麼情況?"

&nbsp;

有沒有基本功夫，這裡開始有差別了。唸過資料結構的都知道有個叫 "時間複雜度" (<a href="http://en.wikipedia.org/wiki/Time_complexity">time complexity</a>) 的東西，用 O(n) 表示。O(n) 代表花費的時間會跟資料比數成線性的成長。100倍的資料大概就要花上100倍的時間.. 如果是 O(n^2) 的演算法，則 100 倍的資料就會花上 10000 倍的時間。

MSDN 專業的地方就在這裡。Microsoft 真的很細心的在每一個 Collection 物件的說明文件上，都會標上 time complexity。有唸書有保佑，瞄到那行字我的問題就都解決掉了。先來看看 List&lt;T&gt; 的行為:

&nbsp;

<a href="http://msdn.microsoft.com/en-us/library/3wcytfd1.aspx"><strong>List&lt;T&gt;.Add(T item)</strong></a>

<span style="color: #0000ff;">If </span><a href="http://msdn.microsoft.com/en-us/library/27b47ht3.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;"> is less than </span><a href="http://msdn.microsoft.com/en-us/library/y52x03h2.aspx"><span style="color: #0000ff;">Capacity</span></a><span style="color: #0000ff;">, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(n) operation, where n is </span><a href="http://msdn.microsoft.com/en-us/library/27b47ht3.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;">.</span>

&nbsp;

<a href="http://msdn.microsoft.com/en-us/library/fh1w7y8z.aspx"><strong>List&lt;T&gt;.FindAll(Predicate&lt;T&gt; match)</strong></a>

<span style="color: #0000ff;">This method performs a linear search; therefore, this method is an O(n) operation, where n is </span><a href="http://msdn.microsoft.com/en-us/library/27b47ht3.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;">.</span>

&nbsp;

再來看看 Dictionary&lt;TKey, TValue&gt; 的行為:

<a href="http://msdn.microsoft.com/en-us/library/k7z0zy8k.aspx"><strong>Dictionary&lt;TKey, TValue&gt;.Add(TKey key, TValue value)</strong></a>

<span style="color: #0000ff;">If </span><a href="http://msdn.microsoft.com/en-us/library/zhcy256f.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;"> is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(n) operation, where n is </span><a href="http://msdn.microsoft.com/en-us/library/zhcy256f.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;">.</span>

&nbsp;

<a href="http://msdn.microsoft.com/en-us/library/9tee9ht2.aspx"><strong>Dictionary&lt;TKey, TValue&gt;.Item[TKey key] {get; set;}</strong></a>

<span style="color: #0000ff;">Getting or setting the value of this property approaches an O(1) operation.</span>

&nbsp;

好，答案出來了。當資料變成一百倍時，List.Add 是 O(1), 所以每加一筆資料的時間不會越來越久 (safe). 但是搜尋時間是 O(n), 意思是現在找 A123456 要花 60ms, 未來有一億筆就要花 60x100=6000ms=6sec, 找 0928-1234* 則要花 240x100=24000ms=24sec... 以這樣的成長速度，記憶體還沒用完，你的程式就會慢到受不了了。有沒有其它的解決辦法?

&nbsp;

換成 Dictionary 就酷多了，搜尋時間是 O(1), 代表不管你有幾筆，搜尋的時間都差不多。為什麼? MSDN 說的很清楚...

<a title="http://msdn.microsoft.com/en-us/library/xfhwa508.aspx" href="http://msdn.microsoft.com/en-us/library/xfhwa508.aspx"><strong>http://msdn.microsoft.com/en-us/library/xfhwa508.aspx</strong></a>

<span style="color: #0000ff;">The Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) generic class provides a mapping from a set of keys to a set of values. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) class is implemented as a hash table.</span>

&nbsp;

什麼是 HashTable? 又是一個好例子，唸過資料結構的都知道吧? 我就不多說了，請看 wiki:

<a title="http://en.wikipedia.org/wiki/Hashtable" href="http://en.wikipedia.org/wiki/Hashtable">http://en.wikipedia.org/wiki/Hashtable</a>

&nbsp;

一樣是看 MSDN 文件，有沒有唸過資料結構，到這裡就差這麼多了。體會到學校教的東西真的有用了嗎? 這個例子還沒完，再看下去。

&nbsp;

<span style="text-decoration: line-through;">事實上，以上的實作方式都不合格。LIST 效能不好，Dictionary 拿來作索引有個致命的缺點: </span>

<span style="text-decoration: line-through;"><strong><span style="color: #ff0000;">它的 KEY 不能重複!!!</span></strong> </span>

<span style="text-decoration: line-through;">是的，對應到資料庫的話，它就好像是個 unique key 一樣。拿來當 NAME 的索引還沒問題，拿來當其它欄位的索引就糟糕了，別說效能問題，連用都不能用。 </span>

<span style="text-decoration: line-through;">另外，針對排序的問題也是無解，這是 HashTable 的特性，要照順序排，就要另請高明。</span>

&nbsp;

事實上，以上的實作方式都不合格。List 搜尋的效能不算好，而 Dictionary 也只能處理 exact match 的狀況，同時也無法處理需要排序的問題。

&nbsp;

唸過書的再想想，這時該怎麼辦?

標準解法是分別照這幾個欄位排序，然後用 Binary Search. 這才是正解。因為排序好的資料就像一般資料庫的 index, 可以讓你很容易的 order by, 同時又能讓你很快的找到你要的資料，甚至是列出某一段範圍的資料都沒問題。

不過寫成程式要怎麼作? MSDN 就在手上嘛，System.Collection.Generic 就把它當購物網站，逛一逛... 看有沒有其它合用的。

&nbsp;

不錯，又找到兩個: <a href="http://msdn.microsoft.com/en-us/library/ms132319.aspx">SortedList</a> 跟 <a href="http://msdn.microsoft.com/en-us/library/f7fta44c.aspx">SortedDictionary</a>，還是一樣，那一個比較合適? MSDN 都寫的很清楚，足夠你判斷了，前題是資料結構教的幾個基本觀念 (像是前面講的 Hash Table, Time Complexity 等) 人家寫出來你要看的懂，看的懂就知道該挑那一個。

&nbsp;

至於挑選的過程我就不多說了。我最後決定用 SortedList, 列一下這個 Collection 的特性:

<a href="http://msdn.microsoft.com/en-us/library/ms132330.aspx"><strong>SortedList.Add( )</strong></a>

<span style="color: #0000ff;">This method is an O(n) operation for unsorted data, where n is </span><a href="http://msdn.microsoft.com/en-us/library/ms132377.aspx"><span style="color: #0000ff;">Count</span></a><span style="color: #0000ff;">. It is an O(log n) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(n).</span>

&nbsp;

新增一筆需要的時間是 O(n), 唯一特例是加在最後面，而且沒引發 resize 的動作，就是 O(log n)。至於排序? 通通是 O(1)，因為在 Add() 把資料加進來時就排好序了，所以 Add() 花的 O(log n) 就是在排序。要照順序印資料或找資料，完全不費吹灰之力，拿來印就是了。不過比較可惜的是，SortedList 並沒有提供 BinarySearch，因此要找 "0928-1234*" 這樣的資料要辛苦點，自己用 BinarySearch 的邏輯，簡單寫一下吧。如果前面的關卡都過了，這應該不難吧?

改用 SortedList 最大的缺點就是載入資料時會比較慢，不過其它在程式的處理上，還有效能都更貼近這個題目的需求。來看看程式碼，這次我用了兩個 SortedList，分別代表替 name 及 phone number 作排序:

&nbsp;
<div><strong>改用 SortedList&lt;&gt; 的範例</strong><span class="copycode">[copy code]</span></div>
<div></div>
<div>
<pre class="lang:default decode:true ">private static void Sample3()
{
    Stopwatch timer = new Stopwatch();
    timer.Reset();
    timer.Start();
    // 產生假資料庫
    SortedList&lt;string, ContactData&gt; name_index = new SortedList&lt;string, ContactData&gt;();
    SortedList&lt;string, ContactData&gt; phone_index = new SortedList&lt;string, ContactData&gt;();
    {
        for (int index = 0; index &lt; 1000000; index++)
        {
            ContactData cd = new ContactData();
            cd.Name = string.Format("A{0:D6}", index);
            cd.EmailAddress = string.Format("{0:D6}@chicken-house.net", index);
            cd.PhoneNumber = string.Format("0928-{0:D6}", index);
            name_index.Add(cd.Name, cd);
            phone_index.Add(cd.PhoneNumber, cd);
        }
    }
    Console.WriteLine("建資料花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
    timer.Reset();
    timer.Start();
    {
        // 搜尋 A123456 這個人的資料
        ContactData data = name_index["A123456"];
        Console.WriteLine("搜尋 A123456 花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
        //data.OutputData(Console.Out);
    }
    timer.Reset();
    timer.Start();
    {
        // 列出電話號碼為 0928-1234* 開頭的使用者
        for (int pos = BinarySearch&lt;string, ContactData&gt;(phone_index, "0928-1234");
            pos &lt; BinarySearch&lt;string, ContactData&gt;(phone_index, "0928-1235");
            pos++)
        {
            //phone_index.Values[pos].OutputData(Console.Out);
        }
        Console.WriteLine("搜尋 0928-1234* 資料花了: {0} ticks ({1} msec)", timer.ElapsedTicks, timer.ElapsedMilliseconds);
    }
    Console.WriteLine("共使用記憶體: {0}MB", Environment.WorkingSet / 1000000);
}
private static int BinarySearch&lt;TKey, TValue&gt;(SortedList&lt;TKey, TValue&gt; index, TKey key)
{
    return BinarySearch&lt;TKey, TValue&gt;(index, key, 0, index.Count - 1);
}
private static int BinarySearch&lt;TKey, TValue&gt;(SortedList&lt;TKey, TValue&gt; index, TKey key, int start, int end)
{
    if (start == end) return end;
    int pos = (start + end) / 2;
    int compareResult = index.Comparer.Compare(key, index.Keys[pos]);
    if (compareResult == 0)
    {
        return pos;
    }
    else if (compareResult &gt; 0)
    {
        return BinarySearch&lt;TKey, TValue&gt;(index, key, pos + 1, end);
    }
    else
    {
        return BinarySearch&lt;TKey, TValue&gt;(index, key, start, pos - 1);
    }
}</pre>
&nbsp;

&nbsp;

&nbsp;

執行結果:

</div>
<img style="border-width: 0px;" src="/wp-content/be-files/WindowsLiveWriter/2.programmer_148DA/image_9.png" alt="image" width="425" height="147" border="0" />

&nbsp;

至於前面產品經理問的問題，各位就試著自己到 MSDN 找看看答案吧! 比較過之後，你就會瞭解為什麼我會挑選 SortedList .. 我只挑 SEARCH 時間來看，List 的搜尋是 O(n), 而 SortedList 的搜尋是排序過的資料作 BinarySearch, 找找書就知道是 O(log n), 分別來比較一下:

當 N 等於 1000000 時:

List: <span style="color: #ff0000;">3131861</span> ticks
SortedList: <span style="color: #ff0000;">39294</span> ticks (快 80 倍)

&nbsp;

推算一下，N 放大為 100 倍 (100000000) 時:

List: <strong><span style="color: #0000ff;">3131861</span></strong> x 100000000 / 1000000 = <span style="color: #ff0000;"><strong>313186100</strong></span> ticks
SortedList: <strong><span style="color: #0000ff;">39294</span></strong> x log 100000000 / log 1000000 = <strong><span style="color: #ff0000;">52392 </span></strong>ticks (快 5978 倍)

&nbsp;

看到了嗎? 換個 Collection 物件，對於 Search 這個動作，一百萬筆資料時差了 80 倍，當資料成長一百倍 (100000000 筆) 時，搜尋速度差異爆增為近 6000 倍! 這就是資料結構或是演算法的差異，這樣的差異已經大到其它地方最佳化怎麼作都補不回來的地步，唯一一個關鍵就是要用對演算法!

&nbsp;

終於打完這篇了。沒想到前一篇寫一堆老生常談的話，這次又變成一堆 sample code 了。不過我的目的就是讓各位瞭解，基礎一定要顧好啊，不然寫程式是一定會碰到瓶頸的。這次從很簡單的需求，帶到資料結構的觀念，再帶到 MSDN 裡面特別標記的資訊...。看完後應該不會再有人說學校教的東西沒用了吧?

&nbsp;

有網友問過我有沒有推薦什麼書? 很抱歉，我也只看過課本而以 ... 哈哈，這些純粹是出來工作後，無意間還想到要去翻翻課本得來的經驗。其實這種例子很多，過去我常貼的 multi-thread 的文章也是很多這樣的例子，只不過課本從資料結構換成作業系統了，這個主題才寫到 1-2, 後面還有, 有什麼看法或心得就請留在回應給我吧! 如果能支持一下旁邊的讚助商的話也算是種鼓厲啦.. 敬請期待下一篇..

--

調查一下，有人看這篇之前就知道 SortedList 嗎? 留個話給我吧，我很好奇這種東西有多少人會去用... :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2008-10-01 04:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-01 04:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-2-%e7%82%ba%e4%bb%80%e9%ba%bc-programmer-%e8%a9%b2%e5%ad%b8%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<category domain="category" nicename="good_programmer"><![CDATA[系列文章: 如何學好寫程式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[Alan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alan.li@msa.hinet.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-01 09:36:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-01 09:36:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好

我31歲了，去年才開始學用C#寫程式，對寫程式有很大的興趣，也想把程式學好，所以平常買了很多的書在家自修，在公司也寫了一些程式上線使用中，可是總覺得對寫程式還是似懂非懂的感覺，在看了您的文章之後，才發覺或許是我從來沒學過資料結構以及您所提到的演算法，所以寫起程式來總好像有種「能執行、但又怪怪的」的感覺。也去光華搜尋過資料結構的相關書籍，但都只找到C/C++的，本想問您是否可以推薦一兩本C#的相關書籍，不過上面已經有答案了，呵！那我還是自己找找看好了。

您在「黑暗執行緒」裡的程式範例，我目前正在研究中，不過大部分還看不太懂，有問題再跟您請教，好嗎？感謝您寫的文章，對於我這個寫程式的菜鳥來說，有很大的幫助哦！謝謝。

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-01 11:01:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-01 11:01:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[找找 &quot;data structure using c#&quot; 吧，有找到幾本，不知道有沒有中譯版?

不然 MSDN 也有一小段:
http://msdn.microsoft.com/en-us/library/ms364091(VS.80).aspx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-01 12:36:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-01 12:36:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[一直在 Google Reader 潛水，一直翻到最後一句…不得不浮上來…
SortedList 很好用哩，我只是沒有仔細去比較，看 MSDN 的 O(1) O(N) 就拿來用了。
我當時直覺是懶，搞個 List 還不能 obj[xxx] 抓到我要的資料，還要 Find or IndexOf ，機車…
又開始了懶熊的性格，後來找到 SortedList 讚!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenny2061@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-01 18:27:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-01 18:27:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我知道有SortedList，但是我從來沒有機會用到它，或許是我的經驗還不足吧！

知道它的原因是我在解決一些問題的時候會看一下MSDN或Intellisense，所以知道它的存在。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-01 19:57:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-01 19:57:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[補了一小段，update 一下 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-04 23:54:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-04 23:54:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您不仅程序写得好，文笔也好，用生动的文笔在一些看似简单的问题上做深入的讲解。非常喜欢您的文章，谢谢！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[KEN]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenlai.tw@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-07 10:31:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-07 10:31:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝您又補了這一長篇又精闢入裡的文章來釋義，
總算有點方向知道該怎麼做了，
也更知道自己有多才疏學淺了，
小弟幾乎都不知道您提及的技術及資料結構用法。

非常謝謝，我會努力多按幾次AD的。;)

P.S:既然市面上沒有此類書，您的文筆又這麼好且有實務經驗搭配，實在比教條式的書來得實用多了，有沒有考慮乾脆自己寫一本? ;) 我會很期待的。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-08 12:25:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-08 12:25:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[KEN:

謝謝支持!

寫書我沒這打算，一來題材沒大到湊的到一本書，二來這種書也賺不到什麼錢吧? 哈哈..
第三最重要的一點，我想到要寫整本書就懶了 :P ，光是兩個月想投稿一篇文章就辦不到了，老是拖到三個月... 更別提寫書了

不過我 BLOG 還是會繼續寫啦 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-10 02:11:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-10 02:11:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真糟糕，同事告訴我我才發現，SortedList 的 KEY 也是不能重複...
不過也因為這樣，找到了其它更適合的 solution .. 我整理一下再貼出來... :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>117</wp:comment_id>
			<wp:comment_author><![CDATA[小雷]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[su321752a@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-14 16:15:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-14 16:15:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小弟深有同感，一直以為用不到學校教的東西。但是程式愈寫愈多才發現，其實自已一直
在用以前學校教的東西在學習新技術及觀念。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>118</wp:comment_id>
			<wp:comment_author><![CDATA[leem]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[leem@edirect168.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-14 22:24:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-14 22:24:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SortedList我是看這篇文章後才知道的，謝謝您分享這麼好的文章。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>119</wp:comment_id>
			<wp:comment_author><![CDATA[Johnny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[anonymous@phone.idv.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://phone.idv.tw/cs2</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-15 17:51:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-15 17:51:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我記得沒錯的, SortedList 應該早在王國榮的那本書就有提到了, 會用的人應該很多才對。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>120</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-16 19:25:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-16 19:25:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實 SortedList 什麼時後出來? .NET 1.0 就有非泛型的版本， .NET 2.0 開始支援 Generic 之後就有現在的版本了。真要說源頭，應該是當年 (2000?) 推出的 .NET Framework 1.0 SDK。

重點應該是要有能力判斷用的 LIB 適不適合，可以怎麼去找更合適的? 看到 object design patterns 譯者 (葉秉哲) 在書序裡講到一句話講的真好: &quot;會用鐵鎚的人看到什麼都想敲下去，看到螺絲釘卻不知道還有更好用的螺絲起子一樣...&quot;

會問誰用過只是純脆好奇統計一下而已 :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>121</wp:comment_id>
			<wp:comment_author><![CDATA[salad]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[saladlife@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://saladlife.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-18 14:54:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-18 14:54:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[文章真的不錯, 首先要支持, 
但我個人意見是在開發時, 如果沒太大機會使用上超大數據量,
而且老闆迫得很近, 還是使用直觀的方法去處理比較好, 
快點完成工作, 成本考量來說是比較合理的.

不然用上一堆自己不習慣的, 而且只是服務十幾, 二十多條數據, 浪費了沒時間, 就不值了.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>122</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-18 20:15:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-18 20:15:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝支持 :D
您講的沒錯! 跟本用不到的話就不需要考慮這些了。

會有動機寫這篇，是因為實際工作上碰到很多例子... 開發人員完全不注重資料結構，測試時建個三五筆資料，結果沒錯就交差了，結果數量一多 (合理的範圍內，不是巨量) 就跑不動了... Orz.. 

其實只要對資料結構有很基本的認知，就足以避免這問題了，能判斷出使用的作法，在合理範圍內會不會慢到跑不完也就夠了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-25 13:30:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-25 13:30:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好，無意間逛到您的部落格，真的受益良多。
一開始是為了找些multiThread的文章，忽然就逛到了這裡，第一篇看的文章好像是有關於ThreadPool的吧。

對於寫程式為興趣、不是本系出身的我，看到你的這幾篇&quot;如何學好寫程式&quot;系列實在心有戚戚焉
資料結構與演算法對我來說完全陌生。
加上之前我大多使用VB6為開發工具，class的用法也很弱，正努力補強中。

現在轉戰.NET；最早繼續用ReDim X(n)管理動態陣列，後來雖改用ArrayList
對於Dictionary的知識也僅止於VB6的Collection。
直到拜讀了您的這篇文章。

今天花了一早上的時間實作眾多Collection，並與MSDN拼鬥，終於對
ArrayList、Hashtable、Dictionary、SortedList、SortedDictionary有了基礎的認識
但有了認識反而更迷惑了：
為什麼您選用SortedList而非SortedDictionary？

出自MSDN：
[quote]SortedList&lt;(Of &lt;(TKey, TValue&gt;)&gt;) uses less memory than SortedDictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;). 

SortedDictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) has faster insertion and removal operations for unsorted data, O(log n) as opposed to O(n) for SortedList&lt;(Of &lt;(TKey, TValue&gt;)&gt;). 

If the list is populated all at once from sorted data, SortedList&lt;(Of &lt;(TKey, TValue&gt;)&gt;) is faster than SortedDictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;). 
[/quote]

以您[u]改用 SortedList&lt;&gt; 的範例[/u]中，建立資料的方法為一筆一筆加入，SortedDictionary應該是比SortedList快上不少。
如果要使用SortedList一次加入較快的特性，應該先用範例二的Dictionary建立資料。
Dictionary&lt;string, ContactData&gt; name_index = new Dictionary&lt;string, ContactData&gt;();
再用SortedList去接收排序。
SortedList&lt;string, ContactData&gt; name_S_index = new SortedList&lt;string, ContactData&gt;(name_index);
類似這樣吧？(我是使用10^6個不重複亂數作為資料測試)(C#不太熟，語法有錯誤請見諒)

不過這樣都無法迴避鍵值無法重複的問題，我的想法是：
用Dictionary記錄鍵值=姓名,值=ContactData (與範例二相同)
用兩個List，List_p記錄電話，List_cd記錄ContactData
List_cd與List_p均隨List_p做sort，再對List_p作BinarySearch可得某範圍的電話
再對應到List_cd就是那範圍的人員了。

我自己也在寫部落格，記錄一些&quot;成長的腳步&quot;XD，可能會把使用眾多Collection的心得貼上，並加上參考文章來自此(網址)。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-25 19:34:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-25 19:34:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[還有，不是我想挑骨頭(沒有興趣挑骨頭...研究別人寫的程式碼常常比自己寫還累)，而是自己實作時遇到的一些問題：
您使用BinarySearch做&quot;0928-1234&quot;搜尋，但0928-1234*不只一筆，
以我的理解，您的BinarySearch的函數
if (compareResult == 0) return pos;
應該會使得搜尋到的pos不一定是0928-1234*中的第一筆或最後一筆
是否應該去掉這行，並把
else return BinarySearch&lt;TKey, TValue&gt;(index, key, start, pos - 1);
改成
else return BinarySearch&lt;TKey, TValue&gt;(index, key, start, pos);
傳回會只剩下if (start == end) return end;
這樣最後傳回的pos才一定是0928-1234*中的第一筆
同樣pos2=搜尋0928-1235也會得到第一筆
pos~(pos2-1)才是所有0928-1234*的範圍

如果理解有誤，請見諒

另外學到了function也可以用static宣告...
自己在做動態分析之類的(例如二項式係數的C(n取k)練習題)都在內部宣告靜態變數儲存結果...看到這就覺得又長了點知識]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-26 19:36:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-26 19:36:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很高興我寫的東西對你有幫助 :D 歡迎引用! 你提到的問題我回在底下:

1. BinarySearch
   如果 element 會重複，的確是要像你那樣調整。不過附帶的問題是所有呼叫的人
   都要去看看下一筆是不是也符合。這樣的話不如把 method 簽章改成這樣, 同時實作
   直接把所有符合的資料位置都抓出來..

   int[] BinarySearch&lt;....&gt;(....)

2. 我選用 SortedList 而不用 SortedDictionary 的原因很簡單，因為 SortedList
   本身的資料直接就是照順序儲存起來的。雖然 insert 花的時間慢一點，但是以我的
   應用例來說，照順序列出來的機會遠比新增資料的機會還大，我會優先考慮 read 的情況。

3. 其實你把問題想複雜了。解決的方法很簡單，要嘛解決 unique key 的問題(找個一定不會
   重複的值，如流水號)，不然就全用物件來處理 (用個自定的類別把 Key / ContactData / 
   Position 包成一包，放到 List 裡)。其它就直接用內建的 (或是 1 提到的) BinarySearch 
   就可以搞定了


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-26 21:47:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-26 21:47:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[興致沖沖的把以前寫的LIS練習題(Longest Increasing Subsequence)裡面用到的
Dim D() As type (C應該是寫成type D[] type為自訂Struct)
全部改寫成List&lt;type&gt;
發現效能反而變差...

純資料，只需要屬性，不需要內建方法
且已經知道會加入資料的筆數，可事先設定容量
List.Capacity = 10 ^ 6
ReDim D(10 ^ 6)
似乎還是陣列配合Struct的效率較佳?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-27 01:38:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-27 01:38:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[以效能來看，陣列當然最好。
以 time complexity 來看，除非 List 大小有變動，否則兩者是一樣的...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[肉肉的打內工程師]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[momo@momo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-15 20:01:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-15 20:01:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很專業的好文，我是屬於非班科出生，最近正在準備念資工在職研，
這類比較深入淺出的文章對我這類人是十分有幫助的，
尤其我真的沒時間去好好K資料結構，可是目前又是朝著架構師的走向去走，
再看您的文章之前我大概停在Sample2的程度，現在又提升了一點。
其實這類演算法的效能問題我曾經也想過，在設計商業模型的時候也會注意會不會有明顯的白癡邏輯設計，
不過因為我們的資料量沒有大到ISP業者那種程度，而且我的案子的SQL幾乎都是從0開始，
因此只要不是愚蠢的設計，剛開始根本碰不到效能瓶頸，顧客也對產品很滿意，
數十個月後變慢了，我都是建議顧客升級硬體，而由於硬體通常會指定我們轉手，因此又可以賺一手。
而且如果後面要做軟體最佳化，可以再小賺一次。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[Maxi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[maxi0361@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.dotblogs.com.tw/maxi/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-15 16:23:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-15 16:23:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[MCTS的入門書有各個collection物件的介紹
但MCTS要考完有看不完的書就是了...

不過這文章真的寫得很好,只是一般中小企業都沒有時間去做code refactoring就是了
選擇工具,就是要先做分析
如果需求是搜尋:加入是100萬:1, 那就應該用SortedList
如果是1:100萬的話就要選別的工具了
但話說回來,中小企業的軟體分析階段時程都短得可憐就是了...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[chicken867]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-18 20:08:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-18 20:08:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實我覺的，挑選正確的 collection 還不大需要到安排專門時間去作 &quot;分析&quot; 啦...
基本上開發的 programmer 本身就應該要有能力依據他開發的功能去挑選正確的 collection ..

我一直認為這些技能應該要變的跟反射動作一樣，想寫什麼樣的功能，很直覺就反應出來該用
什麼 collection 才對。比較模糊的地帶，或是有兩三種難以選擇的情況，才需要花點時間想一想。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>131</wp:comment_id>
			<wp:comment_author><![CDATA[muddy.lu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[muddy.lu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-03 14:21:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-03 14:21:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最近剛好看msdn用SortedList來cache住我的資料，方便往後搜尋
只是無聊好奇看看，網路上有沒有前輩有特殊用法，大大說得很多觀念真的受益良多
我才剛出來工作半年很多東西都來在摸索，很多也都還給課本
看完大大的文章，真該找個時間回去翻翻課本]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[毛豆]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dplayerd@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-12-30 14:50:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-12-30 14:50:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For 安德魯大

看了您的文章後，受益良多，但有些想法不是很清楚，想問一下

在改用SortedList後，您為了加速搜尋，產生了兩個SortedList來分別存放ID和Phone


但真實情況中，可能會需要更多資料欄位的查詢，是否只能依資料庫欄位增加更多的Collection來存?

若是，如何避免過渡消耗記憶體?是依照自己設計系統中欄位的重要性來增加Collection嗎?

若否，我該如何設計會比較好呢？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>133</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-04 21:38:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-04 21:38:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這其實就只是個索引而已，你不需要在每一個 SortedList 都放一份完整的資料，你只需要放物件的 reference 就夠了。

當然 SortedList 會使用一些額外的記憶體，值不值得就看你的考量了。
舉個具體一點的例子 - 一般的字典，總是會有筆劃索引，照部首的索引，照注音的索引等等... 一本有 1000 頁的字典，花個 1X 頁來放索引，讓你需要時就能很快的找到字，這是很值得的。

至於是不是每個欄位都要索引? 那當然是看需要了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>134</wp:comment_id>
			<wp:comment_author><![CDATA[Linus]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[azrael2013@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-15 21:44:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-15 21:44:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear 安德魯大大：
無意間拜讀了您的文章，小弟我也一時手癢藉用您的程式碼做了一番實驗。我的實驗主要是針對List&lt;T&gt;的查詢效能去做測試，發現到如果是使用 List&lt;T&gt;.AsQueryable.Where(r=&gt;r.Name==&quot;A123456&quot;)去做查詢的話，速度會比直接使用List&lt;T&gt;.Find(r=&gt;r.Name==&quot;A123456&quot;)要來的快上許多;另外，也有直接使用List&lt;T&gt;.Where(r=&gt;r.Name==&quot;A123456&quot;)去做測驗。查詢速度的結果是 AsQueryable&gt;Where&gt;Find ，想請教這樣是否正確呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-23 00:39:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-23 00:39:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我試的結論跟你的有些差距... 先講結論，我測的查詢速度: Find &gt; AsQueryable+Where &gt; Where
Find 是最快的。

分別用 20萬、40萬、60萬... 200萬筆資料測試，還蠻有意思的，筆數跟查詢花費的時間都是成正比
/wp-content/be-files/LINQ_TIMECOMPLEXITY_CHART.PNG

LINQ 其實跟演算法沒有太大的關係，它只是個統一各種查詢語言的規範而已。它把各種資料的查詢方式 / 語法抽像化，重點是所有的資料都用一樣的方式查詢。而實際不同型態的資料 (ex: List&lt;T&gt;, database, xml ...), 還是會用它原來的方式查詢。List 這種資料結構的搜詢 time complexity 是 O(n), 不管是直接用 Find( ) 或是用 Linq 包裝起來，結果還是 O(n), 從統計圖表都是直線就看的出來。

然而各有快慢，只不過是多包了幾層會多花一些時間而已。這些額外的開銷會影響時間，不過不影響它的 time complexity.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>136</wp:comment_id>
			<wp:comment_author><![CDATA[豬頭]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[a0928148725@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-06-17 03:58:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-06-17 03:58:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[某校學號一共4碼，並且要以45或46為開頭，請輸入學號，並判斷是否合法學號。
ps:長度要對並且還要以45或46為開頭才算是合法的學號，不然就都算是不合法


請問大大     這個題目要怎麼用C#寫出來??]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[小明]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[free_me@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-16 17:17:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-16 17:17:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[版主您好:
         我以您的sample code改成VB語法進行測試 , 如果data不是1百萬 , 而是1千萬 , 則使用sortedlist在建資料部份會比dictionary及list慢很多 , 而在search部份 , 我改為以下搜尋的比較基礎 , dictionary也是比sortedlist快  , 其實以dictionary的搜尋time compleixty為O(1) , 顯然以比較單一筆資料來說 , dictionary 仍然是首選 , 至於如果是search出0928-1234*這樣區段資料則可能是如比較適合 sortedlist吧.

   For i = 1 To 10000
            cd = name_index(String.Format(&quot;A{0:D6}&quot;, i))
        Next
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[dispoint]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qqqqqqq@qqqqqqqq.c.cq]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-21 18:34:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-21 18:34:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我現在是大四生 在公司裡實習 我一直有個疑問 程式到底是要先學會怎麼寫功能還是要先會演算法
因為我自己覺得我就像是程式寫得出來可是 內在都敗壞]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Google 讓人越來越笨?</title>
		<link>http://columns.chicken-house.net/2008/09/28/google-%e8%ae%93%e4%ba%ba%e8%b6%8a%e4%be%86%e8%b6%8a%e7%ac%a8/</link>
		<pubDate>Sun, 28 Sep 2008 00:44:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/28/Google-Effect.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
無意間在網站上看到這則新聞: 
</p>
<p>
&nbsp;
</p>
<p>
GOOGLE 讓人變笨？網路便利後遺症<br />
<a href="http://n.yam.com/bcc/life/200806/20080626204869.html" title="http://n.yam.com/bcc/life/200806/20080626204869.html">http://n.yam.com/bcc/life/200806/20080626204869.html</a> 
</p>
<p>
&nbsp;
</p>
<p>
文內有這麼一段話: 
</p>
<p>
<strong><font color="#0000ff"><em>但是大家都忽視了這種便捷要付出的代價。「網路似乎粉碎了人們專注與沉思的能力，到如今，腦袋只盼著以網路提供資訊的方式來獲取資訊」。</em></font></strong> 
</p>
<p>
<strong><font color="#0000ff"><em>影響所及，傳統媒體也跟著零碎化，長篇大論的東西不再有人要看，一篇文章超過四個段落，讀者就想落跑，電視節目加入滾動字幕和不斷跳出的小廣告，報刊則儘量縮短文章長度，改以一小塊一小塊的摘要取代，在版面上堆砌各種易於瀏覽的零碎資訊。</em></font></strong> 
</p>
<p>
這篇文章還沒找到真正源頭的那篇文章，不過這篇一定要推一下，真的是講到我心坎裡了。我要講的不是這篇文章，而是現在 INTERNET 環境下，GOOGLE 實在是太方便了，讓很多事開始可以 &quot;速成&quot; 起來。技術的進步不是壞事，不過在什麼都要 &quot;速成&quot; 的文化下，到底還有多少人願意去深入的研究某一件事物呢? 
</p>
<p>
&nbsp;
</p>
<p>
以我的老本行 &quot;軟體開發&quot; 為例，很多人半路出家，學了一些工具或是簡單的網頁程式設計，就可以出家了。天資好一點的，碰到問題還曉得到 GOOGLE 去查查有無合適的 SOLUTION，找到了就東拼西湊湊出個 &quot;可以動&quot; 的 SOLUTION。聽起來沒什麼不好啦，不過這樣一來，沒有幾個人還會願意再深入瞭解為什麼要這樣做等等議題了。我面試過的工程師也有幾十個了 (不知道破百了沒?)，有幾個問題是我必問的，其中一個就是: 
</p>
<p>
&nbsp;
</p>
<p>
&quot;<strong><em><font color="#008000">你碰到不知道怎麼解決的問題時，你會怎麼做?</font></em></strong>&quot; 
</p>
<p>
&nbsp;
</p>
<p>
我沒真的統計啦，不過印像中，問題答案的榜首是: 
</p>
<ol>
	<li>GOOGLE 找看看</li>
	<li>各大論譚去問問題 or 搜尋看看</li>
	<li>問朋友</li>
	<li>翻書</li>
	<li>... (不外乎是對外求救之類的方法)</li>
</ol>
<p>
我期望的答案一直沒有聽到，而聽到的都是透過 INTERNET + SEARCH ENGINE 這類的回答。當然這是沒錯啦，因為 GOOGLE 實在太方便了，不過我期望聽到的 &quot;再進修&quot; &quot;想辦法去瞭解問題的原因&quot; 等等答案都沒聽到。就算要找資料，連知道要去查第一手資料 (Microsoft 的東西，大部份 MSDN 都有提供第一手的資訊，不然就是某技術產品的官方網站) 的觀念都沒了，只因為英文看不懂? 或是鄉民寫的東西看的比較簡單? 咳咳...。 
</p>
<p>
而這件事的負面影響，就是人才越來越 M 型化了。INTERNET 只需要有 M 型頂端的人提供資訊，讓其它人來找資源就夠了。GOOGLE 越強，落在 M 型左邊人才的需求就越少。越來越多人依賴 GOOGLE找到零碎的資訊拼湊起來，而少了獨立思考解決問題的能力。我想人類的智能，重組的部份一定會越來越多，創造的部份一定會越來越少，會不會到最後創造的部份就會消失不見了? 難怪 INTEL 會如此預言，2050年後，機器的智慧會開始超越人類了。很有道理耶，因為搜尋 &amp; 重組不就是電腦的專長嗎? 資料夠多運算速度夠快就能做的到。而電腦追不上的 &quot;創造&quot; 這種能力，人類卻漸漸的在喪失... 
</p>
<p>
也許實際情況不會這麼悲觀，但是我相信這一定是個趨勢。能怎樣對抗這樣的 &quot;退化&quot; ? 想辦法讓自己的能力落在 M 型的左邊吧。跟<a href="/post/GoodProgrammer1.aspx">上一篇</a>講的一樣，沒有速成的方式，先把內功練好吧! 與其花時間研究那些兩三年就會淘汰掉，看起來很炫的 &quot;新技術&quot;，不如多花點時間學一學能讓你終身受用的基礎能力吧。 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2008-09-28 00:44:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-28 00:44:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-%e8%ae%93%e4%ba%ba%e8%b6%8a%e4%be%86%e8%b6%8a%e7%ac%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenny2061@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-29 03:14:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-29 03:14:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇真的是說中了很多人，不過最糟糕的是連想到要上網Google一下都不會的人...
我目前是唸資管系的學生，我的能力在班上算是不錯的，很多人碰到問題的時候都會想到我，而我在去年也教學弟妹們簡單的ASP.NET網頁設計。

在這過程當中我就有很深的感受，不管是問我問題的同學，或者是我教的學弟妹們，他們碰到問題的時候大概只有兩種模式，一個就是直接問人，另一個是上網找資料。
想到問人的不見得會想到上網找資料，會上網找資料的人不見得知道該如何去找....
當他們無法得到他們所要的東西時，他們就會一直卡在那邊，會找資料的人可能還會繼續多花一些時間持續的找資料，或者就是上網把問題貼上去，等著別人回答問題...


就如文中所言，其實微軟的MSDN本身就是很大的一本書，有些問題其實只是不會，並不是無解，查一下技術文件花時間稍微看一下可能就會有辦法或更好的解決方式，有時甚至還可以藉由技術文件中的內容學到一些東西，但是真的會去使用的人卻少之又少....


我在教他們安裝軟體的時候都會告訴他們：「除了把VS裝進去之外，一定要把MSDN也一併裝進去，這樣你在碰到問題的時候才可以比較方便…」。

不過裝了歸裝了，大致上也教他們怎麼使用，但是會用到的人還是不多，而且很多人直覺還是像我前面說的那兩種模式.....]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenny2061@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-29 03:17:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-29 03:17:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[喔，對了！

差點忘了跟您提一件事，那就是我希望能夠在EMail中轉載您這篇文章及前一篇「該如何學好&quot;寫程式&quot;？？」，純粹和同學及學弟妹們分享，希望您能同意我的轉載。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-29 11:03:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-29 11:03:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kenny:

沒問題，歡迎轉載 :D  記得在前面註明是我這裡轉出去的就好。

我也是很推薦 MSDN 一定要裝，因為裡面不只是文件而以，也有很多技術文章，講的是觀念或是原理的部份，跟一般單純的手冊不大一樣。每個月的 MSDN Magazine 更是經典，作者都是大師級的人物... 一般的書跟雜誌，還沒看到那一本能跟 MSDN 比的..
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[platstar]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[platstar@chicken.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-30 17:19:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-30 17:19:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不知道我以前有沒有提到MSDN這項...哈

我在書局曾看過一本書,書名好像是叫做&quot;如何閱讀一本書&quot;
我覺得MS在MSDN上投入很多,但也少了一點教人如何有效使用MSDN的資訊
包括MS有為MSDN有專門設計一個工具,用不同方式來搜尋資料的介面都不是很多人知道.

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-30 17:46:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-30 17:46:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[platstar@chicken.org ...

你有提到 MSDN, 不過事實證明我是被唬了... (H)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[platstar]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[platstar@chicken.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-30 18:08:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-30 18:08:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看首頁也算是有看吧,呵

MSDN搜尋和分類方式真是有待加強,不然我相信應該會有更多人願意先從MSDN開始找起的.
而不是先從google,再&quot;不小心&quot;連到microsoft.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-02 16:41:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-02 16:41:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[類似的報導:

搜尋成癮 大腦變抽水馬桶
http://mag.udn.com/mag/digital/storypage.jsp?f_MAIN_ID=314&amp;f_SUB_ID=2922&amp;f_ART_ID=151303
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-05 16:46:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-05 16:46:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我有不同意见。是GOOGLE让人变笨变懒呢，还是有的人本来就又笨又懒？

或者假设没有GOOGLE，这些人是否就会变得勤快起来呢？

GOOGLE最大的优点，就是令人获取和讨论咨询变得更加方便快捷。有了GOOGLE，那些勤快的学生和科研人员不必常常去图书馆（甚至是全世界的图书馆）翻箱倒柜了，他们坐在家里就可以方便的搜寻和讨论自己需要的用于学习和研究的资料。至于那些通过GOOGLE偷懒的学生，试想如果没有GOOGLE，他们就会老老实实抱着书本去啃吗？

所以问题不在GOOGLE,而在于人们自己。GOOGLE归根结底只是一个工具。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-05 22:50:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-05 22:50:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我覺的問題在於 M 型中間的人。

GOOGLE 會讓勤快的研究人員更快的找到他要的資料，這時 GOOGLE 是個好用的工具。而那些懶學生，就如你所說的，沒 GOOGLE 也是不會去唸書的。

但是中間那群人，會不會因為 GOOGLE 太方便，本來會勉強唸書或是思考的問題，而變的偷懶了起來就不再思考了呢? 我很同意問題不在 GOOGLE，而 GOOGLE 也真的只是個工具，不過它真的會造就更多懶人啊... M 型左方的精英只會變的更少，而 M 型中間的人都會漸漸的往右方靠..

工業革命之後，很多勞動的工作都被取代了。INTERNET時代的資訊革命，會不會也讓知識工作者的機會變少了呢? 老實說我也不知道，只是看到這篇文章，我很認同它的關點而已。:D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[platstar]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[platstar@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-15 13:50:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-15 13:50:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[CNN:多用搜寻引擎,会愈来愈聪明
http://www.cnbeta.com/articles/67088.htm]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>MSDN Magazine 十月號竟然下架了...</title>
		<link>http://columns.chicken-house.net/2008/09/27/msdn-magazine-%e5%8d%81%e6%9c%88%e8%99%9f%e7%ab%9f%e7%84%b6%e4%b8%8b%e6%9e%b6%e4%ba%86/</link>
		<pubDate>Sat, 27 Sep 2008 23:45:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/27/MSDN-OCT2008.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/MSDNMagazine_14B2A/image_3.png" border="0" alt="image" width="660" height="632" /> 
<p>
上個禮拜才看完 2008 / 10 的 <a href="http://msdn.microsoft.com/en-us/magazine/default.aspx">MSDN Magazine</a>，才想說這期 MSDN 的內容，有一半以上的主題是討論多核心處理器效能問題 (平行處理，多核的 CACHE 機制對程式的影響... etc)，不過剛才才想貼篇心得，上網一看竟然又縮回去只剩九月號? @_@
</p>
<p>
難道我是夢到我看過十月號的嘛? 哈哈... GOOGLE 找一下還真的給我找到<a href="http://72.14.235.104/search?q=cache:-ISFPHzsRZUJ:msdn.microsoft.com/en-us/magazine/default.aspx+%22false+sharing%22+%2B+%22msdn+magazine%22&amp;hl=zh-TW&amp;ct=clnk&amp;cd=2&amp;gl=tw">庫存網頁</a> :D 當然要貼來紀念一下。不知道重新上架後內容會不會多幾篇文章?
</p>
<p>
&nbsp;
</p>
<p>
這期的主題還真的都押在多核處理器的效能問題上。光是平行處理 ( TPL, PLINQ ) 的方法就好幾篇:
</p>
<ul>
	<li>Design Considerations For Parallel Programming</li>
	<li>Improved Support For Parallelism In The Next Version Of Visual Studio</li>
	<li>Build Concurrent Apps From Simple F# Expressions</li>
</ul>
<p>
&nbsp;
</p>
<p>
另外在探討多核心效能問題的也有幾篇:
</p>
<ul>
	<li>new Thread(ReadEditorsNote).Start(); yourAttention.WaitOne() //這標題還蠻有意思的...</li>
	<li>.NET Matters: False Sharing</li>
	<li>Exploring High-Performance Algorithms</li>
</ul>
<p>
&nbsp;
</p>
<p>
不過看完只記得部份重點而以，本來想多寫點心得，不過原文網址都連不到了... 再等幾天吧 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2008-09-27 23:45:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-27 23:45:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[msdn-magazine-%e5%8d%81%e6%9c%88%e8%99%9f%e7%ab%9f%e7%84%b6%e4%b8%8b%e6%9e%b6%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>該如何學好 &quot;寫程式&quot; ??</title>
		<link>http://columns.chicken-house.net/2008/09/27/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f/</link>
		<pubDate>Sat, 27 Sep 2008 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/27/GoodProgrammer1.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>會寫這篇是因為上禮拜，有個資深的同事問我個問題，如何把底下的 programmer 素質拉上來? 跟他講這問題害我那天拖到晚上十點才回家吃晚飯 @_@，不過我想這也是現在台灣軟體業普遍碰到的人才問題，就順手寫了這篇。這篇是打算要貼在公司的 BLOG 裡給同事看的，這裡先貼一下，到時整理好再搬過去...。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-----------------------------------------------------------------------------------------</p>
<p>其實在這之前，一直有人問我這類問題，我的回答總是一樣: "要從基本功做起。"&nbsp;&nbsp; 只不過大部份人都會皺皺眉頭，想說 "為什麼沒有速成一點的方法? "</p>
<p>先撇開軟體開發一定要有其它領域的 domain know-how 之類的東西，我就針對到底有沒有辦法把 CODE 寫好這件事來討論。如果真的存在速成的方法，那滿街就都是高手強者了。技術及工具的進步，<strong><em><span style="color: #008000;">是簡化你操作工具及開發過程的細節，但是其中累積的知識及理論，只會越來越多</span></em>。</strong></p>
<p>現在要寫程式所必須俱備的技術門檻越來越低，但是要能專精所必要的知識及經驗則是越來越高。我常在想，我是一路學習摸索上來的，大學四年唸了電機學到了硬體的底子，大三大四本來想修資工當輔系，後來直接去考資工所... 這三四年下來也有點資訊的底子，這些知識讓我到現在都還不用辛苦的去 "追" 技術，我只要看看 overview，大概就能掌握這些技術能解決什麼問題，不能解決什麼問題等等。真正需要用的時後，文件翻一翻就能找到我要的段落，就能夠上手了。</p>
<p>不過現在的年輕人就沒那麼好運了，要從 CPU 是怎麼設計，怎麼執行指令，到瀏覽器為什麼點下網址就能看到網頁，這一連串的細節，大概現在的大學畢業生都回答不出來吧? 現在隨便買本書翻一翻，就能寫出一個漂亮的網站，誰還願意去唸那些基本功? 也因為這樣現在的人都少了那份 "內功"，只剩漂亮的招式，出招很勵害，不過打沒兩下就後繼無力，或是對手出了沒看過的招，就不知怎麼接下去了。</p>
<p>如果你真的有心把底子練好，我是有幾個建議的方向，雖然看起來沒什麼用，但是看熟了你一定會發現，你寫什麼程式都逃不了這幾個基礎知識。</p>
<ol>
<li>最基本的: <strong><span style="color: #008000;">計算機概論 &amp; 資料結構<br /></span></strong>這些有助於你用正確的邏輯寫程式。要成為一個合格的 programmer 一定要有這樣的能力。</li>
<li>進階一點的系統層面，<strong><span style="color: #008000;">作業系統 &amp; 系統程式</span></strong><br />這些有助於你瞭解系統層面如何運作，如果你開發的系統需要些基礎建設，像是元件等等，這些知識很有用。成為 software engineer 就應該要有這些基礎。</li>
<li>再來就專精一點了，我推薦 <strong><span style="color: #008000;">OOP 理論 / Design Patterns、或是軟體工程的方法論 ( XP, TDD ... 等 )</span></strong>。<br />這個層次的知識能幫助你設計正確的架構，或是用正確的方式開發軟體，是成為 ARCHITECT 的必要技能。</li>
</ol>
<p>每一項都代表一個階段。上禮拜跟同事討論的，其實只有討論到 (1) 的部份。如果工程師都 "<strong><span style="color: #ff0000;">會</span></strong>" 寫程式，但是用的邏輯看起來都 "<strong><span style="color: #ff0000;">怪怪的</span></strong>"，那就是要加強 (1) 的部份了。我簡單的舉個例子，資料結構在學什麼? 跟實際寫程式能有什麼關聯?</p>
<p>想到資料結構，不外忽一堆排序 (SORT) 的演算法，或是各種 TREE / LIST 等怎麼 "放" 資料，及怎麼 "找" 資料的問題，如 LINKED LIST，HASH TABLE，BINARY TREE，HEAP，STACK 等等。再來就是什麼問題可以用什麼資料結構來處理? 像是走迷宮要靠 STACK，各種資料結構的特性為何? 它們的時間複雜度 (Time Complexity) 為何? 什麼時後該用那一種?</p>
<p>這些是很基礎的問題，不過你如果不是科班的，只是翻翻書就會寫程式的，那這些問題應該都回答不出來吧? 針對這部份，我強烈建議要學的人一定要先搞懂這些 "邏輯"。我不稱為理論，是因為他們還太淺，只是個作法而以。搞懂這些邏輯，你至少要有能力把程式寫出來。</p>
<p>因此第一課很簡單，挑幾種 SORT 的方式，比如 Bubble Sort, Quick Sort 等等，不用多，兩三個就好，步驟搞清楚了，還能用你熟悉的程式寫出來 ( 如: C# / JavaScript，當然你不能作弊用現成的 SORT 函式庫 )，你就過關了。</p>
<p>再來就是搞懂各種資料結構，我舉幾個 .NET 內建的，卻又常讓人搞混的幾個 Collection。List / LinkedList 用的方式都一樣，那麼兩者到底有什麼不一樣? 只塞一百筆，找出一筆要 10 ms 的話，塞一萬筆找出一筆要花多少時間? 是 100 倍嗎? 還是 10 倍? 還是都一樣?? 是 Microsoft 工程師太無聊，故意寫來讓你傷惱筋的嗎?</p>
<p>如果這部份你也搞懂了，接下來就是應用了。就拿導航系統來說就好，地圖要用什麼方式存才好? 使用者選定起點及終點，你該怎麼幫它找出最佳的路逕? 不管畫面等等問題，你有辦法寫出程式找到答案嗎? 這就是典型的資料結構的應用。你沒學好資料結構的話，看再多 C# / ASP.NET 的書，一點用都沒有啦，碰到這類問題，管你用 VB / C++ / C# 還是&nbsp; Java, 只能坐在螢幕前發呆而以。</p>
<p>&nbsp;</p>
<p>總結一下，你符合我講的 (1) 基本要求嗎? 很簡單，這些問題或程式你都寫的出來就符合了:</p>
<ul>
<li>丟一付洗過的撲客排給你 (不要多，黑桃1 ~ 13就好)，你知道怎麼用 Bubble Sort / Quick Sort 的步驟把它排好嗎? 丟一個陣列，裡面隨便打幾個數字，你能寫程式把它由小到大排好印出來嗎?</li>
<li>假設記憶體夠大的話，你有辦法把一百萬筆通訊錄資料讀到記憶體內 (用什麼物件都隨你)，然後還能用很快的速度找到你要的資料嗎? 不同的搜尋方式，你知道該用什麼樣的方式找才有效率嗎?</li>
<li>以台灣高速公路為題 (中山高、北二高、國道二號)，你有辦法寫程式，讓使用者指定起點跟終點的交流道，然後替它找出建議的路線嗎? (把延路經過的交流到跟收費站列出來就好)</li>
</ul>
<p>看起來就像是作業，沒錯。不過它是很實際的基本功夫，如果寫不出來，那就真的該好好唸個書了。其實這些問題，都跟熱門的技術 (如 DB / WEB / RIA 等等) 無關，就很單純的看你的邏輯能力而以。這個主題我會繼續寫下去，大概一兩個禮拜一篇吧。我的目的是希望大家底子打好再來學這些熱門技術，這樣你才有辦法更進一階，否則就只能隨著技術規格推陳出新，不斷的在追新技術而以。上面那三個問題，有興趣的話歡迎找我聊聊。在這留話或是 mail 給我都可以。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2008-09-27 04:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-27 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="good_programmer"><![CDATA[系列文章: 如何學好寫程式]]></category>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[Adam]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[j9352822@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-31 11:44:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-31 11:44:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以請問你 你說第一步需要看計算機概論  主要是要看哪方面的東西呢?
還有資料結構 請問有沒有推薦的書籍?  希望你有空可以回答，謝謝


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[rico]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dd@dd.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.dotblogs.com.tw/ricochen/Bookmark/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-12 22:18:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-12 22:18:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大大這篇寫的很讚
如你所說  現在比比皆是不注重內功的軟體工程師(外表漂亮,可惜內部一團糟)
但只有內力高強的高手  才能兵來將擋  水來土淹
為了成為高手並更上一層  這篇我就收藏起來了
提醒自己^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[Jerry]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ucandoit1010@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-14 10:06:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-14 10:06:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問一下，
文中提到，
(要從 CPU 是怎麼設計，怎麼執行指令，
到瀏覽器為什麼點下網址就能看到網頁，這一連串的細節，大概現在的大學畢業生都回答不出來吧?...)

這些細節要怎麼了解呢？
學校不教，而且老師也不一定答的出來，
自己要去研究的話也是加強文中3點基礎知識嗎？這些都是基礎知識的延伸嗎？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-14 22:13:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-14 22:13:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jerry,

說穿了不值錢，CPU 怎麼設計 &amp; 執行，當時是修系上的 &quot;數位系統&quot; &amp; &quot;微算機原理&quot; 學的... 其實後來看看雜誌都會介紹新的 CPU 有什麼特點，都可以得到印證... 有時看看雜誌也能學到點東西...

至於點下網址 -&gt; 看到網頁，這是開始工作後看看 HTTP 的原理學到的... 

這些都不難，隨手也都找的到資源，有心留意一下就有了。我寫的純粹是我個人經驗的分享而已，我是這樣學的，文中的三點也是我認為必學的基礎知識，也不一定對，不過你可以參考看看 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[antonio]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[antonio6510@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-23 09:38:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-23 09:38:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你寫的這篇真的很好 可以請問你一下 對於初學著(基礎0)的你建議我可以去讀哪些書呢?
我可以重哪裡開始著手呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[yuanlin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yuanlin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://web.yalinfo.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-21 19:50:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-21 19:50:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝您這一系列的好文章，讓我獲益良多。
並告知您，我在這篇文章有連結引用
http://web.yalinfo.com/2010/04/blog-post_20.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-28 23:02:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-28 23:02:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝你喜歡我的文章, 歡迎引用 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[zuyan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zuyan_chang@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://maru.gates.tw/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-20 23:04:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-20 23:04:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我自覺...基本功都有打好..
例如..計概,作業系統概論,資料結構...
可是之前死在.....OO, 因為我以前程式是使用BASIC ..是自學的之後沒人教,
也不解很多書中OO的意思..任督二脈沒打通
還好之前再去上課..打通了任脈..督脈還是沒通
現在死在....沒有動力學..寫寫小程式可以...大就免了
MIS 要學的東西太多......雖然觀念都通...可是細節太多
光一個MAIL Server ...就要會5種...更何況還要學別的..,平時還要與病毒對抗..
當然...寫好程式...是我最大的遺憾..
這時有一個好老師再打通我的督脈...那就圓滿了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>157</wp:comment_id>
			<wp:comment_author><![CDATA[Maos]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gaexp225120@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-29 18:18:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-29 18:18:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大大可以教我有關寫程式的嗎
我願意重最基本學起 可以的話+我即時
gaexp225120(請著明ˋˋ)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[kat]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kat0215@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-09 09:15:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-09 09:15:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好，拜讀了您的文章，覺得受用許多。但若身為一名網站企劃人員(不懂程式)，卻想更深入的瞭解關於資料結構與程式邏輯的話。您是否有建議參閱的書籍，或是可以從何練習起呢 ? 謝謝 ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-10 01:43:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-10 01:43:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[其實別把資料結構想的太複雜啦，這個是資訊科系大二的課程而已，不會很難。
買本課本來看就好了。只不過課本都寫的比較死板，要看的下去需要一點意志力...

書我都是十幾年前唸書時看的，現在大概都絕版了吧 @@  書店找本你看的下去的就好了 :D
重要的是要多練習，跟想辦法把書裡講的內容套到你的程式裡，多練幾次就掌握的到要領了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[班傑明]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eggx0503@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-18 15:31:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-18 15:31:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好,我是今年資工系考資工所的學生
但程式能力真的不強 想在這一個月內加強自己
考研究所的動機
就是大學時代沒辦法確認自己對程式有沒有興趣  (畢竟坐在電腦前寫程式的時間不多 彈興趣與否言之過早)  
離開學剩不到一個月 實在很怕跟不上同學  成為LAB的老鼠屎...
想問問你當是跨考時候的心路歷程   我真的很需要信心...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[班傑明]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eggx0503@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-18 16:59:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-18 16:59:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[想聽聽大大跨考所遇到的瓶頸
我是資工系 九月準備讀資工所
但是大學時期很混 程式能力沒有下苦功
考研究所的動機只是想試試看 畢竟有沒有興趣 是要花時間才會知道的
而我四年卻沒給自己這樣的機會嘗試...
所以想問問大大 你是在&quot;感到興趣&quot;的動機學習程式  還是因為&quot;不排斥&quot; 而學習程式呢??]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-31 19:49:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-31 19:49:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[兩則我就一起回了 :D

興趣是我改唸資工主要的原因，我是喜歡用程式碼把我的想法寫出來那種成就感，所以我願意花很多時間去研究那些看不到漂漂亮亮畫面的東西，像是 OOP, threading... 等等。

不過，唸資工所，寫程式的能力只是個 &quot;很重要&quot; 的工具而已，雖然重要但不是全部。專攻的領域知試才是重點啦，只不過有好的 coding skill 能讓你唸資工所吃香很多... 做什麼數據，做什麼實驗，或是做模擬，多少都得寫到一點 code... 

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[吳忠翰]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[vul3eji7878@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-05 16:35:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-05 16:35:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我是無意間看的，
我真的深深的感受你的專業和熱誠^^
我本身是攻資工，看到你的文章我不經五體投地。
希望我能跟你談談關於程式相關的資訊和知識，
小弟我今年大一，是最近才在碰觸程式相關的東西。
希望你不嫌棄傳授我相關的知識，看完你的文章我的信心大振!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[小哥]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[i2998078@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/post/GoodProgrammer1.aspx</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-05-05 16:41:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-05-05 16:41:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[各位大大     我想學程式         但都學不好     如果有人可以交我的話      請加我即時i2998078
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[小哥]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[i2998078@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/post/GoodProgrammer1.aspx</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-05-05 16:42:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-05-05 16:42:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我希望有人能交我程式    我連基本工都不知道    看書好像也沒用     可以交我的大哥們    家我即時i2998078     各位幫幫忙吧      
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[吉格艾諾]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hsw1976@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.udn.com/hsw1976</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-30 08:55:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-30 08:55:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[格主您好，


看到您這篇文章
在下真是心有戚戚焉
我本身也是「基本功主義」者
對於那些只想速成的人
我只會請他們自求多福
無論是 Resouece 或解決問題的想法
我都很樂於和他們分享
但我更相信
沒底子的他們
早晚會自爆

這種狀況
其實就像近幾年來
補教業者大力鼓吹證照課程一樣
不可否認
他們賺翻了
但另一方面也打爛了這些證照的價值
更造就了許多只會考試的「證照工程師」
這些人上了戰場
待得住的沒幾個]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[資管系學生]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[at8011741@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-03 18:16:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-03 18:16:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我現在是一片迷茫
學業要求我們  一定要將新技術學到手

但是....這和我的初衷不一樣，
我原先從電子工科轉入資訊
就是想當個駭客，
但現在卻淪落到和大家在那搶新技術的情況....

就在此時看到您的文章 讓我震憾
希望您看到此文能與我聊聊 我想多多了解更多東西]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[skyline]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qwe5630.21474@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/post/GoodProgrammer1.aspx</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-02-05 12:34:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-02-05 12:34:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我好早以前就很想設計程式,但都不知道從下手  謝謝大大的分享]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[Dalalama]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[GOdick19@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-03-17 21:47:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-03-17 21:47:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[簡直類似望洋興嘆感
因為我是幾乎從0開始 而且是現在 2013/3/17 開始
 
但是我也想體驗
&quot;用程式碼把我的想法寫出來的那種成就感&quot;
一定很有趣~

所以也就硬著頭皮玩看看

但是我 既沒內功 也沒招式

像那些 泡泡 sort 等你提供的基礎知識 都是上網學就可以了嗎

萬丈高樓平地起阿........

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[阿傑]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[w7946138@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-07 19:57:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-07 19:57:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[寫得很棒 我現在大二資管系，已經快升三年級了
但是程式語言很弱，只會基本的，大一學計概覺得還好，但是現在有點忘了計概的重點是什麼
因為一年級的VB老師只會給我們看投影片，我對VB整個不熟....但是不至於被當

我是真的想要學好程式語言，不管是哪種語言都會想要學好
老師出的題目參考課本，編譯卻頻頻出錯
上網找相關語法，發現網上的人跟老師教的不太一樣
我們老師是教大語法，細節的部分都留著給我們自己想或翻課本...

希望能讓自己的程式更加成熟，看完你的文章，我一定要更加努力
絕對不能敗在程式手下 !!!

如果大大願意教我的話 可以加我即時通或fb
以上兩個都是 w7946138@yahoo.com.tw 
謝謝]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>680</wp:comment_id>
			<wp:comment_author><![CDATA[Switiger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[anstar0530@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-29 10:10:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-29 02:10:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我是個年近三十，才發現自己興趣是電腦，愛的是程式。由於根本沒有底子，有如蝦子一樣不知該從何打好基礎。直到看到你的文章後我才驚醒，原來那才是現階段我需要的知識。否則花在多錢去補習，花再多錢亂買書來讀，終究是不堪一擊。
真的太謝謝你了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>令人火大的 SQL 字元編碼...</title>
		<link>http://columns.chicken-house.net/2008/09/27/%e4%bb%a4%e4%ba%ba%e7%81%ab%e5%a4%a7%e7%9a%84-sql-%e5%ad%97%e5%85%83%e7%b7%a8%e7%a2%bc/</link>
		<pubDate>Fri, 26 Sep 2008 18:04:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/27/SQL-BUFFER-OVERFLOW.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
今天同事有個問題搞不定，就找我去處理，越弄越火... 嘖嘖，這裡就來還原一下現場，記錄一下這個鳥問題...。 
</p>
<p>
最討厭處理這種問題了。現在客戶 IT 都委外，結果就變成 IT 本身不大管事，什麼事就交給外包商就好... 而這種 A 包商跟 B 包商之間的問題，往往就變成踢皮球... 除非有明確證據指出人就是他殺的，不然? 出問題的一方自己摸摸鼻子吧。幾年來吃了不少這種虧，這就是小廠的悲哀啊。 
</p>
<p>
這次碰到的例子是客戶 A 系統建的資料，需要整理後匯到我們負責維護的 B 系統。而中間資料需要作些修正，所以建了一個中繼資料庫，透過 LINKED SERVER，從 A 系統的 DB 把整個 TABLE SELECT 一份到中繼資料庫，然後再進行一連串的修正... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/SQL_11CC/image_7.png" border="0" alt="image" width="421" height="238" /> 
</p>
<p>
一開始問題很單純，就兩邊碰到中文字編碼不同，直接 SELECT 就碰到這樣的亂碼.. 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/SQL_11CC/image_8.png" border="0" alt="image" width="433" height="202" /> 
</p>
<p>
看起來是個小問題，請對方 IT 確認了編碼的問題後，我在中繼資料庫作了點調整，convert 成 ntext 就搞定了。已經可以跑出正確的中文資料了。 
</p>
<p>
正想把程式弄一弄就收工，然後很得意的回報問題搞定時，發現不大對勁，怎麼整個 BATCH 跑下來結果還是錯的? 還錯的不一樣? 真是奇了... 原本轉 UNICODE 問題，再怎麼樣也應該只是變亂碼，或是變 ? 而以，結果這次看到的是資料錯亂，跑出其它的字出來... 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/SQL_11CC/image_9.png" border="0" alt="image" width="450" height="326" /> 
</p>
<p>
這張圖是我把問題簡化後抓到的，原本是有上百行的 SQL SCRIPT ... @_@ 被我抽絲撥繭剩這段。第 33 筆資料是有問題的，不過出現的資料不是原本 &quot;馥瑈&quot; 啊，原本是第二個字變成 ? 而以... 現在竟然變成上一筆資料 (第32筆) 的內容，而第三個字 &#39;榮&#39; 則是由前面好幾筆的 &quot;XX榮&quot; 留下來，第四個字 &quot;子&quot; 就真的不曉得從那裡來了... 
</p>
<p>
&nbsp;
</p>
<p>
好怪的問題，如果是程式碰到這種 BUG，一看就像某個 BUFFER 沒清掉就一直重複被使用，後面的值直接蓋掉前面的值，字串長一點沒被蓋掉，就這樣留下來了。而到了第 33 這筆不知為什麼原因，整個 BUFFER 的內容就跑出來... 這段 SQL SCRIPT 跟本沒作什麼事，不過是前面的 SELECT 指令，改 SELECT INTO 到 TEMP TABLE，然後再撈出來而以。直接 SELECT 沒問題，沒道理 SELECT INTO 就掛掉啊! 不過還真的被我碰到了，see the ghost .. 
</p>
<p>
&nbsp;
</p>
<p>
我沒有直接拼下去 GOOGLE 或是試各種解法，而是想了一下問題是怎麼回事? SQL / DB 的東西我只算外行人，沒本事跟他硬碰硬，我也不知道有啥工具可以看 SQL NATIVE CLIENT 的 TRACE INFO 之類的，只能靠想像，猜一下問題會在那。一開始我就否定掉是不是什麼編碼或是定序的問題，因為我可以正確的 SELECT 出來啊，而且如果 SELECT INTO 是變成 ?? 的話我也許還會頭痛一點，不過竟然是上一筆的資料跑過來了? 這個問題很明顯的，跟本就是 overflow (緩衝區溢位) 之類的 BUG。八成是什麼地方應該填個 0x00 作字串結尾的 CODE 錯掉，結果 SQL 就抓過頭，抓到不該抓的舊資料才會這樣。 
</p>
<p>
&nbsp;
</p>
<p>
拿我寫了十幾年程式的經驗，跟它賭下去了!!&nbsp; 於是我就沒再去跟一堆編碼定序之類的設定搏鬥了，因為我認定這是 SQL SERVER 或是 SQL NATIVE CLIENT 的 BUG。我採的方案是找可以繞過去的方式，於是我把我想的到的 COPY TABLE 都用上了，最後試出來的是笨方法... 
</p>
<p>
&nbsp;
</p>
<p>
<strong><em><font color="#ff0000">用... 用... 用 CURSOR 一筆一筆的跑... @_@</font></em></strong> 
</p>
<p>
&nbsp;
</p>
<p>
哈哈，各位看倌請笑小聲一點，我這貴州的驢子就只會這種把戲而以.... 果然這樣就正確了。CURSOR 的 FETCH 指令，把欄位的值抓到 nvarchar 的變數，就一切 OK，然後再把這變數的值 update 回我的暫存 TABLE，就什麼問題都沒了 -_- 
</p>
<p>
&nbsp;
</p>
<p>
真是它ㄨㄨㄨㄨ的，最後的 SOLUTION 細節我就不一一的貼出來了，反正只是換個方式 COPY TABLE 而以。既然我賭是 Microsoft 的問題，而換條路的方式 (完全沒改任何定序 OR 編碼) 也成功了，我就不跟它奮鬥下去了，客戶的 IT 既然懶的上 UPDATE / SERVICE PACK，我也只好避掉問題了事... 咳咳。特地貼出來記念一下，如果你們也碰到一樣的問題，切記切記，別跟它硬碰硬啊... :D 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2008-09-27 02:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-26 18:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%a4%e4%ba%ba%e7%81%ab%e5%a4%a7%e7%9a%84-sql-%e5%ad%97%e5%85%83%e7%b7%a8%e7%a2%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[robert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[win32s@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-20 13:42:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-20 13:42:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[安德魯大大，小弟不知道你是不是從事金融業, 要是的話, 建議你把名字remix掉, 小的之前寫東西有被警告過. ^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-22 00:01:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-22 00:01:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不是金融業的，不過我還是把名字塗掉了 :D
謝謝題醒]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[C# yield return] #2. 另類的應用 - Thread Sync 替代方案</title>
		<link>http://columns.chicken-house.net/2008/09/21/c-yield-return-2-%e5%8f%a6%e9%a1%9e%e7%9a%84%e6%87%89%e7%94%a8-thread-sync-%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88/</link>
		<pubDate>Sun, 21 Sep 2008 22:30:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/21/YieldReturn2_ThreadSyncReplacement.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[繼<a href="/post/C-yield-return-1-How-It-Work-.aspx">上篇</a>，講了一些 yield return 編譯後產生的 Code, 說明了 C# compiler 如何用簡單的語法替你實作了 IEnumerator 介面，而完全不會增加程式的複雜度，這是我認為 C# 提供最讚的 Syntax Sugar ...。

不過無意間我想到了 yield return 還有另一種應用方式。靈感來自之前 <a href="http://blog.darkthread.net/">Darkthread</a> 舉辦的 [<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/09/02/coding-for-fun-contest-start.aspx">黑暗盃程式魔人賽</a>]。因為參賽題目 [xAxB猜數字遊戲] 原本就是考驗演算法，邏輯就不大簡單了，加上要配合 GameHost 的呼叫方式，難度更提高不少。因此之前貼了兩篇文章 [ThreadSync <a href="/post/Thread-Sync-1-e6a682e5bfb5e7af87-e5a682e4bd95e58c96e8a2abe58b95e782bae4b8bbe58b95.aspx">#1. 概念篇 - 如何化被動為主動?</a>, <a href="/post/Thread-Sync-2-e5afa6e4bd9ce7af87-e4ba92e79bb8e7ad89e5be85e79a84e585a9e5808be59fb7e8a18ce7b792.aspx">#2. 實作篇 - 互相等待的兩個執行緒</a>]，介紹了我改寫的 AsyncPlayer，讓程式可以分別以獨立的執行緒執行 GameHost 及 Player 的程式碼。藉著這方式讓兩者都可以 "獨立思考"，邏輯不會中斷，讓程式能夠簡單一些。

不過執行緒同步機制是很花時間的，因為兩方都要等來等去...。多了 Sync 的動作，就要至少 10 ms 的時間來完成這動作。跑個十幾萬次下來，額外花費的時間太多了，因此我貼了那兩篇文章後，就一直在思考這樣的作法有沒有其它效能較佳的方式?

有的，最後我找到的答案就是 yield return，不過大家看了一定很納悶...

<strong><em><span style="color: #008000;">"yield return (Iteration) 跟執行緒同步機制有什麼關聯?"</span></em></strong>

不多說，先看看之前畫的兩張時序圖:

<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/Cyieldreturn2.ThreadSync_FE89/image_6.png" alt="image" width="660" height="482" border="0" />

先看之前 ThreadSync #1 裡提到的圖，我這次加上紅線當 "輔助線"，紅線代表執行 GameHost 的主程式，這個執行序必需反反覆覆的在 GameHost / Player 兩份類別的程式碼跑來跑去，主程式是 GameHost 發起的，當然被強迫切成好幾段的就只有 Player 了。

<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/Cyieldreturn2.ThreadSync_FE89/image_5.png" alt="image" width="660" height="544" border="0" />

這是修改過後的版本，GameHost / Player 有各自的執行緒，紅色是 GameHost，藍色是 Player。當執行緒跑到中間時代表它在等待了，等另一方也跑到中間把執行結果放到共用變數，同時叫醒對方之後才交換過來。兩方都各自照著自己的邏輯跑，不過這種等待 &amp; 喚醒的動作，相較於一般的 function call / return 而言，實在是太慢了...。我就是從這張圖得來的靈感，這個解決方式不就跟 yield return 很像嘛? 都是為了避免多次呼叫之間，被呼叫的另一方的邏輯被破切斷的問題... 因此我就開始思考 AsyncPlayer 是不是有機會用 yield return 寫出另一個版本...。

原本的結構很直覺，透過共用變數來傳遞資訊，用 AutoResetEvent 來通知另一個等待中的執行緒可以醒來拿資料去用。而 yield return 則要換個角度來想這件事。yield return 是實作 Iterator 的一種方式，目的是讓你的程式自己決定如何把 collection 裡的 element 照什麼方式丟出去，原本的問題就要想成:

"GameHost 要跟 Player 拿所有 Player 會問的問題，而 Player 會透過 yield return 一次一次的把問題丟出去。"

看起來好像可行，不過方向只有單向，就是 Player 丟問題給 GameHost，還缺了 GameHost 把問題答案交給 Player 這段。不過這部份好解決，一樣用共用變數就搞定。細節我就不講太多，直接來看程式碼:

<strong>用 yield return 改寫過的 AsyncPlayer</strong>
<pre class="lang:default decode:true">        public abstract IEnumerable&lt;HintRecord&gt; Think();

        private HintRecord last_record = null;

        public override int[] StartGuess(int maxNum, int digits)
        {
            base.StartGuess(maxNum, digits);
            this._enum = this.Think().GetEnumerator();
            this._enum.MoveNext();
            return this._enum.Current.Number;
        }

        public override int[] GuessNext(Hint lastHint)
        {
            this._enum.Current.Hint = lastHint;
            if (this._enum.MoveNext() == true) return this._enum.Current.Number;
            throw new InvalidOperationException("Player Stopped!");
        }

        public override void Stop()
        {
            base.Stop();
            this._enum.Current.Hint = new Hint(this._digits, 0);
            try { this._enum.MoveNext(); }
            catch {
                Console.WriteLine("!!!!");
            }
        }

        protected virtual HintRecord GameHost_AskQuestion(int[] number)
        {
            this.last_record = new HintRecord(
                (int[])number.Clone(),
                new Hint());
            return this.last_record;
        }

        protected HintRecord GameHostAnswer
        {
            get
            {
                return this.last_record;
            }
        }
</pre>
程式碼一如往常，又是只有一點點 (謎之音: 你到底有沒有寫過長一點的程式碼? -_-) ...。 原本的 Think 改成會傳回 IEnumerable&lt;HintRecord&gt; 的型別，因此內部就可以透過一連串的 yield return xxxx; 指令來把問題交給 GameHost。而 GameHost 拿到題目就會開始計算答案，然後再呼叫 Player.GuessNext( ) 把上次的答案傳回去。透過 Player 的實作，GuessNext 會呼叫 _enum.MoveNext( ), 控制權會再交到 Think( ) 上次呼叫 yield return 的地方，直到又執行到下一個 yield return 為止。這時 GameHost 又取得下一個問題，不斷重複這樣的動作直到結束。

同樣的，我們用 DummyPlayer 改寫，看看用 yield return 的版本寫起來是怎麼樣?

<strong>DummyYieldPlayer 的程式碼</strong>
<pre class="lang:c# decode:true ">    public class DummyYieldPlayer : YieldPlayer
    {
        private Random _rnd = new Random();
        private int[] randomGuess()
        {
            int[] _currAnswer = new int[this._digits];
            List&lt;int&gt; lst = new List&lt;int&gt;();
            for (int i = 0; i &lt; _digits; i++)
            {
                int r = _rnd.Next(_maxNum);
                while (lst.Contains(r))
                    r = _rnd.Next(_maxNum);
                lst.Add(r);
                _currAnswer[i] = r;
            }
            return _currAnswer;
        }

        public override IEnumerable&lt;HintRecord&gt; Think()
        {
            while (true)
            {
                yield return this.GameHost_AskQuestion(this.randomGuess());
            }
        }
    }
</pre>
<!-- end of code area -->

跟上次的 DummyAsyncPlayer (用 ThreadSync 的版本) 一樣，超簡單，實在沒什麼需要說明的了。唯一要特別記得的是，如果你需要取得 GameHost 傳回的答案，應該在 22 ~ 23 行之間，使用 this.GameHostAnswer( ) 來取得答案。有人問我為什麼不把它包成 function call ? 在 function 內接到參數後呼叫 yield return, 而把答案 return 回來不是很好嗎?

很無奈，除非 C# 支援像 C/C++ 那樣的 MACRO 語法，不然這個東西是不可能單靠 yield return 就做出來。你使用 yield return 的條件就是 function return type 一定要是 IEnumerable&lt;T&gt;，這是配對的，代表你不能任易的把 yield return 移到其它 function call 內。除非你不靠 C# yield return 來自動產生對應的 IEnumerator，一切自己來就可以。不過這樣不就又回到原點了? 咳咳... 就乖乖的寫兩行吧。

這樣的寫法執行效率就好的多，我用 DummyYieldPlayer 來測試，跟 DarkThread 提供的版本不相上下，意思是差異小到可以不理它的地步了 :D 這樣的方式不會有太大的效能損失，因為最後要執行的程式碼，跟直接手寫是差不多的，只是中間難寫的那段 code 是 C# compiler 幫我們解決掉，而不是像上回 AsyncPlayer 是用兩個執行緒來解決的。

效果很滿意，當然最後參賽的版本就改這寫法了 :D。不過寫的太晚，來不及幫到其它參賽者 :P，想到這方法算是我佔了 C# compiler 一點便宜，有幸找到方法坳 C# compiler 幫我把最難的部份寫好了，我自己則樂的輕鬆，專心研究怎樣才能少猜幾次... 這裡把我另類應用 yield return 的方法貼給各位參考一下，也算作個筆記 :D，各位高手如果還有發現 yield return 解決過你什麼樣的怪問題，也歡迎到我這留個言 :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2008-09-21 22:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-21 22:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-yield-return-2-%e5%8f%a6%e9%a1%9e%e7%9a%84%e6%87%89%e7%94%a8-thread-sync-%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[C#: yield return] #1. How It Work ?</title>
		<link>http://columns.chicken-house.net/2008/09/18/c-yield-return-1-how-it-work/</link>
		<pubDate>Thu, 18 Sep 2008 03:25:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/18/C-yield-return-1-How-It-Work-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[C# 常常拿來跟 Java 比較，在 .NET 1.1 時常常是不相上下，而 .NET 又因為較年輕 &amp; 頂著 Microsoft 的名號，往往被當成玩具一樣，不過 Microsoft 的確是在 .NET 及 C# 下了很多功夫，作了很多 Sun 不願意在 Java 身上作的事，這次要探討的 <a href="http://msdn.microsoft.com/en-us/library/9k7k7cf0(VS.80).aspx">yield return</a> 及 <a href="http://msdn.microsoft.com/en-us/library/9eekhta0.aspx">IEnumerable&lt;T&gt;</a> 這搭配的 Interface 就是一例...。

Java 在過去的版本，往往為了跨平台，把修改 VM 規格視為大忌，連帶的連語法修改都一樣，即使不影響編譯出來的 bytecode 相容性也是一樣不肯改。而 .NET 就為了語法簡潔，編譯器往往是讓步的一方，因此 C# 有相當多的 <a href="http://en.wikipedia.org/wiki/Syntax_sugar">Syntax Sugar</a>，讓你寫起 CODE 爽一點...。你只要寫簡單的 CODE，編譯器會幫你轉成較煩雜的 CODE，有點像是文言文或是成語那樣的味道。古代文人常常用簡單的四個字，就有一大票引申的意義跑出來...，寫作文時只要套上成語，就代表了成語背後的故事，寓意。

"yield return" 算是最甜的甜頭了，因為編譯器替你翻出來的 code 整整一大串。先來看個簡單的例子，如果我想實作 IEnumerator&lt;T&gt; Interface, 照順序輸出 1 ~ 100 的數字，正統的 C# code 看起來要像這樣:

<b>用 IEnumerator 依序傳回 1 ~ 100 的數字</b>
<pre class="theme:1c-kod lang:c# decode:true ">    public class EnumSample1 : IEnumerator&lt;int&gt;
    {
        private int _start = 1;
        private int _end = 100;
        private int _current = 0;

        public EnumSample1(int start, int end)
        {
            this._start = start;
            this._end = end;
            this.Reset();
        }

        public int Current
        {
            get { return this._current; }
        }

        public void Dispose()
        {
        }

        object System.Collections.IEnumerator.Current
        {
            get { return this._current; }
        }

        public bool MoveNext()
        {
            this._current++;
            return !(this._current &gt; this._end);
        }

        public void Reset()
        {
            this._current = 0;
        }
    }</pre>
&nbsp;

&nbsp;

好不容易寫好 IEnumerator 之後，再來是拿來用，一筆一筆印出來:
<div>

<b>取得 IEnumerator 物件後，依序取出裡面的數字</b>
<pre class="lang:c# decode:true">            EnumSample1 e = new EnumSample1(1, 100);



            while (e.MoveNext())
            {
                Console.WriteLine("Current Number: {0}", e.Current);
            }
</pre>
&nbsp;

不過如果只是要列出 1 ~ 100，大部份的人都不會想這樣寫吧? 直接用計概第一堂教你的 loop 不就好了? 程式碼如下:
<div>

<b>送分題: 用 LOOP 印出 1 ~ 100 的數字</b>
<pre class="lang:c# decode:true">            for (int current = 1; current &lt;= 100; current++)
            {
                Console.WriteLine("Current Number: {0}", current);
            }
</pre>
&nbsp;

&nbsp;

兩個範例都沒錯啊，那為什麼要用 IEnumerator ? 其實 IEnumerator 並不是 Microsoft 發明的，在四人幫寫的經典書籍 (Design Patterns) 裡就有這麼一個設計模式: <a href="http://en.wikipedia.org/wiki/Iterator">Iterator</a>，它的目的很明確:

"<strong><em><span style="color: #008000;">毋須知曉聚合物件的內部細節，即可依序存取內含的每一個元素。</span></em></strong>"

(摘自 物件導向設計模式 Design Patterns 中文版，葉秉哲 譯)

這裡指的 "聚合物件" 就是指 .NET 的 Collection, List, Array 等這類物件。意思是你不需要管 collection 裡每一個物件是怎麼擺的，用什麼結構處理的，用什麼邏輯或演算法處理的，我就只管照你安排好的順序一個一個拿出來就好。沒錯，這就是它主要的目的。換另一個說法，就是我們希望把物件巡訪的順序 (iteration) 跟依序拿到物件後要作什麼事 (process) 分開，那你就得參考 Iterator Pattern。不用? 那只好讓你的 iteration / process 混在一起吧。

差別在那? 我們再來看第二個例子。如果題目改一下，要列出 1 ~ 100 的數字，但如果不是 2 的倍數，也不是 3 的倍數，就跳過去。先來看看 Loop 的版本:
<div>

<b>進階送分題，用LOOP印出 1~100 之中，2 或 3 的倍數</b>
<pre class="lang:c# decode:true">            for (int current = 1; current &lt;= 100; current++)
            {
                bool match = false;

                if (current % 2 == 0) match = true;
                if (current % 3 == 0) match = true;

                if (match == true)
                {
                    Console.WriteLine("Current Number: {0}", current);
                }
            }
</pre>
&nbsp;

&nbsp;

再來看看 IEnumerator 的版本:
<div>

<b>用 IEnumerator 列出 1 ~ 100 中 2 或 3 的倍數</b>
<pre class="lang:c# decode:true">   public class EnumSample2 : IEnumerator&lt;int&gt;
    {
        private int _start = 1;
        private int _end = 100;
        private int _current = 0;

        public EnumSample2(int start, int end)
        {
            this._start = start;
            this._end = end;
            this.Reset();
        }

        public int Current
        {
            get { return this._current; }
        }

        public void Dispose()
        {
        }

        object System.Collections.IEnumerator.Current
        {
            get { return this._current; }
        }

        public bool MoveNext()
        {
            do {
                this._current++;
            } while(this._current %2 &gt; 0 &amp;&amp; this._current %3 &gt; 0);
            return !(this._current &gt; this._end);
        }

        public void Reset()
        {
            this._current = 0;
        }
    }</pre>
&nbsp;

&nbsp;

而扣掉 IEnumerator 的部份，要把數字印出來的程式碼則完全沒有改變:
<div>

<b>取出 IEnumerator 的每個數字，印到畫面上</b>
<pre class="lang:c# decode:true">            EnumSample2 e = new EnumSample2(1, 100);



            while (e.MoveNext())
            {
                Console.WriteLine("Current Number: {0}", e.Current);
            }
</pre>
&nbsp;

可以看的到，Loop 版本的確是把 iteration 跟 process 的 code 完全混在一起了，未來任何一方的邏輯要抽換都很麻煩，而 IEnumerator 則不會，分的很清楚，不過... 這 Code 會不會太 "髒" 了一點啊...? 試問一下，有誰會這麼勤勞，都用 IEnumerator 來寫 Code? 有的話請留個言，讓我崇拜一下...。

&nbsp;

屁話講了一堆，最後就是要帶出來 "的確有魚與熊掌得兼的方法"，怎麼作? 來看看用 C# 的 yield return 版本的程式碼:
<div>

<b>傳回 IEnumerable 的 METHOD (不用再寫 CLASS，實作 IEnumerator 了)</b>
<pre class="lang:c# decode:true">        public static IEnumerable&lt;int&gt; YieldReturnSample3(int start, int end)
        {
            for (int current = 1; current &lt;= 100; current++)
            {
                bool match = false;

                if (current % 2 == 0) match = true;
                if (current % 3 == 0) match = true;

                if (match == true)
                {
                    yield return current;
                }
            }
        }</pre>
&nbsp;

&nbsp;
<div>

<b>用 foreach 搭配 IEnumerable 印出每一筆數字</b>
<pre class="lang:c# decode:true">            foreach (int current in YieldReturnSample3(1, 100))
            {
                Console.WriteLine("Current Number: {0}", current);
            }
</pre>
&nbsp;

&nbsp;

&nbsp;

真是太神奇了，<a href="http://columns.chicken-house.net/">安德魯</a>。如何? 完美的結合兩者的優點，這種 code 實在是令人挑不出什麼缺點... 真是優雅... 不過念過<a href="http://en.wikipedia.org/wiki/System_programming">系統程式</a>的人一定都會吶悶... 這樣的程式執行方式，不就完全的違背了一般結構化程式典型的 function call / return 的鐵律了? 程式呼叫某個 function 就應該完全執行完才能 return 啊，怎麼能 "yield" return 後，跑完一圈又回到剛才執行到一半的 function 繼續跑，然後再 "yield" return ? 好像同實有兩段獨立的邏輯在運作... 還可以在兩者之間跳來跳去?

這就是 C# compiler 猛的地方了。搬出 reflector 來看看編譯出來的 code, 再被反組譯回來變成什麼樣子:

&nbsp;
<div>

<b>反組譯 YieldReturnSample3</b>
<pre class="lang:c# decode:true">public static IEnumerable&lt;int&gt; YieldReturnSample3(int start, int end)
{
    &lt;YieldReturnSample3&gt;d__0 d__ = new &lt;YieldReturnSample3&gt;d__0(-2);
    d__.&lt;&gt;3__start = start;
    d__.&lt;&gt;3__end = end;
    return d__;
}

 
</pre>
&nbsp;

耶? 看到一個多出來的 class: &lt;YieldReturnSample3&gt;d__0 ... 再看看它的 class 長啥樣:
<div>

<b>編譯器自動產生的 IEnumerator 衍生類別</b>
<pre class="lang:c# decode:true">[CompilerGenerated]
private sealed class &lt;YieldReturnSample3&gt;d__0 : IEnumerable&lt;int&gt;, IEnumerable, IEnumerator&lt;int&gt;, IEnumerator, IDisposable
{
    // Fields
    private int &lt;&gt;1__state;
    private int &lt;&gt;2__current;
    public int &lt;&gt;3__end;
    public int &lt;&gt;3__start;
    private int &lt;&gt;l__initialThreadId;
    public int &lt;current&gt;5__1;
    public bool &lt;match&gt;5__2;
    public int end;
    public int start;

    // Methods
    [DebuggerHidden]
    public &lt;YieldReturnSample3&gt;d__0(int &lt;&gt;1__state)
    {
        this.&lt;&gt;1__state = &lt;&gt;1__state;
        this.&lt;&gt;l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
    }

    private bool MoveNext()
    {
        switch (this.&lt;&gt;1__state)
        {
            case 0:
                this.&lt;&gt;1__state = -1;
                this.&lt;current&gt;5__1 = 1;
                while (this.&lt;current&gt;5__1 &lt;= 100)
                {
                    this.&lt;match&gt;5__2 = false;
                    if ((this.&lt;current&gt;5__1 % 2) == 0)
                    {
                        this.&lt;match&gt;5__2 = true;
                    }
                    if ((this.&lt;current&gt;5__1 % 3) == 0)
                    {
                        this.&lt;match&gt;5__2 = true;
                    }
                    if (!this.&lt;match&gt;5__2)
                    {
                        goto Label_0098;
                    }
                    this.&lt;&gt;2__current = this.&lt;current&gt;5__1;
                    this.&lt;&gt;1__state = 1;
                    return true;
                Label_0090:
                    this.&lt;&gt;1__state = -1;
                Label_0098:
                    this.&lt;current&gt;5__1++;
                }
                break;

            case 1:
                goto Label_0090;
        }
        return false;
    }

    [DebuggerHidden]
    IEnumerator&lt;int&gt; IEnumerable&lt;int&gt;.GetEnumerator()
    {
        Program.&lt;YieldReturnSample3&gt;d__0 d__;
        if ((Thread.CurrentThread.ManagedThreadId == this.&lt;&gt;l__initialThreadId) &amp;&amp; (this.&lt;&gt;1__state == -2))
        {
            this.&lt;&gt;1__state = 0;
            d__ = this;
        }
        else
        {
            d__ = new Program.&lt;YieldReturnSample3&gt;d__0(0);
        }
        d__.start = this.&lt;&gt;3__start;
        d__.end = this.&lt;&gt;3__end;
        return d__;
    }

    [DebuggerHidden]
    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.System.Collections.Generic.IEnumerable&lt;System.Int32&gt;.GetEnumerator();
    }

    [DebuggerHidden]
    void IEnumerator.Reset()
    {
        throw new NotSupportedException();
    }

    void IDisposable.Dispose()
    {
    }

    // Properties
    int IEnumerator&lt;int&gt;.Current
    {
        [DebuggerHidden]
        get
        {
            return this.&lt;&gt;2__current;
        }
    }

    object IEnumerator.Current
    {
        [DebuggerHidden]
        get
        {
            return this.&lt;&gt;2__current;
        }
    }
}
</pre>
&nbsp;

耶? 不就完全跟之前手工寫的 IEnumerator 一樣嘛? 只不過這個 IEnumerator 是自動產生出來的，不是手寫的...。 畢竟是機器產生的 CODE，總是沒那麼精簡。想到了嗎? 沒錯，這就是 C# compiler 送給你的 syntax sugar ...，你可以腦袋裡想像著計概課入門時教你的 LOOP 那樣簡單的想法，compiler 就幫你換成 IEnumerator 的實作方式，讓你隨隨便便就可以跟別人宣稱:

&nbsp;

"<strong><em><span style="color: #008000;">看! 我的程式有用到 Iterator 這個設計模式喔...</span></em></strong>"

&nbsp;

聽起來好像很臭屁的樣子... 哈哈! 如果是在真的用的到 <a href="http://en.wikipedia.org/wiki/Iterator">Iterator Patterns</a> 的情況下，真的是可以很臭屁的拿出來炫耀一下。不過，我幹嘛突然講起 yield return ? 各位看的過程中有沒有聯想到前幾篇 POST 講的 Thread Sync 那兩篇文章 ( <a href="http://columns.chicken-house.net/post/Thread-Sync-1-e6a682e5bfb5e7af87-e5a682e4bd95e58c96e8a2abe58b95e782bae4b8bbe58b95.aspx">#1</a>, <a href="http://columns.chicken-house.net/post/Thread-Sync-2-e5afa6e4bd9ce7af87-e4ba92e79bb8e7ad89e5be85e79a84e585a9e5808be59fb7e8a18ce7b792.aspx">#2</a> ) ? IEnumerator 跟 Thread Sync 又有什麼關係? 賣個關子，下篇繼續!

</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2008-09-18 03:25:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-18 03:25:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-yield-return-1-how-it-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>173</wp:comment_id>
			<wp:comment_author><![CDATA[kelvin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mrkelvin@yeah.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-02-01 14:57:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-02-01 14:57:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不错不错，把Yield的用法讲得很清楚]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>670</wp:comment_id>
			<wp:comment_author><![CDATA[訪客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[visitor@email.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-25 23:21:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-25 15:21:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你能用plain text來呈現你的程式碼嗎？現在只看到一大堆span =.=]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>莫明奇妙的錯誤訊息: 找不到 VJSharpCodeProvider ?</title>
		<link>http://columns.chicken-house.net/2008/09/10/%e8%8e%ab%e6%98%8e%e5%a5%87%e5%a6%99%e7%9a%84%e9%8c%af%e8%aa%a4%e8%a8%8a%e6%81%af-%e6%89%be%e4%b8%8d%e5%88%b0-vjsharpcodeprovider/</link>
		<pubDate>Wed, 10 Sep 2008 04:44:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/10/e88eabe6988ee5a587e5a699e79a84e98cafe8aaa4e8a88ae681af-e689bee4b88de588b0-VJSharpCodeProvider-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
話說前陣子處理了 <a href="/post/upgrade-to-be1450.aspx">BlogEngine.NET 升級到 1.4.5.0</a>，另外也寫了<a href="/post/BlogEngine-Extension-Secure-Post-v10.aspx"> SecurePost.cs</a> 這個 extension, 其時都碰過這個鳥問題，只是一直沒去理它而以。接下來為了要改 <a href="/post/BlogEngine-Extension-PostViewCount-10.aspx">PostViewCounter</a>.cs (BE extension, too), 又碰到... 於是就認真的研究了一下...。
</p>
<p>
過程是這樣，為了建立 BlogEngine 的開發環境，首先我從<a href="http://www.codeplex.com/blogengine">官方網站</a>下載了 source code, 解開後編譯都沒問題，OK。
</p>
<p>
接下來 WEB 的部份我把<a href="/">網站</a>上的 source code 搬過來 (不包含 ~/App_Data，太大了)，編譯也 OK。
</p>
<p>
不過我要改 Counter 的 Code 啊，沒有一些 SAMPLE DATA 很難測試，只好把資料檔也搬過來.. 結果 Visual Studio 2008 就冷冷的回了這訊息給我:
</p>
<p>
<strong><font color="#0080ff">(0): Build (web): The CodeDom provider type &quot;Microsoft.VJSharp.VJSharpCodeProvider, VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; could not be located.</font></strong> 
</p>
<p>
&nbsp;
</p>
<p>
我沒有漏貼前面的訊息... 的確是沒有檔名，也沒有行號(0)。我最不能忍受的就是沒頭沒尾的 ERROR MESSAGE 了。除了告訴你 &quot;掛掉了&quot; 之外，無頭無腦的對於追查問題實在沒什麼幫助。只好靠自己了...。雖然這是個 compile error message，不過我要 RUN 的畢竟是個 web site, 不編譯也是可以跑，除了那個惱人的錯誤訊息之外，要執行倒是沒問題。只不過編譯失敗，我就不能設中斷點，直接 F5 執行測試。雖然可以另外手動 Attach Process 的方式來除錯，不過每次都要這樣搞實在是很煩..
</p>
<p>
&nbsp;
</p>
<p>
仔細想了想，沒錯，我是沒裝 Visual J#。不過我的確沒要用 Visual J# 啊，如果真的用到 J# 的話，出這訊息是應該的。訊息沒有原始檔? 也沒有錯誤行號? 那問題應該是 Global 的範圍，第一個想到的就是 web.config 是不是定義了 CodeDom 或是指定了相關的 CodeProvider ? 無奈查了一遍沒看到，VS2008 的 PROJECT 設定也沒看到引用任何 J# 相關的 LIB...
</p>
<p>
&nbsp;
</p>
<p>
已經到了死馬當活馬醫的地步... 開始亂找一通碰碰運氣。搜尋了一下有沒有 *.java 的檔? OUCH，還真的有... 在 ~/App_Data/files 下找到我古董檔案，研究所時代寫的 Java Applet .... 順手試一下，刪掉後還真的就過了? 這個無頭無腦的問題，就在不知不覺中找到 solution, case closed!
</p>
<p>
&nbsp;
</p>
<p>
怒... 這樣也算? 找到 .java 的程式碼，去找 VJ# 來編譯還說的過去，不過找 &quot;source code&quot; 找到 ~/App_Data 實在是太超過了一點... 好歹也列個要編譯那個檔案，然後找不到對應的 CodeProvider，這樣要排除問題也簡單一點...
</p>
<p>
&nbsp;
</p>
<p>
結論是: 各位別太鐵齒，看來 ~/App_Data 下的檔案也是不能亂塞的... 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2008-09-10 04:44:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-10 04:44:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%8e%ab%e6%98%8e%e5%a5%87%e5%a6%99%e7%9a%84%e9%8c%af%e8%aa%a4%e8%a8%8a%e6%81%af-%e6%89%be%e4%b8%8d%e5%88%b0-vjsharpcodeprovider]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@darkthread.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.darkthread.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-01 13:36:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-01 13:36:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈! 我也遇到了，謝謝你的經驗分享，殺了*.java就OK了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>BlogEngine Extension: Secure Post v1.0</title>
		<link>http://columns.chicken-house.net/2008/09/06/blogengine-extension-secure-post-v1-0/</link>
		<pubDate>Sat, 06 Sep 2008 03:28:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/06/BlogEngine-Extension-Secure-Post-v10.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
因為家裡大人開出條件，除非新的 BLOG 系統 (就是我在用的 BlogEngine 啦) 有特定文章要輸入密碼才能看的功能，否則她就不想換系統了 (原來是用 CommunityServer 2007)。要弄密碼其實很簡單，不過過去試過 IIS 加上整合式驗證... 弄到最後該看的人看不到，也沒擋到該擋的人而作罷...。 
</p>
<p>
&nbsp;
</p>
<p>
仔細想了想大人的需求，要的就是簡單的控制機制。不需要先建立帳號，也不需要登入，就是特定幾篇文章要輸入暗號才能看到內容，就這樣而以。無耐 BlogEngine 還算很年輕，替它寫的 Extension 也還不多，<a href="http://www.dotnetblogengine.net/page/extensions.aspx">官方網站提供了幾個 Extension</a> 列表，找到最接近的是這個: <a href="http://blog.lavablast.com/post.aspx?id=ceb887a9-f0d1-4379-815a-513cda5d5fc8">Password Protected Post</a>... 不過它是以登入 BE 為使用者認證的方式，再依照 ROLE 跟 CATEGORY 的配對為授權方式，來控制那些讀者能看到那些文章...。就是不想要替每個人建帳號啊，看來只好自己寫了... Orz。 
</p>
<p>
&nbsp;
</p>
<p>
以往都是想要作什麼很簡單，難是難在把它作出來..。現在都反過來了，工具越來越強，系統也越來越完整，難的反而是思考要怎麼作，程式碼沒幾行就搞定了。之前的文章介紹過 BlogEngine 的 Extension 機制，這次就實際來試看看。我要寫的東西很簡單，就一組密碼就好，要有夠簡單的方式讓大人能夠指定那幾篇文章是要保護的，而所有的人 (已登入的除外) 只能看到提示輸入密碼的訊息，密碼打對了才會顯示文章內容。至於密碼要不要加密? 會不會被竊聽? 不重要啦，只要保護不要遜到按右鍵簡示原始碼，密碼跟內容都看光光了就好。 
</p>
<p>
&nbsp;
</p>
<p>
順手寫了幾行 CODE，先驗證一下最基本的動作做不做的到 (POC: Prove Of Concept)。第一步是先把顯示內容的動作攔下來，換成制示的輸入密碼訊息... 這個簡單，沒幾行就搞定了: 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/BlogEngineExtensionSecurePostv1.0_30DC/image_3.png" border="0" alt="image" width="660" height="392" /> 
</p>
<p>
直接從 CodePlex 抓下來的 Source Code, 解壓縮完就可以寫了。加上這段 CODE 並不難，整個 Extension 只有這樣而以: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>修改 POST 內容，改成提示輸出密碼的畫面</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
[Extension(&quot;SecurePost&quot;, &quot;1.0&quot;, &quot;&lt;a href=\&quot;http://columns.chicken-house.net\&quot;&gt;chicken&lt;/a&gt;&quot;)]public class SecurePost{    static SecurePost()    {        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);    }    private static void Post_Serving(object sender, ServingEventArgs e)    {        Post post = sender as Post;        StringBuilder bodySB = new StringBuilder();        {           // 略。透過 bodySB 輸出 HTML        }        e.Body = bodySB.ToString();    }}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>[Extension(<span class="str">&quot;SecurePost&quot;</span>, <span class="str">&quot;1.0&quot;</span>, <span class="str">&quot;&lt;a href=\&quot;http://columns.chicken-house.net\&quot;&gt;chicken&lt;/a&gt;&quot;</span>)]
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> SecurePost
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">static</span> SecurePost()
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    {
</pre>
<pre>
<span class="lnum">   6:  </span>        Post.Serving += <span class="kwrd">new</span> EventHandler&lt;ServingEventArgs&gt;(Post_Serving);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    }
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Post_Serving(<span class="kwrd">object</span> sender, ServingEventArgs e)
</pre>
<pre>
<span class="lnum">  10:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        Post post = sender <span class="kwrd">as</span> Post;
</pre>
<pre>
<span class="lnum">  12:  </span>        StringBuilder bodySB = <span class="kwrd">new</span> StringBuilder();
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        {
</pre>
<pre>
<span class="lnum">  14:  </span>           <span class="rem">// 略。透過 bodySB 輸出 HTML</span>
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        }
</pre>
<pre>
<span class="lnum">  16:  </span>        e.Body = bodySB.ToString();
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
看起來 CODE 還不少，不過算一算真正在作事的都是在湊那堆 HTML ... 關鍵只有一開始去攔 Post.Serving 事件，接到自己的事件處理器 Post_Serving( ) 上，之後所有會輸出 Post 內容的地方，都會觸發這個事件。然後只要在事件處理器內去調整 Post 內容就可以了。 
</p>
<p>
&nbsp;
</p>
<p>
好，好的開始是成功的一半，已經完成 1/3 了 (什麼???) 第一部份的 CODE 產生的 HTML，會引導使用者輸入密碼，按下 [GO] 之後，就會連到 POST 的網址了。不過除了原本網址之外 (post.AbsoluteLink) 後面還要加上 &quot;?pwd=xxxxxx&quot; 帶上使用者輸入的密碼。前面講過我只要最基本的防護，其它進階的安全問題就不理它了。我只要掌握兩個原則: 
</p>
<ol>
	<li>密碼一定要在 SERVER 端確認 (不能讓不知道密碼的人 view source 就找到密碼)</li>
	<li>沒輸入密碼前不能在 CLIENT 端出現 POST 內容 (不能單純的用 DHTML 把文章內容 &quot;藏&quot; 起來)</li>
</ol>
<p>
另外補一件事，我也不要讓全部的文章都用這種機制保護。只要有特別標示的 POST 要密碼就好。看到 BlogEngine 內建的 BreakPost 這個擴充程式，我就仿照它的作法，內文找到特定字串就啟用。我定的規則是整篇 POST 內容開頭一定要是 &quot;[password]&quot; 才會啟用密碼保護機制。 
</p>
<p>
既然這樣，第二步也很簡單。如果密碼對，一切照原狀顯示內容。密碼不對的話就一樣攔下來...。程式碼.... 只是在第一步的程式碼多了... 兩行... 
</p>
<p>
&nbsp;
</p>
<div>
<strong>加上檢查密碼的 CODE</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    private static void Post_Serving(object sender, ServingEventArgs e)    {        Post post = sender as Post;        if (HttpContext.Current.Request[&quot;pwd&quot;] == Password) return;        if (!e.Body.StartsWith(&quot;[password]&quot;, StringComparison.CurrentCultureIgnoreCase)) return;        StringBuilder bodySB = new StringBuilder();        {           // 略。透過 bodySB 輸出 HTML        }        e.Body = bodySB.ToString();    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Post_Serving(<span class="kwrd">object</span> sender, ServingEventArgs e)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    Post post = sender <span class="kwrd">as</span> Post;
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">if</span> (HttpContext.Current.Request[<span class="str">&quot;pwd&quot;</span>] == Password) <span class="kwrd">return</span>;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">if</span> (!e.Body.StartsWith(<span class="str">&quot;[password]&quot;</span>, StringComparison.CurrentCultureIgnoreCase)) <span class="kwrd">return</span>;
</pre>
<pre>
<span class="lnum">   6:  </span>    StringBuilder bodySB = <span class="kwrd">new</span> StringBuilder();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>       <span class="rem">// 略。透過 bodySB 輸出 HTML</span>
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    }
</pre>
<pre>
<span class="lnum">  10:  </span>    e.Body = bodySB.ToString();
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
啥米? 就是第一部份的 CODE 加上第四及第五行就搞定了? 程式不挑的話，現在已經寫完了... 哈哈! 上面的輸入密碼畫面，輸入正確密碼後就可以看到文章內容了。我特地連網址列一起複製下來，在網址列上會看到密碼明碼。照道理應該是要先 HASH 啦，不過 CLIENT SIDE 跟 SERVER SIDE 都要有同樣的 HASH 機制才行，想用 MD5 / SHA256 之類的來算，無耐 CLIENT 要弄這些也是很煩，就決定不理它了...。明碼就明碼吧，執行後的畫面像這樣: 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/BlogEngineExtensionSecurePostv1.0_30DC/image_6.png" border="0" alt="image" width="660" height="450" /> 
</p>
<p>
&nbsp;
</p>
<p>
剩下的部份就沒什麼了，想想加上去好了。就是透過 BlogEngine 的 Extension Manager，讓使用者可以簡單的調整參數。要讓使用者自定的參數只有三個: 
</p>
<ol>
	<li>文章內容被保護時，要顯示的訊息</li>
	<li>密碼提示</li>
	<li>真正的密碼</li>
</ol>
<p>
這些東西自己做的話，就還得想要開檔案或寫資料庫，有點小囉唆，不過已經有 Extension Manager 了，只要在原本的 static constructor 再加幾行就搞定: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>加上 Extension 接受的設定參數，及初始值</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    static SecurePost()    {        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);        ExtensionSettings settings = new ExtensionSettings(&quot;SecurePost&quot;);        settings.AddParameter(            &quot;SecurePostMessage&quot;,            &quot;顯示訊息:&quot;);        settings.AddParameter(            &quot;PasswordHint&quot;,            &quot;密碼提示:&quot;);        settings.AddParameter(            &quot;PasswordValue&quot;,            &quot;指定密碼:&quot;);        settings.AddValues(new string[] {            &quot;本篇文章已受密碼保護，請依照題示輸入密碼。&quot;,             &quot;一二三四&quot;,            &quot;1234&quot;});        settings.IsScalar = true;        settings.Help = &quot;用密碼保護文章的內容。&quot;;        ExtensionManager.ImportSettings(settings);        _settings = ExtensionManager.GetSettings(&quot;SecurePost&quot;);    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">static</span> SecurePost()
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    Post.Serving += <span class="kwrd">new</span> EventHandler&lt;ServingEventArgs&gt;(Post_Serving);
</pre>
<pre>
<span class="lnum">   4:  </span>    ExtensionSettings settings = <span class="kwrd">new</span> ExtensionSettings(<span class="str">&quot;SecurePost&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    settings.AddParameter(
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="str">&quot;SecurePostMessage&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        <span class="str">&quot;顯示訊息:&quot;</span>);
</pre>
<pre>
<span class="lnum">   8:  </span>    settings.AddParameter(
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="str">&quot;PasswordHint&quot;</span>,
</pre>
<pre>
<span class="lnum">  10:  </span>        <span class="str">&quot;密碼提示:&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    settings.AddParameter(
</pre>
<pre>
<span class="lnum">  12:  </span>        <span class="str">&quot;PasswordValue&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="str">&quot;指定密碼:&quot;</span>);
</pre>
<pre>
<span class="lnum">  14:  </span>    settings.AddValues(<span class="kwrd">new</span> <span class="kwrd">string</span>[] {
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        <span class="str">&quot;本篇文章已受密碼保護，請依照題示輸入密碼。&quot;</span>, 
</pre>
<pre>
<span class="lnum">  16:  </span>        <span class="str">&quot;一二三四&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        <span class="str">&quot;1234&quot;</span>});
</pre>
<pre>
<span class="lnum">  18:  </span>    settings.IsScalar = <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    settings.Help = <span class="str">&quot;用密碼保護文章的內容。&quot;</span>;
</pre>
<pre>
<span class="lnum">  20:  </span>    ExtensionManager.ImportSettings(settings);
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    _settings = ExtensionManager.GetSettings(<span class="str">&quot;SecurePost&quot;</span>);
</pre>
<pre>
<span class="lnum">  22:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
我已經很努力的多撐幾行了... 不過也只有這廿行，寫完了...。整個 .cs 檔案直接丟到 ~/App_Code/Extension 就算安裝完成。用管理者身份登入 BE 後，在 Extension 那頁可以看到: 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/BlogEngineExtensionSecurePostv1.0_30DC/image_9.png" border="0" alt="image" width="660" height="311" /> 
</p>
<p>
不錯，SecurePost 已經出現在 Extension Manager 裡了。因為有加上 settings 的程式碼，所以右邊有 [編輯] 的字樣出現。點下去之後會到這個畫面: 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/BlogEngineExtensionSecurePostv1.0_30DC/image_12.png" border="0" alt="image" width="660" height="267" /> 
</p>
<p>
嗯，看起來真專業，沒想到從頭到尾所有的 CODE 還不到一百行...。幾十行 CODE 寫出來的 Extension 就可以唬人了.. :D，試看看還真的會動耶 (廢話)。早知道寫起來那麼快，當初就不花那麼多時間去找人家寫好的了...。最後附上整段完整的程式碼，有需要的人就拿去用吧! 用法很簡單，全部複製下來 (可以按 [COPY CODE] 就好)，存檔，把檔案放在 ~/App_Code/Extension/SecurePost.cs 下，然後用管理者身份進入 BlogEngine Extension Manager 改一改就好了! 
</p>
<p>
&nbsp;
</p>
<p>
大功告成! 這個 Extension 如果對你有用的話就拿去用吧，要散佈也歡迎，不過只有個小要求，請不要把程式碼存到別的地方供人下載，請直接提供我這篇文章的網址就好。覺的好用就留個話給我，要幫我推一下文或讚助就更好了 :D，謝謝收看! 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
-- 
</p>
<div>
<strong>完整的 SecurePost.cs 程式碼</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
using System;using System.Web;using System.Web.UI;using BlogEngine.Core.Web.Controls;using BlogEngine.Core;using System.Text;[Extension(&quot;SecurePost&quot;, &quot;1.0&quot;, &quot;&lt;a href=\&quot;http://columns.chicken-house.net\&quot;&gt;chicken&lt;/a&gt;&quot;)]public class SecurePost{    private static string SecurePostMessage { get { return _settings.GetSingleValue(&quot;SecurePostMessage&quot;); } }    private static string Password { get { return _settings.GetSingleValue(&quot;PasswordValue&quot;); } }    private static string PasswordHint { get { return _settings.GetSingleValue(&quot;PasswordHint&quot;); } }    private static ExtensionSettings _settings = null;    static SecurePost()    {        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);        ExtensionSettings settings = new ExtensionSettings(&quot;SecurePost&quot;);        settings.AddParameter(            &quot;SecurePostMessage&quot;,            &quot;顯示訊息:&quot;);        settings.AddParameter(            &quot;PasswordHint&quot;,            &quot;密碼提示:&quot;);        settings.AddParameter(            &quot;PasswordValue&quot;,            &quot;指定密碼:&quot;);        settings.AddValues(new string[] {            &quot;本篇文章已受密碼保護，請依照題示輸入密碼。&quot;,             &quot;一二三四&quot;,            &quot;1234&quot;});        //settings.ShowAdd = false;        //settings.ShowDelete = false;        //settings.ShowEdit = true;        settings.IsScalar = true;        settings.Help = &quot;用密碼保護文章的內容。&quot;;        ExtensionManager.ImportSettings(settings);        _settings = ExtensionManager.GetSettings(&quot;SecurePost&quot;);    }    private static void Post_Serving(object sender, ServingEventArgs e)    {        Post post = sender as Post;        if (HttpContext.Current.User.Identity.IsAuthenticated == true) return;        if (HttpContext.Current.Request[&quot;pwd&quot;] == Password) return;        if (!e.Body.StartsWith(&quot;[password]&quot;, StringComparison.CurrentCultureIgnoreCase)) return;        StringBuilder bodySB = new StringBuilder();        {            bodySB.AppendFormat(                &quot;&lt;b&gt;{0}&lt;/b&gt;&lt;p/&gt;&quot;,                HtmlEncode(SecurePostMessage));            if (e.Location == ServingLocation.Feed)            {            }            else            {                bodySB.Append(&quot;&lt;div&gt;&quot;);                bodySB.AppendFormat(                    @&quot;請輸入密碼(提示: &lt;b&gt;{0}&lt;/b&gt;): &lt;input id=&quot;&quot;postpwd&quot;&quot; type=&quot;&quot;password&quot;&quot;/&gt;&lt;button onclick=&quot;&quot;document.location.href=&#39;{1}&#39;+&#39;?pwd=&#39;+escape(this.parentNode.all.postpwd.value);&quot;&quot;&gt;GO&lt;/button&gt;&quot;,                     PasswordHint,                    post.AbsoluteLink);                bodySB.Append(&quot;&lt;/div&gt;&quot;);            }        }        e.Body = bodySB.ToString();    }    private static string HtmlEncode(string text)    {        return HttpContext.Current.Server.HtmlEncode(text);    }}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">using</span> System;
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">using</span> System.Web;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">using</span> System.Web.UI;
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">using</span> BlogEngine.Core.Web.Controls;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">using</span> BlogEngine.Core;
</pre>
<pre>
<span class="lnum">   6:  </span><span class="kwrd">using</span> System.Text;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   8:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  10:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>[Extension(<span class="str">&quot;SecurePost&quot;</span>, <span class="str">&quot;1.0&quot;</span>, <span class="str">&quot;&lt;a href=\&quot;http://columns.chicken-house.net\&quot;&gt;chicken&lt;/a&gt;&quot;</span>)]
</pre>
<pre>
<span class="lnum">  12:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> SecurePost
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>{
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span> SecurePostMessage { get { <span class="kwrd">return</span> _settings.GetSingleValue(<span class="str">&quot;SecurePostMessage&quot;</span>); } }
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span> Password { get { <span class="kwrd">return</span> _settings.GetSingleValue(<span class="str">&quot;PasswordValue&quot;</span>); } }
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span> PasswordHint { get { <span class="kwrd">return</span> _settings.GetSingleValue(<span class="str">&quot;PasswordHint&quot;</span>); } }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> ExtensionSettings _settings = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  20:  </span>    <span class="kwrd">static</span> SecurePost()
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    {
</pre>
<pre>
<span class="lnum">  22:  </span>        Post.Serving += <span class="kwrd">new</span> EventHandler&lt;ServingEventArgs&gt;(Post_Serving);
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  24:  </span>        ExtensionSettings settings = <span class="kwrd">new</span> ExtensionSettings(<span class="str">&quot;SecurePost&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  26:  </span>        settings.AddParameter(
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>            <span class="str">&quot;SecurePostMessage&quot;</span>,
</pre>
<pre>
<span class="lnum">  28:  </span>            <span class="str">&quot;顯示訊息:&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        settings.AddParameter(
</pre>
<pre>
<span class="lnum">  30:  </span>            <span class="str">&quot;PasswordHint&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            <span class="str">&quot;密碼提示:&quot;</span>);
</pre>
<pre>
<span class="lnum">  32:  </span>        settings.AddParameter(
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>            <span class="str">&quot;PasswordValue&quot;</span>,
</pre>
<pre>
<span class="lnum">  34:  </span>            <span class="str">&quot;指定密碼:&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  36:  </span>        settings.AddValues(<span class="kwrd">new</span> <span class="kwrd">string</span>[] {
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>            <span class="str">&quot;本篇文章已受密碼保護，請依照題示輸入密碼。&quot;</span>, 
</pre>
<pre>
<span class="lnum">  38:  </span>            <span class="str">&quot;一二三四&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>            <span class="str">&quot;1234&quot;</span>});
</pre>
<pre>
<span class="lnum">  40:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>        <span class="rem">//settings.ShowAdd = false;</span>
</pre>
<pre>
<span class="lnum">  42:  </span>        <span class="rem">//settings.ShowDelete = false;</span>
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>        <span class="rem">//settings.ShowEdit = true;</span>
</pre>
<pre>
<span class="lnum">  44:  </span>        settings.IsScalar = <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>        settings.Help = <span class="str">&quot;用密碼保護文章的內容。&quot;</span>;
</pre>
<pre>
<span class="lnum">  46:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>        ExtensionManager.ImportSettings(settings);
</pre>
<pre>
<span class="lnum">  48:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>        _settings = ExtensionManager.GetSettings(<span class="str">&quot;SecurePost&quot;</span>);
</pre>
<pre>
<span class="lnum">  50:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  51:  </span>    }
</pre>
<pre>
<span class="lnum">  52:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  53:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Post_Serving(<span class="kwrd">object</span> sender, ServingEventArgs e)
</pre>
<pre>
<span class="lnum">  54:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  55:  </span>        Post post = sender <span class="kwrd">as</span> Post;
</pre>
<pre>
<span class="lnum">  56:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  57:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  58:  </span>        <span class="kwrd">if</span> (HttpContext.Current.User.Identity.IsAuthenticated == <span class="kwrd">true</span>) <span class="kwrd">return</span>;
</pre>
<pre class="alt">
<span class="lnum">  59:  </span>        <span class="kwrd">if</span> (HttpContext.Current.Request[<span class="str">&quot;pwd&quot;</span>] == Password) <span class="kwrd">return</span>;
</pre>
<pre>
<span class="lnum">  60:  </span>        <span class="kwrd">if</span> (!e.Body.StartsWith(<span class="str">&quot;[password]&quot;</span>, StringComparison.CurrentCultureIgnoreCase)) <span class="kwrd">return</span>;
</pre>
<pre class="alt">
<span class="lnum">  61:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  62:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  63:  </span>        StringBuilder bodySB = <span class="kwrd">new</span> StringBuilder();
</pre>
<pre>
<span class="lnum">  64:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  65:  </span>            bodySB.AppendFormat(
</pre>
<pre>
<span class="lnum">  66:  </span>                <span class="str">&quot;&lt;b&gt;{0}&lt;/b&gt;&lt;p/&gt;&quot;</span>,
</pre>
<pre class="alt">
<span class="lnum">  67:  </span>                HtmlEncode(SecurePostMessage));
</pre>
<pre>
<span class="lnum">  68:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  69:  </span>            <span class="kwrd">if</span> (e.Location == ServingLocation.Feed)
</pre>
<pre>
<span class="lnum">  70:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  71:  </span>            }
</pre>
<pre>
<span class="lnum">  72:  </span>            <span class="kwrd">else</span>
</pre>
<pre class="alt">
<span class="lnum">  73:  </span>            {
</pre>
<pre>
<span class="lnum">  74:  </span>                bodySB.Append(<span class="str">&quot;&lt;div&gt;&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  75:  </span>                bodySB.AppendFormat(
</pre>
<pre>
<span class="lnum">  76:  </span>                    <span class="str">@&quot;請輸入密碼(提示: &lt;b&gt;{0}&lt;/b&gt;): &lt;input id=&quot;</span><span class="str">&quot;postpwd&quot;</span><span class="str">&quot; type=&quot;</span><span class="str">&quot;password&quot;</span><span class="str">&quot;/&gt;&lt;button onclick=&quot;</span><span class="str">&quot;document.location.href=&#39;{1}&#39;+&#39;?pwd=&#39;+escape(this.parentNode.all.postpwd.value);&quot;</span><span class="str">&quot;&gt;GO&lt;/button&gt;&quot;</span>, 
</pre>
<pre class="alt">
<span class="lnum">  77:  </span>                    PasswordHint,
</pre>
<pre>
<span class="lnum">  78:  </span>                    post.AbsoluteLink);
</pre>
<pre class="alt">
<span class="lnum">  79:  </span>                bodySB.Append(<span class="str">&quot;&lt;/div&gt;&quot;</span>);
</pre>
<pre>
<span class="lnum">  80:  </span>            }
</pre>
<pre class="alt">
<span class="lnum">  81:  </span>        }
</pre>
<pre>
<span class="lnum">  82:  </span>        e.Body = bodySB.ToString();
</pre>
<pre class="alt">
<span class="lnum">  83:  </span>    }
</pre>
<pre>
<span class="lnum">  84:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  85:  </span>    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span> HtmlEncode(<span class="kwrd">string</span> text)
</pre>
<pre>
<span class="lnum">  86:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  87:  </span>        <span class="kwrd">return</span> HttpContext.Current.Server.HtmlEncode(text);
</pre>
<pre>
<span class="lnum">  88:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  89:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2008-09-06 03:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-06 03:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blogengine-extension-secure-post-v1-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="beext"><![CDATA[BlogEngine Extension]]></category>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[esserei@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-06 12:06:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-06 12:06:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好厲害，給你拍拍手！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-07 00:11:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-07 00:11:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太厲害囉，如果可以多組就更棒了~

公司八卦一組

大學同學一組

高中同學一組

ccccc
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sea@ms16.url.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-07 03:45:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-07 03:45:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[well done! good job!
真的是很厲害...(之前還一直跟我說沒辦法,我就覺得別人可以,怎麼會沒辦法...:P)
不過這個版本的界面太工程師了,我不喜歡~~(哈哈,我不是要找碴,我只是實話實說...)

p.s:金主面前,主婦不打誑語...


]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-01 00:17:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-01 00:17:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@sea大人：

我家的版型如何? 應該不會太工程師了吧?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[RUN! PC] 2008 九月號</title>
		<link>http://columns.chicken-house.net/2008/09/02/run-pc-2008-%e4%b9%9d%e6%9c%88%e8%99%9f/</link>
		<pubDate>Tue, 02 Sep 2008 21:58:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/02/RUNPC-2008-09.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="304" alt="image" src="/wp-content/be-files/WindowsLiveWriter/RUNPC2008_13519/image_5.png" width="420" border="0"> </p> <p>感謝編輯賞光，第三篇順利刊出 :D </p> <p>&nbsp;</p> <p>執行緒這種東西，實在不是什麼主流的文章，不過雜誌社願意刊到第三篇，真是感謝... 前兩篇分別介紹了同步機制跟旗標，這次用執行緒集區作總結，提供了綜合的應用，也對效能的影響作整理，讓讀者具體的瞭解使用前後的效能差異。 </p> <p>&nbsp;</p> <p>這次文章內提到了 ThreadPool 的應用，不過因為內容及篇幅的關係，沒有挖到 ThreadPool 本身怎麼設計。對這部份有興趣的讀者可以參考我寫的這三篇:</p> <p><a href="http://columns.chicken-house.net/post/ThreadPool-e5afa6e4bd9c-1-e59fbae69cace6a682e5bfb5.aspx">ThreadPool 實作 #1. 基本概念</a></p> <p><a href="http://columns.chicken-house.net/post/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx">ThreadPool 實作 #2. 程式碼 (C#)</a></p> <p><a href="http://columns.chicken-house.net/post/ThreadPool-e5afa6e4bd9c-3-AutoResetEvent-ManualResetEvent.aspx">ThreadPool 實作 #3. AutoResetEvent / ManualResetEvent</a></p> <p>&nbsp;</p> <p>雖然好像沒有人因為看到雜誌才連到這裡來，不過還是要囉唆一下，看到文章有任何意見都可以在這裡留言給我。文章內提到的 <a href="http://demo.chicken-house.net/RUNPC/2008-09/2008-09.zip">SAMPLE CODE 可以在這裡下載</a>! 這次的範例程式是 Console application，不提供直接在網頁上執行，下載回去試試吧!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2008-09-02 21:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-02 21:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2008-%e4%b9%9d%e6%9c%88%e8%99%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-05 12:28:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-05 12:28:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[拍拍手~~~~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>180</wp:comment_id>
			<wp:comment_author><![CDATA[北爪]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jam_popz@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-17 04:16:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-17 04:16:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯～我就是在雜誌上看到連結過來的
雖然我都看不懂
但是經過您這麼細心的闡述一些我似是非懂的原理
讓我有更換多核心的衝動
然家中pc只是用來上網,玩遊戲,下載,解壓縮,分割影片..
還是對未來有著一份憧憬阿～
感謝您的文章
增長我的見聞]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>181</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-17 21:20:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-17 21:20:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，感謝捧場 :D，記得填一下讀者回函喔~

以後還請多多支持 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[jenming]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jenming.chung@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-31 12:01:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-31 12:01:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問版大在 ASP.NET 的 WebForm 中有辦法實做多執行緒嗎?
謝謝您的分享]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>183</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-01 02:12:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-01 02:12:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以的，不過在WEBFORM要再自己實作多執行緒是很不妥的，這樣很容易破壞 IIS 本身對執行緒的掌空。

過去我有兩篇文章正好是介紹這個主題的，文內我也有提供 sample code:

Background Thread in ASP.NET ... 
http://columns.chicken-house.net/post/Background-Thread-in-ASPNET-.aspx

Background Thread in ASP.NET (II)
http://columns.chicken-house.net/post/Background-Thread-in-ASPNET-(II).aspx

另外一個相關的主題，你也可以去找找 AsyncPage 的說明... 希望這些資訊對你有幫助 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>好酷的漆彈陣列...</title>
		<link>http://columns.chicken-house.net/2008/09/02/%e5%a5%bd%e9%85%b7%e7%9a%84%e6%bc%86%e5%bd%88%e9%99%a3%e5%88%97/</link>
		<pubDate>Tue, 02 Sep 2008 01:07:01 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/02/e5a5bde985b7e79a84e6bc86e5bd88e999a3e58897.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&nbsp;</p> <div class="wlWriterSmartContent" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:fbf39dcd-a75c-41b7-b8b1-3e9500c2ffc8" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"><div><object width="425" height="355"><param name="movie" value="http://www.youtube.com/v/fKK933KK6Gg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/fKK933KK6Gg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;fs=1" type="application/x-shockwave-flash" wmode="transparent" width="425" height="355"></embed></object></div></div> <p>&nbsp;</p> <p>雖然我很少貼這些五四三的 (明明 543 這 tags 點下去有一堆..) ，不過無意間在<a href="http://chinese.engadget.com/">癮科技</a>逛到<a href="http://chinese.engadget.com/2008/09/01/mythbusters-explain-the-difference-between-cpu-and-gpu/">這段</a>實在是太酷了... 流言終結者這節目的 Adam &amp; Jamie用漆彈示範來比喻 CPU / GPU 繪圖的差別... 不管它的比喻精不精確或妥不妥當啦，那一瞬間噴出蒙那麗莎實在是太酷了... :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2008-09-02 01:07:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-02 01:07:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a5%bd%e9%85%b7%e7%9a%84%e6%bc%86%e5%bd%88%e9%99%a3%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>184</wp:comment_id>
			<wp:comment_author><![CDATA[watch phone]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[superstar@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.shopkami.com/shop.html?page=shop.browse&amp;category_id=98</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-20 17:28:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-20 17:28:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个不错，先留个脚印下次再来，谢谢分享]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>請正確的引用文章內容!</title>
		<link>http://columns.chicken-house.net/2008/09/01/%e8%ab%8b%e6%ad%a3%e7%a2%ba%e7%9a%84%e5%bc%95%e7%94%a8%e6%96%87%e7%ab%a0%e5%85%a7%e5%ae%b9/</link>
		<pubDate>Mon, 01 Sep 2008 02:11:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/09/01/reference-how-to.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>在開始講 "為什麼" 之前，先講一下該如何正確的引用我的文章。 </p> <ol> <li><strong><font color="#ff0000">明確的提供本站及該文的網址</font></strong>。例如:<br><br><font color="#808080">........ 網路上有個叫</font><font color="#808080"><a href="/">安德魯</a></font><font color="#808080">的寫過一篇文章: "</font><font color="#808080"><a href="/post/zoom-ie.aspx">任意放大/縮小網頁的內容</a></font><font color="#808080">" ...........<br><br></font><br> <li><strong><font color="#ff0000">若要轉貼，請以不超過 1/3 內容為原則</font></strong> (程式碼及檔案下載不算)，同時也要包含第一點的資訊。引用的部份請在格式上跟你的原文有所區隔，用斜體或是改顏色都可以。例如:<br><br><font color="#808080">........ 網路上有個叫</font><font color="#808080"><a href="/">安德魯</a></font><font color="#808080">的寫過一篇文章: "<a href="/post/zoom-ie.aspx">任意放大/縮小網頁的內容</a>" ，他提到一個用法:<br></font><strong><em><font color="#669967">把“放網頁大 200%”的功能直接加在我的最愛</font></em></strong>  <blockquote> <p><em><font color="#669967">只要把這個 link 加到書籤, 就大功告成了! </font></em></p> <p><font color="#669967"><em>javascript:document.body.style.zoom="150%";void(0);</em> </font></p> <p><em><font color="#669967">之後看到任何網頁, 覺的看不過癮想放大看, 再點一下這個 Bookmark 就好了.<br>覺的固定 150% 不好用, 那可以把 link 改成這樣: </font></em></p> <p><em><font color="#669967">javascript:document.body.style.zoom=prompt('縮放比例 (%):','100%');void(0);<br><br></font></em></p></blockquote> <li><strong><font color="#ff0000">如果要轉貼的部份超過 1/3，或是會牽扯到商業行為，請務必取得我的同意</font></strong>。<br>聯絡方式很簡單，在這裡留言我會看的到。<br><br>如果你要透過 RSS 自動轉貼，我也很歡迎! 不過一樣要符合前面兩點要求，請勿轉貼超過 1/3 的內容。<strong><font color="#ff0000">如果你的 RSS 轉貼系統只能轉貼整篇，很抱歉，只好請你停止 RSS 轉貼。</font></strong><br><br>另外，所謂的商業行為，不只是拿去投稿出書賺稿費之類的，<strong><font color="#ff0000">如果你轉載的網頁有刊登廣告，就已經算是商業行為了。</font></strong></li></ol> <p>&nbsp; </p> <p>&nbsp; </p> <p>-------------------------------------------------------------------------------------------------------------------------------- </p> <p>引用說明結束。以下為本文內容，純發洩用。 </p> <p>&nbsp; </p> <p>為什麼突然要貼這篇? 該說是 "一回生二回熟" 嘛? 沒錯，每次一時興起，到 GOOGLE 找一下我自己的資訊，總是會發現有人沒經過我同意轉貼我的文章...。轉貼對我實質上的影響並不大，畢竟我寫東西是興趣，不是拿還養家糊口的，所以被轉貼除了心理不大爽之外，其它都還好。不過這樣會大大的降低我寫東西的意願。 </p> <p>舉例來說，最不滿的就是像<a href="/post/e58f88e8a2abe79b9ce69687e4ba86-.aspx">上次在對岸的入口網站碰到的案例</a>，原文照貼，沒註明出處，留 comment 提醒還被砍掉!? 回報站方也是一副不理不睬的樣子... 這種沒什麼好說的了，直接用<a href="/post/e5be88e68ab1e6ad89efbc8ce69cace7ab99e4b88de6ada1e8bf8ee4be86e887aa-e799bee5baa6-(Baiducom)-e79a84e8a8aae5aea2-!!.aspx">我的方式</a>表達我的不滿。 </p> <p>碰過另一個<a href="/post/e58fafe683a12c-e7ab9fe784b6e581b7e8b2bce68891e79a84e69687e7aba0-.aspx">例子</a>，也是很令人厭惡，就是到處轉貼文章，不管有沒有註明出處。落落長的一整篇文章就被 COPY / PASTE 過去，最後加個小小的 "出處" 就算免責了? 如果他的網頁還放了廣告，那就等於是不當的取得利益。講的難聽一點，這跟盜版沒兩樣，不都是用別人的作品去賺取利益? 最後是通知 BLOGGER，<a href="/post/e981b2e4be86e79a84e6ada3e7bea9.aspx">站方停權</a>結束這件事。 </p> <p>&nbsp; </p> <p>看過 <a href="http://jedi.org/blog/">Jedi</a> 的文章，我很認同他在這篇 [<a href="http://jedi.org/blog/archives/005196.html">引用不能祇是引用</a>] 文章裡的看法。很多人好像以為只要加了 trackback 就是盡到道義上的責任了? Trackback 太方便了，之前用的 CS 甚至方便到連 trackback 的 URL 都不需要點，一切全都無腦化自動的進行。方便到好像原本該尊重作者的動作都不用作了，直接貼了就好。所以我的網站刻意不放 trackback，因為我不喜歡這樣的結果。 </p> <p>我自己認為尊重作者的引用方式，要有兩個前題。一個是清楚的讓你的讀者知道，這段引用的內容出自那個人的那一篇文章。另外就是轉貼的部份。如果你不能只提供 LINK，而需要轉貼它人的內容到你的文章內，請把握好 "片段" 的原則。轉貼幾句話是合理的，轉貼一整篇就是白目了。這跟書本只影印一部份 (好像是 1/3 以內?) 是合法的，整本影印就侵害到原作者版權了。網路上的內容，複製更容易了，也讓人更容易忽略掉這些問題。 </p> <p>&nbsp; </p> <p>所謂 "不教而殺謂之虐"，就藉著這個機會說明一下，怎樣作我才不會認為我的權益被侵害。我很歡迎同好轉貼我的文章，不過我既然是我自己的文章，我會保有這幾項權益: </p> <ol> <li><strong>個人形象</strong><br>我會發佈的東西都是在 internet 上代表我這個人。要幫我散佈可以，不過請務必讓讀者知道我的網址及該篇文章的網址。  <li><strong>讀者 feedback</strong><br>收到有人看了我的文章有 feedback, 對我是一大鼓勵。如果你引用的方式違背了第一點，就有可能讓想給我 feedback 的讀者找不到管道。  <li><strong>點閱率 / 廣告</strong><br>很實際的一點，如果你不當的引用會影響我的點閱率 (如同那些全文照貼的)，不論你有沒有註明出處，在這個層面上就已經侵犯到我的權益了。雖然我不靠廣告過日子，不過我把它當作打電動的經驗值看待，看著點閱次數增加也是一種成就感。  <li><strong>原作者要知道作品如何被利用</strong><br>如果你有不得以的理由 (比如要發布在內部，不能連到 internet, 或是發部在平面媒體、報章雜誌) 必需原文照貼，沒有辦法滿足上面三點...，或是你要拿去賣錢等等之類的商業應用，請務必取得我本人的同意。 </li></ol> <p>&nbsp; </p> <p>這篇不是合約，也不是在訂什麼法律條文...。我只是想表達出我對於 "轉貼" 及 "引用" 的看法而以。其實任何方式的引用我都歡迎，只要不違背上面四點原則為前題就好。只是一直碰到類似的事件，我不想成為處理盜文事件的老手啊啊啊...。希望打了這篇，可以讓那些沒有惡意的轉貼行為，不會被我誤認為又是盜文事件。 </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2008-09-01 02:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-01 02:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ab%8b%e6%ad%a3%e7%a2%ba%e7%9a%84%e5%bc%95%e7%94%a8%e6%96%87%e7%ab%a0%e5%85%a7%e5%ae%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
		<wp:comment>
			<wp:comment_id>185</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-01 12:29:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-01 12:29:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[讚!!

雖然我也很喜歡 copy Microsoft 的文章…:p]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>186</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-01 18:31:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-01 18:31:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我也常貼 :P

只不過我常常是從本機安裝好的 MSDN Library 找資料，等到要貼才發現沒有 internet 的網址... 也是挺麻煩的 :P

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>升級到 BlogEngine.NET 1.4.5.0 了</title>
		<link>http://columns.chicken-house.net/2008/08/29/%e5%8d%87%e7%b4%9a%e5%88%b0-blogengine-net-1-4-5-0-%e4%ba%86/</link>
		<pubDate>Fri, 29 Aug 2008 01:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/29/upgrade-to-be1450.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哈，升級還蠻簡單的，一下子就搞定了... 特此留念 :D
</p>
<p>
&nbsp;
</p>
<p>
枉我還大陣仗的對付它，VSS (Visual Source Safe), VSS (Volume Shadow copy Service) 都搬出來用了，結果只是目錄搬一搬就好... 咳咳。
</p>
<p>
除了 Bot Checker 沒有搬過來之外，其它應該都搞定了吧? 如果有發現我的網站有那裡沒弄好，記得留言跟我講一下 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2008-08-29 01:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-29 01:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%87%e7%b4%9a%e5%88%b0-blogengine-net-1-4-5-0-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>Canon G9 害我沒睡好... 相片自動轉正的問題</title>
		<link>http://columns.chicken-house.net/2008/08/28/canon-g9-%e5%ae%b3%e6%88%91%e6%b2%92%e7%9d%a1%e5%a5%bd-%e7%9b%b8%e7%89%87%e8%87%aa%e5%8b%95%e8%bd%89%e6%ad%a3%e7%9a%84%e5%95%8f%e9%a1%8c/</link>
		<pubDate>Thu, 28 Aug 2008 02:57:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/28/Canon-G9-e5aeb3e68891e6b292e79da1e5a5bd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
抱怨一下，因為在看照片時發現，有些直的拍的照片看起來是正確的 (會自己轉 90 度)，有些卻不是... 得歪著頭看，所以就很好奇到底是怎麼回事...。
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonG9_299C/image_12.png" border="0" alt="image" width="491" height="334" />
</p>
<p>
這幾張是正確的 (右上 &amp; 左下，會自動轉 90 度)
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonG9_299C/image_11.png" border="0" alt="image" width="489" height="307" /> 
</p>
<p>
這幾張是錯的 (應該自動轉 90 度才對)
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonG9_299C/image_10.png" border="0" alt="image" width="491" height="167" /> 
</p>
<p>
第二張是錯的 (應該要轉 180 度才對) 
</p>
<p>
&nbsp;
</p>
<p>
越想越不對，我記得除了我那台古董 CANON G2 之外，後來 CANON 的相機都有加上偵測轉向的機制啊? 不外乎是<a href="http://zh.wikipedia.org/w/index.php?title=%E6%B0%B4%E9%8A%80%E9%96%8B%E9%97%9C&amp;variant=zh-tw">水銀開關</a>或是類似的東西，總之相機能夠得知目前是不是轉直的拍，同時能把這資訊寫到 EXIF 內的 ORIENTATION 欄位去...
</p>
<p>
但是為什麼拍出來的相片有的可以自動轉，有的不行? 花了點時間歸納一下，發現 G9 拍出來的 &quot;有機會&quot; 是正常的，而家裡大人的 IXUS55 則都不會自動轉，真是怪了... 在相機上看都會自動轉正啊...
</p>
<p>
因為我的照片都是自己用 WPF 寫程式縮圖處理的，我開始懷疑是不是我的歸檔程式的問題。G9 拍的 .CR2 檔，透過 RAW CODEC 轉成 JPEG 會自動轉正，G9 / IXUS55 拍的 JPG 檔則不會...
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/CanonG9_299C/image_9.png" border="0" alt="image" width="498" height="153" /> 
</p>
<p>
嗯，開始無聊了，拿起相機拍了四種角度，然後用 DEBUGGER 去看 EXIF 的 ORIENTATION 值為啥... .CR2 要用 &quot;/ifd/{ushort=274}&quot; 來查，會得到一個 UInt16 的值，如果是 .JPG 則要改成 &quot;/app1/{ushort=0}/{ushort=274}&quot; ...
</p>
<p>
得到的值還真怪。.CR2 / .JPG 都一樣。依照上圖的順序，得到的值分別是 0x01, 0x08, 0x01, 0x06。查了查文件，除了轉 180 度那個的值不大對之外，另外三個都正常。不過 Canon Codec 在 decode 時會自動幫我做 RotateTransform，我得在處理 .JPG 時自己補上這個動作。除了轉 180&quot; 之外其它都正常了。
</p>
<p>
&nbsp;
</p>
<p>
就是那張 180 度的不正確，害我氣的牙癢癢的... 決定跟它拼了... 改了改程式，把所有 EXIF 都印出來，用肉眼一個一個比... 本來想說是不是有別的 FLAG 可以判定出來正反? 結果看到眼睛脫窗了也沒找到，我連 EXIF 裡的 BLOB (Binary data) 都一個一個印出來看 @_@，GOOGLE 也找不到啥有用的資訊...
</p>
<p>
最後氣到，拿起相機重拍一次，這次直接在相機上看，按下 DISPLAY 看看有無其它資訊... COW，終於發現... 相機自己也認不出轉 180 度的狀況? 嘖嘖... 搞了半天 CANON 只有偵測左轉及右轉 90 度的情況，轉 180 度就不理它了.. 哈哈!
</p>
<p>
不過有誰會轉 180 度拍照? 當然有...
</p>
<ol>
	<li>用右手拿相機自拍，按不到快門... 只好轉 180 度，用底下的姆指來按</li>
	<li>小孩拿著自己亂拍</li>
	<li>想不出來了...</li>
</ol>
<p>
總算水落石出，犧牲了幾個小時的睡覺時間，咳咳... 不過既然本版都是討論 .NET 程式設計的，最後就貼點 CODE 充個數... 也算沒偏離主題了 :D 不過我想應該沒人像我一樣無聊在搞這些吧? 
</p>
<p>
&nbsp;
</p>
<div>
<strong>取得 ORIENTATION 的值，並且判定要往那個方向旋轉</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
                        BitmapMetadata metadata = null;                        Rotation rotate = Rotation.Rotate0;                        // ...	                        ushort value = (ushort)metadata.GetQuery(&quot;/app1/{ushort=0}/{ushort=274}&quot;);                        if (value == 6)                        {                            rotate = Rotation.Rotate90;                        }                        else if (value == 8)                        {                            rotate = Rotation.Rotate270;                        }                        else if (value == 3)                        {                            rotate = Rotation.Rotate180;                        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>BitmapMetadata metadata = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   2:  </span>Rotation rotate = Rotation.Rotate0;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="rem">// ...  </span>
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">ushort</span> <span class="kwrd">value</span> = (<span class="kwrd">ushort</span>)metadata.GetQuery(<span class="str">&quot;/app1/{ushort=0}/{ushort=274}&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="kwrd">if</span> (<span class="kwrd">value</span> == 6)
</pre>
<pre>
<span class="lnum">   6:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    rotate = Rotation.Rotate90;
</pre>
<pre>
<span class="lnum">   8:  </span>}
</pre>
<pre class="alt">
<span class="lnum">   9:  </span><span class="kwrd">else</span> <span class="kwrd">if</span> (<span class="kwrd">value</span> == 8)
</pre>
<pre>
<span class="lnum">  10:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    rotate = Rotation.Rotate270;
</pre>
<pre>
<span class="lnum">  12:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  13:  </span><span class="kwrd">else</span> <span class="kwrd">if</span> (<span class="kwrd">value</span> == 3)
</pre>
<pre>
<span class="lnum">  14:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    rotate = Rotation.Rotate180;
</pre>
<pre>
<span class="lnum">  16:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<div>
<strong>利用 TransformGroup, 一次套用 ScaleTransform (縮放) + RotateTransform (旋轉) 兩種轉換特效</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            JpegBitmapEncoder target = new JpegBitmapEncoder();            TransformGroup tfs = new TransformGroup();            tfs.Children.Add(new ScaleTransform(0.1, 0.1));            switch (rotate)            {                case Rotation.Rotate90:                    tfs.Children.Add(new RotateTransform(90));                    break;                case Rotation.Rotate180:                    tfs.Children.Add(new RotateTransform(180));                    break;                case Rotation.Rotate270:                    tfs.Children.Add(new RotateTransform(270));                    break;            }            target.Frames.Add(BitmapFrame.Create(                    new TransformedBitmap(sourceFrame, tfs),                    null,                    null,                    null));            target.QualityLevel = quality;            //            // save to temp file            //            string temp = Path.Combine(Path.GetDirectoryName(trgFile), string.Format(&quot;{0:N}.tmp&quot;, Guid.NewGuid()));            FileStream trgs = File.OpenWrite(temp);            target.Save(trgs);            trgs.Close();
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>JpegBitmapEncoder target = <span class="kwrd">new</span> JpegBitmapEncoder();
</pre>
<pre>
<span class="lnum">   2:  </span>TransformGroup tfs = <span class="kwrd">new</span> TransformGroup();
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>tfs.Children.Add(<span class="kwrd">new</span> ScaleTransform(0.1, 0.1));
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">switch</span> (rotate)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>{
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">case</span> Rotation.Rotate90:
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        tfs.Children.Add(<span class="kwrd">new</span> RotateTransform(90));
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    <span class="kwrd">case</span> Rotation.Rotate180:
</pre>
<pre>
<span class="lnum">  10:  </span>        tfs.Children.Add(<span class="kwrd">new</span> RotateTransform(180));
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="kwrd">case</span> Rotation.Rotate270:
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        tfs.Children.Add(<span class="kwrd">new</span> RotateTransform(270));
</pre>
<pre>
<span class="lnum">  14:  </span>        <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>}
</pre>
<pre>
<span class="lnum">  16:  </span>target.Frames.Add(BitmapFrame.Create(
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        <span class="kwrd">new</span> TransformedBitmap(sourceFrame, tfs),
</pre>
<pre>
<span class="lnum">  18:  </span>        <span class="kwrd">null</span>,
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        <span class="kwrd">null</span>,
</pre>
<pre>
<span class="lnum">  20:  </span>        <span class="kwrd">null</span>));
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>target.QualityLevel = quality;
</pre>
<pre>
<span class="lnum">  22:  </span><span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  23:  </span><span class="rem">// save to temp file</span>
</pre>
<pre>
<span class="lnum">  24:  </span><span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  25:  </span><span class="kwrd">string</span> temp = Path.Combine(Path.GetDirectoryName(trgFile), <span class="kwrd">string</span>.Format(<span class="str">&quot;{0:N}.tmp&quot;</span>, Guid.NewGuid()));
</pre>
<pre>
<span class="lnum">  26:  </span>FileStream trgs = File.OpenWrite(temp);
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>target.Save(trgs);
</pre>
<pre>
<span class="lnum">  28:  </span>trgs.Close();
</pre>
</div>
</div>
<!-- end of code area -->
</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2008-08-28 02:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-28 02:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[canon-g9-%e5%ae%b3%e6%88%91%e6%b2%92%e7%9d%a1%e5%a5%bd-%e7%9b%b8%e7%89%87%e8%87%aa%e5%8b%95%e8%bd%89%e6%ad%a3%e7%9a%84%e5%95%8f%e9%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>187</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-28 07:44:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-28 07:44:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[海大人肯定會感動的，為了180度自拍照片，花了這麼多精神，太用心了(y)

--
問: 3 + 2 = ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>敗家: HTPC</title>
		<link>http://columns.chicken-house.net/2008/08/25/%e6%95%97%e5%ae%b6-htpc/</link>
		<pubDate>Mon, 25 Aug 2008 01:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/25/e69597e5aeb6-HTPC.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
&nbsp;
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/HTPC_1475F/image_3.png" border="0" alt="image" width="660" height="336" /> 
</p>
<p>
沒錯，我又敗家了... :D
</p>
<p>
&nbsp;
</p>
<p>
想弄 HTPC 已經很久了，不過老是碰到一些怪問題。原本想直接用桌機，不過桌機已經接了雙螢幕，要再接 LCD TV，沒在主機板上插兩張 VGA 卡就辦不到 (其它用 PCI / USB 之類的效能太差就不考慮了)。不過三個輸出都需要數位輸出 (兩台桌上的 LCD 都有 DVI，SHARP TV 又很有個性的不提供 D-SUB，只有 HDMI ... 不然就是色差...)，沒有插兩張 DUAL DVI 的中價位 VGA 卡也沒辦法...。我用不到這麼高級的顯示卡啊 :~~~
</p>
<p>
不過就算硬體搞定了也是個大問題。試過暫時接到 TV 過，有時我要 MCE 開出來開在桌上的 LCD，有時又要開在 TV ... 光是操作就很麻煩...。最後體認到了沒有弄一台專用機的話，HTPC大概只能試一下試爽的而以。
</p>
<p>
與其是想升級換張可以插兩張顯卡的主機板 + 新的顯卡，實在不是太便宜... 尤其我須要的是 DVI x 2 + HDMI ... 後來無意間看到一堆在介紹 AMD 780G 的文章... 算一算好像比換主機板還便宜...。
</p>
<p>
於是不知不覺，八月初某日下班就多提著一袋零件回來了... 哈哈。因為有一堆東西有備料，陸陸續續買了下列東西就開始享受了:
</p>
<ol>
	<li>主機板: ASUS M3A78-EM NTD 2750 </li>
	<li>CPU: AMD 4850e (45W 低耗電) NTD 2250 </li>
	<li>RAM: DDR2-800 2GB x 2 (實在用不到這麼多，不過看到一條 999，真的找不到理由去買 1G 的...) NTD 990 x 2 </li>
	<li>POWER: SEASONIC 330W (這個也很奢侈，明明整台機器全速運轉也沒有破 100W ... 不過其它牌都不信賴... 330W 是最低的規格了) NTD 1700 </li>
	<li>搖控器: Toshiba MCE 搖控器 NTD 550 </li>
	<li>便宜的 HDMI 線 3 公尺 NTD 130 </li>
	<li>喇叭: JungleRex AF-31S NTD 3800 </li>
	<li>現有的硬碟: Hitachi 7K250 250GB SATA2 HDD </li>
	<li>現有的舊機殼、光碟機、藍芽接收器、鍵盤滑鼠... ETC</li>
</ol>
<p>
其它像機殼，光碟機，硬碟機，鍵盤滑鼠等等就直接用現成的...。至於 MCE 一定要的 TV CARD 我反而沒買...。一方面現在的卡我都覺的太貴了 (因為之前買過 ATI theater pro 550 的卡，一張不到一千...)，再加上我很少在客廳看 LIVE TV...，就算要看也是先用 MCE 錄下來。我跟家裡大人的桌機都已經有 MCE + TV 卡了，實在不大需要再買第三張... 哈哈。
</p>
<p>
果然裝了 HTPC 這樣才覺的這台電視真的是好物啊 :D，隨便一部 DVD 或是 MPEG4 的片子 (來源當然是牧場來的...) 看起來都很棒。扣掉奢侈品，其實一萬以內都搞定了。硬體沒啥好介紹的，網路一查一堆，總是有魔人有一堆測試報告，看都看不完，輪不到我在這邊講。除了耗電量實在很低一定要講一下之外... 其它硬體介紹我就跳過去了。耗電量實在是不錯，一開機耗電量 85 W 左右，開機完進入 VISTA 後就降到 50 ~ 55W，看片時看 DVD (MPEG2) 或是 AVI ( DIVX / MPEG4 )，耗電量輕微升到 60 ~ 65W，跑一些變態的 BENCHMARK 才會飆到 75 ~ 80W...。進入待命模式才 1 ~ 2W，真的是算省電了。
</p>
<p>
&nbsp;
</p>
<p>
那特別要講的是啥? 主要要講怎樣不靠鍵盤滑鼠操作 MCE ... :D
</p>
<p>
不用 KB / MOUSE，那當然是用搖控器了。<a href="http://goods.ruten.com.tw/item/show?11080325270426">我買的這個</a>我覺的很不錯，接收器插上去就可以用，什麼 DRIVER 設定都免了，VISTA X64 也一切正常。搖控器上那顆綠綠的鈕，按下去就會自動叫出 MCE。叫出 MCE 後，主要的幾個功能也都有對應的按鈕，操作起來很方便。只要可以直接在 MCE 裡播放的話，用搖控器就搞定了。現在我連放 MP3 (原本用 Media Player) 跟放照片 (Windows Live Photo Gallery) 也都改用 MCE 了... (Y) 上面那張圖就是用 MCE 放 MP3 的樣子...。
</p>
<p>
搖控器上的電源鈕，也會直接對應到電腦的 &quot;SLEEP&quot; 及喚醒 SLEEP 中的電腦。如果你都只用 MCE，其實操作就很簡單了。按下搖控器的開關，電腦就醒來。看完再按一下電腦就 SLEEP 去了。康博的 TV CARD 使用者比較幸福，卡片上可以直接對應到電腦的電源開關。不過... 開機關機就要等的比較久。算算 SLEEP 模式下耗掉 1W 左右的電，就算了... 隨時想看一按就開還是比較爽啊..
</p>
<p>
&nbsp;
</p>
<p>
另一個比較特別的也要講一下。過去曾貼過一篇 [<a href="/post/e4b880e5808be4b880e890ace5a49ae79a84e7b0a1e5a0b1e599a8-Orz.aspx">一萬多塊錢的簡報器</a>]，提到有軟體 (<a href="http://www.salling.com/Clicker/windows/">Salling Clicker for Windows 3.5</a>)可以當簡報器，搖控 PPT 播放，也能搖控 Media Player ...，現在這些東西有內建在 VISTA 的版本了，主要就是透過 SlideShow。在 Vista 推出一年多之後，Microsoft 總算推出 <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=79f19684-f862-4e02-a2b0-0003b4565f34&amp;displaylang=en">Preview</a> 版的軟體，可以讓你的 Windows Mobile 5 / 6 的手機及PDA，搖身一變成為 Vista SlideShow Device。再搭配上 Microsoft 才開發到 BETA 版的 SlideShow Gadget for MCE... 耶! 手機可以變成 MCE 搖控器了!
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/HTPC_1475F/image_8.png" border="0" alt="image" width="347" height="267" /> <img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/HTPC_1475F/image_9.png" border="0" alt="image" width="347" height="267" /> 
</p>
<p>
這跟 MCE 搖控器有什麼不一樣? <a href="http://www.theunwired.net/?item=beta-microsoft-releases-beta-windows-media-center-sideshow-gadget">這篇文章</a>有簡單的介紹... <a href="http://www.cepro.com/article/microsoft_demos_sideshow_for_media_center_remote/">這裡</a>也找到另一篇...。首先，TV 的節目表都可以直接秀在手機上，播放的曲目也都會顯示在手機上，如果你不希望中斷影片的播放，這就很有用。這些功能是沒有螢幕的搖控器作不到的。不過... 大部份時間，還是搖控器好用。
</p>
<p>
但是為什麼我還是要特別提一下? 因為... 我還要聽音樂啊，聽音樂時我就懶的開電視了。不開電視的情況下，這就很好用了，直接在手機上選好媒體櫃裡的專輯，按下播放，整個客廳就有音樂可以聽了 :D，這完全是搖控器辦不到的 :D 
</p>
<p>
&nbsp;
</p>
<p>
<a href="http://nexus404.com/Blog/2007/03/21/slideshow-remote/"><img src="http://nexus404.com/Blog/wp-content/uploads/2007/03/microsoft-vista-slideshow-media-centre-remote.jpg" alt="Microsoft Vista Slideshow Media Centre Remote" width="232" height="300" /></a>
</p>
<p>
不過這兩種搖控方式不能合二為一嗎? 有... 只要肯花錢就有。<a href="http://nexus404.com/Blog/2007/03/21/slideshow-remote/">這支</a>搖控器就是符合 vista slideshow device 規格的 MCE 搖控器，一隻要 USD 199... 看到價錢，我還是買隻十分之一不到的搖控器 + 手機就好...
</p>
<p>
有打算用 HTPC 又有 WM5/WM6 手機的人一定要試一下。反正通通是現成的啊 (除了藍芽接收器你可能得花個一百塊買一支之外)。如果你也是 HTPC 一族的，有啥 TIPS 記得提供一下，如果不是的話，快點去敗吧 (H)!
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2008-08-25 01:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-25 01:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%97%e5%ae%b6-htpc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sea@ms16.url.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-07 03:41:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-07 03:41:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嚇,我直接連上此篇的link應該不算不肖份子的小孬孬吧?

p.s: 主婦永遠是對的,就算有錯也是金主的錯...:P

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>世紀末軟體革命復刻版</title>
		<link>http://columns.chicken-house.net/2008/08/22/%e4%b8%96%e7%b4%80%e6%9c%ab%e8%bb%9f%e9%ab%94%e9%9d%a9%e5%91%bd%e5%be%a9%e5%88%bb%e7%89%88/</link>
		<pubDate>Fri, 22 Aug 2008 22:44:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/22/e4b896e7b480e69cabe8bb9fe9ab94e99da9e591bde5bea9e588bbe78988.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img src="http://addons.books.com.tw/G/001/8/0010334718.jpg"></p> <p><a title="http://www.books.com.tw/exep/prod/booksfile.php?item=0010334718" href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010334718">http://www.books.com.tw/exep/prod/booksfile.php?item=0010334718</a></p> <p>&nbsp;</p> <p>沒想到電腦書也流行復古... 真是令人懷念的一本書啊，電腦書通常都是半年到一年就過時了，堆了兩年以上的書很少還會拿出來翻... 不過這本 (原版，不是復刻版) 例外，足足有好幾年的時間我還是會沒事就拿起來翻一翻。每想到十來年後還會有書局再版... 一定要推一下。</p> <p>這本書的觀念寫的實在不錯，我有很多OOP的觀念都是靠這本書建立起來的。常常有人問我學物件導向要看那本書，我都很想推這一本，不過早就絕版了那買的到... 前陣子才發現竟然有復刻版... :D</p> <p>再版的這本書是把原本上下兩冊併在一起，不知道有沒有附當年作者自己寫的 GUI 範例程式? 老實說那個範例程式在當年是蠻猛的，一張磁片就放的下的程式 (還包含 source code)，一個像 windows 3.1 的視窗環境，該有的功能一點都不少，你還可以用它的 API 開發在那個 GUI 環境下的應用程式...，不過那個東西實際的用途不大，現在搞不好也沒有環境能跑了，不過看到有人可以用 C++ 建立起像 Windows 3.1 那樣的環境，而且真的可以跑，還真是打從心底佩服...。</p> <p>技術可能都退流行了，現在流行的東西書上都沒提到，不過觀念的部份還是很實用，想加強自己物件導向觀念的人不要錯過這本書... [Y]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2008-08-22 22:44:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-22 22:44:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%96%e7%b4%80%e6%9c%ab%e8%bb%9f%e9%ab%94%e9%9d%a9%e5%91%bd%e5%be%a9%e5%88%bb%e7%89%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
	</item>
	<item>
		<title>Tips: 踢掉遠端桌面連線的使用者</title>
		<link>http://columns.chicken-house.net/2008/08/22/tips-%e8%b8%a2%e6%8e%89%e9%81%a0%e7%ab%af%e6%a1%8c%e9%9d%a2%e9%80%a3%e7%b7%9a%e7%9a%84%e4%bd%bf%e7%94%a8%e8%80%85/</link>
		<pubDate>Fri, 22 Aug 2008 20:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/22/Tips-TSDISCON.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
近日同事連不進 SERVER，因為連線人數已滿，又摸不到本機，正在那邊苦惱...。原來大家都知道怎麼連，但是都不知道怎麼砍人... 。從 windows 2000 開始就有 RDP 可以用了，當時學到的一個指令一直到現在都可以用，就藉這個機會貼一下。 
</p>
<p>
什麼秘技都一樣，說穿了就不值錢。半年前貼了一篇 [<a href="/post/Tips-e981a0e7abafe6a18ce99da2e980a3e7b79ae79a84e5b08fe68a80e5b7a7.aspx">遠端桌面連線的小技巧</a>]，裡面講到加上 /console 這參數就能連到 console session，不會跟其它人去搶那兩個連線，就可以把不順眼的 USER 砍了。連進去後要砍人很簡單，工作管理員叫出來，最後一頁 [USER] 就會列出有多少人掛在上面... 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_D86B/image_5.png" border="0" alt="image" width="511" height="242" /> 
</p>
<p>
通常這樣就能解決 90% 的問題了。如果連這個秘密連線都被用掉了，那只剩另一招: TSDISCON.exe 
</p>
<p>
&nbsp;
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/Tips_D86B/image_6.png" border="0" alt="image" width="660" height="257" /> 
</p>
<p>
TSDISCON: Disconnects a terminal session. 讚! 就是要這種東西... 用法很簡單，如果你有遠端 SERVER 的管理者權限，防火牆又沒把 NETBIOS 關掉，那麼可以這樣用: 
</p>
<p>
&nbsp;
</p>
<ol>
	<li>先登入遠端 server<br />
	NET USE <a href="file://\\MYSERVER">\\MYSERVER</a> /user:MYACCOUNT *</li>
	<li>踢掉其它人<br />
	TSDISCON 1 /SERVER:MYSERVER</li>
</ol>
<p>
BINGO，其中要注意一下就是 SESSION ID，也就是上面工作管理員 ID 那一欄。0 代表 console，其它就是額外的連線。不過除非你有另外買 LICENCE，否則 OS 內建的授權只有兩個連線，意思就是亂猜一通，1 跟 2 隨便挑一個砍了就好... 
</p>
<p>
指令成功的話，被你挑中的連線就會中斷了。趁對方還沒重新連上去之前，快點連進去佔名額吧 :D 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2008-08-22 20:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-22 20:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips-%e8%b8%a2%e6%8e%89%e9%81%a0%e7%ab%af%e6%a1%8c%e9%9d%a2%e9%80%a3%e7%b7%9a%e7%9a%84%e4%bd%bf%e7%94%a8%e8%80%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>189</wp:comment_id>
			<wp:comment_author><![CDATA[honga]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[honga@somewhere.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-26 02:31:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-26 02:31:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[來個正規的解法..

請使用 Terminal Service Manager ( All Programs -&gt; Administrative Tools -&gt; Terminal Service Manager) 

可以直接遙控遠端Server , 可以直接 Log off 他人, 可以知道是誰連的 連線狀況..等等..





--
請輸入: &quot;叭樂雞萬歲&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Thread Sync #2. 實作篇 - 互相等待的兩個執行緒</title>
		<link>http://columns.chicken-house.net/2008/08/15/thread-sync-2-%e5%af%a6%e4%bd%9c%e7%af%87-%e4%ba%92%e7%9b%b8%e7%ad%89%e5%be%85%e7%9a%84%e5%85%a9%e5%80%8b%e5%9f%b7%e8%a1%8c%e7%b7%92/</link>
		<pubDate>Fri, 15 Aug 2008 02:51:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/15/Thread-Sync-2-e5afa6e4bd9ce7af87-e4ba92e79bb8e7ad89e5be85e79a84e585a9e5808be59fb7e8a18ce7b792.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
繼<a href="/post/Thread-Sync-1-e6a682e5bfb5e7af87-e5a682e4bd95e58c96e8a2abe58b95e782bae4b8bbe58b95.aspx">上篇</a>，<a href="http://www.michadel.net/">有人</a>跟我講太深奧了... Orz, 其實不會，只是還沒看到 Code 而以...。就先來幫<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/07/21/win-a-vsts-2008.aspx">黑暗魔人賽</a>說明一下程式碼...。首先來看的是黑暗大魔王: GameHost.. 
</p>
<p>
&nbsp;
</p>
<div>
<strong>GameHost 呼叫 Player 的片段</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    public void Start(Player p)    {        // 略...        int[] guess = p.StartGuess(_maxNum, _digits);        // 略...        Hint hint = compare(guess);        // 略...        while (hint.A != _digits)        {            // 略...            guess = p.GuessNext(hint);            // 略...            hint = compare(guess);        }        p.Stop();        // 略...    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> Start(Player p)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="rem">// 略...</span>
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">int</span>[] guess = p.StartGuess(_maxNum, _digits);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="rem">// 略...</span>
</pre>
<pre>
<span class="lnum">   6:  </span>    Hint hint = compare(guess);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="rem">// 略...</span>
</pre>
<pre>
<span class="lnum">   8:  </span>    <span class="kwrd">while</span> (hint.A != _digits)
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    {
</pre>
<pre>
<span class="lnum">  10:  </span>        <span class="rem">// 略...</span>
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        guess = p.GuessNext(hint);
</pre>
<pre>
<span class="lnum">  12:  </span>        <span class="rem">// 略...</span>
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        hint = compare(guess);
</pre>
<pre>
<span class="lnum">  14:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    p.Stop();
</pre>
<pre>
<span class="lnum">  16:  </span>    <span class="rem">// 略...</span>
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
這段程式完全是老闆的角度在思考。抓到 PLAYER 後就叫它開始猜 StartGuess()，然後拼命的叫 PLAYER 再猜 GuessNext(), 直到猜中才可以休息 Stop() 
</p>
<p>
很典型的多型 ( Polymorphism ) 應用，實際上會 RUN 什麼 CODE，就看繼承 PLAYER 的人是怎麼寫的...。這次我們再從弱勢勞工的角度來看看 PLAYER 該怎麼實作 (以 darkthread 附的 DummyPlayer 為例): 
</p>
<p>
&nbsp;
</p>
<div>
<strong>Player 實作的範例 ( DummyPlayer )</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
public class DummyPlayer : Player{    private int[] _currAnswer = null;    private Random _rnd = new Random();    private void randomGuess()    {        List&lt;int&gt; lst = new List&lt;int&gt;();        for (int i = 0; i &lt; _digits; i++)        {            int r = _rnd.Next(_maxNum);            while (lst.Contains(r))                r = _rnd.Next(_maxNum);            lst.Add(r);            _currAnswer[i] = r;        }    }    public override int[] StartGuess(int maxNum, int digits)    {        base.StartGuess(maxNum, digits);        _currAnswer = new int[digits];        randomGuess();        return _currAnswer;    }    public override int[] GuessNext(Hint lastHint)    {        randomGuess();        return _currAnswer;    }}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> DummyPlayer : Player
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">private</span> <span class="kwrd">int</span>[] _currAnswer = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">private</span> Random _rnd = <span class="kwrd">new</span> Random();
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">private</span> <span class="kwrd">void</span> randomGuess()
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>        List&lt;<span class="kwrd">int</span>&gt; lst = <span class="kwrd">new</span> List&lt;<span class="kwrd">int</span>&gt;();
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; _digits; i++)
</pre>
<pre>
<span class="lnum">  10:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            <span class="kwrd">int</span> r = _rnd.Next(_maxNum);
</pre>
<pre>
<span class="lnum">  12:  </span>            <span class="kwrd">while</span> (lst.Contains(r))
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>                r = _rnd.Next(_maxNum);
</pre>
<pre>
<span class="lnum">  14:  </span>            lst.Add(r);
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>            _currAnswer[i] = r;
</pre>
<pre>
<span class="lnum">  16:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span>[] StartGuess(<span class="kwrd">int</span> maxNum, <span class="kwrd">int</span> digits)
</pre>
<pre>
<span class="lnum">  20:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        <span class="kwrd">base</span>.StartGuess(maxNum, digits);
</pre>
<pre>
<span class="lnum">  22:  </span>        _currAnswer = <span class="kwrd">new</span> <span class="kwrd">int</span>[digits];
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        randomGuess();
</pre>
<pre>
<span class="lnum">  24:  </span>        <span class="kwrd">return</span> _currAnswer;
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    }
</pre>
<pre>
<span class="lnum">  26:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span>[] GuessNext(Hint lastHint)
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>    {
</pre>
<pre>
<span class="lnum">  28:  </span>        randomGuess();
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        <span class="kwrd">return</span> _currAnswer;
</pre>
<pre>
<span class="lnum">  30:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
因為 CODE 不多，我就不刪了，全文照貼。另一個原因是我想讓各位看看拆成好幾段的 CODE 是不是還能夠一眼就還原成原來的邏輯?&nbsp; 如果只看這段 CODE 十秒鐘，沒有看註解或說明，誰能馬上回答這段 CODE 解題的邏輯是什麼? 
</p>
<p>
&nbsp;
</p>
<p>
別誤會，不是指這 CODE 不易讀，而是因為呼叫的方式邏輯被迫配合 GameHost 而被切散了，你得再重新把它拼湊起來。它的邏輯很簡單，甚至簡單到連問題的答案都被忽略掉了，不過就每次都隨機丟個數字回去，在 StartGuess( ) 及 GuessNext( ) 都是。 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
可憐的勞動階級要站起來啊~ 先幻想一下，如果勞工 (PLAYER) 才是老闆，那麼程式可以改成怎麼樣? 這也才是我們本篇的主角。先來看看成果再回頭來看怎麼實作。這次看的是修改後的版本: AsyncDummyPlayer. 
</p>
<p>
&nbsp;
</p>
<div>
<strong>換 PLAYER 的角度思考的邏輯: AsyncDummyPlayer</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    public class AsyncDummyPlayer : AsyncPlayer    {        private int[] _currAnswer = null;        private Random _rnd = new Random();        private void randomGuess()        {            List&lt;int&gt; lst = new List&lt;int&gt;();            for (int i = 0; i &lt; _digits; i++)            {                int r = _rnd.Next(_maxNum);                while (lst.Contains(r))                    r = _rnd.Next(_maxNum);                lst.Add(r);                _currAnswer[i] = r;            }        }        protected override void Init(int maxNum, int digits)        {            _currAnswer = new int[digits];        }        protected override void Think()        {            while (true)            {                this.randomGuess();                Hint h = this.GameHost_AskQuestion(this._currAnswer);                if (h.A == this._digits) break;            }        }    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> AsyncDummyPlayer : AsyncPlayer
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">private</span> <span class="kwrd">int</span>[] _currAnswer = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">private</span> Random _rnd = <span class="kwrd">new</span> Random();
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">private</span> <span class="kwrd">void</span> randomGuess()
</pre>
<pre>
<span class="lnum">   6:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        List&lt;<span class="kwrd">int</span>&gt; lst = <span class="kwrd">new</span> List&lt;<span class="kwrd">int</span>&gt;();
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; _digits; i++)
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        {
</pre>
<pre>
<span class="lnum">  10:  </span>            <span class="kwrd">int</span> r = _rnd.Next(_maxNum);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            <span class="kwrd">while</span> (lst.Contains(r))
</pre>
<pre>
<span class="lnum">  12:  </span>                r = _rnd.Next(_maxNum);
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>            lst.Add(r);
</pre>
<pre>
<span class="lnum">  14:  </span>            _currAnswer[i] = r;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        }
</pre>
<pre>
<span class="lnum">  16:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Init(<span class="kwrd">int</span> maxNum, <span class="kwrd">int</span> digits)
</pre>
<pre>
<span class="lnum">  18:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        _currAnswer = <span class="kwrd">new</span> <span class="kwrd">int</span>[digits];
</pre>
<pre>
<span class="lnum">  20:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Think()
</pre>
<pre>
<span class="lnum">  22:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre>
<span class="lnum">  24:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>            <span class="kwrd">this</span>.randomGuess();
</pre>
<pre>
<span class="lnum">  26:  </span>            Hint h = <span class="kwrd">this</span>.GameHost_AskQuestion(<span class="kwrd">this</span>._currAnswer);
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>            <span class="kwrd">if</span> (h.A == <span class="kwrd">this</span>._digits) <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  28:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>    }
</pre>
<pre>
<span class="lnum">  30:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
程式碼也沒比較少，都差不多。不過是那堆 CODE 換個地方擺而以。但是仔細看看，這個版本的邏輯清楚多了，PLAYER 一開始就是執行 Init( ) 的部份，而 GameHost 叫 Player 開始解題時， Player 就開始思考 (Think)，而這個無腦的 Player 也很直接，就一直執行 while (true) { .... } 這個無窮迴圈，直到亂猜猜中為止。 
</p>
<p>
如果 Player 在思考的時，不管在那裡它都可以適時的呼叫 GameHost_AskQuestion( .... ) 來跟 GameHost 問答案。什麼時後該猜數字? 該猜什麼數字? 這正是整個 Player 的核心，也就是 &quot;怎麼猜&quot; 這件事。以人的思考方式一定會分階段，比如一開始先把所有數字猜一輪，有個概念後再想想怎麼猜能更逼近答案，最後才是致命的一擊，找出正確答案送出去，贏得比賽。 
</p>
<p>
這樣的作法，如果套在 DummyPlayer (原版本)，每個階段都要塞在一個大的 switch case, 放在 GuessNext( ) 裡。而現在是那個階段? 只能靠 instance variable 了，先存著等到下次又被呼叫時再拿出來回想一下，上回作到那...。 
</p>
<p>
而第二個版本，則完全沒這個問題，就把它當作一般程式思考就夠了，第一階段就是一個 LOOP，有它自己用的一些變數。第一階段處理完畢就離開 LOOP 繼續執行後面的 CODE... 直到最後離開 Think( ) 這個 method (認輸) 或是猜中答案光榮返鄉...。 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
兩者的差別看出來了嗎? DummyPlayer 像是被動的勞工，老闆說一動他就作一動。第一動作完就拿個筆計記下來，等著下次老闆再叫他，他就翻翻筆記看看之前做到那，這次繼續...。 
</p>
<p>
而 AsyncDummyPlayer 這個主動的勞工呢? 老闆交待給他一件任務後，他就自己思考起該怎麼做了。中間都不需要老闆下令。反而是過程中勞工需要老闆的協助時，老闆再適時伸出援手就可以了，一切雜務都由這位主動優秀的勞工自己處理掉。 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
有沒有差這麼多? 這麼神奇? 是怎麼辦到的? 先來看看類別關系圖: 
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/ThreadSync2_2849/ThreadSync_3.png" border="0" alt="ThreadSync" width="660" height="500" /> 
</p>
<p>
&nbsp;
</p>
<p>
上圖中，AsyncPlayer 就是改變這種型態的關鍵類別。AsyncPlayer 會用我們在上一篇講到的關念，化被動為主動，轉換這兩種呼叫模式。先來看看這個類別的程式碼到底變了什麼把戲，可以讓弱勢的勞工也有自主的權力? 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<div>
<strong>AsyncPlayer 實作: 化被動為主動</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    public abstract class AsyncPlayer : Player    {        public override int[] StartGuess(int maxNum, int digits)        {            base.StartGuess(maxNum, digits);            Thread thinkThread = new Thread(this.ThinkCaller);            thinkThread.Start();                        this._host_return.WaitOne();            return this._temp_number;        }        public override int[] GuessNext(Hint lastHint)        {            this._temp_hint = lastHint;            this._host_call.Set();            this._host_return.WaitOne();            return this._temp_number;        }        public override void Stop()        {            base.Stop();            this._temp_hint = new Hint(this._digits, 0);            this._host_call.Set();            this._host_end.WaitOne();            this._host_complete = true;        }        private void ThinkCaller()        {            try            {                this.Init(this._maxNum, this._digits);                this.Think();            }            catch (Exception ex)            {                Console.WriteLine(&quot;Player Exception: {0}&quot;, ex);            }            finally            {                this._host_end.Set();            }        }        protected abstract void Init(int maxNum, int digits);        protected abstract void Think();        private AutoResetEvent _host_call = new AutoResetEvent(false);        private AutoResetEvent _host_return = new AutoResetEvent(false);        private AutoResetEvent _host_end = new AutoResetEvent(false);        private bool _host_complete = false;        private int[] _temp_number;        private Hint _temp_hint;        protected Hint GameHost_AskQuestion(int[] number)        {            if (this._host_complete == true) throw new InvalidOperationException(&quot;GameHost stopped!&quot;);            lock (this)            {                try                {                    this._temp_number = number;                    this._host_return.Set();                    this._host_call.WaitOne();                    return this._temp_hint;                }                finally {                    this._temp_number = null;                    this._temp_hint = new Hint(-1, -1);                }            }        }    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> AsyncPlayer : Player
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span>[] StartGuess(<span class="kwrd">int</span> maxNum, <span class="kwrd">int</span> digits)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        <span class="kwrd">base</span>.StartGuess(maxNum, digits);
</pre>
<pre>
<span class="lnum">   6:  </span>        Thread thinkThread = <span class="kwrd">new</span> Thread(<span class="kwrd">this</span>.ThinkCaller);
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        thinkThread.Start();
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">this</span>._host_return.WaitOne();
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">return</span> <span class="kwrd">this</span>._temp_number;
</pre>
<pre>
<span class="lnum">  10:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span>[] GuessNext(Hint lastHint)
</pre>
<pre>
<span class="lnum">  12:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">this</span>._temp_hint = lastHint;
</pre>
<pre>
<span class="lnum">  14:  </span>        <span class="kwrd">this</span>._host_call.Set();
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        <span class="kwrd">this</span>._host_return.WaitOne();
</pre>
<pre>
<span class="lnum">  16:  </span>        <span class="kwrd">return</span> <span class="kwrd">this</span>._temp_number;
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Stop()
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    {
</pre>
<pre>
<span class="lnum">  20:  </span>        <span class="kwrd">base</span>.Stop();
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        <span class="kwrd">this</span>._temp_hint = <span class="kwrd">new</span> Hint(<span class="kwrd">this</span>._digits, 0);
</pre>
<pre>
<span class="lnum">  22:  </span>        <span class="kwrd">this</span>._host_call.Set();
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        <span class="kwrd">this</span>._host_end.WaitOne();
</pre>
<pre>
<span class="lnum">  24:  </span>        <span class="kwrd">this</span>._host_complete = <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    }
</pre>
<pre>
<span class="lnum">  26:  </span>    <span class="kwrd">private</span> <span class="kwrd">void</span> ThinkCaller()
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>    {
</pre>
<pre>
<span class="lnum">  28:  </span>        <span class="kwrd">try</span>
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        {
</pre>
<pre>
<span class="lnum">  30:  </span>            <span class="kwrd">this</span>.Init(<span class="kwrd">this</span>._maxNum, <span class="kwrd">this</span>._digits);
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>            <span class="kwrd">this</span>.Think();
</pre>
<pre>
<span class="lnum">  32:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>        <span class="kwrd">catch</span> (Exception ex)
</pre>
<pre>
<span class="lnum">  34:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>            Console.WriteLine(<span class="str">&quot;Player Exception: {0}&quot;</span>, ex);
</pre>
<pre>
<span class="lnum">  36:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>        <span class="kwrd">finally</span>
</pre>
<pre>
<span class="lnum">  38:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>            <span class="kwrd">this</span>._host_end.Set();
</pre>
<pre>
<span class="lnum">  40:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>    }
</pre>
<pre>
<span class="lnum">  42:  </span>    <span class="kwrd">protected</span> <span class="kwrd">abstract</span> <span class="kwrd">void</span> Init(<span class="kwrd">int</span> maxNum, <span class="kwrd">int</span> digits);
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>    <span class="kwrd">protected</span> <span class="kwrd">abstract</span> <span class="kwrd">void</span> Think();
</pre>
<pre>
<span class="lnum">  44:  </span>    <span class="kwrd">private</span> AutoResetEvent _host_call = <span class="kwrd">new</span> AutoResetEvent(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>    <span class="kwrd">private</span> AutoResetEvent _host_return = <span class="kwrd">new</span> AutoResetEvent(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">  46:  </span>    <span class="kwrd">private</span> AutoResetEvent _host_end = <span class="kwrd">new</span> AutoResetEvent(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>    <span class="kwrd">private</span> <span class="kwrd">bool</span> _host_complete = <span class="kwrd">false</span>;
</pre>
<pre>
<span class="lnum">  48:  </span>    <span class="kwrd">private</span> <span class="kwrd">int</span>[] _temp_number;
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>    <span class="kwrd">private</span> Hint _temp_hint;
</pre>
<pre>
<span class="lnum">  50:  </span>    <span class="kwrd">protected</span> Hint GameHost_AskQuestion(<span class="kwrd">int</span>[] number)
</pre>
<pre class="alt">
<span class="lnum">  51:  </span>    {
</pre>
<pre>
<span class="lnum">  52:  </span>        <span class="kwrd">if</span> (<span class="kwrd">this</span>._host_complete == <span class="kwrd">true</span>) <span class="kwrd">throw</span> <span class="kwrd">new</span> InvalidOperationException(<span class="str">&quot;GameHost stopped!&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  53:  </span>        <span class="kwrd">lock</span> (<span class="kwrd">this</span>)
</pre>
<pre>
<span class="lnum">  54:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  55:  </span>            <span class="kwrd">try</span>
</pre>
<pre>
<span class="lnum">  56:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  57:  </span>                <span class="kwrd">this</span>._temp_number = number;
</pre>
<pre>
<span class="lnum">  58:  </span>                <span class="kwrd">this</span>._host_return.Set();
</pre>
<pre class="alt">
<span class="lnum">  59:  </span>                <span class="kwrd">this</span>._host_call.WaitOne();
</pre>
<pre>
<span class="lnum">  60:  </span>                <span class="kwrd">return</span> <span class="kwrd">this</span>._temp_hint;
</pre>
<pre class="alt">
<span class="lnum">  61:  </span>            }
</pre>
<pre>
<span class="lnum">  62:  </span>            <span class="kwrd">finally</span> {
</pre>
<pre class="alt">
<span class="lnum">  63:  </span>                <span class="kwrd">this</span>._temp_number = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">  64:  </span>                <span class="kwrd">this</span>._temp_hint = <span class="kwrd">new</span> Hint(-1, -1);
</pre>
<pre class="alt">
<span class="lnum">  65:  </span>            }
</pre>
<pre>
<span class="lnum">  66:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  67:  </span>    }
</pre>
<pre>
<span class="lnum">  68:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
這段程式碼長了一點，內容也都刪不得，各位請耐心點看。上一篇我畫了張概念性的時序圖，這次我們再拿同一張圖，不過這次會標上程式碼: 
</p>
<p>
&nbsp;<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/ThreadSync2_2849/ThreadSync2_6.png" border="0" alt="ThreadSync2" width="660" height="500" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
請注意一下各個箭頭的上下順序。由上往下代表時間的進行，如果應該在後面執行的 CODE 不巧先被呼叫了，則動作較快的那個 THREAD 會被迫暫停，等待另一邊的進度跟上。先來看看 StartGuess( ) 怎麼跟 Think( ) 互動: 
</p>
<div>
<strong>StartGuess(...)</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        public override int[] StartGuess(int maxNum, int digits)        {            base.StartGuess(maxNum, digits);            Thread thinkThread = new Thread(this.ThinkCaller);            thinkThread.Start();                        this._host_return.WaitOne();            return this._temp_number;        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span>[] StartGuess(<span class="kwrd">int</span> maxNum, <span class="kwrd">int</span> digits)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">base</span>.StartGuess(maxNum, digits);
</pre>
<pre>
<span class="lnum">   4:  </span>    Thread thinkThread = <span class="kwrd">new</span> Thread(<span class="kwrd">this</span>.ThinkCaller);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    thinkThread.Start();
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">this</span>._host_return.WaitOne();
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">return</span> <span class="kwrd">this</span>._temp_number;
</pre>
<pre>
<span class="lnum">   8:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
GameHost 呼叫 Player.StartGuess( ) 有兩個目的，一個是給 Player 題目範圍，讓 Player 做好準備動作。另一個則是準備好之後 GameHost 要取得 Player 傳回的第一個問題。 
</p>
<p>
程式碼很忠實的做了一樣的事，只不過 StartGuess( ) 建立了新的執行緒來負責。新的執行緒會執行 ThinkCaller( )，啟動之後 GameHost 這邊就什麼都不作，等待 _host_return 這個 WaitHandle 被叫醒，代表另一邊已經做好了，可以從共用變數 _temp_number 取得問題傳回去。 
</p>
<p>
既然 GameHost 在等待某人通知它，我們就來看看是誰會通知他題目已經準備好了: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>GameHost_AskQuestion(...)</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        protected Hint GameHost_AskQuestion(int[] number)        {            if (this._host_complete == true) throw new InvalidOperationException(&quot;GameHost stopped!&quot;);            lock (this)            {                try                {                    this._temp_number = number;                    this._host_return.Set();                    this._host_call.WaitOne();                    return this._temp_hint;                }                finally {                    this._temp_number = null;                    this._temp_hint = new Hint(-1, -1);                }            }        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">protected</span> Hint GameHost_AskQuestion(<span class="kwrd">int</span>[] number)
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">if</span> (<span class="kwrd">this</span>._host_complete == <span class="kwrd">true</span>) <span class="kwrd">throw</span> <span class="kwrd">new</span> InvalidOperationException(<span class="str">&quot;GameHost stopped!&quot;</span>);
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">lock</span> (<span class="kwrd">this</span>)
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    {
</pre>
<pre>
<span class="lnum">   6:  </span>        <span class="kwrd">try</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>        {
</pre>
<pre>
<span class="lnum">   8:  </span>            <span class="kwrd">this</span>._temp_number = number;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            <span class="kwrd">this</span>._host_return.Set();
</pre>
<pre>
<span class="lnum">  10:  </span>            <span class="kwrd">this</span>._host_call.WaitOne();
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            <span class="kwrd">return</span> <span class="kwrd">this</span>._temp_hint;
</pre>
<pre>
<span class="lnum">  12:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        <span class="kwrd">finally</span> {
</pre>
<pre>
<span class="lnum">  14:  </span>            <span class="kwrd">this</span>._temp_number = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>            <span class="kwrd">this</span>._temp_hint = <span class="kwrd">new</span> Hint(-1, -1);
</pre>
<pre>
<span class="lnum">  16:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
就在 GameHost 正在等題目的時後，另一個執行緒正在進行 &quot;思考&quot; 的動作，直到有結論後會呼叫 GameHost_AskQuestion( ... ) 送出問題。這時這個問題會被放到 _temp_number, 而下一步就是 _host_return.Set( ), 通知另一個執行緒，正在等這個結果的人: &quot;喂! 東西已經準備好了，可以來取貨了!!&quot; 
</p>
<p>
整個機制就這樣串起來了。GameHost 那邊怎麼把答案傳回來? 同樣的作法，反過來而以。GameHost 會藉著呼叫 Player.GuessNext(...) 把答案傳回來，而這時就觸動一樣的機制，讓另一邊 Player Thread 呼叫的 GameHost_AskQuestion( ... ) 醒過來，把答案拿走， RETURN 回去。 
</p>
<p>
這樣一直重複下去，剩下最後一個同步的點，就是結束遊戲的地方。說穿了也是一樣的把戲，只是這次是藉著 GameHost 呼叫 Player.Stop( )，而另一邊 Player Thread 執行完 Think( ) 後，兩邊就一起結束遊戲了。 
</p>
<p>
&nbsp;
</p>
<p>
總算講完了。其實 thread 能解決的問題還真是五花八門。每次當我想出這些方法來簡化問題時，我就會覺的很有成就感。雖然寫出這個不會讓我贏得比賽，反而因為同步的關係，AsyncDummyPlayer 執行的速度還遠遠落後 DummyPlayer (我的機器跑起來，大概差了四~五倍 ...) 。不過我知道我簡單的頭腦，不先把問題簡化的話，我大概解決不了太複雜的問題...。也許是缺了這種能力，才讓我更有動力去想簡化問題的方式吧? 
</p>
<p>
&nbsp;
</p>
<p>
最後，為什麼每次講到 thread 的文章，都是 code 一點點，文章跟圖一大堆? 咳咳... 難道我也到了靠一張嘴混日子的地步了嘛? Orz... 本系列到此結束，以後還會有什麼主題? 想到再說啦~~ 今天各位記得去拜拜~~ 下回見! 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2008-08-15 02:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-15 02:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thread-sync-2-%e5%af%a6%e4%bd%9c%e7%af%87-%e4%ba%92%e7%9b%b8%e7%ad%89%e5%be%85%e7%9a%84%e5%85%a9%e5%80%8b%e5%9f%b7%e8%a1%8c%e7%b7%92]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[小白熊]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kasumi38@seed.net.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-02 09:27:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-02 09:27:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[中間的部分「AsyncDummyPlayer」文字都被誤植為「DummyAsyncPlayer」
整體來說寫的不錯
要仔細去看去想才會得到心得
非常感謝]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-02 17:04:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-02 17:04:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝指正，文章內容已經改過來了。

Thread Sync 的東西就是這樣，程式不難，但是常想到腦筋打結。感謝你的回應 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-04 17:58:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-04 17:58:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[非常精彩的内容，写地形象又生动，拜读！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-04 18:00:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-04 18:00:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[有一个问题，为什么你这里用lock(this)这样的语句？

微软推荐的做法是定义一个private readonly 的对象来lock。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-04 21:39:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-04 21:39:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您看的真仔細 (Y)

其實最主要的原因是，這是拿來比賽用的，而不是要 release code 當成其它用途的 library, 因此可以簡化的部份我就都簡化了，加上這個問題的主軸就已經不好說明了，所以我貼的 code 都把跟主題無關的部份省掉了。

其實不只 MS 這樣建議，這些觀念在 Java 也都一樣。第一個一定要是 readonly, 免得我 lock 的物件後來被改掉，造成你跟我 lock 是不同的物件這種尷尬的情況。

至於是不是要 private 就不見得了。要看你鎖定的範圍是不是要擴大到外面的 code。最典型的例子就是 System.Collections.Generic 這命名空間內的 ICollection.SyncRoot, 它的用途就很清楚明確，你需要 lock 某個 Collection 時，就來 lock 它吧。

只不過看到幾個常用的 Collection (如 List&lt;T&gt;), 它的 SyncRoot 實作也只是傳回本身的 instance 而以，所以很多偷懶的情況我都會直接採用 lock(this)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>195</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-08 22:34:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-08 22:34:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我认为Collection中的SynchRoot返回本身的instance和在instance内部lock(this)还是有所区别的。在一个类的内部需要用到lock的话，最好还是用一个private readonly static的对象来lock，如果在类的外部需要lock的话，就直接lock这个类的instance，这样才会比较避免出现deadlock。

当然您这个只是简化后的code，只是为了演示。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[努力成為保險業務員中]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[helianthus_annuns@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-12 11:00:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-12 11:00:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果只考量上面的 code，這個 Process 在同一時間內其實只有一個 Thread 是 active 的
host_return 跟 host_call 實際上已經對 temp_number 做好 lock了，
所以我不清楚 lock(this)是要做什麼用的？能不能請大大解釋一下呢？
另外 readonly static 的 lock 應該是用來對同一類別不同物件之間
對同一外部資源有 lock 的需求在用的吧，如果是singleton，整個 scope 裡只有這個player
lock(this)應該也可以吧？
就算有多個 player 在操老闆，每個 player 自己有 temp_number 應該也沒有lock static的需求，所以或許大大可以做一個 &quot;工會會長&quot; 領導多個 players ，每個 player 有各自跟老闆的通訊機制，每個 player 各想各的，至於每個 player 之間的執行緒溝通機制可能真的就要用 lock static 來掌控 temp_number，難道這就叫做集思廣益嗎？
( 前提是暗黑大大老闆是 thread safe 的 )]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-12 15:12:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-12 15:12:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[上班時間，偷偷回 :P 先回簡單的

是的，同個 process 同時間內只有一個 thread 在執行。因為這裡用兩個 thread 的目的 &quot;只是&quot; 讓兩邊的邏輯可以不必被打斷，兩邊各有各自從頭到尾的流程。而實際卻是要交互執行，就靠 thread + wait 機制來達成。

同樣的目的，後來找到用 yield return 解的比較漂亮，你可以參考後面兩篇續集 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-13 01:54:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-13 01:54:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[在這個例子裡你講的 lock(this) 的確是用不到，是可以省掉的。會加上去純粹是為了預防萬一，算是我的壞習慣 :P

講到 lock 的物件挑選，會牽涉到所影響的範圍，所以應該挑選正確 scope 及正確 life cycle 的物件，this 及 static (或是有人用 this.GetType()) 就是一例。至於是不是 readonly / private 等等則是避免被誤用或是無意間更動到物件的值而設的防護措施。這個例子參與的角色就只有一個 host 跟一個 player, 在這前題下挑什麼物件 (this or readonly static field) 來 lock 結果是一樣的。不過如果真的有多個 player，在我看來是要各別保護每個 player 的 temp_number, 要 lock 的物件應該是跟 player 的 life cycle 一致的物件才對，這時 this 是個可考慮的對象。

不過研究到 lock 就不是這篇的主題了 :D，這篇主要是用 thread 的 context switch 來取代程式碼的邏輯不斷在兩邊跳來跳去的困擾。而如果採用的工具是 C# + .NET 2.0 的話，我自己認為後面兩篇用到的 yield return 會是更好的 solution, 用 compiler 來解決這問題會比用 thread 來解決來的更漂亮 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Thread Sync #1. 概念篇 - 如何化被動為主動?</title>
		<link>http://columns.chicken-house.net/2008/08/14/thread-sync-1-%e6%a6%82%e5%bf%b5%e7%af%87-%e5%a6%82%e4%bd%95%e5%8c%96%e8%a2%ab%e5%8b%95%e7%82%ba%e4%b8%bb%e5%8b%95/</link>
		<pubDate>Thu, 14 Aug 2008 03:37:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/14/Thread-Sync-1-e6a682e5bfb5e7af87-e5a682e4bd95e58c96e8a2abe58b95e782bae4b8bbe58b95.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
別以為我轉行了... 這篇不是勵志文章，教你用主動積極的態度面對人生.... 而是討論執行緒同步機制及如何用來解決惱人的流程問題。會寫這篇的念頭來自<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/08/09/coding-for-fun-rfc.aspx">黑暗程式魔人辦的猜數字程式設計大賽</a>，在處理的過程中想到的解法...，不過這篇要講的不是猜數字，而是不相干的東西: Thread Sync (執行緒的同步機制)。
</p>
<p>
&nbsp;
</p>
<p>
一般程式寫久了，會很習慣一路到底的思考方式，程式也完全照這樣的思路被設計出來。不過寫 GAME 這類的程式就不是這麼一回事了。就先舉十五年前我用 C 寫的俄羅斯方塊的遊戲當例子 (大驚! 十... 十五年?)，腦袋裡想的流程八九不離十，一定是像這樣:
</p>
<p>
&quot;<em><font color="#008000">隨機從上面掉一個方塊下來，時間到了就往下掉，USER有按方向鍵就左右移動或是旋轉，直到卡到底下或是其它方塊為止...</font></em>&quot;
</p>
<p>
很正確的想法，很可惜你的程式完全不能這樣寫，為什麼? 當你沒有使用多執行緒或是其它的技巧時，你的主程式流程一定得被限定在固定時間 refresh 畫面的無窮迴圈... 上面的邏輯怎麼辦? 會被迫拆成好幾塊，然後被主程式定期呼叫... 程式寫起來大概會像這樣:
</p>
<div>
<strong>TETRIS</strong> 
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> ProcessBrick()
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">switch</span> (status)
</pre>
<pre>
<span class="lnum">   4:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>        <span class="kwrd">case</span> 1:
</pre>
<pre>
<span class="lnum">   6:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>            <span class="rem">//  按右鍵, 往右移一格</span>
</pre>
<pre>
<span class="lnum">   8:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>            <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  10:  </span>        <span class="kwrd">case</span> 2:
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>            <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  12:  </span>            <span class="rem">//  按左鍵, 往左移一格</span>
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>            <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  14:  </span>            <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        <span class="kwrd">case</span> 3:
</pre>
<pre>
<span class="lnum">  16:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>            <span class="rem">//  按上鍵, 順時針旋轉 90 度</span>
</pre>
<pre>
<span class="lnum">  18:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>            <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  20:  </span>        <span class="kwrd">case</span> 4:
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>            <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  22:  </span>            <span class="rem">//  按下鍵, 往下移一格</span>
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>            <span class="rem">//</span>
</pre>
<pre>
<span class="lnum">  24:  </span>            <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>        <span class="kwrd">case</span> 5:
</pre>
<pre>
<span class="lnum">  26:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>            <span class="rem">//  .......</span>
</pre>
<pre>
<span class="lnum">  28:  </span>            <span class="rem">//</span>
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>            <span class="kwrd">break</span>;
</pre>
<pre>
<span class="lnum">  30:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
原本好好的邏輯被切成好幾塊，然後再藉著狀態等資訊，每次的 LOOP 各挑這次要執行的那一小段，然後拼湊出原本的邏輯...。別哀怨，誰叫你寫的 CODE 不是老大? 老大是控制畫面的主程式，你既然是當小的就乖乖躲在旁邊被呼叫... 委屈一點是應該的...。
</p>
<p>
&nbsp;
</p>
<p>
真是黑心啊... 誰叫老闆永遠是對的。這次黑心... 不，黑暗魔人出的題目正好又讓我聯想到一樣的狀況。黑暗魔人出的題目，是先實作了 GameHost 類別 (就是老大啦)，及 Player 抽象型別 (小角色就是他)，再藉著多型 (Polymorphism) 的方式，由 GameHost 不斷的呼叫 Player 提供的 GuessNum( )，來讓 Player 問問題，同時把上一次問題的答案傳給 Player ...
</p>
<p>
&nbsp;
</p>
<p>
程式也不難寫，大家都玩過 1A1B 的遊戲吧? 腦袋裡一定是這樣想的:
</p>
<p>
&nbsp;
</p>
<p>
<font color="#008000">&quot;<em>一開始先隨便猜幾個，把結果記下來....。</em>&quot;</font>
</p>
<p>
<font color="#008000">&quot;<em>再來刪去法，比較可能的幾個數字再猜一猜...。</em>&quot;</font>
</p>
<p>
<font color="#008000">&quot;<em>快猜到了，幾種組合列出來想一想怎麼辦好? 好! 就猜這個...。</em>&quot;</font>
</p>
<p>
<font color="#008000">...</font>
</p>
<p>
<font color="#008000">...</font>
</p>
<p>
<font color="#008000">...</font>
</p>
<p>
<font color="#008000">&quot;<em>BINGO! 猜中了!!!</em>&quot;</font>
</p>
<p>
&nbsp;
</p>
<p>
很高興的想好流程後，真的要開始寫就傻住了... 這堆流程跟邏輯，要我拆成一直會被重複呼叫的 &quot;單一個&quot; method, 每一回合會被呼叫一次...。意思是一連串複雜的處理過程，要依序切成完全一樣的片段 (就是指重複呼叫同一段程式碼) ? 更慘的是這次問的問題，下一次呼叫才拿的到答案!? MY GOD... 要想出怎麼猜到對方的數字已經夠頭痛了，還得來處理這些 &quot;行政&quot; 問題?
</p>
<p>
&nbsp;
</p>
<p>
My God, 頭越想越痛，這樣下去來我大概只能寫出比 DummyPlayer (註: 參賽程式附的 Player 範例，隨機產生問題，無腦的一直問，直到猜中為止...) 高明一點點的程式而已了。曾 MSN 跟<a href="http://blog.darkthread.net/">黑暗魔人</a>討論過，看看能不能讓 GameHost 化主動為被動，改由 GameHost 提供 callback 讓 Player 呼叫的可能性? 不過後來想想不對，那有主持人在旁邊看等著被來賓訪問的道理? 何況如果以後是兩個 Player 對戰怎麼辦? 誰要來當 &quot;小的&quot; ?? 問題還是一樣沒解決...
</p>
<p>
&nbsp;
</p>
<p>
過去大家對於 THREAD 的印象都是 &quot;多工&quot;，需要用 thread 解決的問題大多是在改善執行效能上面，因為同時用兩個 thread 可以做兩件事，效率會比較好。其實 thread 也很適合解決這類的問題，因為執行緒讓我們有機會，不需切斷 GameHost / Player 的 &quot;思路&quot;，讓兩邊都能用很直覺的思考方式寫程式。
</p>
<p>
&nbsp;
</p>
<p>
大概畫一下時序圖對照一下，先看看原本的作法:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/ThreadSync1_32F9/%E6%8A%95%E5%BD%B1%E7%89%872_1.png" border="0" alt="投影片2" width="660" height="500" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
再看一下改用兩個執行緒的作法:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/ThreadSync1_32F9/%E6%8A%95%E5%BD%B1%E7%89%873_1.png" border="0" alt="投影片3" width="660" height="500" /> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
不管之中的技術障礙怎麼克服，至少這樣改起來，兩邊都能各自用更合理簡單的方式思考自己的問題，也更接近實際的情況 (莊家跟玩家不會共用一個腦子吧...)。也唯有把問題簡化之後，我們才有辦法想出更複雜的方式來解決問題，科技不就是這樣進步的嘛?
</p>
<p>
&nbsp;
</p>
<p>
這次的例子裡，執行緒是用來簡化問題的，而不是拿來增進效率的。兩個人腦袋各自想著問題，總要溝通吧? thread 之間溝通的機制就很單純了，共用變數加上同步機制，來確定對方是否準備好我要的東西，或是對方是否已經準備好要接招了?
</p>
<p>
&nbsp;
</p>
<p>
這次搬出來的是過去<a href="/post/ThreadPool-e5afa6e4bd9c-3-AutoResetEvent-ManualResetEvent.aspx">說明 thread pool 提到的 AutoResetEvent</a>，現在又重現江湖了。方法很簡單，要拿資料的那一方，就去 Wait( ) 等資料準備好，另一方把資料放在共用變數之後就呼叫 Set( )，叫醒另一個還在 Wait( ) 的執行緒，可以起床拿東西閃人了...。
</p>
<p>
&nbsp;
</p>
<p>
接下來當然就各忙各的，直到雙方又有交換資料的需求，同樣的方式就再來一次。只是隨著資料交換的方向不同 (比如問問題是把題目由 player --&gt; host，而取得答案則是 host --&gt; player)，上述的動作雙方角色要互換才能順利進行。
</p>
<p>
&nbsp;
</p>
<p>
Orz，本來想一篇打完的，不過打到快睡著，加上內容還剩不少... 就分兩集吧! 程式碼及實作各位就耐心點，下一篇會端出實際操作執行緒的範例。
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2008-08-14 03:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-14 03:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thread-sync-1-%e6%a6%82%e5%bf%b5%e7%af%87-%e5%a6%82%e4%bd%95%e5%8c%96%e8%a2%ab%e5%8b%95%e7%82%ba%e4%b8%bb%e5%8b%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michadel.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-14 21:26:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-14 21:26:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太難了，好難懂

--
請輸入: &quot;吳剛伐桂&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-21 09:41:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-21 09:41:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[文中提到的遊戲設計部分還真是讓人感觸,
那個圈子都是師帶徒的方式傳承,
核心碼自然地很難有突破...
大部分遊戲不會因多核CPU而受益.

雖然有[Java Multithread Design Pattern]這樣的Pattern書籍,
但畢竟學習行為是從模仿開始嘛,
缺乏像 'XXX程式碼大全' 這種範例收集類的參考,
我覺得是多執行緒設計很難普及的因素之一.
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>201</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-21 12:42:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-21 12:42:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[寫 GAME 的確是個比較 &quot;另類&quot; 的程式設計領域，什麼都是另外一套...

程式的結構 (如同這篇講的) 跟一般的程式差異很大
畫面用 DirectX 或是 XXX Game Engine, 一般常用的元件 (啥 GridView, Image .... ) 都用不到
網路大都得用 TCP, 較簡單的 web service 也都派不上用場
開發工具對 GAME 的支援很少 (Microsoft的XNA開始照顧到這群人了)
資料儲存大都用自定格式 (開始有在用 XML 了，不過單機 GAME 應該沒用到 SQL server 之類的東西)

一般程式設計的經驗比較難搬到這個領域來使用.. 

--
請輸入: &quot;叭樂雞萬歲&quot;]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-21 12:51:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-21 12:51:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你說的是這本嗎?

http://www.drmaster.com.tw/info.asp?no=PG20138

沒翻過這本 :D 不過看它的大綱，突然覺的 .NET 的使用者很幸福... 當 JAVA 的人還要靠 design pattern 來簡化設計時， .NET 已經內建好幾種 pattern 的實作了.. 截錄它的目錄片段:

第六章　Read-Write Lock－大家想看就看吧，不過看的時候不能寫喔
--&gt; .NET 直接提供 ReaderWriterLock 物件

第八章　Worker Thread－等到工作來，來了就工作
--&gt; .NET 直接內建 ThreadPool

第十一章　Thread-Specific Storage－每個執行緒的保管箱
--&gt; .NET Managed thread 物件就提供 DataSlot ..



]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>203</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-22 09:24:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-22 09:24:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[幾百行的文字描述比不上一圖就懂,
有許多易懂的圖示就是這本書的最大特點.

簡中預覽版
http://www.badongo.com/file/10988958]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>話題人物?</title>
		<link>http://columns.chicken-house.net/2008/08/14/%e8%a9%b1%e9%a1%8c%e4%ba%ba%e7%89%a9/</link>
		<pubDate>Thu, 14 Aug 2008 02:09:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/08/14/e8a9b1e9a18ce4babae789a9.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>之前因為<a href="http://columns.chicken-house.net/post/e5be88e68ab1e6ad89efbc8ce69cace7ab99e4b88de6ada1e8bf8ee4be86e887aa-e799bee5baa6-(Baiducom)-e79a84e8a8aae5aea2-!!.aspx">被盜文</a>，除了被弄的不大爽之外，倒也沒什麼事，不過<a href="http://esserei.chicken-house.net/">有人</a>給我個 link，無意間發現對岸竟然有這麼篇文章...</p> <p>(最原始的網頁不知為何被下架了，底下提供的 LINK 是目前還連的到的...)</p> <p>URL: <a title="http://www.cnblogs.com/hullfqaz/archive/2008/07/28/1254315.html" href="http://www.cnblogs.com/hullfqaz/archive/2008/07/28/1254315.html">http://www.cnblogs.com/hullfqaz/archive/2008/07/28/1254315.html</a></p> <p>&nbsp;</p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="500" alt="image" src="/wp-content/be-files/WindowsLiveWriter/dc538ed1d5c3_1E4B/image_3.png" width="603" border="0"> </p> <p>&nbsp;</p> <p>看了又好氣又好笑... 沒想到對岸有網友在討論我碰到的事件啊，底下還真的有人回應批評百度...。<a href="http://www.wretch.cc/blog/kevinfan0908">前同事</a> 在 MSN 跟我打屁，說這篇引用我的事例來討論的網站，也一樣沒有經過我的同意就轉貼，我的言論可能會引起兩岸對立，引發第三次世界大戰... Orz...</p> <p>這次好一點，雖然也是原文照貼我的文章，至少是全文照貼，頭尾都留著，LINK 也留著，沒有很 "自動" 的翻成簡體中文...後來好奇用相關關鑑字再去 GOOGLE 找看看，多找到一篇:</p> <p>URL: <a title="http://blog.const.net.cn/news/20080728/ec3b4ba924bde2b4.htm" href="http://blog.const.net.cn/news/20080728/ec3b4ba924bde2b4.htm">http://blog.const.net.cn/news/20080728/ec3b4ba924bde2b4.htm</a></p> <p>&nbsp;</p> <p>不過這次運氣差了點，我的 IP 被封鎖不能看... 我應該沒有偉大到讓對方直接封我的 IP 吧? </p> <p><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="421" alt="image" src="/wp-content/be-files/WindowsLiveWriter/dc538ed1d5c3_1E4B/image_6.png" width="570" border="0"> </p> <p>&nbsp;</p> <p>不過人氣好像不大夠，搜了半天才搜到這兩篇... 看來要上頭條新聞還久的很.. 哈哈..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2008-08-14 02:09:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-14 02:09:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b1%e9%a1%8c%e4%ba%ba%e7%89%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="angry"><![CDATA[火大]]></category>
	</item>
	<item>
		<title>EF#3. Entity &amp; Inheritance</title>
		<link>http://columns.chicken-house.net/2009/03/03/ef3-entity-inheritance/</link>
		<pubDate>Tue, 03 Mar 2009 03:48:15 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/03/03/EF3-Entity-Inheritance.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>繼承 (inheritance) 是物件技術的核心，就是這個特性提供了 OOP 絕大部份的特色。這東西被拿掉的話，OOP就沒這麼迷人了。繼然談到了 ORM，就不能不來看看 R(關聯式資料庫) 怎麼被對應到 O(物件)，同時還能處理好繼承關係。</p>  <p>RDBMS 連基本的物件 (Object Base) 都不支援了，更別說物件導向 (Object Oriented) 了。因此要搞懂 ORM 及繼承的關係，就得先瞭解基本的 OO 是怎麼實作 &quot;繼承&quot; 這個動作。這些知識是古早以前學 C++ 時唸到的，現在的 CLR 不知道有沒有新的作法? 不過應該大同小異吧! C++ 主要是靠 <a href="http://en.wikipedia.org/wiki/Virtual_table">virtual table</a> 來實作繼承關係，當子類別繼承父類別時，父類別定義的 data member 跟 method 就全都遺傳到子類別身上了，這動作就是靠 virtual table 作到的。細節我就不多說了，有興趣的讀者們請先上網找找相關資訊看一看。</p>  <p>ORM 的運氣好多了，只要處理資料的部份。因此前一段提到的 virtual table 如果要拿來應用也會簡單的多。virtual table 可以很直覺的想像成是 DBMS 裡 table schema 的定義，而一個物件 (instance) 的 virtual table 資料，正好就對應到該 table (DBMS) 的一筆資料。這正好是 ORM 基本的動作。大部份 OO 的書都會說，繼承就是 &quot; Is A &quot; 的關係。在資料上則是子類別擁有父類別所有的欄位定義。這很容易對應到資料庫的正規化，該如何切割資料表的規責。你可以切開靠 PK / FK 再併回來，或是直接反正規化讓它重複定義在多個 TABLE... 事實上，兩大 ORM (EF &amp; NH) 都歸納出三種作法，後面來探討一下彼此的差異...</p>  <p>再來看看繼承關係，假設父類別 class A 對應到 table A, 那麼衍生出的子類別 class B 對應的 table B, 則應該要包含所有 table A 定義的欄位才對。從這點出發，就帶出了第一種作法: 就是把 table A 所有的欄位都建一份到 table B (註: table per concrete type)。</p>  <p>不過這樣看起來有點蠢，DBMS 熟悉的人也許會採另一種作法: 沒錯... table B 只要留個 foreign Key, 指向 table A 的 primary Key，需要時再 join 起來就好了，這是第二種作法 (註: table per type)。</p>  <p>唸過 DBMS 的人都還記得 &quot;正規化&quot; (<a href="http://en.wikipedia.org/wiki/Database_normalization#Normal_forms">normalization</a>) 跟 &quot;反正規化&quot; 吧? 切割過頭也是很麻煩的，因此有第三種作法逆其道而行，就是建一個 table 給所有的子子孫孫類別共用。因此 table 需要的欄位，就是所有的子類別的所有欄位集大成，通通都建進來... 不用的話就空在那裡，這是第三種作法 (註: table per hierarchy)。</p>  <p>這三種作法，在 Entity Framework (以下簡稱 EF) 或是 NHibernate (以下簡稱 NH) 都有對應的作法，只不過名字不大一樣... <a href="http://blogs.msdn.com/adonet/archive/2007/03/15/inheritance-in-the-entity-framework.aspx">這篇</a> ADO.NET team blog 借紹的還不錯，可以參考看看。這三種方式，在 EF 裡的說法分別是 (括號裡是 NH 的說法，參考這篇: <a href="http://www.hibernate.org/hib_docs/reference/en/html/inheritance.html">Inheritance Mapping</a>):</p>  <ul>   <li>Table per Hierarchy (NH: Table per class hierarchy) </li>    <li>Table per Type (NH: Table per subclass) </li>    <li>Table per Concrete Type (NH: Table per concrete class) </li> </ul>  <p>事時上，處理方式大同小異，不外乎用三種不同的對應方式，來處理物件繼承關係。這些不同類別的物件彼此有繼承關係，對應到 TABLE 的方法不同，各有各的優缺點。其實 ADO.NET team blog 講的都很清楚，我就不再多說，簡單列張比較表:</p>  <table cellspacing="0" cellpadding="2" width="600" border="1"><tbody>     <tr>       <td valign="top" width="200">&#160;</td>        <td valign="top" width="200">適用於</td>        <td valign="top" width="200">不適用於</td>     </tr>      <tr>       <td valign="top" width="200">Table Per Hierarchy</td>        <td valign="top" width="200">         <ol>           <li>最簡單的實作方式 </li>            <li>所有同系類別的實體 (instance) 數量不會很多時 </li>            <li>需要用單一 QUERY 查出所有的子類別物件時 </li>            <li>繼承階層較簡單的情況 </li>            <li>類別的欄位要調整很容易 </li>         </ol>       </td>        <td valign="top" width="200">         <ol>           <li>instance數量太多，會嚴重影響效能 </li>            <li>無法在table schema上做太多嚴格的檢查 </li>         </ol>       </td>     </tr>      <tr>       <td valign="top" width="200">Table Per Type</td>        <td valign="top" width="200">         <ol>           <li>繼承關係清楚的對應到 TABLE </li>            <li>需要用單一QUERY查出所有子類別的物件 </li>            <li>不同於 TPH，可以針對每種類別，設定嚴僅的 table constraint </li>            <li>每個類別要變動或調整都很容易 </li>         </ol>       </td>        <td valign="top" width="200">         <ol>           <li>繼承階層較多時，要取得單一 instance data 需要透過多層 join </li>            <li>table 數量會隨著類別的數量快速增長 </li>         </ol>       </td>     </tr>      <tr>       <td valign="top" width="200">Table Per Concrete Type</td>        <td valign="top" width="200">         <ol>           <li>綜合 TPH / TPT 的優點 (也綜合了兩者的缺點) </li>            <li>可以針對每種類別設定 table constraint </li>            <li>ORM mapping 很簡單 </li>         </ol>       </td>        <td valign="top" width="200">         <ol>           <li>要用單一QUERY查出所有子類別的物件並不容易 (需要把所有的 TABLE JOIN 起來) </li>            <li>父類別的欄位調整很麻煩，所有的 TABLE 都需要配合調整 </li>         </ol>       </td>     </tr>   </tbody></table>  <p>&#160;</p>  <p>[未完待續] to be continue…</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2009-03-03 03:48:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-03-03 03:48:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ef3-entity-inheritance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[Anson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ansonwoohk@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-12-07 18:17:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-12-07 18:17:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好文!! 期待您未完的部份喔]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[escaped_fox@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-04 15:14:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-04 15:14:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝分享，受用良多]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>EF#2. Entity &amp; Encapsulation</title>
		<link>http://columns.chicken-house.net/2009/01/23/ef2-entity-encapsulation/</link>
		<pubDate>Fri, 23 Jan 2009 00:09:53 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/01/23/EF2-Entity-Encapsulation.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>前一篇講了一堆大道理，這篇就來看一些實作吧。各種 ORM 的技術都有共同的目的，就是能把物件的狀態存到關聯式資料庫，而這樣的對應機制則是各家 ORM 競爭的重點，勝負的關鍵不外乎是那一套比較簡單? 那一套包裝出的 Entity 物件能夠更貼近一般的物件?</p> <p>會有這樣的 "對應" 機制需求，原因只有一個，物件技術發展的很快，已經能解決大多數軟體開發的需求了，不過資料庫就沒這麼幸運，現在的 DBMS 撇開一些技術規格不談，本質上還是跟廿年前差不多，就是關聯式資料庫而已，本質上就是一堆 table + relationship, 配合 SQL 語法來處理資料。發展至今，物件技術跟資料庫技術能處理的問題，已經是兩個完全不同世界的問題了，三層式的架構在這段出現斷層...。</p> <p>解決方式大概有兩條路，一種就是想辦法把這兩個世界串起來，就是 ORM framework 想做的事。另一個就是改造 RDBMS，讓 RDBMS 進化成也具有物件導向特性的資料庫。不過以眼前的五年十年來看，ORM 還是大有可為。ORM 只要能把 "對應" 這件事做到完美的地步，其實在某個層面上就已經做到 OODB 的願景了，只差在這些物件是活在 APP 這端，不是活在資料庫那端...。</p> <p>扯遠了，接下來我會試著從物件技術的三大核心 (封裝、繼承、多型)，及資料庫最需要的查尋機制 (QUERY) 來看看 Entity Framework 各能提供什麼支援，才能客觀的評論 Entity Framework 值不值得你投資在它身上。</p> <p>在繼續看下去之前，請先俱備基本的 Entity Framework 運用的能力。在 <a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/">MSDN 名家專欄裡 MVP(朱明中)</a> 寫的這幾篇我覺的很不錯，可以參考看看。我就是看這幾篇入門的 :D。幾年前在比賽上碰過他幾次，我還蠻配服他的，可以靠自學而有今天的成就。以下是他寫的幾篇 ADO.NET / Entity Framework 的系列文章:</p> <ol> <li><a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/ADO.NET_Entity_Framework_Entity_Operation.htm">讀寫 ADO.NET Entity Framework</a> (2007 年 9 月)  <li><a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/ADO.NET_Entity_Framework_Interaction_to_ADO.NET_data_objects.htm">由 LINQ 存取 ADO.NET 物件</a> (2007 年 9 月)  <li><a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/ADO.NET_Entity_Framework_Integration_with_exist_applications.htm">整合 ADO.NET Entity Framework 到應用程式中</a> (2007 年 9 月)  <li><a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/ADO.NET_Entity_Framework_A_First_look.htm">首次接觸 ADO.NET Entity Framework</a> (2007 年 9 月)  <li><a href="http://www.microsoft.com/taiwan/msdn/columns/jhu_ming_jhong/ADO.NET_Entity_Framework_Overview.htm">ADO.NET Entity Framework 概觀</a> (2007 年 9 月) </li></ol> <p>&nbsp;</p> <p>在開始之前，我們先來看看一個最簡單的 Entity Framework 的範例，然後來看看封裝性能夠對你的程式帶來什麼影響? 先來看看只用到了 ORM 卻沒發揮封裝性的例子:</p> <p><a href="/wp-content/be-files/WindowsLiveWriter/EF2.Entityencapsulation_14856/image_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="221" alt="image" src="/wp-content/be-files/WindowsLiveWriter/EF2.Entityencapsulation_14856/image_thumb_1.png" width="172" border="0"></a> </p> <p>這是存放會員資料的表格，對應的 TABLE 很簡單，SQL 如下:</p> <div><span class="copycode" title="copy code into clipboard.">[copy code]</span> <div style="display: none"><pre id="codeData" style="display: none">CREATE TABLE [dbo].[Users](
	[ID] [nvarchar](50) NOT NULL,
	[PasswordHash] [image] NOT NULL,
	[PasswordHint] [nvarchar](100) NOT NULL,
	[SSN] [nchar](10) NOT NULL,
	[Gender] [int] NOT NULL,
 CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED
ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">CREATE</span> <span class="kwrd">TABLE</span> [dbo].[Users](</pre><pre><span class="lnum">   2:  </span>  [ID] [nvarchar](50) <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,</pre><pre class="alt"><span class="lnum">   3:  </span>  [PasswordHash] [image] <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,</pre><pre><span class="lnum">   4:  </span>  [PasswordHint] [nvarchar](100) <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,</pre><pre class="alt"><span class="lnum">   5:  </span>  [SSN] [<span class="kwrd">nchar</span>](10) <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,</pre><pre><span class="lnum">   6:  </span>  [Gender] [<span class="kwrd">int</span>] <span class="kwrd">NOT</span> <span class="kwrd">NULL</span>,</pre><pre class="alt"><span class="lnum">   7:  </span> <span class="kwrd">CONSTRAINT</span> [PK_Users] <span class="kwrd">PRIMARY</span> <span class="kwrd">KEY</span> <span class="kwrd">CLUSTERED</span></pre><pre><span class="lnum">   8:  </span><span class="kwrd">ON</span> [<span class="kwrd">PRIMARY</span>] TEXTIMAGE_ON [<span class="kwrd">PRIMARY</span>]</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>大部份的人在 EDMX Designer 裡把資料表拉進來後，就開始用這個 Entity Class 了吧? 密碼的部份為了安全及實作上的考量，DB只存放 HASH，而 HASH 的運算則透過 .NET 程式來計算，不透過 SQL 的函數。作法決定後，你可能會寫出這樣的程式碼:</p>
<div><b>建立帳號的程式碼</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">            // 準備 object context
            using (Membership ctx = new Membership())
            {
                // create user account:
                User newUser = new User();

                newUser.ID = "andrew";
                newUser.PasswordHint = "12345";
                newUser.PasswordHash = HashAlgorithm.Create("MD5").ComputeHash(Encoding.Unicode.GetBytes("12345"));
                newUser.SSN = "A123456789";
                newUser.Gender = 1;

                ctx.AddToUserSet(newUser);
                ctx.SaveChanges();
            }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">// 準備 object context</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> (Membership ctx = <span class="kwrd">new</span> Membership())</pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    <span class="rem">// create user account:</span></pre><pre class="alt"><span class="lnum">   5:  </span>    User newUser = <span class="kwrd">new</span> User();</pre><pre><span class="lnum">   6:  </span>    newUser.ID = <span class="str">"andrew"</span>;</pre><pre class="alt"><span class="lnum">   7:  </span>    newUser.PasswordHint = <span class="str">"12345"</span>;</pre><pre><span class="lnum">   8:  </span>    newUser.PasswordHash = HashAlgorithm.Create(<span class="str">"MD5"</span>).ComputeHash(Encoding.Unicode.GetBytes(<span class="str">"12345"</span>));</pre><pre class="alt"><span class="lnum">   9:  </span>    newUser.SSN = <span class="str">"A123456789"</span>;</pre><pre><span class="lnum">  10:  </span>    newUser.Gender = 1;</pre><pre class="alt"><span class="lnum">  11:  </span>    ctx.AddToUserSet(newUser);</pre><pre><span class="lnum">  12:  </span>    ctx.SaveChanges();</pre><pre class="alt"><span class="lnum">  13:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<div><b>檢查密碼的程式碼</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">                // 準備 object context
                using (Membership ctx = new Membership())
                {
                    string passwordText = "12345";
                    User curUser = ctx.GetObjectByKey(new EntityKey("Membership.UserSet", "ID", "andrew")) as User;

                    bool isPasswordCorrect = true;

                    {
                        byte[] passwordTextHash = HashAlgorithm.Create("MD5").ComputeHash(Encoding.Unicode.GetBytes(passwordText));
                        if (passwordTextHash.Length != curUser.PasswordHash.Length)
                        {
                            isPasswordCorrect = false;
                        }
                        else
                        {
                            for (int pos = 0; pos &lt; curUser.PasswordHash.Length; pos++)
                            {
                                if (passwordTextHash[pos] != curUser.PasswordHash[pos])
                                {
                                    isPasswordCorrect = false;
                                    break;
                                }
                            }
                        }
                    }

                    Console.WriteLine("Password ({0}) check: {1}", passwordText, isPasswordCorrect ? "PASS" : "FAIL");
                }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">// 準備 object context</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> (Membership ctx = <span class="kwrd">new</span> Membership())</pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    <span class="kwrd">string</span> passwordText = <span class="str">"12345"</span>;</pre><pre class="alt"><span class="lnum">   5:  </span>    User curUser = ctx.GetObjectByKey(<span class="kwrd">new</span> EntityKey(<span class="str">"Membership.UserSet"</span>, <span class="str">"ID"</span>, <span class="str">"andrew"</span>)) <span class="kwrd">as</span> User;</pre><pre><span class="lnum">   6:  </span>    <span class="kwrd">bool</span> isPasswordCorrect = <span class="kwrd">true</span>;</pre><pre class="alt"><span class="lnum">   7:  </span>    {</pre><pre><span class="lnum">   8:  </span>        <span class="kwrd">byte</span>[] passwordTextHash = HashAlgorithm.Create(<span class="str">"MD5"</span>).ComputeHash(Encoding.Unicode.GetBytes(passwordText));</pre><pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">if</span> (passwordTextHash.Length != curUser.PasswordHash.Length)</pre><pre><span class="lnum">  10:  </span>        {</pre><pre class="alt"><span class="lnum">  11:  </span>            isPasswordCorrect = <span class="kwrd">false</span>;</pre><pre><span class="lnum">  12:  </span>        }</pre><pre class="alt"><span class="lnum">  13:  </span>        <span class="kwrd">else</span></pre><pre><span class="lnum">  14:  </span>        {</pre><pre class="alt"><span class="lnum">  15:  </span>            <span class="kwrd">for</span> (<span class="kwrd">int</span> pos = 0; pos &lt; curUser.PasswordHash.Length; pos++)</pre><pre><span class="lnum">  16:  </span>            {</pre><pre class="alt"><span class="lnum">  17:  </span>                <span class="kwrd">if</span> (passwordTextHash[pos] != curUser.PasswordHash[pos])</pre><pre><span class="lnum">  18:  </span>                {</pre><pre class="alt"><span class="lnum">  19:  </span>                    isPasswordCorrect = <span class="kwrd">false</span>;</pre><pre><span class="lnum">  20:  </span>                    <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  21:  </span>                }</pre><pre><span class="lnum">  22:  </span>            }</pre><pre class="alt"><span class="lnum">  23:  </span>        }</pre><pre><span class="lnum">  24:  </span>    }</pre><pre class="alt"><span class="lnum">  25:  </span>    Console.WriteLine(<span class="str">"Password ({0}) check: {1}"</span>, passwordText, isPasswordCorrect ? <span class="str">"PASS"</span> : <span class="str">"FAIL"</span>);</pre><pre><span class="lnum">  26:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>這樣的 User 類別設計有什麼問題? 我列幾個我認為設計上不妥的地方:</p>
<ol>
<li>直接提供 PasswordHash 曝露過多不必要的實作細節</li>
<li>在台灣，身份證字號 (SSN) 跟性別 (Gender) 是相依的欄位 ( functional dependency )</li></ol>
<p>以物件導向的角度來看，User 真正要提供的是接受 "驗證密碼" 的要求，至於你的實作是提供明碼或是用 Hash, 都是實作的細節。提供原始未加密的密碼，或是提供處理過的 HASH，在需求上都是不必要個功能。物件的介面定義要盡量以能滿足需求的最小介面為原則，其它的都不要公開，才滿足 "封裝性" 的要求。因此良好的設計應該把這些細節封裝起來，只在公開的介面表達你要提供的功能。</p>
<p>另外依照<a href="http://zh.wikipedia.org/wiki/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E5%9C%8B%E6%B0%91%E8%BA%AB%E5%88%86%E8%AD%89#.E7.B7.A8.E8.99.9F.E8.A6.8F.E5.89.87">台灣的身份證字號規則</a>， SNN 跟 Gender 是連動的。目前 User 的設計是把兩者的關係丟給前端寫網頁的人來維護，一不注意就會發生不一致的情況。DB 對於這種問題的解決方式，不外乎寫 trigger 或是其它 constraint 的方式來阻擋不正確的資料被寫入 DB，不過看了前面提到的規則，要單純用 SQL 的功能完整實作出來，還不大容易。</p>
<p>另一種作法，只儲存 SSN，Gender 欄位則以 VIEW 的方式提供，這樣就不會有不一致的問題。不過這方法的缺點在於，當邏輯太複雜的時後，常常會超出 SQL 能處理的範圍，效能也許會是個問題，或是 constraint 不能完全跟程式端一致。</p>
<p>就我看來，這類看似應該在 data layer 實作的複雜邏輯，又難以在 SQL DB 上面解決的問題，才是 Entity Framework 的強項。現在來看看 Entity Framework 能怎麼解決這些資料封裝的需求:</p>
<p>首先，把不需要公開的細節改成 Private 隱藏起來，包括 PasswordHash 的 Getter / Setter, Gender 更名為 GenderCode, 同時把 Getter / Setter 也改為 Private ...</p>
<p>接下來就要把這些封裝起來的細節，提供另一組較合適的公開資訊的方式。這時 .EDMX designer 替我們產出的 code 就能搭配 partial class 擴充功能了。來看看我們在 partial class 裡寫了什麼?</p>
<div><b>User.cs 的內容 (partial class)</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">    public partial class User
    {
        public string Password
        {
            set
            {
                this.PasswordHash = this.ComputePasswordHash(value);
            }
        }

        public bool ComparePassword(string passwordText)
        {
            byte[] hash = this.ComputePasswordHash(passwordText);

            // compare hash
            if (this.PasswordHash == null) return false;
            if (hash.Length != this.PasswordHash.Length) return false;
            for (int pos = 0; pos &lt; hash.Length; pos++)
            {
                if (hash[pos] != this.PasswordHash[pos]) return false;
            }
            return true;
        }

        public GenderCodeEnum Gender
        {
            get
            {
                return (GenderCodeEnum)this.GenderCode;
            }
        }

        partial void OnSSNChanging(string value)
        {
            // ToDo: check ssn rules.

            // sync gender code
            this.GenderCode = int.Parse(value.Substring(1, 1));
        }




        private byte[] ComputePasswordHash(string password)
        {
            if (string.IsNullOrEmpty(password) == true) return null;
            return HashAlgorithm.Create("MD5").ComputeHash(Encoding.Unicode.GetBytes(password));
        }
    }

    public enum GenderCodeEnum : int
    {
        FEMALE = 0,
        MALE = 1
    }</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> User</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">public</span> <span class="kwrd">string</span> Password</pre><pre><span class="lnum">   4:  </span>    {</pre><pre class="alt"><span class="lnum">   5:  </span>        set</pre><pre><span class="lnum">   6:  </span>        {</pre><pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.PasswordHash = <span class="kwrd">this</span>.ComputePasswordHash(<span class="kwrd">value</span>);</pre><pre><span class="lnum">   8:  </span>        }</pre><pre class="alt"><span class="lnum">   9:  </span>    }</pre><pre><span class="lnum">  10:  </span>    <span class="kwrd">public</span> <span class="kwrd">bool</span> ComparePassword(<span class="kwrd">string</span> passwordText)</pre><pre class="alt"><span class="lnum">  11:  </span>    {</pre><pre><span class="lnum">  12:  </span>        <span class="kwrd">byte</span>[] hash = <span class="kwrd">this</span>.ComputePasswordHash(passwordText);</pre><pre class="alt"><span class="lnum">  13:  </span>        <span class="rem">// compare hash</span></pre><pre><span class="lnum">  14:  </span>        <span class="kwrd">if</span> (<span class="kwrd">this</span>.PasswordHash == <span class="kwrd">null</span>) <span class="kwrd">return</span> <span class="kwrd">false</span>;</pre><pre class="alt"><span class="lnum">  15:  </span>        <span class="kwrd">if</span> (hash.Length != <span class="kwrd">this</span>.PasswordHash.Length) <span class="kwrd">return</span> <span class="kwrd">false</span>;</pre><pre><span class="lnum">  16:  </span>        <span class="kwrd">for</span> (<span class="kwrd">int</span> pos = 0; pos &lt; hash.Length; pos++)</pre><pre class="alt"><span class="lnum">  17:  </span>        {</pre><pre><span class="lnum">  18:  </span>            <span class="kwrd">if</span> (hash[pos] != <span class="kwrd">this</span>.PasswordHash[pos]) <span class="kwrd">return</span> <span class="kwrd">false</span>;</pre><pre class="alt"><span class="lnum">  19:  </span>        }</pre><pre><span class="lnum">  20:  </span>        <span class="kwrd">return</span> <span class="kwrd">true</span>;</pre><pre class="alt"><span class="lnum">  21:  </span>    }</pre><pre><span class="lnum">  22:  </span>    <span class="kwrd">public</span> GenderCodeEnum Gender</pre><pre class="alt"><span class="lnum">  23:  </span>    {</pre><pre><span class="lnum">  24:  </span>        get</pre><pre class="alt"><span class="lnum">  25:  </span>        {</pre><pre><span class="lnum">  26:  </span>            <span class="kwrd">return</span> (GenderCodeEnum)<span class="kwrd">this</span>.GenderCode;</pre><pre class="alt"><span class="lnum">  27:  </span>        }</pre><pre><span class="lnum">  28:  </span>    }</pre><pre class="alt"><span class="lnum">  29:  </span>    <span class="kwrd">partial</span> <span class="kwrd">void</span> OnSSNChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>)</pre><pre><span class="lnum">  30:  </span>    {</pre><pre class="alt"><span class="lnum">  31:  </span>        <span class="rem">// ToDo: check ssn rules.</span></pre><pre><span class="lnum">  32:  </span>        <span class="rem">// sync gender code</span></pre><pre class="alt"><span class="lnum">  33:  </span>        <span class="kwrd">this</span>.GenderCode = <span class="kwrd">int</span>.Parse(<span class="kwrd">value</span>.Substring(1, 1));</pre><pre><span class="lnum">  34:  </span>    }</pre><pre class="alt"><span class="lnum">  35:  </span>    <span class="kwrd">private</span> <span class="kwrd">byte</span>[] ComputePasswordHash(<span class="kwrd">string</span> password)</pre><pre><span class="lnum">  36:  </span>    {</pre><pre class="alt"><span class="lnum">  37:  </span>        <span class="kwrd">if</span> (<span class="kwrd">string</span>.IsNullOrEmpty(password) == <span class="kwrd">true</span>) <span class="kwrd">return</span> <span class="kwrd">null</span>;</pre><pre><span class="lnum">  38:  </span>        <span class="kwrd">return</span> HashAlgorithm.Create(<span class="str">"MD5"</span>).ComputeHash(Encoding.Unicode.GetBytes(password));</pre><pre class="alt"><span class="lnum">  39:  </span>    }</pre><pre><span class="lnum">  40:  </span>}</pre><pre class="alt"><span class="lnum">  41:  </span><span class="kwrd">public</span> <span class="kwrd">enum</span> GenderCodeEnum : <span class="kwrd">int</span></pre><pre><span class="lnum">  42:  </span>{</pre><pre class="alt"><span class="lnum">  43:  </span>    FEMALE = 0,</pre><pre><span class="lnum">  44:  </span>    MALE = 1</pre><pre class="alt"><span class="lnum">  45:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>被隱藏起來的 PasswordHash, 公開的介面就用 Password 的 Setter 跟 ComparePassword( ) method 取代，明確的用程式碼告訴所有要用它的 programmer:</p>
<p>"密碼只准你寫，不准你讀 (read only)... 只告訴你密碼對不對, 不會讓你把真正的密碼拿出去"</p>
<p>另一個部份，就是身份證字號跟性別的問題，則改用另一個方式解決。SSN 這個屬性維持不變，在它被更動時就一起更動 GenderCode 這個欄位。GenderCode 完全不對外公開，公開的只有把 int 轉成 GenderCodeEnum 的屬性: Gender。同時為了保護資料的正確性，只開放 Getter, 不開放 Setter。</p>
<p>&nbsp;</p>
<p>同樣的程式，在我們調整過 Entity 的封裝之後，再來重寫一次看看:</p>
<div><b>建立新的使用者帳號</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">            // 準備 object context
            using (Membership ctx = new Membership())
            {
                User newUser = new User();

                newUser.ID = "andrew";
                newUser.PasswordHint = "My Password: 12345";
                newUser.Password = "12345";
                newUser.SSN = "A123456789";

                ctx.AddToUserSet(newUser);
                ctx.SaveChanges();
            }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">// 準備 object context</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> (Membership ctx = <span class="kwrd">new</span> Membership())</pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    User newUser = <span class="kwrd">new</span> User();</pre><pre class="alt"><span class="lnum">   5:  </span>    newUser.ID = <span class="str">"andrew"</span>;</pre><pre><span class="lnum">   6:  </span>    newUser.PasswordHint = <span class="str">"My Password: 12345"</span>;</pre><pre class="alt"><span class="lnum">   7:  </span>    newUser.Password = <span class="str">"12345"</span>;</pre><pre><span class="lnum">   8:  </span>    newUser.SSN = <span class="str">"A123456789"</span>;</pre><pre class="alt"><span class="lnum">   9:  </span>    ctx.AddToUserSet(newUser);</pre><pre><span class="lnum">  10:  </span>    ctx.SaveChanges();</pre><pre class="alt"><span class="lnum">  11:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div><b>檢查密碼是否正確</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none"><pre id="codeData" style="display: none">            // 準備 object context
            using (Membership ctx = new Membership())
            {
                EntityKey key = new EntityKey("Membership.UserSet", "ID", "andrew");
                User user = ctx.GetObjectByKey(key) as User;

                // 要比對的密碼
                string passwordText = "123456";
                bool isPasswordCorrect = user.ComparePassword(passwordText);

                Console.WriteLine("Password ({0}) check: {1}", passwordText, isPasswordCorrect ? "PASS" : "FAIL");
            }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">// 準備 object context</span></pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> (Membership ctx = <span class="kwrd">new</span> Membership())</pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    EntityKey key = <span class="kwrd">new</span> EntityKey(<span class="str">"Membership.UserSet"</span>, <span class="str">"ID"</span>, <span class="str">"andrew"</span>);</pre><pre class="alt"><span class="lnum">   5:  </span>    User user = ctx.GetObjectByKey(key) <span class="kwrd">as</span> User;</pre><pre><span class="lnum">   6:  </span>    <span class="rem">// 要比對的密碼</span></pre><pre class="alt"><span class="lnum">   7:  </span>    <span class="kwrd">string</span> passwordText = <span class="str">"123456"</span>;</pre><pre><span class="lnum">   8:  </span>    <span class="kwrd">bool</span> isPasswordCorrect = user.ComparePassword(passwordText);</pre><pre class="alt"><span class="lnum">   9:  </span>    Console.WriteLine(<span class="str">"Password ({0}) check: {1}"</span>, passwordText, isPasswordCorrect ? <span class="str">"PASS"</span> : <span class="str">"FAIL"</span>);</pre><pre><span class="lnum">  10:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>修改過的程式簡潔多了。不過比少打幾行程式碼更重要的是，它的邏輯更清楚，更不容易出錯。如果沒有妥善的處理封裝性的問題，可以想像寫出來的程式一定亂七八糟。要嘛不正確的資料都會被寫進 DB，不然就是 DB 有作適當的防範，但是程式沒有作好，最後就是到處都出現 SqlException ...</p>
<p>這裡只是簡單示範一下 Entity Framework 如何替資料提供封裝的特性，後續的文章會繼續示範 Entity Framework 如何能把 DBMS 的資料，進一步的應用到物件技術的繼承及多型等特性。敬請期待下集 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2009-01-23 00:09:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-23 00:09:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ef2-entity-encapsulation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
	</item>
	<item>
		<title>EF#1. 要學好 Entity Framework? 請先學好 OOP 跟 C# ...</title>
		<link>http://columns.chicken-house.net/2009/01/21/ef1-%e8%a6%81%e5%ad%b8%e5%a5%bd-entity-framework-%e8%ab%8b%e5%85%88%e5%ad%b8%e5%a5%bd-oop-%e8%b7%9f-c/</link>
		<pubDate>Wed, 21 Jan 2009 20:35:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/01/21/EF1-e8a681e5adb8e5a5bd-Entity-Framework-e8ab8be58588e5adb8e5a5bd-OOP-e8b79f-C-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>這次為了能順利的學好 Entity Framework，花了不少工夫在研究它的作法。不過有一大半不是在 Entity Framework 本身，而是在 C# 的一些特別的語法跟 LINQ 身上...。也因為這樣，我深切的體認到一個 ORM 技術能不能成功，其實都是在 Hosting 這個 Framework 的環境夠不夠成熟...。</p> <p>不過在摸索的過程中，找到的資訊都是片斷的，每一篇都是講實作，範例程式，操作步驟... 等等，而當時我最需要的反而是幫助我決定，Entity Framework 到底值不值得我押在上面投資五年開發計劃使用的 ORM 技術? 它跟 NHibernate (考慮中的另一項 ORM framework) 的優缺點為何? 未來發展的優缺點又是什麼? 架構上的差異在那? 另外 Linq to SQL 呢? 這些較偏架構性跟本質的討論及比較資訊，反而少之又少...。</p> <p>雖然最後還是研究了些心得出來，不過實在是不想寫那些到處都看的到的實作，就來寫點不一樣的吧。第一篇會先寫寫 ORM 的背景知識，還有 Entity Framework 跟 C# 的語法是如何魚幫水，水幫魚，如何解決了過去 ORM 用起來都不大對勁的問題...。</p> <p>&nbsp;</p> <p>繼續長篇大論前，先老王賣瓜一下。雖然我碰過的 ORM framework 不多，不過相關的理論跟技術則碰了不少。撇開大學就在研究的 OOP 不談，研究所的指導教授就從 <a href="http://en.wikipedia.org/wiki/Smalltalk">SmallTalk</a> 開使教... 兩年的專題研究都是 <a href="http://en.wikipedia.org/wiki/OODB">OODB</a> (物件導向資料庫)，相關論文也看了一堆。出來工作後又有幸用了幾年的 <a href="http://www.softwareag.com/Corporate/products/wm/tamino/default.asp">TAMINO</a> (一套 native xml database), 之後又花了很多時間，在 SQL 2000 上面建立起一套 Object &lt;-&gt; XML &lt;-&gt; Database，類似 ORM 的 Framework ...</p> <p>不過這麼一路下來，都沒有覺的簡單又可行的方案。除了上面講的是我親自參與過的之外， Microsoft 其實也發表過幾個類似的技術，像是 <a href="http://msdn.microsoft.com/en-us/library/esbykkzb(VS.71).aspx">Typed DataSet</a> 就是個較接近的產物。 Typed DataSet 其實有點接近現在的 Entity Framework 了。DataSet 就等同於 Entity Container / ObjectContext, DataTable 大致就等同於 EntitySet, 而 DataRow 則等同於 Entity, Relation 則大致等同於 Entity Framework 的 Navigation Property.... 不過用起來還是到處都看的到 DataSet 的影子，感覺血統還不夠純正...</p> <p>不過現在的 Entity Framework 不一樣了，感覺就已經往實用的領域邁進了一大步! 並不是說 Entity Framework 做的很好 (以成熟度來說, NHibernate 比目前的 Entity Framework 好的多), 而是跟 Entity Framework 搭配的技術都成熟了。一套 ORM 要成功，必要的條件很多啊... 實作上的角度看來，我覺的重要的有這幾項:</p> <ol> <li>要有優良的 Object / Relationship Mapping 機制、作法、工具等等  <li>Framework 本身的擴充及自訂的能力要夠  <li>要有效的解決以物件角度思考的查詢 (QUERY) 問題  <li>"物件" 要看起來像 "物件"，不是 "資料"  <li>處理資料庫典型的問題，效能跟便利性不能跟直接操作 DB 差太多  <li>你的牌子夠不夠響亮... (這是心理因素而已... 哈哈)</li></ol> <p>這些是深切的體認。不然的話 ORM 的東西跟本不難啊，以功能來說，Typed DataSet 其實就解決一大半實際的問題了。先來看看物件導向幾個關鍵的核心技術是啥?</p> <ol> <li>封裝 ( Encapsulation )，抽像化型別 (ADT, Abstract Data Type)，資料 (Data) 跟行為 (Behavior) 能夠綁在一起  <li>繼承 ( Inheritance )  <li>多型 ( Polymorphism )</li></ol> <p>以這樣 "物件" 的關點來看，Microsoft 在 Entity Framework 之前的資料庫技術其實都不合格。先來看看資料庫存取技術，如果能搭配這些物件技術，能有什麼樣的改進?</p> <p><strong>[封裝]</strong><br>這就沒啥好講的了。物件技術有很好的封裝機制，public / protected / private 等等 scope modifier 就能提供很棒的封裝機制。不過資料庫很難做的好，資料庫的那套頂多叫作安全機制 (security) 或是授權機制 (authorization), 不是封裝 (encapsulation) ... 真正的封裝不是看你是那個帳號決定能不能讀資料? 而是你是那個 SCOPE 的程式，能不能存取封裝起來的內部資訊。DBMS 對於資料的控制能力很有限，不外呼 Key, Constraint, Relationship / Foreign Key 等等。像加解密，正規運算式 (regular expression) 等等，對 DBMS 來說就太複雜了。更複雜的封裝機制單靠 DB 就很不實際... 無奈在沒有 ORM 的前題下，這些問題則是直接曝露在你的程式碼每個地方...。換句話說，如果 ORM 能提供良好的封裝機制，ORM 就能取代掉目前的 Data Access Layer ，成為 APP 存取 DBMS 的主要 API 。</p> <p>順便吐個苦水，也因為 DBMS 對於資料的控制能力有限，維護的 APP 總是碰到這種問題，就是錯誤的資料總是有辦法鑽進資料庫裡面。不為什麼，只因為 DBMS 本身擋不下來，而 Data Access Layer 又不夠爭氣到足以扛下這重責大任，最後只能靠 APP 自身的開發人員，靠紀律跟自律，還有良心來作好這層把關的動作... -_- 如果有套像樣的 ORM 能夠卡在這個位置，光是資料內容的把關，就是一大進步了。</p> <p><strong></strong>&nbsp;</p> <p><strong>[繼承]</strong><br>繼承跟資料庫有什麼關係? 其實 ORM 如果能有效的把繼承的功能跟資料庫整合起來，也是很嚇人的。舉例來說，部落格支援文章，相片等等不同的內容，但是它們都要有一致的抽像行為，如新的內容要能夠訂閱 (rss subscription)，要能夠有標簽 (tagging) 等等共通的功能，在物件技術我們會很直覺的用繼承來做到。定義 BlogContent 類別，把這些邏輯擺上去。之後再分別衍生出 ArticleContent / PhotoContent 等類別，把差異的實作補上去就完成了。不過同樣的概念別想直接套用在資料庫上，你的腦袋得負責這兩者之間的對應。</p> <p>懂的這麼多的工程師很難找啊... 去那裡找這種人來寫 APP ? 其實搞懂這些也不難，C++ / C# 在解決這類問題，只是很簡單的利用到 virtual table 就搞定了。換到 DBMS，就把 virtual table 的資料結構套到 database schema 就可以。不過說來簡單，能夠搞懂這些，還能精確的實作出來的人不多... 真的作出來還會被嫌:</p> <p>"它ㄨ的，誰設計的 table schema ? 亂切一通害我 T-SQL query 這麼難寫..."</p> <p>嗯，沒事，藉機吐吐苦水。主要要表達的就只有一個，繼承關係要對應到資料庫上面，也是挺麻煩的一件事。Entity Framework / NHibernate 就都提供了三種對應的方法。這三種切割對應的方式，要選那一種? 這又是門學問... Orz, 以後再說。</p> <p>&nbsp;</p> <p><strong>[多型]</strong><br>這個就更玄了。多型是建立在繼承的基礎上，不管你是什麼類別的 instance, 多型的機制可以在父類別的角度，對所有各種衍生類別的物件，一視同仁的操作。而在這統一的前題下，每種類別的物件又可以一國兩制的各自為政... (咳，這不是政治版...)。這樣的抽像程度就是資料庫遠遠所不及的。延序前面講的部落格內容的例子，你能想像這個 store procedure 該怎麼寫嗎?</p> <p><em><font color="#008000">"要寫一個 sp_update_blogcontent 的 store procedure, 如果 ID 指向的是 blog, 則要執行更新 HTML 的 code，如果是 photo, 則要更新存放圖檔的 BLOB 欄位..."</font></em></p> <p>天那，在 DB 這個層次，寫這種 CODE 只能用很醜的 IF&nbsp; ELSE 一層一層堆起來...，跟物件技術比起來，程式碼的描述及抽像化能力實在差太遠，在這層次能解決的問題複雜度很有限...。你如果是個聰明人，最好還是別在 DBMS 搞這些物件技術，會死人的...。比較好的作法是移到 APP 那層去作比較實際。</p> <p>不錯，ORM 存在的原因又多了一個...。</p> <p>&nbsp;</p> <p>所以，再回頭來看看，ORM真的要發揮它的效益的話，絕對不是只有用 "物件" 來代替 "資料" 而已 (還是老話一句，這樣的話用 Typed DataSet 就夠了)。至少對應出來的 "物件"，還能有效的應用到這些物件導向的特性，同時 ORM framework 還能替你維持這些跟資料庫的對應關係，這樣 ORM 技術才能真正發揮它的效益，那些被講到爛的三層式架構才不會在 DBMS 這層就破功了。</p> <p>來看看比較具體的部份。這些物件技術的特點，C# 早在 2000 年，JAVA 早在 199X 年就有了，沒什麼了不起。不過當年的 ORM 實在難用的很。當時的 OOPL 就是缺了些東西，ORM 的程式寫起來限制一堆... 對應到資料庫的物件，用起來就是跟一般的物件差很多，這也不能用，那也不能用。</p> <p>現在的 C# 就不一樣了，進化到足以解決這些語言的限制。來看看:</p> <ol> <li>reflection, attribute:<br>這個讓物件 (Entity) 可以寫的更簡潔，reflection + attribute 可以解決很多過去得繞一大圈才做的到的事。如 class 對應到那個 table, property 對應到那個 column 等等。</li> <li>partial class:<br>ORM 免不了有些 code generator 的搭配。有 partial class 可以讓程式搭配 code generator 更容易一點。</li> <li>extension methods:<br>現有的物件技術很難讓你在現有的 class 上去作擴充，而 extension methods 可以。</li> <li>Linq<br>這可是一大進步。過去 ORM 的目的就是想把 DB 的細節藏起來，無奈碰到 QUERY 的話什麼都藏不住，往往淪落到要嘛都直接用 SQL, 不然就是只剩幾種基本的 API 可以用，無法完全取代直接用 SQL 的查詢。不過 Linq 出現之後這情況就改觀了，雖然像報表那樣複雜大型的 QUERY 還是得直接下 SQL，不過一般 AP 內的查詢都可以直接用 Linq 搞定了</li></ol> <p>其它當然還有別的，不過我自己覺的這幾點是關鍵，至少可以讓現在的 Entity Framework 在使用 Entity 時，不會再跟一般的物件有什麼不同。大部份你可以應用在一般物件的技巧，也都能套用在 Entity 身上。第一篇碎碎唸的部份就先寫到這裡。後面會示範一下幾種打造你專屬的 Entity 用到的技巧。想看後面的讀者們請耐心等待 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2009-01-21 20:35:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-21 20:35:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ef1-%e8%a6%81%e5%ad%b8%e5%a5%bd-entity-framework-%e8%ab%8b%e5%85%88%e5%ad%b8%e5%a5%bd-oop-%e8%b7%9f-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-22 09:20:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-22 09:20:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇大陸文章有各種ORM的使用經驗,值得參考比較一下
http://www.cnblogs.com/Barton131420/archive/2008/12/01/1345314.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-22 18:12:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-22 18:12:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇大陸文章寫的不錯，作者很清楚 ORM 的定位，也很清楚該不該用 ORM 的時機...
謝謝提供參考資訊 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>難搞的 Entity Framework - 跨越 Context 的查詢</title>
		<link>http://columns.chicken-house.net/2009/01/20/%e9%9b%a3%e6%90%9e%e7%9a%84-entity-framework-%e8%b7%a8%e8%b6%8a-context-%e7%9a%84%e6%9f%a5%e8%a9%a2/</link>
		<pubDate>Tue, 20 Jan 2009 02:16:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/01/20/e99ba3e6909ee79a84-Entity-Framework-e8b7a8e8b68a-Context-e79a84e69fa5e8a9a2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>咳，沒錯... 兩個月都沒寫什麼東西出來，就是都在研究 Entity Framework 跟 Enterprise Library... Enterprise Library 倒還好，看看範例，看看 Key Scenario 大概就能入門了，不過 Entity Framework 就沒這麼簡單...</p> <p>Microsoft 對 Entity Framework 的 Roadmap 規劃的很大，不過再怎麼樣附在 .NET 3.5 SP1 的也還只是第一版而已。背負著龐大的架構，而現在卻還不一定能拼過其它成熟的 ORM solution, 這就是辛苦的地方。</p> <p>先抱怨一下它的設計工具... 好用是蠻好用的 (跟直接寫 XML 檔相比)，不過小問題還不少。像是 TABLE 拉進去，刪掉再拉進去，就有機會 build 失敗... VIEW 拉進去沒辦法明確的指定 KEY 是那個欄位，不是結果不對就是 build 失敗，最後忍不住還是得去手動改 .edmx .. 這些事件老實說這兩個月也碰了不少 @_@</p> <p>不過撇開工具的問題，Entity Framework 的設計還真是不錯。其它的心得就改天再講，先講困擾我最久的，也是大部份 ORM 的通病 - 大型 database 的問題。</p> <p>這裡指的 "大型" 不是指資料筆數很多，是指 schema 很複雜的情況。大型的 AP 用到上百個 table + view 是很常見的，尤其是隨著改版，舊 table 沒刪掉，新的 table 又一直加，那還真是恐佈。所有的 ORM 都需要某種型態的 O / R Mapping, 不是寫設定檔，就是有視覺化的設計工具。不過... 你能想像一張有 500 個 table 的 ER-MODEL 嗎?&nbsp; </p> <p>要避免過大的單一 OR Mapping 設定，就只有做適度的切割了。在 Entity Framework / Visual Studio 2008 ，這點很容易做到，分成多個 .edmx 檔就可以了。不過問題會在後面，分開多個 .edmx 有幾個缺點:</p> <ol> <li>會有多個 ObjectContext 產生，每邊都有物件要更新時，每個 ObjectContext 都得呼叫 SaveChange..</li> <li>不論是 LINQ to Entities 或是 eSQL, 想要 join 橫跨在多個 .edmx 的資料時，會得到無情的錯誤... 不支援跨 context 的操作</li> <li>AssoicationSet 無法跨越 context 的範圍，意思是跨 .edmx 的 Entity, 不能靠 Navigation Property 來處理。</li></ol> <p>解決的方式當然也有，也查了 ADO.NET Team Blog，這兩篇是所有 GOOGLE 到的相關文章裡，講這問題講的最深入的..</p> <ul> <li><a href="http://blogs.msdn.com/adonet/archive/2008/11/24/working-with-large-models-in-entity-framework-part-1.aspx">Working With Large Models In Entity Framework – Part 1</a></li> <li><a href="http://blogs.msdn.com/adonet/archive/2008/11/25/working-with-large-models-in-entity-framework-part-2.aspx">Working With Large Models In Entity Framework – Part 2</a></li></ul> <p>有碰到這問題的，這兩篇一定要看一看。其實文章內探討的問題已經超過我的需求了，我只是要解決我面臨到的問題:</p> <ol> <li>因應模組化需求，我需要把 .edmx 跟其相關的邏輯封裝在各別的 assembly </li> <li>不同的模組間定義的 EntitySet 能夠用 eSQL 做 JOIN 的查詢</li> <li>最基本的 LINQ 也不能少</li> <li>新增新的模組時，其它模組不需要重新編譯</li></ol> <p>老實說這兩篇沒解決到我的問題，只不過瞄到了 Part 2 有這麼一段話:</p> <blockquote> <p><font color="#008000">9. At runtime, you could create either one Context that works with both the schema sets or two different contexts. To create a single context with both the schema sets, you would use the ObjectContext constructor that takes in an EntityConnectionString. In the Metadata parameter of the connection string, specify the paths to both sets of files.</font></p></blockquote> <p>哈哈，運氣不錯，關鍵的一段話沒有漏掉... 就這段話解決了我一個多月以來的困擾。Entity Connection 用的連接字串又臭又長，包括了你的 .csdl, .ssdl, .msl 三份定義檔在那裡，還有底層用的 database connection string. 湊起來一大串，像這樣:</p> <blockquote> <p><font color="#ff0000">medadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;............</font></p></blockquote> <p>而從這兩篇文章，除了各種 split / reuse 這堆設定檔的方法及優缺點之外，就是學到原來 entity connect string 可以併入多組對應檔啊 :D，像這樣:</p> <blockquote> <p><font color="#ff0000">medadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl|res://*/Model2.csdl|res://*/Model2.ssdl|res://*/Model2.msl;............</font></p></blockquote> <p>沒錯!! 說穿了不值錢，就是把 entity connection string 這樣改一改就好了，eSQL 就可以透過單一 object context 就能存取兩份 .edmx 內定義的內容， Linq 則要自己用 CreateQuery&lt; &gt;() 方式來產生 EntitySet.. 其它就沒有什麼太大不同了。</p> <p>總算搞定這個大問題!! 收工! 其它的應用就改天有空再慢慢貼了 :D 感謝各位在這兩個月枯水期還沒取消訂閱我的 BLOG ... :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2009-01-20 02:16:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-20 02:16:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%a3%e6%90%9e%e7%9a%84-entity-framework-%e8%b7%a8%e8%b6%8a-context-%e7%9a%84%e6%9f%a5%e8%a9%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[che@michadel.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-20 08:09:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-20 08:09:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真的很久沒貼新文章了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[bala]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hahabala@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-01-20 12:12:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-01-20 12:12:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[期待這一系列的文章

用了一陣子的EF
始終無法抓到其中精髓的地方

希望能從大師的筆下得到更多的體悟...^_^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Jero]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jero0207@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-25 22:09:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-25 22:09:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear 安德魯 你好
這是小弟我做的 Entity Framework 的 ppt
http://jero.myweb.hinet.net/EntityFramework(Jero).ppsx
裡頭引用了一些您之前撰寫過的文章，主要是要跟公司同事分享新的技術面的東西而做的，一方面也是做個記錄！
不知是否可以請您有空幫忙看一下是不是有 [b]不正確或是不妥[/b] 的地方]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-28 01:41:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-28 01:41:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jero,

您太客氣了 :D, 整理的很不錯, 我貢獻的內容只有一小部份而已 :D
其實我 EF 用的不是很透徹，只是對於 OO 的應用著墨比較多...

我的文章歡迎參考啦 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>RUN!PC 精選文章 - 生產線模式的多執行緒應用</title>
		<link>http://columns.chicken-house.net/2009/01/16/runpc-%e7%b2%be%e9%81%b8%e6%96%87%e7%ab%a0-%e7%94%9f%e7%94%a2%e7%b7%9a%e6%a8%a1%e5%bc%8f%e7%9a%84%e5%a4%9a%e5%9f%b7%e8%a1%8c%e7%b7%92%e6%87%89%e7%94%a8/</link>
		<pubDate>Fri, 16 Jan 2009 02:10:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/01/16/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.runpc.com.tw/content/main_content.aspx?mgo=178&amp;fid=E08" title="http://www.runpc.com.tw/content/main_content.aspx?mgo=178&amp;fid=E08">http://www.runpc.com.tw/content/main_content.aspx?mgo=178&amp;fid=E08</a> 
<p>
無意間 search 我自己的名字，才發現這篇文章除了投稿到 RUN! PC 之外，原來還有刊在網站上的精選文章啊...
</p>
<p>
哈哈，暗爽一下，順道貼一下 link, 讓沒看到雜誌的網友們也有機會看一看在下的作品...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2009-01-16 02:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-16 02:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[runpc-%e7%b2%be%e9%81%b8%e6%96%87%e7%ab%a0-%e7%94%9f%e7%94%a2%e7%b7%9a%e6%a8%a1%e5%bc%8f%e7%9a%84%e5%a4%9a%e5%9f%b7%e8%a1%8c%e7%b7%92%e6%87%89%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>XmlWellFormedWriter.WriteRaw( ) 的 Bug 後續發展</title>
		<link>http://columns.chicken-house.net/2008/12/10/xmlwellformedwriter-writeraw-%e7%9a%84-bug-%e5%be%8c%e7%ba%8c%e7%99%bc%e5%b1%95/</link>
		<pubDate>Wed, 10 Dec 2008 15:30:18 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/12/10/XmlWellFormedWriterWriteRaw(-)-e79a84-Bug-e5be8ce7ba8ce799bce5b195.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>一時順手，就按下 Visual Studio 2008 上面的 [Report Bug] 回報<a href="http://columns.chicken-house.net/post/e58e9fe4be86-XmlWellFormedWriter-e4b99fe69c89-Bug-.aspx">上一篇</a>發現的 Bug, 沒想到 Microsoft 真的有回應耶... :D</p> <p>反正 Microsoft 在 connect 裡的回應本來就公開的，我就順手貼一下:</p> <p>&nbsp;</p> <p><a title="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=386899&amp;wa=wsignin1.0" href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=386899&amp;wa=wsignin1.0">https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=386899&amp;wa=wsignin1.0</a></p> <p>&nbsp;</p> <p><font color="#008000">Hello,<br>Originally the WriteRaw method was designed for XmlWriters that are formatting text XML into a file. In those cases the WriteRaw method can be used to write out an XML fragment that is already formatted and checked for well-formedness. It can also be used for writing text nodes with special character that have been already escaped and no further processing of the text is needed. <br>However, when we introduced the XmlWriter over XmlDocument/XDocument (accessed via XPathNavigator editing methods), the use of the WriteRaw method on top of XmlDocument became controversial. We had two options:<br>1.&nbsp;&nbsp;&nbsp; Threat it as a text<br>2.&nbsp;&nbsp;&nbsp; Parse it into nodes</font></p><font color="#008000"> <p><br>The second option is very difficult (if not possible) to do. The XML fragment can we written out in multiple WriteRaw calls, so we could not assume that a single WriteRaw will contain a fully enclosed fragment. It can also be interleaved with other XmlWriter calls and nested many times – overall a very hard thing to implement properly. So that is why we have decided to treat the WriteRaw content as text, which is what you are seeing. <br>If you have an XML fragment in a string and you want to append it to XmlDocument, you can do it like this:</p> <p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlDocument doc = new XmlDocument();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlElement rootElement = doc.CreateElement("root");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rootElement.InnerXml = "&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doc.AppendChild(rootElement);</p> <p><br>Or if you really want to use the XmlWriter from XPathNavigator.AppendChild(), you can create an XmlReader over your fragment and use the WriteNode method on the XmlWriter:</p> <p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlDocument doc = new XmlDocument();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlWriter writer = doc.CreateNavigator().AppendChild();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.WriteStartElement("root");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (XmlReader r = XmlReader.Create(new StringReader("&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;"), new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment } ) ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.WriteNode(r, false);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.WriteEndElement();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.Close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doc.Save(Console.Out);</p> <p><br>I hope this helps.<br>Thank you,<br>-Helena Kotas, System.Xml Developer</font></p> <p>&nbsp;</p> <p>看來 Microsoft 認為這是權宜之計，不算 BUG，要 USER 就直接避掉了，只是他建議的解法剛好就是我<a href="http://columns.chicken-house.net/post/e58e9fe4be86-XmlWellFormedWriter-e4b99fe69c89-Bug-.aspx">上一篇</a>用的，用 XmlReader, 搭上 ConformanceLevel.Fragment 的設定解決掉...</p> <p>只不過，這種情況，不是應該丟出 NotSupportException 比較好嘛? 幹嘛拿個不適當的實作填進來?</p> <p>&nbsp;</p> <p>提外話，現在 WEB 2.0 的時代，Microsoft 工程師除了寫 CODE 之外，也要負責回客戶的問題了? 真辛苦...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2008-12-10 23:30:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-10 15:30:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xmlwellformedwriter-writeraw-%e7%9a%84-bug-%e5%be%8c%e7%ba%8c%e7%99%bc%e5%b1%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>原來 System.Xml.XmlWellFormedWriter 有 Bug ..</title>
		<link>http://columns.chicken-house.net/2008/12/07/%e5%8e%9f%e4%be%86-system-xml-xmlwellformedwriter-%e6%9c%89-bug/</link>
		<pubDate>Sun, 07 Dec 2008 16:35:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/12/07/e58e9fe4be86-XmlWellFormedWriter-e4b99fe69c89-Bug-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>果然沒啥人知道的 code, bug 也會比較慢被抓出來 ... 兩個小時前我才貼了找到 XmlNodeWriter 的替代品，用了一下就被我挖到一個 BUG ... @_@</p> <p>先來看看我的 Sample Code:</p> <div><b>XmlTextWriter v.s. XmlWellFormedWriter</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>  <div style="display: none"><pre id="codeData" style="display: none">            // test xml text writer, correct result
            // output: &lt;?xml version="1.0" encoding="big5"?&gt;&lt;root&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;/root&gt;
            {
                Console.WriteLine("Using XmlTextWriter:");

                XmlWriter writer = XmlWriter.Create(Console.Out);
                writer.WriteStartElement("root");
                writer.WriteRaw("&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;");
                writer.WriteEndElement();
                writer.Flush();

                Console.WriteLine();
                Console.WriteLine();
            }


            // test xml node writer, wrong result
            // output: &lt;?xml version="1.0" encoding="big5"?&gt;&lt;root&gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&lt;/root&gt;
            {
                Console.WriteLine("Using XmlWellFormedWriter:");

                XmlDocument xmldoc = new XmlDocument();
                XmlWriter writer = xmldoc.CreateNavigator().AppendChild();
                writer.WriteStartElement("root");
                writer.WriteRaw("&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;");
                writer.WriteEndElement();
                writer.Close();

                xmldoc.Save(Console.Out);
                Console.WriteLine();
                Console.WriteLine();
            }</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">// test xml text writer, correct result</span></pre><pre><span class="lnum">   2:  </span><span class="rem">// output: &lt;?xml version="1.0" encoding="big5"?&gt;&lt;root&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;/root&gt;</span></pre><pre class="alt"><span class="lnum">   3:  </span>{</pre><pre><span class="lnum">   4:  </span>    Console.WriteLine(<span class="str">"Using XmlTextWriter:"</span>);</pre><pre class="alt"><span class="lnum">   5:  </span>    XmlWriter writer = XmlWriter.Create(Console.Out);</pre><pre><span class="lnum">   6:  </span>    writer.WriteStartElement(<span class="str">"root"</span>);</pre><pre class="alt"><span class="lnum">   7:  </span>    writer.WriteRaw(<span class="str">"&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;"</span>);</pre><pre><span class="lnum">   8:  </span>    writer.WriteEndElement();</pre><pre class="alt"><span class="lnum">   9:  </span>    writer.Flush();</pre><pre><span class="lnum">  10:  </span>    Console.WriteLine();</pre><pre class="alt"><span class="lnum">  11:  </span>    Console.WriteLine();</pre><pre><span class="lnum">  12:  </span>}</pre><pre class="alt"><span class="lnum">  13:  </span><span class="rem">// test xml node writer, wrong result</span></pre><pre><span class="lnum">  14:  </span><span class="rem">// output: &lt;?xml version="1.0" encoding="big5"?&gt;&lt;root&gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&amp;lt;a/&amp;gt;&lt;/root&gt;</span></pre><pre class="alt"><span class="lnum">  15:  </span>{</pre><pre><span class="lnum">  16:  </span>    Console.WriteLine(<span class="str">"Using XmlWellFormedWriter:"</span>);</pre><pre class="alt"><span class="lnum">  17:  </span>    XmlDocument xmldoc = <span class="kwrd">new</span> XmlDocument();</pre><pre><span class="lnum">  18:  </span>    XmlWriter writer = xmldoc.CreateNavigator().AppendChild();</pre><pre class="alt"><span class="lnum">  19:  </span>    writer.WriteStartElement(<span class="str">"root"</span>);</pre><pre><span class="lnum">  20:  </span>    writer.WriteRaw(<span class="str">"&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;"</span>);</pre><pre class="alt"><span class="lnum">  21:  </span>    writer.WriteEndElement();</pre><pre><span class="lnum">  22:  </span>    writer.Close();</pre><pre class="alt"><span class="lnum">  23:  </span>    xmldoc.Save(Console.Out);</pre><pre><span class="lnum">  24:  </span>    Console.WriteLine();</pre><pre class="alt"><span class="lnum">  25:  </span>    Console.WriteLine();</pre><pre><span class="lnum">  26:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>而這是程式的輸出畫面:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="201" alt="image" src="/wp-content/be-files/WindowsLiveWriter/XmlWellFormedWriterBug_E451/image_3.png" width="662" border="0"> </p>
<p>&nbsp;</p>
<p>兩段 code 除了拿到的 XmlWriter 來源不同之外，用它寫 XML DATA 的方式是一致的，不過寫出來的 XML 則完全不同。看來兩種 XmlWriter 對於 WriteRaw(...) 的實作不大相同。而照 MSDN 上的<a href="http://msdn.microsoft.com/zh-tw/library/0755ytay.aspx">說明</a>來說，XmlTextWriter的行為是對的，XmlWellFormedWriter 則太雞婆了，沒事多作一次編碼...</p>
<p>&nbsp;</p>
<p>該說運氣好嘛? 哈哈... 繼<a href="http://columns.chicken-house.net/post/e58e9fe4be86-SystemNetMail-e4b99fe69c83e69c89-Bug-.aspx">上次撈到一個 SmtpMail 的 Bug</a> 之後，這次又撈到一個... 要用的人注意一下，不過即使有這個 Bug, 也不會影響它的地位啦，這 Writer 解決了我很大的困擾，動搖國本也要用下去... (咳... 不過是避開一個 API ...)</p>
<p>&nbsp;</p>
<p>最後我改了用法，一方面 API 有 BUG 是一回事，另一方面直接用這 API 也很危險，因為 MSDN 說它不會去做內容的驗證，也就是說透過 WriteRaw( ) 寫進不合法的資料，會讓你整份輸出都毀了... 第二個原因比較重要，因此我換了一個替代作法, 類似 Pipe 一樣，把 XmlReader 讀到的東西都寫到 XmlWriter:</p>
<div><b>XmlCopyPipe 實作</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">       /// &lt;summary&gt;
        /// 從 XmlReader 複製到 XmlWriter
        /// &lt;/summary&gt;
        /// &lt;param name="reader"&gt;&lt;/param&gt;
        /// &lt;param name="writer"&gt;&lt;/param&gt;
        private static void XmlCopyPipe(XmlReader reader, XmlWriter writer)
        {

            if (reader == null)
            {

                throw new ArgumentNullException("reader");

            }

            if (writer == null)
            {

                throw new ArgumentNullException("writer");

            }


            while (reader.Read() == true)
            {
                switch (reader.NodeType)
                {

                    case XmlNodeType.Element:

                        writer.WriteStartElement(reader.Prefix, reader.LocalName, reader.NamespaceURI);

                        writer.WriteAttributes(reader, true);

                        if (reader.IsEmptyElement)
                        {

                            writer.WriteEndElement();

                        }

                        break;

                    case XmlNodeType.Text:

                        writer.WriteString(reader.Value);

                        break;

                    case XmlNodeType.Whitespace:

                    case XmlNodeType.SignificantWhitespace:

                        writer.WriteWhitespace(reader.Value);

                        break;

                    case XmlNodeType.CDATA:

                        writer.WriteCData(reader.Value);

                        break;

                    case XmlNodeType.EntityReference:

                        writer.WriteEntityRef(reader.Name);

                        break;

                    case XmlNodeType.XmlDeclaration:

                    case XmlNodeType.ProcessingInstruction:

                        writer.WriteProcessingInstruction(reader.Name, reader.Value);

                        break;

                    case XmlNodeType.DocumentType:

                        writer.WriteDocType(reader.Name, reader.GetAttribute("PUBLIC"), reader.GetAttribute("SYSTEM"), reader.Value);

                        break;

                    case XmlNodeType.Comment:

                        writer.WriteComment(reader.Value);

                        break;

                    case XmlNodeType.EndElement:

                        writer.WriteFullEndElement();

                        break;

                }
            }
        }</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="rem">/// &lt;summary&gt;</span></pre><pre><span class="lnum">   2:  </span> <span class="rem">/// 從 XmlReader 複製到 XmlWriter</span></pre><pre class="alt"><span class="lnum">   3:  </span> <span class="rem">/// &lt;/summary&gt;</span></pre><pre><span class="lnum">   4:  </span> <span class="rem">/// &lt;param name="reader"&gt;&lt;/param&gt;</span></pre><pre class="alt"><span class="lnum">   5:  </span> <span class="rem">/// &lt;param name="writer"&gt;&lt;/param&gt;</span></pre><pre><span class="lnum">   6:  </span> <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> XmlCopyPipe(XmlReader reader, XmlWriter writer)</pre><pre class="alt"><span class="lnum">   7:  </span> {</pre><pre><span class="lnum">   8:  </span>     <span class="kwrd">if</span> (reader == <span class="kwrd">null</span>)</pre><pre class="alt"><span class="lnum">   9:  </span>     {</pre><pre><span class="lnum">  10:  </span>         <span class="kwrd">throw</span> <span class="kwrd">new</span> ArgumentNullException(<span class="str">"reader"</span>);</pre><pre class="alt"><span class="lnum">  11:  </span>     }</pre><pre><span class="lnum">  12:  </span>     <span class="kwrd">if</span> (writer == <span class="kwrd">null</span>)</pre><pre class="alt"><span class="lnum">  13:  </span>     {</pre><pre><span class="lnum">  14:  </span>         <span class="kwrd">throw</span> <span class="kwrd">new</span> ArgumentNullException(<span class="str">"writer"</span>);</pre><pre class="alt"><span class="lnum">  15:  </span>     }</pre><pre><span class="lnum">  16:  </span>     <span class="kwrd">while</span> (reader.Read() == <span class="kwrd">true</span>)</pre><pre class="alt"><span class="lnum">  17:  </span>     {</pre><pre><span class="lnum">  18:  </span>         <span class="kwrd">switch</span> (reader.NodeType)</pre><pre class="alt"><span class="lnum">  19:  </span>         {</pre><pre><span class="lnum">  20:  </span>             <span class="kwrd">case</span> XmlNodeType.Element:</pre><pre class="alt"><span class="lnum">  21:  </span>                 writer.WriteStartElement(reader.Prefix, reader.LocalName, reader.NamespaceURI);</pre><pre><span class="lnum">  22:  </span>                 writer.WriteAttributes(reader, <span class="kwrd">true</span>);</pre><pre class="alt"><span class="lnum">  23:  </span>                 <span class="kwrd">if</span> (reader.IsEmptyElement)</pre><pre><span class="lnum">  24:  </span>                 {</pre><pre class="alt"><span class="lnum">  25:  </span>                     writer.WriteEndElement();</pre><pre><span class="lnum">  26:  </span>                 }</pre><pre class="alt"><span class="lnum">  27:  </span>                 <span class="kwrd">break</span>;</pre><pre><span class="lnum">  28:  </span>             <span class="kwrd">case</span> XmlNodeType.Text:</pre><pre class="alt"><span class="lnum">  29:  </span>                 writer.WriteString(reader.Value);</pre><pre><span class="lnum">  30:  </span>                 <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  31:  </span>             <span class="kwrd">case</span> XmlNodeType.Whitespace:</pre><pre><span class="lnum">  32:  </span>             <span class="kwrd">case</span> XmlNodeType.SignificantWhitespace:</pre><pre class="alt"><span class="lnum">  33:  </span>                 writer.WriteWhitespace(reader.Value);</pre><pre><span class="lnum">  34:  </span>                 <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  35:  </span>             <span class="kwrd">case</span> XmlNodeType.CDATA:</pre><pre><span class="lnum">  36:  </span>                 writer.WriteCData(reader.Value);</pre><pre class="alt"><span class="lnum">  37:  </span>                 <span class="kwrd">break</span>;</pre><pre><span class="lnum">  38:  </span>             <span class="kwrd">case</span> XmlNodeType.EntityReference:</pre><pre class="alt"><span class="lnum">  39:  </span>                 writer.WriteEntityRef(reader.Name);</pre><pre><span class="lnum">  40:  </span>                 <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  41:  </span>             <span class="kwrd">case</span> XmlNodeType.XmlDeclaration:</pre><pre><span class="lnum">  42:  </span>             <span class="kwrd">case</span> XmlNodeType.ProcessingInstruction:</pre><pre class="alt"><span class="lnum">  43:  </span>                 writer.WriteProcessingInstruction(reader.Name, reader.Value);</pre><pre><span class="lnum">  44:  </span>                 <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  45:  </span>             <span class="kwrd">case</span> XmlNodeType.DocumentType:</pre><pre><span class="lnum">  46:  </span>                 writer.WriteDocType(reader.Name, reader.GetAttribute(<span class="str">"PUBLIC"</span>), reader.GetAttribute(<span class="str">"SYSTEM"</span>), reader.Value);</pre><pre class="alt"><span class="lnum">  47:  </span>                 <span class="kwrd">break</span>;</pre><pre><span class="lnum">  48:  </span>             <span class="kwrd">case</span> XmlNodeType.Comment:</pre><pre class="alt"><span class="lnum">  49:  </span>                 writer.WriteComment(reader.Value);</pre><pre><span class="lnum">  50:  </span>                 <span class="kwrd">break</span>;</pre><pre class="alt"><span class="lnum">  51:  </span>             <span class="kwrd">case</span> XmlNodeType.EndElement:</pre><pre><span class="lnum">  52:  </span>                 writer.WriteFullEndElement();</pre><pre class="alt"><span class="lnum">  53:  </span>                 <span class="kwrd">break</span>;</pre><pre><span class="lnum">  54:  </span>         }</pre><pre class="alt"><span class="lnum">  55:  </span>     }</pre><pre><span class="lnum">  56:  </span> }</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>很好用的作法，就像過去需要 COPY XML 資料，最常見的就是把來源跟目的都用 XmlDocument 載入，直接用 ImportNode( ) 把 XML 片段資料搬到另一個 XmlDocument 再儲存。跟上一篇的原因一樣，看起來很蠢... 就想到這個作法，透過 XmlReader, 拿到的是已經 parsing 過的資料，直接寫到 XmlWriter。而我用的 Writer 正好又可避開重複作 parsing 動作的優點，正好這樣效能跟可用性都兼顧了... 經過 parsing, 至少寫出來的東西會安心一點...</p>
<p>&nbsp;</p>
<p>把最後我的程式搭配這個 XmlPipeCopy 改一改:</p>
<div><b>用 XmlCopyPipe 取代 WriteRaw( )</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">                XmlDocument xmldoc = new XmlDocument();
                XmlWriter writer = xmldoc.CreateNavigator().AppendChild();
                writer.WriteStartElement("root");


                XmlReaderSettings settings = new XmlReaderSettings();
                settings.ConformanceLevel = ConformanceLevel.Fragment;
                XmlReader reader = XmlReader.Create(
                    new StringReader("&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;"),
                    settings);
                XmlCopyPipe(reader, writer);


                writer.WriteEndElement();
                writer.Close();

                xmldoc.Save(Console.Out);
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>XmlDocument xmldoc = <span class="kwrd">new</span> XmlDocument();</pre><pre><span class="lnum">   2:  </span>XmlWriter writer = xmldoc.CreateNavigator().AppendChild();</pre><pre class="alt"><span class="lnum">   3:  </span>writer.WriteStartElement(<span class="str">"root"</span>);</pre><pre><span class="lnum">   4:  </span>XmlReaderSettings settings = <span class="kwrd">new</span> XmlReaderSettings();</pre><pre class="alt"><span class="lnum">   5:  </span>settings.ConformanceLevel = ConformanceLevel.Fragment;</pre><pre><span class="lnum">   6:  </span>XmlReader reader = XmlReader.Create(</pre><pre class="alt"><span class="lnum">   7:  </span>    <span class="kwrd">new</span> StringReader(<span class="str">"&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;&lt;a/&gt;"</span>),</pre><pre><span class="lnum">   8:  </span>    settings);</pre><pre class="alt"><span class="lnum">   9:  </span>XmlCopyPipe(reader, writer);</pre><pre><span class="lnum">  10:  </span>writer.WriteEndElement();</pre><pre class="alt"><span class="lnum">  11:  </span>writer.Close();</pre><pre><span class="lnum">  12:  </span>xmldoc.Save(Console.Out);</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>試了一下，果然如預期的執行了 :D，結果也沒錯，還好 XmlWellFormedWriter 的 Bug 只存在於 WriteRaw... 閃開就沒事了:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="145" alt="image" src="/wp-content/be-files/WindowsLiveWriter/XmlWellFormedWriterBug_E451/image_6.png" width="332" border="0"> </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>其中有個陷阱，就是如何用 XmlReader 讀取 XmlFragment (可以有多個 ROOT 的 XML DATA)。其實這個解法跟程式碼，大部份都是<a href="http://blogs.msdn.com/mfussell/archive/2005/02/12/371546.aspx">這篇</a>看來的，只不過在裡面加了個 LOOP 跟改了名字，各位覺的好用的話記得去謝原作者 <a href="http://blogs.msdn.com/mfussell/">Mark Fussell</a>, 別謝錯人了 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2008-12-07 16:35:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-07 16:35:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8e%9f%e4%be%86-system-xml-xmlwellformedwriter-%e6%9c%89-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>原來 .NET 早就內建 XmlNodeWriter 了...</title>
		<link>http://columns.chicken-house.net/2008/12/07/%e5%8e%9f%e4%be%86-net-%e6%97%a9%e5%b0%b1%e5%85%a7%e5%bb%ba-xmlnodewriter-%e4%ba%86/</link>
		<pubDate>Sun, 07 Dec 2008 14:04:10 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/12/07/e58e9fe4be86-NET-FX-e697a9e5b0b1e69c89-XmlNodeWriter-e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最近事情一堆，上班忙上班的事，下班還在忙著研究 Enterprise Library, Entity Framework, 還有一堆五四三的，文章寫的就少了... 先跟有訂閱我 BLOG 的朋友們說聲道歉...。 不過在寫新專案的過程中，意外的發現這東西，一定要提一下...</p> <p>&nbsp;</p> <p>不知道有多少人用過 XmlNodeWriter ? 我用這東西用很久了，當年 Microsoft 推出 .NET Framework 時，強調有很強的 XML 處理能力，其中 XmlReader / XmlWriter 就是以效能為考量，讓你避開處理大型 XML 資料效能很糟糕的 XmlDocument, 也不用去碰很難寫的 <a href="http://zh.wikipedia.org/w/index.php?title=SAX&amp;variant=zh-tw">SAX</a> 的替代方案...</p> <p>無奈 Microsoft 內建的 XmlWriter 少的可憐，只能寫到檔案或是 TextWriter ... 看看權威的 MSDN 告訴我們<a href="http://msdn.microsoft.com/zh-tw/library/system.xml.xmlwriter.aspx">有那些 XmlWriter 可以用</a>?</p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="153" alt="image" src="/wp-content/be-files/WindowsLiveWriter/.NETFXXmlNodeWriter_BAFF/image_9.png" width="342" border="0"> </p> <p>老實說除了 XmlTextWriter 之外，另外兩個很少用的到。XmlWriter 在輸出 XML 時很好用 (如果你只作輸出的話)，複雜的 XML 輸出用 XmlWriter 比用 XmlDocument 簡單多了，不過最常碰到的情況是我還是想用 XmlDocument 來操作 XML，不過其中一部份的 NODE 想用 XmlWriter 來更新內容...</p> <p>古早有位好心的 MVP 寫了 XmlNodeWriter, 就可以讓我這樣用:</p> <div><b>XmlNodeWriter Sample Code:</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>  <div style="display: none"><pre id="codeData" style="display: none">            XmlDocument xdoc = new XmlDocument();
            xdoc.LoadXml("&lt;root&gt;&lt;node1&gt;&lt;data/&gt;&lt;data/&gt;&lt;data/&gt;&lt;/node1&gt;&lt;node2/&gt;&lt;/root&gt;");

            
            XmlNodeWriter xnw = new XmlNodeWriter(xdoc.DocumentElement, true);

            xnw.WriteStartElement("newNode");
            xnw.WriteAttributeString("newatt", "123");
            xnw.WriteCData("1234567890");
            xnw.WriteEndElement();
            xnw.Close();

            xdoc.Save(Console.Out);</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span>XmlDocument xdoc = <span class="kwrd">new</span> XmlDocument();</pre><pre><span class="lnum">   2:  </span>xdoc.LoadXml(<span class="str">"&lt;root&gt;&lt;node1&gt;&lt;data/&gt;&lt;data/&gt;&lt;data/&gt;&lt;/node1&gt;&lt;node2/&gt;&lt;/root&gt;"</span>);</pre><pre class="alt"><span class="lnum">   3:  </span>XmlNodeWriter xnw = <span class="kwrd">new</span> XmlNodeWriter(xdoc.DocumentElement, <span class="kwrd">true</span>);</pre><pre><span class="lnum">   4:  </span>xnw.WriteStartElement(<span class="str">"newNode"</span>);</pre><pre class="alt"><span class="lnum">   5:  </span>xnw.WriteAttributeString(<span class="str">"newatt"</span>, <span class="str">"123"</span>);</pre><pre><span class="lnum">   6:  </span>xnw.WriteCData(<span class="str">"1234567890"</span>);</pre><pre class="alt"><span class="lnum">   7:  </span>xnw.WriteEndElement();</pre><pre><span class="lnum">   8:  </span>xnw.Close();</pre><pre class="alt"><span class="lnum">   9:  </span>xdoc.Save(Console.Out);</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>第一個參數是 XmlNode, 第二個參數是要不要清掉原來 Node 下的內容。很棒，我可以直接拿 XmlNode 當作 XmlWriter 輸出的對象，透過 Writer 寫出去的東西就直接反映在 XmlNode 身上了，省掉輸出成 Text 然後再 PARSING 回 XML NODE 這種蠢事...</p>
<p>&nbsp;</p>
<p>前面只是緬懷 XmlNodeWriter 到底有多好用，現在找不到有多難過而已... 接下來才是正題...</p>
<p>&nbsp;</p>
<p>不過現在想再去找 XmlNodeWriter 官方網站已經找不到了 @_@，原本這 lib 是 hosting 在 gotdotnet.com 這網站上，不過 Microsoft 已經把它關了，改成 <a href="http://www.codeplex.com/">codeplex.com</a> / <a href="http://code.msdn.microsoft.com/">MSDN Code Gallery</a> 取代，只好求助 GOOGLE 大神，無意間又發現這 Microsoft XmlTeam 的 <a href="http://blogs.msdn.com/xmlteam/">BLOG</a>，<a href="http://blogs.msdn.com/xmlteam/archive/2007/02/02/xml-features-in-the-february-ctp-of-visual-studio-orcas.aspx#1586207">COMMENTS</a> 有這麼一段:</p>
<p>&nbsp;</p>
<blockquote>
<p><strong># re: XML Features in the February CTP of Visual Studio “Orcas” <br></strong><font color="#c0c0c0">Friday, February 02, 2007 8:27 PM by Stuart Ballard </font></p>
<p><br><font color="#008000">Is there going to be an XmlNodeWriter in Orcas? It's a fairly glaring hole, especially if you've ever wanted to apply an XSL transformation to an in-memory XmlDocument and get the result as another in-memory XmlDocument. You can pass the input to the transform via XmlNodeReader, but to get it back out again you just have to feed your XmlWriter to a StringBuilder and then parse it... </font></p>
<p><font color="#008000">Fortunately my use case wasn't performance-critical, but it's still ugly...</font> 
<p>&nbsp; <p><strong># re: XML Features in the February CTP of Visual Studio “Orcas” <br></strong><font color="#c0c0c0">Saturday, February 03, 2007 3:22 AM by Oleg Tkachenko </font></p>
<p><br><font color="#008000">Stuart, XmlNodeWriter in .NET 2.0 is hiding in </font></p>
<p><font color="#008000">xmlNode.createNavigator().AppendChild() method. It can be used to populate XmlNode via XmlWriter API and so you can </font>
<p><font color="#008000">XmlDocument doc = new XmlDocument(); </font>
<p><font color="#008000">using (XmlWriter writer = doc.CreateNavigator().AppendChild()) { </font>
<p><font color="#008000">&nbsp;&nbsp; xslt.Transform(input, (XsltArgumentList)null, writer); </font>
<p><font color="#008000">} </font>
<p><font color="#008000">Mike, am I right that&nbsp; Orcas January CTP includes none of these coolness?</font> 
<p>&nbsp;</p></blockquote>
<p>真是太機車了，這麼好用的東西藏在這種地方? @_@，枉我從 .NET 1.0 beta 就開始用 C# 處理 XML，連 XSLT Extension 都寫過一堆， Trace Code 也追到 XSLT 內抓過一堆問題... 竟然連這東西都沒發現? 可惡...</p>
<p>於是手又癢了，拿來試用看看，發現只要動手寫幾行 Code, 我就能把 XmlNodeWriter 變回來了，像這樣:</p>
<p>&nbsp;</p>
<div><b>我的 XmlNodeWriter 實作</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">    public class XmlNodeWriter : XmlWriter
    {
        private XmlWriter _inner_writer = null;
        public XmlNodeWriter(XmlNode node, bool clean)
        {
            if (clean == true)
            {
                node.RemoveAll();
            }

            this._inner_writer = node.CreateNavigator().AppendChild();
        }


        #region 無聊的 "延長線" 程式碼...

        // 略! 共一百多行，補上廿幾個 abstract method / property, 把它接到 _inner_writer 上

        #endregion
    }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> XmlNodeWriter : XmlWriter</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">private</span> XmlWriter _inner_writer = <span class="kwrd">null</span>;</pre><pre><span class="lnum">   4:  </span>    <span class="kwrd">public</span> XmlNodeWriter(XmlNode node, <span class="kwrd">bool</span> clean)</pre><pre class="alt"><span class="lnum">   5:  </span>    {</pre><pre><span class="lnum">   6:  </span>        <span class="kwrd">if</span> (clean == <span class="kwrd">true</span>)</pre><pre class="alt"><span class="lnum">   7:  </span>        {</pre><pre><span class="lnum">   8:  </span>            node.RemoveAll();</pre><pre class="alt"><span class="lnum">   9:  </span>        }</pre><pre><span class="lnum">  10:  </span>        <span class="kwrd">this</span>._inner_writer = node.CreateNavigator().AppendChild();</pre><pre class="alt"><span class="lnum">  11:  </span>    }</pre><pre><span class="lnum">  12:  </span>    <span class="preproc">#region</span> 無聊的 <span class="str">"延長線"</span> 程式碼...</pre><pre class="alt"><span class="lnum">  13:  </span>    <span class="rem">// 略! 共一百多行，補上廿幾個 abstract method / property, 把它接到 _inner_writer 上</span></pre><pre><span class="lnum">  14:  </span>    <span class="preproc">#endregion</span></pre><pre class="alt"><span class="lnum">  15:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>這樣果真可以 WORK 了 :D&nbsp; 不過要真正變出一個新的 XmlNodeWriter 代價還不低，繼承 XmlWriter 的後果是有廿幾個 abstract method / property 得補上實作... 全都是很無聊的 code, 就是拿 _inner_writer 的直接套上去而已... 像這樣:</p>
<div><b>"延長線" 型的程式碼</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">        public override void Close()
        {
            this._inner_writer.Close();
        }

        public override void Flush()
        {
            this._inner_writer.Flush();
        }

        public override string LookupPrefix(string ns)
        {
            return this._inner_writer.LookupPrefix(ns);
        }</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Close()</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">this</span>._inner_writer.Close();</pre><pre><span class="lnum">   4:  </span>}</pre><pre class="alt"><span class="lnum">   5:  </span><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Flush()</pre><pre><span class="lnum">   6:  </span>{</pre><pre class="alt"><span class="lnum">   7:  </span>    <span class="kwrd">this</span>._inner_writer.Flush();</pre><pre><span class="lnum">   8:  </span>}</pre><pre class="alt"><span class="lnum">   9:  </span><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> LookupPrefix(<span class="kwrd">string</span> ns)</pre><pre><span class="lnum">  10:  </span>{</pre><pre class="alt"><span class="lnum">  11:  </span>    <span class="kwrd">return</span> <span class="kwrd">this</span>._inner_writer.LookupPrefix(ns);</pre><pre><span class="lnum">  12:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>這堆 Code 我就不貼了，總之可以 WORK :D</p>
<p>&nbsp;</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="166" alt="image" src="/wp-content/be-files/WindowsLiveWriter/.NETFXXmlNodeWriter_BAFF/image_10.png" width="515" border="0"> </p>
<p>&nbsp;</p>
<p>不過對 CODE 有點潔癖的我，越看越不是味道，就動起 Factory 的腦筋了。繼續改造一下... 原本 .NET 2.0 內建的 XmlWriter 就已經提供 Factory 的用法了，像這樣:</p>
<blockquote>
<p>XmlWriter my_writer = XmlWriter.Create( ... );</p></blockquote>
<p>不過沒辦法不改 .NET FX 原始碼的情況下 "加掛" 我自己的 Create(...) 實作，原本腦筋是動到 C# 3.0 開始支援的 Extension Method, 不過它只支援 instance method, 不支援 static method ... 只好改成這樣:</p>
<p>&nbsp;</p>
<div><b>XmlWriterFactory 實作</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 
<div style="display: none"><pre id="codeData" style="display: none">    public abstract class XmlWriterFactory : XmlWriter
    {
        public static XmlWriter Create(XmlNode node)
        {
            return Create(node, false, null);
        }

        public static XmlWriter Create(XmlNode node, bool clearnContent)
        {
            return Create(node, clearnContent, null);
        }

        public static XmlWriter Create(XmlNode node, bool cleanContent, XmlWriterSettings settings)
        {
            if (node == null) throw new ArgumentNullException("node");

            if (cleanContent == true)
            {
                node.RemoveAll();
            }

            XmlWriter xw = node.CreateNavigator().AppendChild();

            if (settings != null)
            {
                xw = XmlWriter.Create(xw, settings);
            }

            return xw;
        }
    }
</pre></div>
<div style="border-right: 1px solid; border-top: 1px solid; border-left: 1px solid; border-bottom: 1px solid">
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> XmlWriterFactory : XmlWriter</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> XmlWriter Create(XmlNode node)</pre><pre><span class="lnum">   4:  </span>    {</pre><pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">return</span> Create(node, <span class="kwrd">false</span>, <span class="kwrd">null</span>);</pre><pre><span class="lnum">   6:  </span>    }</pre><pre class="alt"><span class="lnum">   7:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> XmlWriter Create(XmlNode node, <span class="kwrd">bool</span> clearnContent)</pre><pre><span class="lnum">   8:  </span>    {</pre><pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">return</span> Create(node, clearnContent, <span class="kwrd">null</span>);</pre><pre><span class="lnum">  10:  </span>    }</pre><pre class="alt"><span class="lnum">  11:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> XmlWriter Create(XmlNode node, <span class="kwrd">bool</span> cleanContent, XmlWriterSettings settings)</pre><pre><span class="lnum">  12:  </span>    {</pre><pre class="alt"><span class="lnum">  13:  </span>        <span class="kwrd">if</span> (node == <span class="kwrd">null</span>) <span class="kwrd">throw</span> <span class="kwrd">new</span> ArgumentNullException(<span class="str">"node"</span>);</pre><pre><span class="lnum">  14:  </span>        <span class="kwrd">if</span> (cleanContent == <span class="kwrd">true</span>)</pre><pre class="alt"><span class="lnum">  15:  </span>        {</pre><pre><span class="lnum">  16:  </span>            node.RemoveAll();</pre><pre class="alt"><span class="lnum">  17:  </span>        }</pre><pre><span class="lnum">  18:  </span>        XmlWriter xw = node.CreateNavigator().AppendChild();</pre><pre class="alt"><span class="lnum">  19:  </span>        <span class="kwrd">if</span> (settings != <span class="kwrd">null</span>)</pre><pre><span class="lnum">  20:  </span>        {</pre><pre class="alt"><span class="lnum">  21:  </span>            xw = XmlWriter.Create(xw, settings);</pre><pre><span class="lnum">  22:  </span>        }</pre><pre class="alt"><span class="lnum">  23:  </span>        <span class="kwrd">return</span> xw;</pre><pre><span class="lnum">  24:  </span>    }</pre><pre class="alt"><span class="lnum">  25:  </span>}</pre></div></div><!-- end of code area --></div>
<p>&nbsp;</p>
<p>沒事還繼承原本的 XmlWriter 只有一個目的，就是要延用它原來的 10 種 Create method 啊... 貼張圖為証，繼承之後我就有 13 種不同的 Create method 可以用... 不用再兩頭跑 (只是不能加在原本的 XmlWriter 上真是殘念， C# 什麼時後會支援 static method extension ?):</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="181" alt="image" src="/wp-content/be-files/WindowsLiveWriter/.NETFXXmlNodeWriter_BAFF/image_11.png" width="696" border="0"> </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>當然，原程式只要改掉如何拿到 XmlWriter 那行而已，其它都照舊就可以執行了 :D</p>
<p>&nbsp;</p>
<p>有需要的就拿去用吧，CODE 才十幾行，還包成 DLL 實在太麻煩了，需要的直接貼到你自己的 CODE 裡就好! 要散怖都隨便，沒有什麼授權問題，唯一的要求就是讓我知道我的 CODE 你有在用就好 :D，想讚助我的也很簡單，BLOG 上該多點幾下的東西，沒事就點一點... 哈哈</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2008-12-07 14:04:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-07 14:04:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8e%9f%e4%be%86-net-%e6%97%a9%e5%b0%b1%e5%85%a7%e5%bb%ba-xmlnodewriter-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-07 22:59:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-07 22:59:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BLOG 上該多點幾下的東西，沒事就點一點...

是說文章是吧…常點哦~  ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Policy Injection Application Block 小發現...</title>
		<link>http://columns.chicken-house.net/2008/11/18/policy-injection-application-block-%e5%b0%8f%e7%99%bc%e7%8f%be/</link>
		<pubDate>Tue, 18 Nov 2008 01:23:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/11/18/Policy-Injection-Application-Block-e5b08fe799bce78fbe.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
因為工作的關係，最近正在研究 <a href="http://msdn.microsoft.com/en-us/library/dd203099.aspx">Enterprise Library</a> 裡整合的 <a href="http://msdn.microsoft.com/en-us/library/ms998572.aspx">Patterns &amp; Practices</a> 介紹的各式 Application Block... 撇開其它的發現，有個東西一定要提一下，就是 <a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">Policy Injection</a> ... 
</p>
<p>
介紹文章我就不多說了，一樣網路一大堆，有興趣的可以看 <a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">MSDN 官方的說明</a>。比較特別的是它的用法。當年剛開始研究 .NET 內建的 Role Based Security Control，才在讚嘆它的 code 寫起來真漂亮，只要加個 attribute, 就可以在 runtime 自動檢查呼叫時的身份是否滿足 attribute 的宣告，如下: 
</p>
<div>
<strong>CAS範例程式: </strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
[PrincipalPermissionAttribute(SecurityAction.Demand, Role=&quot;Supervisor&quot;)]public void Foo() {    // ... }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>[PrincipalPermissionAttribute(SecurityAction.Demand, Role=<span class="str">&quot;Supervisor&quot;</span>)]
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> Foo() {
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="rem">// ... </span>
</pre>
<pre>
<span class="lnum">   4:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
不管你的 code 在那裡，只要呼叫這個 Foo method, 當時的身份 ( principal ) 如果不屬於 &quot;Supervisor&quot; 這個角色的話，就會引發 Security Exception... 當初看到這真是太棒了，我可以用宣告的方式來作安全控制，不需要在主程式裡加一堆囉哩叭唆的 code 來查權限... 
</p>
<p>
不過當我開始研究如何 &quot;自定&quot; 這個行為，除了加上自己的安全機制之外，想更進一步的加上 Log 或是其它的檢查... 我才發現跟本辦不到。因為... 這行為是直接在 CLR 裡支援的啊，我可以加上一堆自定的 Attribute 掛上去，但是呼叫時完全不會觸發我的 code ... 
</p>
<p>
之後研究過 <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a>，發現 AOP 正是解決我這類問題的 Solution, 無奈那些 solution 都不大實際，就沒深入研究了。之後找到篇 MSDN 的文章，裡面提到 .NET Remoting 時，遠方會產生 Proxy, 同時 Client / Server 之間的溝通會介著中間傳輸層傳遞 IMessage 介面封裝的 message, 到另一端才會由 Proxy 解讀，然後用 Reflection 還原呼叫的動作... 利用 Proxy 在還原呼叫動作時，你就有機會插入你要的邏輯 (IMessageSink)，做到跟上面例子類似的功能。 
</p>
<p>
&nbsp;
</p>
<p>
還是很不實際啊啊啊啊，我沒事也不會去用 .NET Remoting 啊，用不到的話這招對我也沒啥用 (大錯特錯!! 當年的我真是太過自信了 :~~~~) ... 這事就一直擱著了，直到... 
</p>
<p>
最近在研究 <a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">Policy Injection Application Block</a> 時，讓我看到了似曾相識的 code: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>Policy Injection Sample Code #1</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
[AuthorizationCallHandler(&quot;operation-name&quot;)]public void Deposit(decimal depositAmount){  balance += depositAmount;}
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>[AuthorizationCallHandler(<span class="str">&quot;operation-name&quot;</span>)]
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">public</span> <span class="kwrd">void</span> Deposit(<span class="kwrd">decimal</span> depositAmount)
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>  balance += depositAmount;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
這段 CODE 跟前面 CAS 的範例作用差不多，一樣是在 method 被呼叫前作一次權限的檢查。不同的是 AuthorizationCallHandlerAttribute 是自定的 (由 Security Application Block 提供的)，它的作用比 ROLE 更進一階，是直接檢查授權的。之間的差別就如同 windows 大家都知道把 USER 加入 Administrators 角色的話，&quot;預設&quot; 就可以做大部份的事，但是你要在某個有 ACL 的物件 (如 NTFS 的檔案) 拒絕 Administrators 的存取也是可行的。前面 CAS 的例子就只是判定你是不是某角色的人，而這例子則是判定某個授權的定義允不允許你執行。 
</p>
<p>
扯遠了，重點不在安全，重點是自定的 Code / Attribute 也可以這樣用啊! 由於我多年心裡的疑惑，挖出這段作法比研究 Policy Injection 更積極一點 (老闆對不起...) 哈哈，沒想到答案就在前文... 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<strong>它ㄨ的!! 原來只是在 Local 使用 .NET Remoting ...</strong> 
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
說穿了不值錢，你用的物件標上 Attribute 後，要透過它的建立方式 ( Create or Wrap ) 取得加料過的物件，再呼叫它就會有你預期的效果了。這加料過的物件，就是 System.Runtime.Remoting.Proxies.RealProxy 下的某類別啊啊啊啊... 意思是我拿這加料過的物件，就會透過 .NET Remoting 的方式去呼叫到我真正的物件，而 Policy Injection Application Block 正好就替我把我要作的動作給補上去...。 
</p>
<p>
雖然心裡有被擺了一道的感覺，不過它的 code 包裝的真漂亮啊... 除了 Create 的方式由原本的 new .ctor( ) 改成它的 Create( ... ) 之外，其它就通通一樣了。更猛的是它還提供了幾個真的很實用的 CallHandler (就是呼叫時會加料的動作啦): 
</p>
<ul>
	<li>Authorization Handler </li>
	<li>Caching Handler </li>
	<li>Exception Handling Handler </li>
	<li>Logging Handler </li>
	<li>Performance Counter Handler </li>
	<li>Validation Handler </li>
	<li>Custom Pipeline Handlers</li>
</ul>
<p>
大部份的 Handlers 都望文生義，像是 Logging 就是呼叫時替你加一段 LOG，而 Performance Counter 則是呼叫時就替你戳一下 windows 內建的 performance counter, 讓你可以透過 performance monitor 看相關統計 (如你的 method 被呼叫過幾次... )，更神奇的是 Caching, 如果你的 method 跑的很慢，加上去之後甚至是 cache 裡已經有了上次的結果，這次呼叫就直接 return 了... (你還記得你寫過多少次資料不在 cache 內就 insert 進去的 code 嗎?) @_@ 
</p>
<p>
&nbsp;
</p>
<p>
如果你看這篇期望看到啥 <a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">Enterprise Library / Policy Injection Application Block</a> 的深入介紹的話，很抱歉... 我還沒那本事，哈哈... 再過陣子研究出心得，可能會寫幾篇吧...。 這類文章如果你不介意看英文的，官方的說明還有 QuickStart 的範例就夠你看了，可以參考看看，我就不獻醜了...。 這篇純粹是為了這 AB 解除了我多年來的遺憾，特地留下篇記念用的... :D 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2008-11-18 01:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-18 01:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[policy-injection-application-block-%e5%b0%8f%e7%99%bc%e7%8f%be]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-19 12:31:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-19 12:31:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看完了文章，我覺得你看到 EL 的興奮程度，跟我寫過 jQuery 後不相上下

你說了三個字(它X的)，我說了五個字(它X的好用)

之前研究過 AOP 不過看到 Remoting 就睡著了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-19 12:48:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-19 12:48:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看完 EL 倒還好，這些東西畢竟不是拿來寫一般網站的，老實說用到的機會也不多...。真正值得推的有 Unity / Policy Injection ...

不過會貼這篇，還是它做 Injection 的技巧，就是因為之前想自己弄弄不出來... 沒想到原來卡在這種很簡單的地方，竟然沒想到... :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[tjb]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[happycoder@foxmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-16 09:41:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-16 09:41:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[写的真好。也正在研究中，学习了....]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[tjb]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[happycoder@foxmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-16 09:43:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-16 09:43:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BlogEngine.NET  不知是否有了多用户版]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-18 02:45:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-18 02:45:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.codeplex.com/blogengine

BlogEngine.NET 1.5 出來了，支援多個作者，不知是不是你要的。
如果你要的是多個獨立的 BLOG，另外看到的是這個:

http://multiblogengine.codeplex.com/

不過我沒用過，僅提供參考]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>重生的 IBM ThinkPad X40 ...</title>
		<link>http://columns.chicken-house.net/2008/11/06/%e9%87%8d%e7%94%9f%e7%9a%84-ibm-thinkpad-x40/</link>
		<pubDate>Thu, 06 Nov 2008 01:38:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/11/06/ThinkPadX40-SSD.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
我自己用了快六年的 ThinkPad x31 掛掉了，又沒潑到水，送去 LENOVO 修理，就回我 &quot;液體入侵&quot; ... 換主機板要 NTD 26500 ... 錢太多才會修，因此就跟我姊ㄠ了她已經沒在用的 ThinkPad x40 來用用...
</p>
<p>
X40 什麼都好，就是敗在它那顆 Hitachi 1.8&quot; HDD 效能實在太爛... 拿到 X40 後就馬上重灌 XP，剛灌好後就用 HDTune 測一下這顆硬碟的鳥效能..
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/IBMThinkPadX40_1317/HDTune_Benchmark_HITACHI_DK13FA-40B_3.png" border="0" alt="HDTune_Benchmark_HITACHI_DK13FA-40B" width="570" height="424" /> 
</p>
<p>
&nbsp;
</p>
<p>
後來也很巧，經過一夜灌了堆必要的軟體跟工具之後，突然喀啦一聲，硬碟就再也不能用了 :~&nbsp; 上網找找有無硬碟可以買? 還真慘... 都是拆機或是二手，個人保固七天或是一個月的那種。Hitachi也停產了，除了容量有 60GB 的之外也沒別的選擇了。效能很鳥的硬碟，相對的 $$ 也不算便宜，害我考慮了半天...
</p>
<p>
後來決定用 CF -&gt; IDE 的轉卡，加上忍痛買了張 SanDisk Extreme IV 8GB CF 卡，也就是俗稱 &quot;偽SSD&quot; 的解決方案，裝好後好像完全換了台電腦似的，剛裝好的 XP PRO (原版光碟安裝的，沒有刪掉一堆內建的軟體跟服務)，開機的 WINDOWS 光棒，跑不到一輪就進 WINDOWS 了 @_@，真是傻眼，效能的增進遠超過我的預期...
</p>
<p>
雖然容量小了點，不過效能跟原本的 1.8&quot; HDD 實在差太多了，不足的容量就再補張 16GB SD 卡撐著用。只要不裝啥大型檔案，一般的 OFFICE 文件還不成問題，用起來也還不錯! 原本慢到想扔掉的 X40 就這樣又活了過來 :D
</p>
<p>
&nbsp;
</p>
<p>
最後補上 SanDisk Extreme IV 8GB 的效能測試圖:
</p>
<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/IBMThinkPadX40_1317/HDTune_Benchmark_SanDisk%20SDCFX4-8192_3.png" border="0" alt="HDTune_Benchmark_SanDisk SDCFX4-8192" width="570" height="424" />
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2008-11-06 01:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-06 01:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%87%8d%e7%94%9f%e7%9a%84-ibm-thinkpad-x40]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-06 08:59:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-06 08:59:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SD卡如果都選SLC的,
應該可以撐很久,
那個0.7ms真是吸引人啊!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-06 12:47:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-06 12:47:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我只有灌 XP 的 8GB CF 卡是買 SLC 的...
放資料的 16GB SD 卡只能省一點買 MLC，備份勤勞一點就好...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[habachu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[easonliu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-07 13:45:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-07 13:45:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用什麼8G 當 system disk...
GTO 一定要用 32G的啊...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[YENTK]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[YENTK@YENTK.COM]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-19 17:35:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-19 17:35:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好

我也有一部很慢的 X40，請問這些要去那買：
CF -&gt; IDE 的轉卡
 SanDisk Extreme IV 8GB CF 卡

買了之後是要自已裝還是要找人裝？
謝謝]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-20 16:43:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-20 16:43:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[CF 一般的店都買的到，差別在於速度...
通常買 SLC + 高速的會比較好，一般便宜的 CF 會慢到哭出來..
SanDisk Extreme IV 是 SSD 的，價格也貴了些，你得先看看 8GB 夠不夠你用

轉卡的話要注意尺寸。X40 用的是 1.8&quot; HDD，一般轉卡都是給 2.5&quot; HDD 用的，一不小心就超過裝不進去了

網拍搜尋一下 X40 CF IDE 找看看應該會有]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[RUN! PC] 2008 十一月號</title>
		<link>http://columns.chicken-house.net/2008/11/04/run-pc-2008-%e5%8d%81%e4%b8%80%e6%9c%88%e8%99%9f/</link>
		<pubDate>Tue, 04 Nov 2008 02:11:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/11/04/RUNPC-2008-11.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/RUNPC2008_1D6E/IMG_0208_1.jpg" border="0" alt="IMG_0208" width="620" height="389" /> 
</p>
<p>
YA! 第四篇!! :D 還是一樣要先感謝一下編輯賞光，讓我有點空間寫些不一樣的東西。
</p>
<p>
&nbsp;
</p>
<p>
基本的執行緒相關的程式設計跟函式庫，講的差不多了，其實這些也沒什麼好寫的。接下來打算寫一些應用的模式，來談談有那些方法，那些設計方式才能夠有效的發揮多執行緒的優點。看了 .NET Framework 4.0 / Visual Studio 2010 的 ROADMAP，有一大部份的重點擺在平行處理，INTEL年底也要發表四核 + HT 的 CPU ( WINDOWS 會認為有八個處理器 )，軟硬體都備齊了，剩下的就是程式設計師的巧思了。
</p>
<p>
&nbsp;
</p>
<p>
其實之前貼過幾篇類似主題的文章，只是這次把它統合起來介紹一下。生產線模式，如果簡化後就是 [<a href="/post/e7949fe794a2e88085-vs-e6b688e8b2bbe88085-BlockQueue-e5afa6e4bd9c.aspx">生產者消費者</a>] 的模式，而把它徹底一點的應用，則是上回提到 [<a href="/post/MSDN-Magazine-e996b1e8ae80e5bf83e5be97-Stream-Pipeline.aspx">Stream Pipeline</a>] .. 
</p>
<p>
這篇也是第一次在雜誌上嘗試說明比較偏設計概念的文章，實作比較少，很怕不合讀者的口味... 應該不會貼了就沒續篇了吧? :P 有買雜誌的記得讀者回函填一下，哈哈，也算是點鼓勵。這次範例程式也是 Console application (我不會寫太炫的程式 :P )，需要的可以點 [<a href="/admin/Pages/wp-content/be-files/RUNPC-2008-11.zip">這裡</a>] 下載!
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2008-11-04 02:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-04 02:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2008-%e5%8d%81%e4%b8%80%e6%9c%88%e8%99%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>該如何學好 &quot;寫程式&quot; #5. 善用 TRACE / ASSERT</title>
		<link>http://columns.chicken-house.net/2008/11/03/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-5-%e5%96%84%e7%94%a8-trace-assert/</link>
		<pubDate>Mon, 03 Nov 2008 02:34:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/11/03/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-5-e59684e794a8-debug-mode.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[哈哈，這篇拖的夠久了 :P

上篇扯太多，寫到一半寫不完就留到這篇了。寫出可靠的程式，這是軟體工程師的基本要求。上篇提到了 TRACE / ASSERT 的應用，來複習一下:

<span style="color: #0080c0;">TRACE: 原本是 C 的除錯用巨集，目的是用適合的方式輸出除錯用的訊息，用來跟一般的訊息輸出有所區別。因為用的是不同的方式輸出，可以很容易的統一關掉。隨著工具的進步，輸出的方式也越來越適合除錯，比如輸出到開發工具的除錯視窗，或是輸出成記錄檔等等。</span>

<span style="color: #0080c0;">ASSERT: 也是除錯用巨集，它接受一個 bool 參數，輸入值為 TRUE 時一切正常，就像沒呼叫一樣，輸入 FALSE 則會中斷程式，或是輸出顯目的警告訊息。目的在於確保程式的每個步驟情況都如預料般的順利。</span>

這兩個東西從 C 的巨集，衍生出各種語言及環境都有各自的版本。它的目的很簡單，就是 [Writing Solid Code] 裡提到的:

<em><span style="color: #008000;">用同一套程式碼，同時維護兩個版本 (RELEASE / DEBUG)，讓錯誤自動跑出來</span></em>

&nbsp;

雖然這本書提到了不少技巧，正確的應用 TRACE / ASSERT 是最基本的。但是那些細節並不是主要的重點。重點是你在寫 CODE 時有時時刻刻記得要盡量減少 BUG 嗎? 你有正確的擬出對策嗎? 來看看上回最後一段範例程式:

&nbsp;
<div>

<strong>加上 ASSERT 的算分程式碼</strong><span class="copycode">[copy code]</span>
<div>
<pre class="lang:c# decode:true ">public static int ComputeQuestionScore(XmlElement quiz_question, XmlElement paper_question)
{
    int totalScore = 0;
    int itemCount = quiz_question.SelectNodes("item").Count;
    Trace.Assert(quiz_question != null);
    Trace.Assert(paper_question != null);
    Trace.Assert(paper_question.SelectNodes("item").Count == quiz_question.SelectNodes("item").Count);
    //
    //  如果都沒作答, 此題放棄
    //
    if (paper_question.SelectNodes("item[@checked='true']").Count == 0)
    {
        return 0;
    }
    //
    //  題目的配分
    //
    int quiz_score = int.Parse(quiz_question.GetAttribute("score"));
    //
    //  答對一個選項的分數
    //
    int item_score = quiz_score / itemCount;
    for (int itemPos = 0; itemPos &lt; itemCount; itemPos++)
    {
        XmlElement quiz_item = quiz_question.SelectNodes("item")[itemPos] as XmlElement;
        XmlElement paper_item = paper_question.SelectNodes("item")[itemPos] as XmlElement;
        //
        //  算成積
        //
        if (quiz_item.GetAttribute("correct") == paper_item.GetAttribute("checked"))
        {
            totalScore += item_score;
        }
        else
        {
            totalScore -= item_score;
        }
    }
    Trace.Assert(totalScore &gt;= (0 - quiz_score));
    Trace.Assert(totalScore &lt;= quiz_score);
    return totalScore;
}</pre>
</div>
<!-- end of code area -->

</div>
&nbsp;

各位仔細看一下加上 ASSERT 的地方。大家寫程式，通常都是腦袋裡想著 "<span style="color: #008000;"><strong>我要處理什麼問題</strong></span>" ，很少人會去想錯誤處理的部份。沒錯，這部份的確是吃力不討好，以此例來說，光是傳進來的參數就有可能狀況百出了。正常的流程都寫不完了，誰還有力氣去把這些錯誤都擋下來?

不過最容易出錯的地方也在這裡。我常在跟其它工程師說，正確的資料 (參數) 傳進來，本來就應該有正確的答案傳出去。難的是錯誤的資料傳進來，你還得回應 "正確" 的錯誤訊息回去，這才真的是個挑戰。這時 ASSERT 的效果就出來了。你可以把 ASSERT 想像成 "宣告" 的子句。以 line 5 ~ 7 行為例:
<div>

<strong>確保傳入參數是正確的</strong><span class="copycode">[copy code]</span>
<pre>Trace.Assert(quiz_question != null);
Trace.Assert(paper_question != null);
Trace.Assert(paper_question.SelectNodes("item").Count == quiz_question.SelectNodes("item").Count);
</pre>
<!-- end of code area -->

</div>
&nbsp;

這三行看在我眼裡，意思就是:

"<span style="color: #008000;"><em>這兩個參數不能是 NULL，而且兩個 XML ELEMENT 都要有一樣數量的子節點 (Element)，否則就不惜代價警告我</em></span>"

同樣的，在程式的中間，還有傳回值之前，也都可以用同樣的方式來替你的程式 "把關"。再來看看算完成績後，要把值傳回去之前的 CODE:
<div>

<strong>確保傳回值的範圍正確的程式碼</strong><span class="copycode">[copy code]</span>
<pre>
Trace.Assert(totalScore >= (0 - quiz_score));
Trace.Assert(totalScore <= quiz_score);
return totalScore;
</pre>
<!-- end of code area -->

</div>
&nbsp;

這兩行的意思就是:

"<em><span style="color: #008000;">不管成績怎麼算，每張答案卷最後的總分一定介於 0 ~ 滿分之間。一樣，有例外的話就不惜代價警告我</span></em>"

&nbsp;

聽起來蠻狠的，不惜代價...，不過使用 ASSERT 的話就真的是這樣。通常碰到 ASSERT 後，程式不是進 DEBUGGER 就是直接關掉了。不過請大家注意一下，並不是到處加上 ASSERT 你的程式就沒問題了。要搞清楚加上它的目的是什麼。它要抓的是你程式的 BUG，不是執行期的錯誤 (比如 USER 輸入錯誤的值，或是必填的資料沒填等等)。執行期的錯誤，你還是得乖乖的寫程式，不能用 ASSERT 替代。

舉例來說，如果最後算出來的分數是負的，則會觸動 return 前的 ASSERT。有些有點經驗又有點兩光的 PROGRAMMER 可能會自己顯示一些錯誤訊息。但是這跟本不干 USER 的事啊! 會出現這種情況，錯的一定是 "程式" 本身，也就是你看到 ASSERT 警告後就該來改程式抓 BUG 了。加上 ASSERT 的目的就是在你的程式到處布下眼線，任何一個地方偵測到不對勁，馬上通知你來處理。

當你有心把程式寫好時，你才會覺的這樣作是必要的，而不是累贅。你眼線布的越多，BUG就越難藏在你的程式裡。相對的，如果傳進來的參數就不對了，那應該怎麼辦?

這時就要小心分清楚你要抓的是 BUG 還是做錯誤處理了。如果參數是 USER 直接輸入的，那收到 NULL 或是錯誤的值本來就有可能 (吃芝蔴那有不掉燒餅的...)，你需要的是老老實實寫好錯誤處理的流程。但是如果你的 API 早已嚴格定義不接受 NULL，卻還是有白目的工程師硬把 NULL 傳給你的 API，那這時就是 BUG 了，應該用 ASSERT 抓出來，然後找到冤大頭叫他改程式。

不過這樣的 CODE 可不能交到 USER 手上。想像一下如果你正在用 WORD 打文件，結果碰到一個小 BUG，ASSERT 就跳出警告訊息要中止程式，你連存檔都來不及，大概會抓狂吧。這時就是一份程式碼兩種版本的作法發威的地方了。交給 USER 的程式，就應該是切到 RELEASE MODE (或是關掉 ASSERT / TRACE) 編譯的版本。這時所有的 TRACE / ASSERT 好像完全消失一樣，程式就如同一般情況運作。

當 USER 回報一些很難抓到的 BUG 時，這時就可以打開 ASSERT 或是改用 DEBUG BUILD 的版本，再讓 USER 去重現 BUG，這時如果你都有老老實實加上 ASSERT 的話，BINGO，問題在那就一目了然。看看是那一道 ASSERT 指令被觸發，就知道是什麼問題了。抓 BUG 最麻煩的就是找出錯在那裡，而善用 ASSERT 就可以讓 BUG 自己跳出來告訴你出了什麼問題，只要你養成好習慣。

&nbsp;

再舉一個應用例。看到 Steve Maguire 先生舉這個例子，真是想拍手叫好。他舉了他們在開發 EXCEL 時的例子。EXCEL就是要替試算表作一堆運算，當年還在 DOS 時代，CPU怎樣都不夠快，RAM怎樣都不夠多，程式設計師無不絞盡腦汁，要榨出所有的運算能力，最佳化做到無所不用其極的地步。不過這種東西是錯不得的啊，少算了一塊錢還得了? 碰到這種問題你該怎麼辦?

通常，我們都會先有個安全的版本，算的不快，但是因為邏輯簡單，比較不容易出錯。這種版本寫出來後才開始想盡辦法，去改善程式讓速度加快。馬先生 (ㄜ... 是馬奎爾先生... ) 就充份應用了 ASSERT，隨時都要把 BUG 逼出來的精神，真的把 "驗算" 的方法應用上來。它的作法很簡單，同一張試算表，用兩份不同的程式碼各計算一次，最後再來比對一下結果 (驗算)。只要兩者得到的答案不一樣，那就是出問題了! 當然也有可能是安全的版本寫錯了，不過你至少多了個機會抓到問題，因為不一樣的話，一定 "至少" 有一邊是錯的!

&nbsp;

沒有這樣的前題的話，各位看到可能都會在心裡想:

"有沒有搞錯，程式都寫不完了，還要寫兩種演算法來驗算?? 老闆又不會多給我一點薪水..."

沒錯，這的確是成本較高的方法，每套系統應該都有關鑑的地方，只要有絕對不能失誤的地方，就值得用這種作法。速度的問題怎麼辦? 很簡單。你只要在 DEBUG MODE 才啟用這 "驗算" 的機制，測試人員輸入各種數值做黑箱測試，如果每次測試的過程中發現驗算錯誤，則 "黑箱" 測試就能幫助你抓到只有 "白箱" 測試才有可能抓到的 BUG !

&nbsp;

我寫的這個範例程式 (算成績) 其實也準備了兩個版本。上一篇貼的是基本的作法，結果比較可靠。而為了效率我也寫了另一份程式碼，用的是位元運算，希望藉著位元運算，一次就把多選題的答案給算出來。開發的過程中就用了 ASSERT + 驗算的技巧，它不會加快我寫程式的速度，但是它可以加速我找到 BUG 跟解決 BUG 的時間!

&nbsp;

有沒有覺的這跟單元測試其實很像? 沒錯。單元測試就是一樣的觀念演變出來的作法，所以你用的單元測試 FRAMEWORK 也延用一樣的 ASSERT 使用慣例。你會發現其實之間的觀念都是相通的，只不過單元測試更進一步的把它系統化了，由原本四處藏在程式碼中的 ASSERT，抽出來成為一個一個獨立的 TEST CASE，由原本被動的執行時期檢查，演變為主動執行所有測試的 UNIT TEST。我覺的 Kent 在 XP (extreme programming) 裡舉了一個例子來說明單元測試，比喻的很貼切，我覺的也一樣能拿來比喻 ASSERT:

&nbsp;

"<strong><em><span style="color: #008000;">車子裝了煞車，是要讓車子能開的更快!</span></em></strong>"

&nbsp;

聽起來好像很蠢? 煞車明明是讓車子停下來的... 其實不然。想像一下如果你的車子沒煞車，你敢開多快? 了不起就是撞到不會怎麼樣的速度，或是油門放開就停下來的程度而以。有了煞車讓你有信心，碰到危險時你隨時能把車子停下來，你才敢把車子開上高速公路...

&nbsp;

很有道理的比喻，ASSERT 跟 UNIT TEST 大部份人都覺的是 "煞車"，是拖慢你速度用的，但是也因為有這些 "煞車"，你才能放心的衝更快。當你有充份運用 ASSERT 的話，你就能很放心的寫程式，沒有後顧之憂。其實類似的關念，Steve Maguire 的書還有提到很多，只不過它的範例都是用 C 寫的 (還不是 C++ ...)，看起來會吃力一點。範例程式可能對現今大部份的人都用不到，但是裡面的觀念跟作法還是很有參考價值的，手上還有這本書的人不妨拿起來翻一翻。

&nbsp;

講到這裡，花了兩篇才講完第一個部份，主要的重點就是用 TRACE / ASSERT 來說明，要讓你的程式夠穩定，第一個要改進的就是你寫程式的想法，觀念及態度。各位不妨以這兩篇的例子，自己回想看看，你做到那幾項:
<ol>
	<li>你寫程式有考慮到這些問題嗎?</li>
	<li>如果你寫程式有用這些方法，有多少你曾解過的棘手 BUG 會變的迎刃而解的?</li>
	<li>加上 ASSERT 之後，你是否對你程式更有信心了?</li>
	<li>你是否更認同單元測試的必要了?</li>
</ol>
&nbsp;

想法跟觀念有了改變，才有可能開發出優良的軟體。你開始認同這樣的想法了嗎? 恭喜你，你已經跨出第一步了。不過光是 BUG FREE 還不足以成為優秀的軟體工程師，這只是必要條件之一而以。除了把程式寫的 "可靠" 之外，接下來的挑戰是如何把程式寫的 "漂亮" ? 下回要開始來探討如何構思你程式碼的結構。什麼樣的結構，什麼樣的方式去分析你的問題，才寫的出架構漂亮的程式? 別急，請期待續篇 :D

&nbsp;

&nbsp;

--

註: 範例程式很多 CODE 被我跳過去了，有興趣的人可以抓回去研究看看... 請點 [<a href="/wp-content/be-files/GoodProgram4.zip">這裡</a>] 下載。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 02:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 02:34:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-5-%e5%96%84%e7%94%a8-trace-assert]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="good_programmer"><![CDATA[系列文章: 如何學好寫程式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-04 08:05:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-04 08:05:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[寫得真好!!

小熊子自從用了 log4net 後，就很少用 trace / assert

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-04 10:33:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-04 10:33:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[TRACE 用內建的或是 Log4Net 都可以啦，兩者也可以通.. 重要的是有用這類的工具。
另外比較重要的還是在 ASSERT，我覺的它比 TRACE 還重要.. :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[lee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[boss2370@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-23 16:53:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-23 16:53:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[版大無法下載檔案說
要登入?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-23 23:24:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-23 23:24:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Lee,

沒想到 link 弄錯了我都沒發現 @@
已經改好了，可以下載了，謝謝告知 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[逸楓]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[andyif2@yahoo.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://itgroup.blueshop.com.tw/andyif/note</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-23 10:40:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-23 10:40:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，讀了您這一系列的文章後，實在是受益良多。
我在我的部落格(其實只是筆記本...沒什麼人看的)，張貼了您這幾篇的連結，以便記錄學好程式的相關知識。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-10 01:43:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-10 01:43:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[歡迎引用 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[user]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[millionknives@livemail.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-17 01:24:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-17 01:24:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感謝分享~
您的文章令敝人獲益良多

剛好看到提一下, 好像不是&quot;吃芝蔴那有不掉燒餅的...&quot;
XDDD]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[shu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shu0925@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-22 15:03:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-22 15:03:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我可以問作業嗎？
有個作業寫不出來
http://www.cs.unm.edu/~darnold/classes/cs481/labs/lab3/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-23 01:59:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-23 01:59:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Operating System 跟 Data Structure 都是 CS 的基本功，好好研究以後會很有幫助的~
加油~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>也是 &quot;生產者 &amp; 消費者&quot; ...</title>
		<link>http://columns.chicken-house.net/2008/11/01/%e4%b9%9f%e6%98%af-%e7%94%9f%e7%94%a2%e8%80%85-%e6%b6%88%e8%b2%bb%e8%80%85/</link>
		<pubDate>Sat, 01 Nov 2008 01:58:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/11/01/e4b99fe698af-e7949fe794a2e88085-e6b688e8b2bbe88085-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<img style="border: 0px" src="/wp-content/be-files/WindowsLiveWriter/61fb24f7b4fc_1BB6/IMG_3467%20(Canon%20PowerShot%20G9)_1.jpg" border="0" alt="IMG_3467 (Canon PowerShot G9)" width="660" height="500" /> 
</p>
<p>
哈哈，貼一下家裡魚缸的照片... 家裡養的孔雀魚一直生就算了，無意間丟進來的一隻蝸牛，沒兩個月竟然也生了一堆，現在算算大概有四十隻吧 @_@，照片裡紅紅的都是...
</p>
<p>
不過有了蝸牛 (消費者)，把水裡的魚大便跟水藻都吃的乾乾淨淨的也不錯啦，以前每週要換一次水，現在偷懶撐久一點都無所謂了 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2008-11-01 01:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-01 01:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b9%9f%e6%98%af-%e7%94%9f%e7%94%a2%e8%80%85-%e6%b6%88%e8%b2%bb%e8%80%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>關不掉的 Vista UAC !?</title>
		<link>http://columns.chicken-house.net/2008/10/31/%e9%97%9c%e4%b8%8d%e6%8e%89%e7%9a%84-vista-uac/</link>
		<pubDate>Fri, 31 Oct 2008 02:20:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/31/e9979ce4b88de68e89e79a84-Vista-UAC-!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>不知道是更新了啥 PATCH，還是那次沒正常關機，我公司 VISTA 的 UAC 突然莫名奇妙的被打開了。怪的是控制台裡看到的還是關掉的，不管怎麼改狀態也不會改變 (一直都是關的) ...。</p> <p>直覺告訴我一定是控制台的 AP 那邊出問題，設定值寫不進去造成的...，於是我就開使找其它可以修改 UAC 設定的方法...，最後找到這個，還真的成功了 :D，看來沒機會動用 ProcessMonitor 追追看問題了..</p> <p>找到的方法是: msconfig.exe</p> <p>在開始 --&gt; 執行裡輸入 msconfig.exe 後，可以看到這一項:</p> <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="409" alt="image" src="/wp-content/be-files/WindowsLiveWriter/VistaUAC_1E70/image_3.png" width="605" border="0"> </p> <p>&nbsp;</p> <p>看來是直接修改 registry, 果然有效，直接執行後 REBOOT 就一切正常了 -_-, 如果有人也碰過一樣的問題可以試看看!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2008-10-31 02:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-31 02:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%97%9c%e4%b8%8d%e6%8e%89%e7%9a%84-vista-uac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
	</item>
	<item>
		<title>該如何學好 &quot;寫程式&quot; #4. 你的程式夠 &quot;可靠&quot; 嗎?</title>
		<link>http://columns.chicken-house.net/2008/10/20/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-4-%e4%bd%a0%e7%9a%84%e7%a8%8b%e5%bc%8f%e5%a4%a0-%e5%8f%af%e9%9d%a0-%e5%97%8e/</link>
		<pubDate>Mon, 20 Oct 2008 01:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/20/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-4-e4bda0e79a84e7a88be5bc8fe5a4a0-e58fafe99da0-e5978e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[撐了很久，續篇來了。這次要進階一點，直接從 software engineer (軟體工程師) 的階段開始。

&nbsp;

所謂的軟體工程師，我對它的定義是在這個領域已經算是資深人員了。programmer 該作的是把程式寫好，要挑正確的方式及技術寫好你的程式 (如之前幾篇介紹的演算法及資料結構等等)。而軟體工程師呢? 之前介紹的那些已經不夠了，你該好好的安排你的 code 及工具，要能把你的 solution (如會用到的演算法及資料結構)，跟你手上能運用的資源 (如程式語言、開發工具及函式庫) 作最佳化的搭配及整合。因此我認為在這階段的重點有幾個:
<ol>
	<li>先成為一個好的 programmer (廢話)</li>
	<li>程式要有足夠的可靠性 (穩定、沒有BUG、易讀、對於未知問題的防禦能力)</li>
	<li>要有足夠的系統知識 (比如作業系統/API/系統服務/記憶體管理等等 OS 提供的環境及功能)</li>
	<li>程式要有好的結構 (正確/優秀的類別設計、好維護、有足夠的擴充及應變能力)</li>
	<li>要有解決未知問題或是未知 BUG 的能力，有自行學習新知的能力。</li>
</ol>
這些能力，跟 programmer 需要俱備的剛好是另一個角度的要求。某種程度上是各自發展的，不會互相衝突。有心的 programmer 應該要及早作好準備。如果 programmer 是要把程式寫對，那 software engineer 就是要把程式寫好，用專業的方式來寫，而不是用業餘的方式。

什麼叫作 "專業" 的程式? 我舉幾個例子，你的程式防呆嗎? 你的程式面對未知的問題或狀況的免疫力夠不夠強? 面對問題時你的程式有沒有比其它人的程式還容易抓出 BUG ? 你有能力有系統的找出未知的問題嗎? 還是只能看著程式碼發呆? 面對上面的問題有沒有有效的預防措施? 設計階段可以怎樣預防? ... etc

實在太多了。不過這些看起來又是教條，實際上這幾點會影響的到底是什麼? 後面幾篇就一項一項來看吧!

&nbsp;

[程式要有足夠的可靠性]

老實說，我很怕光是這一段，就會拖到好幾篇了 ... @_@，我會盡量挑出重點來寫。開始之前先問一下，不知道有多少人看過馬奎爾 (Steve Maguire) 寫的這本書? 有的話記得留個回應 :D

<strong><span style="color: #008000;"><em>"完美程式設計指南" (Writing Solid Code)</em></span></strong>

這本書真是經典。不過它真的也很 "經典"，是 1993 年就出版的書。以講程式設計來說，這個年代的書真的可以扔了，裡面的範例現在沒幾個人用的到了。不過它提到的作法真的是很實際，只是書上的範例大半都過時了，下面碰到的例子我都會用 C# 重新表達一次作者的理念。在這個主題我就舉幾個例子，各位讀者可以自己回顧一下你的程式碼，到底藏了多少地雷在裡面?

&nbsp;

[要讓問題浮現出來: 善用 DEBUG / RELEASE 模式]

專不專業就看這裡了。如果你想當個稱職的軟體工程師，除了讓程式跑的快之外，第一點就是要降低 BUG 數。如果你面對 BUG 的態度是 "找到再改就好"，或是 BUG 一堆你也沒方法去預防，也沒辦法降低 BUG 出現的頻率，那麼你跟半路出家的人差別在那?

大家都知道 Visual Studio 正上方就有個切換 Release / Debug 模式的選單吧? 你確切瞭解它是幹嘛的嗎? 先從一個簡單的範例開始吧! 我工作上常碰到線上測驗之類的應用軟體開發，因此線上考試算分是個很常用的功能。因此我把這個重責大任交給工程師來處理。先來看看我要求工程師寫什麼 CODE ? 我用 XML 定義了一份考卷 (QUIZ.xml，含正確答案)，也定義了答案卷的格式 (PAPER-XXXX.xml)，程式很簡單，就是拿到題目跟答案卷後，要算出正確的總分。

不難吧? 先看看 XML 檔長啥樣子:
<div>

<strong>試卷 (QUIZ.xml)</strong><span class="copycode">[copy code]</span>
<pre class="lang:xhtml decode:true">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;quiz&gt;
  &lt;question score="20"&gt;
    &lt;body&gt;那一隻熊最勵害?&lt;/body&gt;
    &lt;item correct="false"&gt;白熊&lt;/item&gt;
    &lt;item correct="false"&gt;黑熊&lt;/item&gt;
    &lt;item correct="false"&gt;棕熊&lt;/item&gt;
    &lt;item correct="true"&gt;灰熊&lt;/item&gt;
  &lt;/question&gt;
 
  &lt;question score="40"&gt;
    &lt;body&gt;誰發現萬有引力?&lt;/body&gt;
    &lt;item correct="false"&gt;鼠頓&lt;/item&gt;
    &lt;item correct="true"&gt;牛頓&lt;/item&gt;
    &lt;item correct="false"&gt;虎頓&lt;/item&gt;
    &lt;item correct="false"&gt;兔頓&lt;/item&gt;
  &lt;/question&gt;
 
  &lt;question score="40"&gt;
    &lt;body&gt;下列那些東西是可以吃的?&lt;/body&gt;
    &lt;item correct="false"&gt;東瓜&lt;/item&gt;
    &lt;item correct="true"&gt;西瓜&lt;/item&gt;
    &lt;item correct="true"&gt;南瓜&lt;/item&gt;
    &lt;item correct="false"&gt;北瓜&lt;/item&gt;
  &lt;/question&gt;
&lt;/quiz&gt;</pre>
<!-- end of code area -->

</div>
&nbsp;

&nbsp;

再來代表答案卷的檔案 (PAPER-PERFECT.xml)，這份看來是天才寫的，每一題都答對了... @_@
<div><strong>答案卷 (都是正確答案，PAPER-PERFECT.xml)</strong><span class="copycode">[copy code]</span></div>
<pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;quiz&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="true" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="true" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="true" /&gt;
    &lt;item checked="true" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
&lt;/quiz&gt;</pre>
<!-- end of code area -->

&nbsp;

&nbsp;

而我交待的算分規則也很簡單，就一般考試的計算方式: 每題有自己的配分，以複選題來算，答對幾個選項就照比例給分，答錯會倒扣。新人工程師果然好用耐操，不一會就交給我這份 Library 的程式碼:
<div>

<strong>第一版計分程式</strong><span class="copycode">[copy code]</span>
<pre class="lang:default decode:true">public static int ComputeQuizScore(XmlDocument quizDoc, XmlDocument paperDoc)
{
    int questionCount = quizDoc.SelectNodes("/quiz/question").Count;
    int totalScore = 0;
    for (int questionPos = 0; questionPos &lt; questionCount; questionPos++)
    {
        XmlElement quiz_question = quizDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        XmlElement paper_question = paperDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        totalScore += ComputeQuestionScore(quiz_question, paper_question);
    }
    return totalScore;
}
public static int ComputeQuestionScore(XmlElement quiz_question, XmlElement paper_question)
{
    int totalScore = 0;
    int itemCount = quiz_question.SelectNodes("item").Count;
    //
    //  題目的配分
    //
    int quiz_score = int.Parse(quiz_question.GetAttribute("score"));
    //
    //  答對一個選項的分數
    //
    int item_score = quiz_score / itemCount;
    for (int itemPos = 0; itemPos &lt; itemCount; itemPos++)
    {
        XmlElement quiz_item = quiz_question.SelectNodes("item")[itemPos] as XmlElement;
        XmlElement paper_item = paper_question.SelectNodes("item")[itemPos] as XmlElement;
        //
        //  算成積
        //
        if (quiz_item.GetAttribute("correct") == paper_item.GetAttribute("checked"))
        {
            totalScore += item_score;
        }
        else
        {
            totalScore -= item_score;
        }
    }
    return totalScore;
}</pre>
<!-- end of code area -->

</div>
&nbsp;

很中規中舉的程式，把天才寫的答案卷 (paper-perfect.xml) 套進去算，也真的拿到滿分，於是工程師就很高興的把程式 shelve 給我...

各位回頭想想上面的問題。這段程式以作業的標準來說勉強及格了。但是以實際系統運作的角度來說有那些缺陷?

原則上程式只要是人寫的都會有 BUG，不過我也是人，沒辦法一眼看穿所有程式的問題... 只能事事抱著懷疑的態度，試一試再說。我不是天才，所以寫不出滿分的答案，我另外準備了一份答案卷 (PAPER-NORMAL1.xml):
<div>

<strong>只答對第一題的答案卷 (PAPER-NORMAL1.xml)</strong><span class="copycode">[copy code]</span>
<pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;quiz&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="true" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
&lt;/quiz&gt;</pre>
<!-- end of code area -->

</div>
&nbsp;

見鬼了，算出來是 40 分... 蠢才也是有尊嚴的，不用平白無故送我 20 分吧... @_@，我把 BUG 丟回去給工程師，最後他抓出 BUG 在那裡了，第二題第三題我完全沒作答，應該視為放棄才對，結果程式也照規則給我算分... 運氣好多賺了 20 分.. 工程師又改了一版給我，這次加上了放棄此題的判斷 (第八行):
<div>

<strong>修正後的程式 #2: 放棄的話不算分</strong><span class="copycode">[copy code]
</span>
<pre class="lang:default decode:true ">public static int ComputeQuestionScore(XmlElement quiz_question, XmlElement paper_question)
{
    int totalScore = 0;
    int itemCount = quiz_question.SelectNodes("item").Count;
    //
    //  如果都沒作答, 此題放棄
    //
    if (paper_question.SelectNodes("item[@checked='true']").Count == 0) return 0;
    //
    //  題目的配分
    //
    int quiz_score = int.Parse(quiz_question.GetAttribute("score"));</pre>
&nbsp;

</div>
&nbsp;

有了上一次經驗，直覺告訴我我還得再測一測，搞不好還有其它 BUG ... 這次找了丁丁來考試，丁丁果真是個人才，交了一份全都錯的答案卷給我，前兩題放棄，第三題全選錯 (PAPER-NATIVE.xml):
<div>

<strong>丁丁的答案卷: 倒扣 (PAPER-NATIVE.xml)</strong><span class="copycode">[copy code]
</span>
<pre class="lang:default decode:true ">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;quiz&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
  &lt;/question&gt;
  &lt;question&gt;
    &lt;item checked="true" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="false" /&gt;
    &lt;item checked="true" /&gt;
  &lt;/question&gt;
&lt;/quiz&gt;</pre>
&nbsp;

果然有柯南的地方就有密室殺人事件... @_@，又被我抓到一個問題。這次得到的總分是 -40，那有人扣到負的? 工程師又被我叫來唸了一頓，這次改了這版程式給我 (第十一行，最低是0分):

</div>
&nbsp;
<div>

<strong>修正後的程式 #3: 倒扣到0分為止</strong><span class="copycode">[copy code]
</span>
<pre class="lang:default decode:true ">public static int ComputeQuizScore(XmlDocument quizDoc, XmlDocument paperDoc)
{
    int questionCount = quizDoc.SelectNodes("/quiz/question").Count;
    int totalScore = 0;
    for (int questionPos = 0; questionPos &lt; questionCount; questionPos++)
    {
        XmlElement quiz_question = quizDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        XmlElement paper_question = paperDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        totalScore += ComputeQuestionScore(quiz_question, paper_question);
    }
    return Math.Max(0, totalScore);
}</pre>
&nbsp;

&nbsp;

金融業最重視的就是錢了，銀行的程式連一毛錢都不能算錯，而在線上考試的系統也一樣，連一分都不能算錯。只是當你的老闆這樣要求你的時後，你是謹記在心，還是照一般方式寫程式嗎? 還是你有什麼有效的措施可以預防這些問題? 這時才是顯示你專業的地方啊... 套句鄉民的慣用語:

</div>
&nbsp;

"閃開! 讓專業的來..."

&nbsp;

哈哈，來看看鄉民... 不，專家該怎麼解決這種問題。怕程式錯就加上一堆檢查就好了。上面舉的例子真的只是 BUG 而以，其它還有更多不可預測的問題，像是題目跟答案卷跟本搭不起來，或是沒有答案卷等等鳥問題都有可能發生。那怎辦? 可憐的工程師被我訓了一頓，只好摸摸鼻子加了一堆令人哭笑不得的 check code, 像這樣:
<div>

<strong>多了一堆 CHECK 及印出 DEBUG MESSAGE 的程式碼</strong><span class="copycode">[copy code]
</span>
<pre class="lang:default decode:true ">public static int ComputeQuestionScore(XmlElement quiz_question, XmlElement paper_question)
{
    int totalScore = 0;
    int itemCount = quiz_question.SelectNodes("item").Count;
    if (quiz_question == null)
    {
        throw new Exception("沒有題目卷");
    }
    if (paper_question == null)
    {
        throw new Exception("沒有答案卷");
    }
    //
    //  如果都沒作答, 此題放棄
    //
    if (paper_question.SelectNodes("item[@checked='true']").Count == 0)
    {
        Console.WriteLine("偵測到沒作答的答案，此題放棄");
        return 0;
    }
    //
    //  確認題目跟答案的選項數目一致
    //
    if (paper_question.SelectNodes("item").Count != quiz_question.SelectNodes("item").Count)
    {
        throw new Exception("此題的選項跟題目定義不符合");
    }</pre>
&nbsp;

&nbsp;

老實說這範例我也寫不下去了，加這麼多 check 是好事，不過事情都有黑暗面，我覺的不妥的地方有幾個:

</div>
<ol>
	<li>可讀性變差
太多的 check / debug code, 完全把正常流程的 code 淹沒了，一眼看去看不出什麼邏輯...</li>
	<li>效能變差
對我來說，有些問題是輸入造成的 (如沒有給答案卷)，有些是鳥程式自己沒寫好 (如前面的例子)。並不是所有的 check 都需要寫在程式裡。</li>
	<li>花在寫 check 程式的時間太多
沒錯，寫個程式五分鐘就搞定，寫 check 要多花廿分鐘...</li>
</ol>
即使這樣，我還是贊成要這樣做。只是要做的聰明一點，要消掉上面的疑慮，還要達成一樣的效果。不需要什麼新技術，十幾年前馬奎爾這本 "Write Solid Code" 就講的很清楚了，要同時維護 RELEASE / DEBUG 兩種版本的程式!

在 C 的年代，只靠兩個巨集就解決了，分別是 TRACE 跟 ASSERT。一個就相當於 printf，可以印出 MESSAGE，另一個 ASSERT 則什麼都不做，只要你傳給它當參數是 TRUE 的話。否則就會印出錯誤訊息同時中止程式。而這兩個巨集都有個特點，就是只在 DEBUG MODE 發生作用，如果是在 RELEASE MODE，則一點用都沒有，就像你沒寫這段 CODE 一樣。

細節我就不多說了，這本書講的很清楚，我直接來用。老實說這種應用太經典了，經典到每種程式語言跟開發工具都有支援，連 Microsoft 在 JavaScript 都有實作，甚至跟 debugger 也有整合，不過不曉得有多少人知道? 在 .NET 當然也有 (System.Diagnoistics)。來看看我改版過的 code:
<div>

<strong>套用 TRACE / ASSERT 的程式碼</strong><span class="copycode">[copy code]
</span>
<pre class="lang:default decode:true ">public static int ComputeQuizScore(XmlDocument quizDoc, XmlDocument paperDoc)
{
    Trace.Assert(quizDoc != null);
    Trace.Assert(paperDoc != null);
    Trace.Assert(quizDoc.SelectNodes("/quiz/question").Count == paperDoc.SelectNodes("/quiz/question").Count);
    int questionCount = quizDoc.SelectNodes("/quiz/question").Count;
    int totalScore = 0;
    for (int questionPos = 0; questionPos &lt; questionCount; questionPos++)
    {
        XmlElement quiz_question = quizDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        XmlElement paper_question = paperDoc.SelectNodes("/quiz/question")[questionPos] as XmlElement;
        totalScore += ComputeQuestionScore(quiz_question, paper_question);
    }
    totalScore = Math.Max(0, totalScore);
    Trace.Assert(totalScore &gt;= 0);
    return totalScore;
}
public static int ComputeQuestionScore(XmlElement quiz_question, XmlElement paper_question)
{
    int totalScore = 0;
    int itemCount = quiz_question.SelectNodes("item").Count;
    //if (quiz_question == null)
    //{
    //    throw new Exception("沒有題目卷");
    //}
    //if (paper_question == null)
    //{
    //    throw new Exception("沒有答案卷");
    //}
    ////
    ////  確認題目跟答案的選項數目一致
    ////
    //if (paper_question.SelectNodes("item").Count != quiz_question.SelectNodes("item").Count)
    //{
    //    throw new Exception("此題的選項跟題目定義不符合");
    //}
    Trace.Assert(quiz_question != null);
    Trace.Assert(paper_question != null);
    Trace.Assert(paper_question.SelectNodes("item").Count == quiz_question.SelectNodes("item").Count);
    //
    //  如果都沒作答, 此題放棄
    //
    if (paper_question.SelectNodes("item[@checked='true']").Count == 0)
    {
        //Console.WriteLine("偵測到沒作答的答案，此題放棄");
        Trace.WriteLine("偵測到沒作答的答案，此題放棄");
        return 0;
    }
    //
    //  題目的配分
    //
    int quiz_score = int.Parse(quiz_question.GetAttribute("score"));
    //
    //  答對一個選項的分數
    //
    int item_score = quiz_score / itemCount;
    for (int itemPos = 0; itemPos &lt; itemCount; itemPos++)
    {
        XmlElement quiz_item = quiz_question.SelectNodes("item")[itemPos] as XmlElement;
        XmlElement paper_item = paper_question.SelectNodes("item")[itemPos] as XmlElement;
        //
        //  算成積
        //
        if (quiz_item.GetAttribute("correct") == paper_item.GetAttribute("checked"))
        {
            totalScore += item_score;
        }
        else
        {
            totalScore -= item_score;
        }
    }
    Trace.Assert(totalScore &gt;= (0 - quiz_score));
    Trace.Assert(totalScore &lt;= quiz_score);
    return totalScore;
}</pre>
&nbsp;

我特地把之前加的亂七八糟的 check code 用註解留下來，各位可以看看用 TRACE / ASSERT 前後的差別有多少。ASSERT是其中的精華。你可以到處都加上 ASSERT ，來說明你對於程式執行到某個地方的 "假設"。舉例來說，你 "假設" 呼叫你 FUNC 的人一定會傳 quizDoc 跟 paperDoc 給你，你又不想為了它寫一堆 IF ....，你就可以簡單的加上這一行 ASSERT( quizDoc != null), 代表只有 quizDoc 不是 NULL 時才是 "正常" 的。

</div>
那真的不正常的話會怎樣? 我特地拿掉倒扣扣到 0 分為止的 check, 用新版的 code 執行看看。

<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/4.SoftwareEngineer_14CFC/image_5.png" alt="image" width="506" height="345" border="0" />

在 .NET 裡 ASSERT 觸動後就是這個樣子。那 TRACE 呢? 我們進 DEBUG MODE 來看看:

<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/4.SoftwareEngineer_14CFC/image_6.png" alt="image" width="529" height="284" border="0" />

TRACE Message 直接被收到 Visual Studio 的 Output 視窗內。不過在 .NET 環境下，這兩者的行為已經跟書上講的廿年前作法有很多不同了。這些機制仍然可以開關，不過已經不是靠 DEBUG / RELEASE MODE 來切換，而是在 .NET configuration 裡用設定檔的方式來切換。

&nbsp;

&nbsp;

&nbsp;

------------------------------------

果然寫到一半寫不完 @_@，先做個小結。這些技巧都是一般人寫程式不會注意的，然而這些才是你寫的程式品質有沒有比別人好的關鍵，要讓你的程式可靠，做好預防措施是很重要的。你沒有辦法在所有地方都派警衛防守，但是你至少可以張貼警告標示，ASSERT 就是這樣的東西。下一篇會更進一步的以這例子為延申，ASSERT 還有更強大的應用。也許有人看到這裡會想說:

"怎麼跟單元測試有點像? 我們直接用 UnitTest 就好了啊"

沒錯，單元測試其實就是從最基本的 Trace / Assert 衍生出來的，一直到這幾年才成為顯學。後續幾篇也會再對這些議題做討論，敬請期待 :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2008-10-20 01:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-20 01:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-4-%e4%bd%a0%e7%9a%84%e7%a8%8b%e5%bc%8f%e5%a4%a0-%e5%8f%af%e9%9d%a0-%e5%97%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="good_programmer"><![CDATA[系列文章: 如何學好寫程式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[sendxp]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sendxp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-24 13:57:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-24 13:57:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi 前輩,
您的Blog RSS訂閱有問題?
非常喜歡看您的文章, 受益良多, 感謝您!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[jasper]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[airjasper@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-24 14:54:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-24 14:54:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝您一直以來的分享:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-24 16:05:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-24 16:05:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sendxp:

Orz, 看來字打太多, feedburner 不吃這麼大的 RSS :|
現在已經正常了, 謝謝通知 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[lililala2]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cope5678@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-31 12:22:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-31 12:22:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Writing Solid Code我有最早旗標出的中譯版 ..... :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-31 16:20:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-31 16:20:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我本來也有旗標那版 :P
不過後來不見了，意外的發現朋友有另一版華采再版的，就被我A過來了..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[Morris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[caption@ms5.hinet.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-08 00:19:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-08 00:19:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我有這本書的旗標版說...
中譯書名是叫 如何撰寫0錯誤程式 ...
在 1995 年買的!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-08 17:08:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-08 17:08:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯，就是這本 :D

真可惜沒人用新的語言或工具，寫本一樣內容的書... 這本真是經典 (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[qqtt1234]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qqtt1234@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-02 15:54:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-02 15:54:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以分層寫
讀xml一層
check input一層
計算邏輯一層
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[小小工程師]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eee@eee.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-19 11:52:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-19 11:52:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[前備,
小人認為 只需要
1. 先抓出第每題的分數 , 和第每題的答案數和第幾個答案下去比對就好了
不需要檢查那麼多東西,例如有沒有回答等等,還有要先歸類好題目的類型
1. 單選 2.複選( 又分 全對才給分 or  有答對一個項目就給分)
EX: 
   一開始 宣告 total=0
   第一題 答案數=1  ,答案項目=4
  此時 get 回答者的第一題 答案數 是否等於 第一題的答案數, 
  答案數相符 ---&gt; if  UseQItem[4] =是 then total +=第一題分數

但此解法 針對最後一題 會有點問題
1. 若 最後一題要全對才給分 就不會有問題
2.若 最後一題 有一個就給 (總分/項目數)
   那麼最後一題就要寫成
 for (int i=0 to 最後一題項目數)
    if  Item[i].val=UseQItem[i].val then
         total += (總分/項目數)
   else
      total -= (總分/項目數)


我想這樣就不用還要過濾有沒有回答等等的一些check,程式碼也很簡單




   ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[小小工程師]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eee@eee.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-19 12:05:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-19 12:05:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[順便補充上面的寫法 , 是 就算有倒扣 也不會倒扣超出原本給那題的分數的寫法。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>生產者 vs 消費者 - BlockQueue 實作</title>
		<link>http://columns.chicken-house.net/2008/10/18/%e7%94%9f%e7%94%a2%e8%80%85-vs-%e6%b6%88%e8%b2%bb%e8%80%85-blockqueue-%e5%af%a6%e4%bd%9c/</link>
		<pubDate>Sat, 18 Oct 2008 11:53:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/18/e7949fe794a2e88085-vs-e6b688e8b2bbe88085-BlockQueue-e5afa6e4bd9c.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
過去寫了<a href="/category/Threading.aspx">好幾篇跟執行緒相關的文章</a>，講的都是如何精確控制執行緒的問題。不過實際上有在寫的人就知道，那些只是 &quot;工具&quot;，最重要的還是你該怎樣安排你的程式，讓它能有效率的用到執行緒的好處，那才是重點。大部份能有效利用到多執行緒的程式，大都是大量且獨立的小動作，可以很簡單的撒下去給ThreadPool處理，不過當你的程式沒辦法這樣切，就要想點別的辦法了。 
</p>
<p>
&nbsp;
</p>
<p>
開始看 code 前先講講簡單的概念。這篇要講的是另一種模式: &quot;生產者 v.s. 消費者&quot;。這是個很典型的供需問題，唸過作業系統 (Operation System) 的人應該都被考過這個課題吧 @_@。簡單的說如果你的程式要處理的動作可以分為 &quot;生產者&quot; (產生資料，載入檔案，或是第一階段的運算等等) 及消費者 (匯出資料，或是第二階段的運算等等) 這種模式，而前後兩個階段各自又適合用執行緒來加速的話，那你就值得來研究一下這種模式。第一手資料就是去看看作業系統的書，<a href="http://www.google.com.tw/search?complete=1&amp;hl=zh-TW&amp;q=%E6%81%90%E9%BE%8D%E7%89%88%2B%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1&amp;btnG=%E6%90%9C%E5%B0%8B&amp;meta=lr%3Dlang_zh-CN%7Clang_zh-TW&amp;aq=f&amp;oq=">恐龍書</a>足足有一整章在講，足夠你研究了。本篇重點會擺在怎樣用 C# / .NET 實作的部份。 
</p>
<p>
&nbsp;
</p>
<p>
舉個具體一點的例子，如果你想寫個程式，從網站下載幾百個檔案，同時要把它們壓縮成一個 ZIP 檔，在過去你大概只能全部下載完之後，再開始ZIP的壓縮動作。第一階段都是 IO (網路) bound 的程式，第二階段則是 CPU bound。如果是完全獨立的兩個程式，很適合擺在一起執行，因為它們需要的資源不一樣，不會搶來搶去。但是就敗在他們要處理的資料是卡在一起的。 
</p>
<p>
&nbsp;
</p>
<p>
把這個動作想像成我們有兩組人分別負責下載及壓縮的動作，下載的部份可以多執行緒同時進行沒問題，但是下載好一個檔案，就可以先丟給後面的那組人開始壓縮了，不用等期它人下載完成。如果下載的暫存目錄空間有限，我們甚至可以這樣調整: 當 TEMP 滿了的話，下載動作就暫停，等到 TEMP 裡的東西壓縮好清掉一部份後再繼續。而壓縮的部份則相反，如果 TEMP 已經空了就暫停，等到有東西進來再繼續，直到完成為止。 
</p>
<p>
&nbsp;
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/vsBlockQueue_7B44/image_2.png"><img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/vsBlockQueue_7B44/image_thumb.png" border="0" alt="image" width="561" height="375" /></a> 
</p>
<p>
前後兩階段該如何利用多執行緒，我就跳過去了，<a href="/category/Threading.aspx">過去那幾篇</a>就足以應付。這種模式的關鍵在於前後兩階段的進度該如何平衡。有些範例是有照規矩的把這模式實作出來，不過... 你也知道，看起來就是像作業的那種，完全不像是可以拿來正規的用途。 
</p>
<p>
&nbsp;
</p>
<p>
我認定 &quot;好&quot; 的實作，是像 System.Collections.Generics 之於 DataStructure 那樣，能很漂亮的把細節封裝起來，很容易重複利用的才是我認為好的實作。不能容易的使用，那就只能像作業一樣寫完就丟...。這個問題看過有人用 Semaphore 來做，也是作的很棒，不過我比較推薦的是 QUEUE 的作法。 
</p>
<p>
&nbsp;
</p>
<p>
從上圖來看，生產者跟消費者都很簡單，就是過去講的多執行緒或是執行緒集區就搞定，關鍵在於中間的控制。我的想法是把庫存管理的東西實作成佇列 (QUEUE)，生產者產出的東西就放到 QUEUE，而消費者就去 QUEUE 把東西拿出來。不過現成的 QUEUE 不會告訴你 QUEUE 滿了，QUEUE 空了也只會丟 EXCEPTION 而以。這次我做了個 BlockQueue 就是希望解決這個問題。 
</p>
<p>
&nbsp;
</p>
<p>
我期望這個 QUEUE 能跟一般的 QUEUE 一樣使用，但是要有三個地方不一樣: 
</p>
<ol>
	<li>要設定大小限制，當 QUEUE 達到容量上限時 EnQueue 的動作會被暫停 (Block)，而不是丟出例外。 </li>
	<li>QUEUE 已經空了的時後，DeQueue 的動作會被暫停 (Block)，而不是丟出例外。 </li>
	<li>要多個 QUEUE 關機的動作 (SHUTDOWN)，以免生產者都不出貨了，消費者還苦苦的等下去的窘況。</li>
</ol>
<p>
&nbsp;
</p>
<p>
先看看這樣的 QUEUE 我希望它怎麼被使用。看一下簡單的範例程式 (主程式，不包含 BlockQueue): 
</p>
<div>
<strong>使用 BlockQueue 來實作的生產者/消費者範例</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
        public static BlockQueue&lt;string&gt; queue = new BlockQueue&lt;string&gt;(10);        public static void Main(string[] args)        {            List&lt;Thread&gt; ps = new List&lt;Thread&gt;();            List&lt;Thread&gt; cs = new List&lt;Thread&gt;();            for (int index = 0; index &lt; 5; index++)            {                Thread t = new Thread(Producer);                ps.Add(t);                t.Start();            }            for (int index = 0; index &lt; 10; index++)            {                Thread t = new Thread(Consumer);                cs.Add(t);                t.Start();            }            foreach (Thread t in ps)            {                t.Join();            }            WriteLine(&quot;Producer shutdown.&quot;);            queue.Shutdown();            foreach (Thread t in cs)            {                t.Join();            }        }        public static long sn = 0;        public static void Producer()        {            for (int count = 0; count &lt; 30; count++)            {                RandomWait();                string item = string.Format(&quot;item:{0}&quot;, Interlocked.Increment(ref sn));                WriteLine(&quot;Produce Item: {0}&quot;, item);                queue.EnQueue(item);            }            WriteLine(&quot;Producer Exit&quot;);        }        public static void Consumer()        {            try            {                while (true)                {                    RandomWait();                    string item = queue.DeQueue();                    WriteLine(&quot;Cust Item: {0}&quot;, item);                }            }            catch            {                WriteLine(&quot;Consumer Exit&quot;);            }        }        private static void RandomWait()        {            Random rnd = new Random();            Thread.Sleep((int)(rnd.NextDouble() * 300));        }        private static void WriteLine(string patterns, params object[] arguments)        {            Console.WriteLine(string.Format(&quot;[#{0:D02}] &quot;, Thread.CurrentThread.ManagedThreadId) + patterns, arguments);        }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> BlockQueue&lt;<span class="kwrd">string</span>&gt; queue = <span class="kwrd">new</span> BlockQueue&lt;<span class="kwrd">string</span>&gt;(10);
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    List&lt;Thread&gt; ps = <span class="kwrd">new</span> List&lt;Thread&gt;();
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    List&lt;Thread&gt; cs = <span class="kwrd">new</span> List&lt;Thread&gt;();
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> index = 0; index &lt; 5; index++)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>        Thread t = <span class="kwrd">new</span> Thread(Producer);
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        ps.Add(t);
</pre>
<pre>
<span class="lnum">  10:  </span>        t.Start();
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    }
</pre>
<pre>
<span class="lnum">  12:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> index = 0; index &lt; 10; index++)
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    {
</pre>
<pre>
<span class="lnum">  14:  </span>        Thread t = <span class="kwrd">new</span> Thread(Consumer);
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        cs.Add(t);
</pre>
<pre>
<span class="lnum">  16:  </span>        t.Start();
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>    }
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="kwrd">foreach</span> (Thread t <span class="kwrd">in</span> ps)
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    {
</pre>
<pre>
<span class="lnum">  20:  </span>        t.Join();
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    }
</pre>
<pre>
<span class="lnum">  22:  </span>    WriteLine(<span class="str">&quot;Producer shutdown.&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    queue.Shutdown();
</pre>
<pre>
<span class="lnum">  24:  </span>    <span class="kwrd">foreach</span> (Thread t <span class="kwrd">in</span> cs)
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    {
</pre>
<pre>
<span class="lnum">  26:  </span>        t.Join();
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>    }
</pre>
<pre>
<span class="lnum">  28:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  29:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">long</span> sn = 0;
</pre>
<pre>
<span class="lnum">  30:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Producer()
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>{
</pre>
<pre>
<span class="lnum">  32:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> count = 0; count &lt; 30; count++)
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>    {
</pre>
<pre>
<span class="lnum">  34:  </span>        RandomWait();
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>        <span class="kwrd">string</span> item = <span class="kwrd">string</span>.Format(<span class="str">&quot;item:{0}&quot;</span>, Interlocked.Increment(<span class="kwrd">ref</span> sn));
</pre>
<pre>
<span class="lnum">  36:  </span>        WriteLine(<span class="str">&quot;Produce Item: {0}&quot;</span>, item);
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>        queue.EnQueue(item);
</pre>
<pre>
<span class="lnum">  38:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>    WriteLine(<span class="str">&quot;Producer Exit&quot;</span>);
</pre>
<pre>
<span class="lnum">  40:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  41:  </span><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Consumer()
</pre>
<pre>
<span class="lnum">  42:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>    <span class="kwrd">try</span>
</pre>
<pre>
<span class="lnum">  44:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>        <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre>
<span class="lnum">  46:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>            RandomWait();
</pre>
<pre>
<span class="lnum">  48:  </span>            <span class="kwrd">string</span> item = queue.DeQueue();
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>            WriteLine(<span class="str">&quot;Cust Item: {0}&quot;</span>, item);
</pre>
<pre>
<span class="lnum">  50:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  51:  </span>    }
</pre>
<pre>
<span class="lnum">  52:  </span>    <span class="kwrd">catch</span>
</pre>
<pre class="alt">
<span class="lnum">  53:  </span>    {
</pre>
<pre>
<span class="lnum">  54:  </span>        WriteLine(<span class="str">&quot;Consumer Exit&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  55:  </span>    }
</pre>
<pre>
<span class="lnum">  56:  </span>}
</pre>
<pre class="alt">
<span class="lnum">  57:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RandomWait()
</pre>
<pre>
<span class="lnum">  58:  </span>{
</pre>
<pre class="alt">
<span class="lnum">  59:  </span>    Random rnd = <span class="kwrd">new</span> Random();
</pre>
<pre>
<span class="lnum">  60:  </span>    Thread.Sleep((<span class="kwrd">int</span>)(rnd.NextDouble() * 300));
</pre>
<pre class="alt">
<span class="lnum">  61:  </span>}
</pre>
<pre>
<span class="lnum">  62:  </span><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> WriteLine(<span class="kwrd">string</span> patterns, <span class="kwrd">params</span> <span class="kwrd">object</span>[] arguments)
</pre>
<pre class="alt">
<span class="lnum">  63:  </span>{
</pre>
<pre>
<span class="lnum">  64:  </span>    Console.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">&quot;[#{0:D02}] &quot;</span>, Thread.CurrentThread.ManagedThreadId) + patterns, arguments);
</pre>
<pre class="alt">
<span class="lnum">  65:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
主程式很簡單，你知道怎麼寫多執行緒程式的話那麼一看就懂了。一開始替 Producer / Consumer 各建立三個執行續，而每個 Producer 只作很簡單的事，就是連續生產 30 個字串放到 BlockQueue, 當所有的 Producer thread 都執行完後，會呼叫 queue.Shutdown( ); 通知 QUEUE 已經全部生產完畢。 
</p>
<p>
Consumer 也很簡單，每個 Consumer 只是去 Queue 拿東西出來，顯示在 Console 上。直到 Dequeue 動作失敗，接到 Exception 之後就結束。 
</p>
<p>
要試試生產者/消費者模式的各種狀況，可以試著調整兩者的執行緒數量。舉例來說，調大 Producer 執行緒數量時 (P: 10 / C:5)，結果是這樣: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/vsBlockQueue_7B44/image_7.png" border="0" alt="image" width="288" height="465" /> 
</p>
<p>
Producer 的進度大約就是領先 Consumer 的進度 10 筆資料左右，領先的幅度就暫停了，不會無止境的成長下去。證明卡在 QUEUE 內的數量受到控制。接下來再來看看調高&nbsp;Consumer 的執行緒數量的結果: 
</p>
<p>
<img style="border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/vsBlockQueue_7B44/image_8.png" border="0" alt="image" width="278" height="465" /> 
</p>
<p>
好像 <a href="http://taiwan.cnet.com/crave/0,2000088746,20130427,00.htm">iPhone 上市搶購熱潮</a>一樣 @_@，供不應求，Producer 提供的資料馬上被搶走了...。 
</p>
<p>
&nbsp;
</p>
<p>
效果不錯，看來這樣的實作有達成它的目的。最後來看的是 BlockQueue 的程式碼: 
</p>
<p>
&nbsp;
</p>
<div>
<strong>BlockQueue&lt;T&gt; 實作的完整程式碼</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
    public class BlockQueue&lt;T&gt;    {        public readonly int SizeLimit = 0;        private Queue&lt;T&gt; _inner_queue = null;        private ManualResetEvent _enqueue_wait = null;        private ManualResetEvent _dequeue_wait = null;        public BlockQueue(int sizeLimit)        {            this.SizeLimit = sizeLimit;            this._inner_queue = new Queue&lt;T&gt;(this.SizeLimit);            this._enqueue_wait = new ManualResetEvent(false);            this._dequeue_wait = new ManualResetEvent(false);        }        public void EnQueue(T item)        {            if (this._IsShutdown == true) throw new InvalidCastException(&quot;Queue was shutdown. Enqueue was not allowed.&quot;);            while (true)            {                lock (this._inner_queue)                {                    if (this._inner_queue.Count &lt; this.SizeLimit)                    {                        this._inner_queue.Enqueue(item);                        this._enqueue_wait.Reset();                        this._dequeue_wait.Set();                        break;                    }                }                this._enqueue_wait.WaitOne();            }        }        public T DeQueue()        {            while (true)            {                if (this._IsShutdown == true)                {                    lock (this._inner_queue) return this._inner_queue.Dequeue();                }                lock (this._inner_queue)                {                    if (this._inner_queue.Count &gt; 0)                    {                        T item = this._inner_queue.Dequeue();                        this._dequeue_wait.Reset();                        this._enqueue_wait.Set();                        return item;                    }                }                this._dequeue_wait.WaitOne();            }        }        private bool _IsShutdown = false;        public void Shutdown()        {            this._IsShutdown = true;            this._dequeue_wait.Set();        }    }
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> BlockQueue&lt;T&gt;
</pre>
<pre>
<span class="lnum">   2:  </span>{
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    <span class="kwrd">public</span> <span class="kwrd">readonly</span> <span class="kwrd">int</span> SizeLimit = 0;
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">private</span> Queue&lt;T&gt; _inner_queue = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="kwrd">private</span> ManualResetEvent _enqueue_wait = <span class="kwrd">null</span>;
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">private</span> ManualResetEvent _dequeue_wait = <span class="kwrd">null</span>;
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="kwrd">public</span> BlockQueue(<span class="kwrd">int</span> sizeLimit)
</pre>
<pre>
<span class="lnum">   8:  </span>    {
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">this</span>.SizeLimit = sizeLimit;
</pre>
<pre>
<span class="lnum">  10:  </span>        <span class="kwrd">this</span>._inner_queue = <span class="kwrd">new</span> Queue&lt;T&gt;(<span class="kwrd">this</span>.SizeLimit);
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        <span class="kwrd">this</span>._enqueue_wait = <span class="kwrd">new</span> ManualResetEvent(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">  12:  </span>        <span class="kwrd">this</span>._dequeue_wait = <span class="kwrd">new</span> ManualResetEvent(<span class="kwrd">false</span>);
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    }
</pre>
<pre>
<span class="lnum">  14:  </span>    <span class="kwrd">public</span> <span class="kwrd">void</span> EnQueue(T item)
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    {
</pre>
<pre>
<span class="lnum">  16:  </span>        <span class="kwrd">if</span> (<span class="kwrd">this</span>._IsShutdown == <span class="kwrd">true</span>) <span class="kwrd">throw</span> <span class="kwrd">new</span> InvalidCastException(<span class="str">&quot;Queue was shutdown. Enqueue was not allowed.&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre>
<span class="lnum">  18:  </span>        {
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>            <span class="kwrd">lock</span> (<span class="kwrd">this</span>._inner_queue)
</pre>
<pre>
<span class="lnum">  20:  </span>            {
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>                <span class="kwrd">if</span> (<span class="kwrd">this</span>._inner_queue.Count &lt; <span class="kwrd">this</span>.SizeLimit)
</pre>
<pre>
<span class="lnum">  22:  </span>                {
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>                    <span class="kwrd">this</span>._inner_queue.Enqueue(item);
</pre>
<pre>
<span class="lnum">  24:  </span>                    <span class="kwrd">this</span>._enqueue_wait.Reset();
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>                    <span class="kwrd">this</span>._dequeue_wait.Set();
</pre>
<pre>
<span class="lnum">  26:  </span>                    <span class="kwrd">break</span>;
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>                }
</pre>
<pre>
<span class="lnum">  28:  </span>            }
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>            <span class="kwrd">this</span>._enqueue_wait.WaitOne();
</pre>
<pre>
<span class="lnum">  30:  </span>        }
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>    }
</pre>
<pre>
<span class="lnum">  32:  </span>    <span class="kwrd">public</span> T DeQueue()
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>    {
</pre>
<pre>
<span class="lnum">  34:  </span>        <span class="kwrd">while</span> (<span class="kwrd">true</span>)
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>        {
</pre>
<pre>
<span class="lnum">  36:  </span>            <span class="kwrd">if</span> (<span class="kwrd">this</span>._IsShutdown == <span class="kwrd">true</span>)
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>            {
</pre>
<pre>
<span class="lnum">  38:  </span>                <span class="kwrd">lock</span> (<span class="kwrd">this</span>._inner_queue) <span class="kwrd">return</span> <span class="kwrd">this</span>._inner_queue.Dequeue();
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>            }
</pre>
<pre>
<span class="lnum">  40:  </span>            <span class="kwrd">lock</span> (<span class="kwrd">this</span>._inner_queue)
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>            {
</pre>
<pre>
<span class="lnum">  42:  </span>                <span class="kwrd">if</span> (<span class="kwrd">this</span>._inner_queue.Count &gt; 0)
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>                {
</pre>
<pre>
<span class="lnum">  44:  </span>                    T item = <span class="kwrd">this</span>._inner_queue.Dequeue();
</pre>
<pre class="alt">
<span class="lnum">  45:  </span>                    <span class="kwrd">this</span>._dequeue_wait.Reset();
</pre>
<pre>
<span class="lnum">  46:  </span>                    <span class="kwrd">this</span>._enqueue_wait.Set();
</pre>
<pre class="alt">
<span class="lnum">  47:  </span>                    <span class="kwrd">return</span> item;
</pre>
<pre>
<span class="lnum">  48:  </span>                }
</pre>
<pre class="alt">
<span class="lnum">  49:  </span>            }
</pre>
<pre>
<span class="lnum">  50:  </span>            <span class="kwrd">this</span>._dequeue_wait.WaitOne();
</pre>
<pre class="alt">
<span class="lnum">  51:  </span>        }
</pre>
<pre>
<span class="lnum">  52:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  53:  </span>    <span class="kwrd">private</span> <span class="kwrd">bool</span> _IsShutdown = <span class="kwrd">false</span>;
</pre>
<pre>
<span class="lnum">  54:  </span>    <span class="kwrd">public</span> <span class="kwrd">void</span> Shutdown()
</pre>
<pre class="alt">
<span class="lnum">  55:  </span>    {
</pre>
<pre>
<span class="lnum">  56:  </span>        <span class="kwrd">this</span>._IsShutdown = <span class="kwrd">true</span>;
</pre>
<pre class="alt">
<span class="lnum">  57:  </span>        <span class="kwrd">this</span>._dequeue_wait.Set();
</pre>
<pre>
<span class="lnum">  58:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  59:  </span>}
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
重點只在重新包裝 Queue 的 Enqueue / Dequeue ，及追加的 Shutdown( ) 裡做的執行緒同步機制。在 BlockQueue 尚未 Shutdown 之前，Enqueue / Dequeue 都不會引發 Exception, 取代的是用 ManualResetEvent 的 WaitOne( ) 來暫停這個動作，直到另一端資料準備好為止。 
</p>
<p>
然而當 Shutdown 被呼叫過之後，Queue 就不再接受新的東西被塞進來了，而東西拿光因為不再補貨，所以就維持原本 Queue 的設計扔出 Exception。 
</p>
<p>
&nbsp;
</p>
<p>
其實真的要挖的話，這個 Queue 可以進一步的改善，以資料結構來看，這種有固定 SIZE 上限的 QUEUE，最適合用 CircleQueue 來實作了。有興趣的朋友們可以換上回介紹過的 NGenerics 改看看，我就不再示範了。其實還有其它變型，像是 Priority Queue, 進去跟出來的順序不一定一樣，意思是你地位比較高的話是可以 &quot;插隊&quot; 的，後加入 QUEUE 的物件，可以優先被拿出來。這些機制都是可以進一步改善 &quot;生產者/消費者&quot; 模式的方法，有需要的讀者們可以朝這個方向思考看看! 
</p>
<p>
&nbsp;
</p>
<p>
這篇只是個開始，運用這種機制，可以進一步延伸出 Pipeline 模式 (生產線)，甚至更進一步運用到串流 (Stream) 的應用。運氣好的話下個月應該看的到完整的探討跟解說吧 ...，敬請期待 :D 
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2008-10-18 11:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-18 11:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%9f%e7%94%a2%e8%80%85-vs-%e6%b6%88%e8%b2%bb%e8%80%85-blockqueue-%e5%af%a6%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-08 10:39:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-08 10:39:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[想請教您：
如果您要比較嚴謹的實作BlockQueue，您會選擇...
1.如您範例中般，沒有實作介面與繼承。
2.自行實作介面ICollection, IEnumerable與ICloneable。
3.繼承自其他Collections物件，因為固定大小，我可能會選擇一般陣列。

最近想學著以比較嚴謹的方式實作Class，剛好最近對pipeline的流程控制有研究，也拜讀了您不少文章，想藉此請教您的意見。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-08 17:14:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-08 17:14:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[結果花了一個下午實作CircleQueue ，並實作介面IEnumerable&lt;T&gt;, ICollection, IEnumerable, ICloneable
然後又做了一個BlockQueue，繼承於CircleQueue ，雖然我不知道這邊用繼承到底好不好...
您的例子是把Queue(CircleQueue)包在BlockQueue，
我則是繼承CircleQueue ，有點像Synchronized的CircleQueue，不過功能不同。
另外還改變了一些您Shutdown的部分，改成SetBlock與ResetBlock，如此就可以重新使用物件。

另外在我的網站介紹BlockQueue的文章(http://tw.myblog.yahoo.com/litfal/article?mid=405)有引用此篇連結，如有不妥請提醒，我將會改善或移除。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-08 23:22:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-08 23:22:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我會選 (3), 直接繼承既有的 Queue 物件。不過沒這麼作的原因只有一個，我的重點在於修改 Enqueue() / Dequeue() 的行為，不過無奈 .NET 內建的 Queue 類別，不允許我改寫這兩個 method, 我才會選擇 (1) 的作法，用包含的方式而不用繼承的方式。

至於你提道 (2) 這選項，我認為這只是個 options... 要不要實作，完全看你認為你的 BlockQueue 要怎麼被看待，比如:

1. 如果你認為 BlockQueue 是個 &quot;collection&quot;, 就該實作 ICollection. 不過我把它當成控制執行緒流程的工具，Queue只是我實作的手法，那就不用。其實我覺的更貼切的名字應該是 &quot;Pipe&quot;, 只不過用 Queue 比較能望文生義，最後還是用 Queue 這名字。

2. IEnumerable / ICloneable 也一樣，完全看你需不需要讓 BlockQueue 支援這些動作?  既然不是一般通用的 queue, 這些介面就可以斟酌來實作了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>90</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-08 23:26:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-08 23:26:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，你真有心 (Y)，真的把它作出來了...

我不直接繼承現成的 Queue, 原因上一則回應已經說明了。不過這個你自己實作的 CirculeQueue 就沒這問題，Enqueue() / Dequeue() 都標上 virtual, 這實直接拿來繼承是再適合不過了。

文章歡迎引用，不用客氣 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>91</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-08 23:37:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-08 23:37:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[補充一下，要擴充 BlockQueue 的功能，倒是有個建議，可以用 PriorityQueue 的方式來實作。這樣的目的是讓優先權高的資料可以插隊，讓 BlockQueue 能更彈性的處理丟進來的工作...。

另外，你實作 CircleQueue 的目的是練習，還是另有它用? 翻了一下 MSDN，翻到 .NET 內建的 Queue.Dequeue( ) 的說明:

If Count already equals the capacity, the capacity of the Queue &lt;(Of &lt;(T &gt;)&gt;) is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added. 

If Count is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O( n) operation, where n is Count. 

雖然沒有明說，不過它提到 internal array, 擴展的 time complexity 也是 O(n), Count == n 才會擴展這幾點來看，內部應該也是用 Circle Queue 的方式來實作的... 
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-09 10:55:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-09 10:55:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[實作CircleQueue是練習居多，練習一下幾個interface的實作，另外是想實作一下Overwrite If Full的功能。
這功能用來&quot;紀錄最近N筆資訊&quot;很好用，例如聊天室的訊息記錄。
雖然可以用一般Queue、先檢查大小，超出範圍就先Dequeue在Enqueue來達成，但感覺直接蓋過會更快更方便。
順便做個可以Block化的CircleQueue，如您提到的，Queue不能覆寫Enqueue等關鍵方法...
另外、PriorityQueue實作也想試試，不過可能要重新想清楚在下手。因為會有插入資料的狀況，所以會考慮多作一組LinkedList處理優先權排序。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-10 02:40:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-10 02:40:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BlockPriorityQueue 做出來了:p
考慮了一個下午、要繼承CircleQueue，或是用哪一種Collection來實作PriorityQueue。
前者一下就放棄了，後者倒是想了很久。
最後決定自行實作heap tree來實現PriorityQueue。
這讓我想到您[該如何學好 &quot;寫程式&quot; ??]裡面提到資料結構的重要......

不過從PriorityQueue繼承實作BlockPriorityQueue 就簡單得多，跟BlockQueue繼承CirculeQueue幾乎沒兩樣。
詳細程式碼在 http://tw.myblog.yahoo.com/litfal/article?mid=407
歡迎指教:D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-04-28 12:11:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-04-28 12:11:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問一下 Line 38 ，會出現 System.InvalidOperationException: Queue empty.
我擅自改了一下，不知是否正確…

                        if (this._inner_queue.Count &gt; 0)
                        {
                            return this._inner_queue.Dequeue();
                        }
                        return default(T);]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-04-28 21:49:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-04-28 21:49:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這樣改是可以解決 exception 問題, 不過...

就大家慣用的 Queue 物件的定義來說，queue empty, 還去 dequeue
這本來就該丟出 exception, 讓消費者 worker 去處理
return default(T) 會讓消費者 worker 搞不清楚是 queue empty, 還是有人把 default(T) 塞進 queue ..

真要改的話，建議按照 .net 慣例
另外加一個 method:

bool TryDeQueue(out T result) { .... }

用 return true or false 來代表是否有傳回值? 而真正傳回物件，則用 call by reference 方式傳遞。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NGenerics - DataStructure / Algorithm Library</title>
		<link>http://columns.chicken-house.net/2008/10/14/ngenerics-datastructure-algorithm-library/</link>
		<pubDate>Tue, 14 Oct 2008 02:52:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/14/NGenerics-DataStructure-Algorithm-Library.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
其實本來沒打算寫這篇的，不過之前在寫第二篇: [<a href="/post/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-2-e782bae4bb80e9babc-programmer-e8a9b2e5adb8e8b387e69699e7b590e6a78b-.aspx">該如何學好 &quot;寫程式&quot; #2. 為什麼 programmer 該學資料結構 ??</a>] 時，寫的太高興，忘了查 System.Collections.Generics.SortedList 的 KEY 能不能重複... 結果貼出來後同事才提醒我，SortedList 的 KEY 一樣得是唯一的... Orz
</p>
<p>
&nbsp;
</p>
<p>
實在是不想自己再去寫這種資料結構的作業... 一來我寫不會比較好，二來自己寫的沒支援那堆 ICollection, IEnumerable 等 interface 的話，用起來也是很難用... 就到 <a href="http://www.codeplex.com">www.codeplex.com</a> 找了找，沒想到還真的找到一個: <a href="http://www.codeplex.com/NGenerics">NGenerics</a> :D 找到之後才發現挖到寶了，裡面實作的資料結構還真完整，Heap, BinaryTree, CircularQueue, PriorityQueue...&nbsp; 啥的一應俱全，好像看到資料結構課本的解答本一樣 @_@，有興趣研究的人可以抓它的 Source Code 來看..
</p>
<p>
&nbsp;
</p>
<p>
這套 LIB 的實作範圍很廣，除了我前兩篇介紹很基本的那幾個之外，其它連一些數學的跟圖型，甚至是各種排序法的實作都包含在內。要看介紹就到它的官方網站看吧! 很可惜的是它的文件不像 MSDN 一般，有明確的標示時間複雜度... 不過它有附 Source Code, 拼一點的話還是可以自己看程式... 哈哈 :D
</p>
<p>
&nbsp;
</p>
<p>
我就拿 NGenerics 來改寫之前我提供的範例程式吧，那個查通訊錄的程式就不用再改寫了，看不大出來效果差在那。我們來改寫複雜一點的，也就是高速公路的例子。
</p>
<p>
&nbsp;
</p>
<p>
先來看看有什麼東西可以用? NGenerics.DataStructures.General 這個 Namespace 下竟然有現成的 Graph 類別!! 而 NGenerics.Algorithms 下也有現成的 GraphAlgorithm 這演算法的實作... Orz, 裡面提供了三種演算法，光看名字還真搞不懂它是啥... 分別查了一下，是這三個... 找到的都是教授或是考古題之類的網站 ... 咳咳...
</p>
<ol>
	<li>Dijkstras Algorithm (<a href="http://nthucad.cs.nthu.edu.tw/~yyliu/personal/nou/04ds/dijkstra.html">代克思托演算法</a>): ... 這種名字難怪我記不住 @_@，這演算法就是我在第三篇提過比較好的演算法，由起點一路擴散出去的作法。</li>
	<li><a href="http://203.64.42.21/course/2007/Algorithms/poko/Kruskal.htm">Kruskals Algorithm</a>: 這名字大概太難翻了，沒人把它翻成中文的.. 哈哈，這演算法是找出 minimal spanning tree (最小生成樹)，這篇不講教條了，跳過跳過，有興趣自己看 :D</li>
	<li>Prims Algorithm (<a href="http://nthucad.cs.nthu.edu.tw/~yyliu/personal/nou/04ds/prim.html">普林演算法</a>): 這名字好記多了... 一樣是找<strike>最短路逕</strike> minimal spanning tree 的演算法</li>
</ol>
<p>
來看看原本我寫了上百行的程式 (請參考上一篇)，用這個 LIB 改寫有多簡單吧! 先來看看建地圖的部份。Graph&lt;T&gt; 的 T 是指圖的節點型別。暫時不管收費站的問題，因為 GRAPH 的模型裡，只有路逕是有成本的，點本身沒有。直接用 string 來識別點 (vertex)，兩個點跟它的距離就當作路段 (edge)。建資料還真有點囉唆，打了不少字:
</p>
<div>
<strong>利用 NGeneric 的 Graph 來建立高速公路的模型</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            Graph&lt;string&gt; highway = new Graph&lt;string&gt;(false);            highway.AddVertex(&quot;基金&quot;);            highway.AddVertex(&quot;七堵收費站&quot;);            highway.AddVertex(&quot;汐止系統&quot;);            // 以下略            highway.AddEdge(                highway.GetVertex(&quot;基金&quot;),                 highway.GetVertex(&quot;七堵收費站&quot;),                4.9 - 0);            highway.AddEdge(                highway.GetVertex(&quot;七堵收費站&quot;),                 highway.GetVertex(&quot;汐止系統&quot;),                 10.9 - 4.9);            // 以下略
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>Graph&lt;<span class="kwrd">string</span>&gt; highway = <span class="kwrd">new</span> Graph&lt;<span class="kwrd">string</span>&gt;(<span class="kwrd">false</span>);
</pre>
<pre>
<span class="lnum">   2:  </span>highway.AddVertex(<span class="str">&quot;基金&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>highway.AddVertex(<span class="str">&quot;七堵收費站&quot;</span>);
</pre>
<pre>
<span class="lnum">   4:  </span>highway.AddVertex(<span class="str">&quot;汐止系統&quot;</span>);
</pre>
<pre class="alt">
<span class="lnum">   5:  </span><span class="rem">// 以下略</span>
</pre>
<pre>
<span class="lnum">   6:  </span>highway.AddEdge(
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    highway.GetVertex(<span class="str">&quot;基金&quot;</span>), 
</pre>
<pre>
<span class="lnum">   8:  </span>    highway.GetVertex(<span class="str">&quot;七堵收費站&quot;</span>),
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    4.9 - 0);
</pre>
<pre>
<span class="lnum">  10:  </span>highway.AddEdge(
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    highway.GetVertex(<span class="str">&quot;七堵收費站&quot;</span>), 
</pre>
<pre>
<span class="lnum">  12:  </span>    highway.GetVertex(<span class="str">&quot;汐止系統&quot;</span>), 
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    10.9 - 4.9);
</pre>
<pre>
<span class="lnum">  14:  </span><span class="rem">// 以下略</span>
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
都是我一行一行慢慢打的 @_@... 地圖建完後，怎麼找出兩點之間的最短路逕? 只要這段...
</p>
<div>
<strong>找出 [機場端] 到 [基金] 的最短路逕</strong><span class="copycode">[copy code]</span> 
<div style="display: none">
<pre style="display: none">
            Graph&lt;string&gt; result = GraphAlgorithms.DijkstrasAlgorithm&lt;string&gt;(                highway,                highway.GetVertex(&quot;機場端&quot;));            Console.WriteLine(result.GetVertex(&quot;基金&quot;).Weight);
</pre>
</div>
<div style="border: 1px solid">
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span>Graph&lt;<span class="kwrd">string</span>&gt; result = GraphAlgorithms.DijkstrasAlgorithm&lt;<span class="kwrd">string</span>&gt;(
</pre>
<pre>
<span class="lnum">   2:  </span>    highway,
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>    highway.GetVertex(<span class="str">&quot;機場端&quot;</span>));
</pre>
<pre>
<span class="lnum">   4:  </span>Console.WriteLine(result.GetVertex(<span class="str">&quot;基金&quot;</span>).Weight);
</pre>
</div>
</div>
<!-- end of code area -->
</div>
<p>
&nbsp;
</p>
<p>
因為每個路段的 weight 我是填上油錢 (一公里兩塊錢)，所以印出來的就是兩端要花的油錢。那麼被我們忽略掉的收費站怎麼算? 因為圖型的 MODEL 裡，點是沒有 weight 的，因此我們必需把路段改成有方向的，也就是南下及北上分別算不同的路段 (edge), 同時把過路費加到 weight 裡。
</p>
<p>
&nbsp;
</p>
<p>
這個演算法的實作有個小缺點，它只傳回結果，沒把過程傳回來...，所以我們只能算出要花多少錢，沒有很簡單的方法拿到該怎麼走。不過好在它有附原始碼，需要的人就拿來改一下吧 :D，多傳個 delegate 或是用它定義的 IVisitor 讓它走完所有的點，你就可以取得沿路的資訊了。
</p>
<p>
&nbsp;
</p>
<p>
這篇主要是介紹這個意外發現的LIB，就不深入的挖這些細節了，有興趣的讀者們可以自己試看看，不難的。見識到這類演算法函式庫的威力了嗎? 用起來一點都不難，不過要知道怎麼用還真的要好好研究一下...。整套 NGenerics 都是這類的東西，有興趣的讀者好好研究吧 :D
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2008-10-14 02:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-14 02:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ngenerics-datastructure-algorithm-library]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[wsc0918]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wsc0918@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-14 08:32:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-14 08:32:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[原以為Open Source是Java專有的，沒想到.NET也是有的，這樣讓我更有動力學.NET啦～
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[吳小明]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[u9089000@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-14 10:44:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-14 10:44:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我想Prim's Algortihm也是找 minimal spanning tree的吧
http://en.wikipedia.org/wiki/Prim-Jarnik_algorithm
他和Dijkstras很像，但不太相同
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>98</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-14 10:48:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-14 10:48:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你說的沒錯，我沒看仔細 :P
修正回來了，感謝!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>終於升速了!</title>
		<link>http://columns.chicken-house.net/2008/10/10/%e7%b5%82%e6%96%bc%e5%8d%87%e9%80%9f%e4%ba%86/</link>
		<pubDate>Fri, 10 Oct 2008 03:49:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/10/e7b582e696bce58d87e9809fe4ba86!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>都什麼年代了，台北市宣稱光纖覆蓋率要達到八成，結果我家這邊到現在還是沒 FTTB 可以用... 決定把龜了很久的 ADSL 從 2M/256K 升級到 8M/640K ... 上傳速度提升了 2.5 倍，多少應該有快一點吧?</p> <p>雖然填單變更速率的過程碰到一堆鳥狀況，不過總算升速成功了 :D</p> <p>特此留念</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2008-10-10 03:49:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-10 03:49:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b5%82%e6%96%bc%e5%8d%87%e9%80%9f%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>99</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kevinfan.abyss@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-11 16:24:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-11 16:24:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[恭賀升速成功。

家有FTTB的人留]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-11 17:50:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-11 17:50:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[炫耀文!! :@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-19 00:16:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-19 00:16:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[祝贺！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>該如何學好 &quot;寫程式&quot; #3. 進階應用 - 資料結構 + 問題分析</title>
		<link>http://columns.chicken-house.net/2008/10/08/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-3-%e9%80%b2%e9%9a%8e%e6%87%89%e7%94%a8-%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b-%e5%95%8f%e9%a1%8c%e5%88%86%e6%9e%90/</link>
		<pubDate>Wed, 08 Oct 2008 03:32:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/08/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-3-e980b2e99a8ee68789e794a8-e8b387e69699e7b590e6a78b-2b-e5958fe9a18ce58886e69e90.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[接續前文:
<ol>
	<li><a href="/post/GoodProgrammer1.aspx">該如何學好 "寫程式" ??</a></li>
	<li><a href="/post/e8a9b2e5a682e4bd95e5adb8e5a5bd-e5afabe7a88be5bc8f-2-e782bae4bb80e9babc-programmer-e8a9b2e5adb8e8b387e69699e7b590e6a78b-.aspx">該如何學好 "寫程式" #2. 為什麼 programmer 該學資料結構 ??</a></li>
</ol>
這類文章還真不好寫，想了好幾天，才擠的出一篇文章。第一篇已經講了一堆教條了，第二篇也舉了簡單的例子，說明挑對資料結構的重要性，接下來這篇會把主題放在更複雜的例子上，到底那些地方該注重技術，而那些地方該把重點放在基礎的資料結構及演算法身上。

這次不囉唆半天了，先來回顧一下第一篇，我出的題目是這樣:

<span style="color: #008000;"><em><strong>以台灣高速公路為題 (中山高、北二高、國道二號)，你有辦法寫程式，讓使用者指定起點跟終點的交流道，然後替它找出建議的路線嗎? (把延路經過的交流到跟收費站列出來就好)。</strong></em></span>

舉這個題目，是怕前面的例子被嫌太簡單，一點都不能符合實際的情況。沒錯，絕大部份的情況都不會像上一篇的範例一樣，放一堆資料在記憶體裡 SEARCH 出來就了事那麼簡單。高速公路的問題核心一樣是在資料結構，不過這次多了必需自己實作的演算法。

跟我一樣五六年級的人，都聽過這句話吧，PASCAL 之父 (Niklaus Wirth) 講的這句名言: "<strong>程式 = 資料結構+演算法</strong>"，沒錯，這個範例就需要用到這兩種能力才搞的定。依我的看法，解決這問題有三道關卡要闖:
<ol>
	<li><span style="color: #ff0000;">你該用什麼樣的方式來儲存這樣的地圖資訊</span>?
這裡會用到的知識，是資料結構裡的 GRAPH，典型的方法就是分成點跟線來記錄..</li>
	<li><span style="color: #ff0000;">你該用什麼樣的演算法，找出你要的最佳路線</span>?
最基本的是要找出所有可走的路線 (走迷宮)，再找出其中最便宜的一條路。</li>
	<li><span style="color: #ff0000;">你的程式的結構該如何設計</span>?
這部份跟課本比較無關，講的是你對程式語言及可用的函式庫/工具的掌握，還有架構等等。</li>
</ol>
這三道關卡，要依序破解，前一關的決定會影響到後面的解決方式。先從資料來說，連該怎麼記錄這些資料，就別想解題了。最基本的 GRAPH 需要點 (NODE) 及點跟點之間的連線 (LINK) 組成。很直覺的就可以定出這兩個類別:
<div><strong>描述交流道/收費站的 class</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true">public class Node
{
    public string Name = null;
    public int TollFee = 0;
    public List&lt;Link&gt; Links = new List&lt;Link&gt;();
    public Node(string name, int tollFee)
    {
        this.Name = name;
        this.TollFee = tollFee;
    }
}</pre>
&nbsp;

</div>
<div><strong>描述兩個點之間的路段 (Link) 的 class</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true ">public class Link
{
    public double Distance = 0D;
    public Node FromNode = null;
    public Node ToNode = null;
    public RoadNameEnum Road;
    public Link(Node from, Node to, double distance, RoadNameEnum road)
    {
        this.FromNode = from;
        this.ToNode = to;
        this.Distance = distance;
        this.Road = road;
    }
    public enum RoadNameEnum
    {
        Highway1,
        Highway2,
        Highway3
    }
}</pre>
&nbsp;

</div>
<div></div>
<div></div>
<div></div>
好像沒什麼特別的，每個點除了搭配 List&lt;Link&gt; 來記錄所有經過它的路段 (Node.Links) 之外，也標上了這個點的名字 (Node.Name)，跟過路費 (Node.TollFee)。而每個路段則記錄了它兩個端點 (Link.FromNode, Link.ToNode) 之外，也額外記錄了路段的距離 (Node.Distance)，及它是屬於那一條高速公路的資訊 (Link.Road)。

接下來就要載入資料了。我偷個懶，只記中山高跟北二高新竹以北的部份，還有機場國道。實在是沒力氣把全部的路段打完... 哈哈。資料來源是參考<a href="http://www.freeway.gov.tw/way_net.aspx">國道高速公路局</a>的網頁。以下是 Map 類別的部份程式碼，及載入部份地圖資訊的程式碼:
<div><strong>MAP</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true ">public class Map
{
    private Dictionary&lt;string, Node&gt; _nodes = new Dictionary&lt;string, Node&gt;();
    public Map()
    {
        //
        //  construct / load map data
        //
        this.AddNode("基金", 0);
        this.AddNode("七堵收費站", 40);
        this.AddNode("汐止系統", 0);
        this.AddNode("樹林收費站", 40);
        // 略
        this.AddLink("基金", "七堵收費站", 4.9-0, Link.RoadNameEnum.Highway3);
        this.AddLink("七堵收費站", "汐止系統", 10.9-4.9, Link.RoadNameEnum.Highway3);
        // 略
    }
    private void AddNode(string name, int tollFee)
    {
        Node n = new Node(name, tollFee);
        this._nodes.Add(name, n);
    }
    private void AddLink(string n1, string n2, double distance, Link.RoadNameEnum road)
    {
        Node node1 = this._nodes[n1];
        Node node2 = this._nodes[n2];
        Link link = new Link(this._nodes[n1], this._nodes[n2], distance, road);
        node1.Links.Add(link);
        node2.Links.Add(link);
    }
    public Link FindLink(string name1, string name2)
    {
        foreach (Link way in this._nodes[name1].Links)
        {
            if (way.GetOtherNodeName(name1) == name2) return way;
        }
        return null;
    }
}</pre>
&nbsp;

</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>第一步準備動作完成了。接下來就是想辦法在 class Map 裡加上 FindBestWay( ) method, 來找出最佳路線。在這邊先定義一下什麼叫最佳路線。一般不外乎是找最短的路線，或是通過最少的收費站，我們來點實際的，以油價每公升 30 元為例，車子就假設一公升可以跑 15 公里好了，因此每跑一公里要花兩塊錢。最佳路逕就是花的油錢跟過路費最少的為準。</div>
沒唸過資料結構的朋友們，現在大概卡住了。該怎樣找出最佳的路逕? 電腦什麼不行，就是計算很快，這種最佳解的問題，通常都可以用暴力法解決。只要把所有的路線找出來，然後找出總花費最便宜的那個路線就好。雖然資料結構的書通常會舉其它更有效率的演算法，其中一個演算法的名字我不記得了，大致的步驟是由起點開始往外擴散，先算走一步可以走到那些點，再往外推，如果到同一點有兩條以上的路線，就保留便宜的那個... 直到推到終點為止。

不過這方法寫起來比較麻煩，我挑另一個簡單一點的 (相對的比較沒效率)，就是搭配 STACK 走迷宮的方法，把所有路線試過一次，找出所有能從起點到終點的路線，再從其中挑出最經濟的。

為什麼我會挑這個? 只是因為它的邏輯比較簡單易懂，畢竟這個程式不是在比賽，要去拼最快的話就不用了.. 哈哈。資料結構在講到 TREE 一定會講到怎麼樣把 TREE 的每個節點都走一次的方法，就是要搭配 STACK，把走過的點都 PUSH 進去，當作麵包屑來用，等走到沒路了就 POP 退回上一步，改走第二個分岔，直到所有的點都走完為止。

接下來就要把 GRAPH 切掉幾條線，把它想像成長的不大整齊的 TREE，就從起點開始走下去。因為 GRAPH 不像 TREE，有可能會走回原點，因此我們在走的過程中需要跳過已經走過的點，免的最後都在兜圈子繞不出去。

這邊我搭配了遞迴 (RECURSIVE) 的方式來簡化問題。其實就邏輯來說，遞迴幾乎可以跟 STACK 劃上等號。因為遞迴的過程中也是有 STACK 在輔助 (就是 CALL STACK)。不過我偏愛 RECURSIVE，因為藉著 CALL STACK 加上 FUNCTION CALL 傳遞的參數，可以自動幫我處理不少 push / pop, 及替每個階段保存暫時的資料，程式看起來會簡單很多。
<div><strong>找出最經濟路線的程式碼</strong><span class="copycode">[copy code]</span></div>
<div>
<pre class="lang:default decode:true ">   1:  private double _cost = 0;
   2:  private string[] _best_path = null;
   3:  private Stack&lt;string&gt; _path = null;
   4:  private void Search(string startName, string endName, double current_cost)
   5:  {
   6:      this._path.Push(startName);
   7:      if (startName == endName)
   8:      {
   9:          if (this._cost == 0 || current_cost &lt; this._cost)
  10:          {
  11:              this._cost = current_cost;
  12:              this._best_path = this._path.ToArray();
  13:          }
  14:          this._path.Pop();
  15:          return;
  16:      }
  17:      foreach (Link way in this._nodes[startName].Links)
  18:      {
  19:          string next = way.GetOtherNodeName(startName);
  20:          if (this._path.Contains(next) == false)
  21:          {
  22:              this.Search(
  23:                  next,
  24:                  endName,
  25:                  current_cost + this._nodes[next].TollFee + way.Distance * 3);
  26:          }
  27:      }
  28:      this._path.Pop();
  29:  }
  30:  public string[] FindBestPath(string startName, string endName, out double cost)
  31:  {
  32:      try
  33:      {
  34:          this._cost = 0;
  35:          this._path = new Stack&lt;string&gt;();
  36:          this.Search(startName, endName, 0);
  37:          cost = this._cost;
  38:          return this._best_path;
  39:      }
  40:      finally
  41:      {
  42:          this._cost = 0;
  43:          this._path = null;
  44:      }
  45:  }</pre>
先來看看結果。主程式是要找出 "機場端" 跟 "基金" 交流道之間的最經濟路線，看看程式跑出來的結果:

</div>
<img style="border: 0px;" src="/wp-content/be-files/WindowsLiveWriter/3_13ACD/image_3.png" alt="image" width="407" height="206" border="0" />

不相信的人就拿紙筆畫一畫算一算吧! 應該是沒算錯啦。這個例子我就不像上一個例子，放上千萬個節點來拼拼看速度到底多快了，因為我沒有現成的資料啊，這東西要產生假資料也麻煩的多，就略過這個步驟了。不過我們倒是可以回過頭來看看，目前這段程式有什麼可以改進的?

首先，在資料數量遽增的情況下，演算法的改善一定是第一要務。你會發現程式碼從五行變成三行，或是從 100ms 進步到 90ms, 這種程度的改善相較之下都是微不足道的，一來這種改善程度通常是固定的，因為演算法沒有變，整體來說可能只是從 100sec 進步到 90sec，我是客戶的話，還不如換顆快一點的 CPU 就好了...。但是演算法的改進，則是讓你迴圈的次數變少，或是比較的次數變少等等，改變幅度通常是以倍數來算，隨便就提升好幾倍的效能。這就不是升級 CPU 可以解決的問題...。還記得上個例子嗎? 從 List 換成 SortedList, 搜尋速度差了 6000 倍... 你要花多少錢才買的到運算速度快 6000 倍的電腦?

除了演算法之外，程式也是有其它地方可以改善的。看到第 20 行程式碼了嗎? 就是找出下一步是不是已經走過了的程式碼:

<span style="color: #008000;"><span class="kwrd">if</span> (<span class="kwrd">this</span>._path.Contains(next) == <span class="kwrd">false</span>)</span>

其中 _path 是 Stack&lt;string&gt; 物件，養成好習慣，順手查查它的時間複雜度吧，在 MSDN 裡是這麼寫的:

<a title="http://msdn.microsoft.com/en-us/library/xeaek790.aspx" href="http://msdn.microsoft.com/en-us/library/xeaek790.aspx">http://msdn.microsoft.com/en-us/library/xeaek790.aspx</a>

<em><span style="color: #0000ff;">This method performs a linear search; therefore, this method is an <strong><span style="color: #ff0000;">O(n)</span></strong> operation, where n is </span></em><a href="http://msdn.microsoft.com/en-us/library/th379yyz.aspx"><em><span style="color: #0000ff;">Count</span></em></a><em><span style="color: #0000ff;">. </span></em>

看起來它的效果跟 List 一樣，搜尋都很慢，有幾筆就要比對幾次。還記得上一篇提過什麼方法? 如果排序過的資料，要花的時間是 O(log n), 如果是採用 HashTable 結構的，則只要 O(1)... 再把 MSDN 拿出來翻翻看，發現除了 Dictionary&lt;TKey, TValue&gt; 之外，還有另一個更適合的 HashSet (.NET 3.5 only):

<a title="http://msdn.microsoft.com/en-us/library/bb359438.aspx" href="http://msdn.microsoft.com/en-us/library/bb359438.aspx">http://msdn.microsoft.com/en-us/library/bb359438.aspx</a>

<em><span style="color: #0000ff;">The HashSet&lt;(Of &lt;(T&gt;)&gt;) class provides high performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order. </span></em>

<em><span style="color: #0000ff;">The capacity of a HashSet&lt;(Of &lt;(T&gt;)&gt;) object is the number of elements that the object can hold. A HashSet&lt;(Of &lt;(T&gt;)&gt;) object's capacity automatically increases as elements are added to the object.</span></em>

馬上看一下，新增一筆及找出某一筆需要的時間複雜度:

&nbsp;

<a href="http://msdn.microsoft.com/en-us/library/bb353005.aspx">HashSet&lt;T&gt;.Add( T )</a>:
<em><span style="color: #0000ff;">If </span></em><a href="http://msdn.microsoft.com/en-us/library/bb355720.aspx"><em><span style="color: #0000ff;">Count</span></em></a><em><span style="color: #0000ff;"> is less than the capacity of the internal array, this method is an O(1) operation. If the </span></em><a href="http://msdn.microsoft.com/en-us/library/bb359438.aspx"><em><span style="color: #0000ff;">HashSet&lt;(Of &lt;(T&gt;)&gt;)</span></em></a><em><span style="color: #0000ff;"> object must be resized, this method becomes an <strong><span style="color: #ff0000;">O(n)</span></strong> operation, where n is </span></em><a href="http://msdn.microsoft.com/en-us/library/bb355720.aspx"><em><span style="color: #0000ff;">Count</span></em></a><em><span style="color: #0000ff;">.</span></em>

&nbsp;

<a href="http://msdn.microsoft.com/en-us/library/bb356440.aspx">HashSet&lt;T&gt;.Contains( T )</a>:
<em><span style="color: #0000ff;">This method is an <strong><span style="color: #ff0000;">O(1)</span></strong> operation.</span></em>

&nbsp;

看起來沒什麼好挑的了。把資料塞進去跟找出來的時間都是固定的，當地圖的節點夠多，你要找的目標夠遠，多花一倍的空間另外放一份 HashSet 絕對是值得的。也因為 HashSet 有這樣的特性，因此它特別適合拿來作集合的運算。比如兩堆資料要找出交集 (Intersection)，聯集 (Union) 等等都很方便。既然都講了就順手查看看:

<a href="http://msdn.microsoft.com/en-us/library/bb293080.aspx">HashSet&lt;T&gt;.IntersectWith(Hash&lt;T&gt;)</a>:
<span style="color: #0000ff;"><em>If the collection represented by the other parameter is a </em></span><a href="http://msdn.microsoft.com/en-us/library/bb359438.aspx"><span style="color: #0000ff;"><em>HashSet&lt;(Of &lt;(T&gt;)&gt;)</em></span></a><span style="color: #0000ff;"><em> collection with the same equality comparer as the current </em></span><a href="http://msdn.microsoft.com/en-us/library/bb359438.aspx"><span style="color: #0000ff;"><em>HashSet&lt;(Of &lt;(T&gt;)&gt;)</em></span></a><span style="color: #0000ff;"><em> object, this method is an <strong><span style="color: #ff0000;">O(n)</span></strong> operation. Otherwise, this method is an <strong><span style="color: #ff0000;">O(n + m)</span></strong> operation, where n is </em></span><a href="http://msdn.microsoft.com/en-us/library/bb355720.aspx"><span style="color: #0000ff;"><em>Count</em></span></a><span style="color: #0000ff;"><em> and m is the number of elements in other.</em></span>

&nbsp;

&nbsp;

&nbsp;

&nbsp;

---------------------------

本系列文章 [該如何學好 "寫程式"] 第一部份就先到這裡。在這裡作個小結。既然第一部份我是在探討要成為一個好的 "programmer" 該具備的能力，我自然是把重點放在怎樣把你拿到的需求，忠實且正確的寫成 code 為主。這時邏輯及觀念，還有資料結構等等基礎的知識是我認為的重點。也許有些讀者很不以為然，我猜想的大概會有這幾個理由:
<ul>
	<li>我不會這些，程式還不一樣寫的好好的?</li>
	<li>都什麼年代了，現在講求的是程式架構!</li>
	<li>物件導向不是都講求封裝? 幹嘛還要去挖這些?</li>
	<li>現在資料都放資料庫了，還學這幹嘛?</li>
	<li>...</li>
</ul>
其實這些論點也沒錯，不過上一篇可以看到，不懂得這些基礎的話，現成的物件給你挑也不見得知道要挑那一個，更慘的是連之間的差別都不曉得。還有，資料結構通常包含兩個層面，一個是怎麼 "描述" 你的資料? 另一個是怎麼去應用你的資料? 以這題為例，如果你都不曉得要把地圖拆成點跟線來記錄，你會知道 TABLE 該怎麼建嗎?

另外，很多資料庫上面效能的問題，也都跟資料結構有關。就跟上一篇該挑那一種 Collection 一樣，資料庫也可以把它當成一個更巨大，功能更多的 Collection 來看待，因此能不能有效的利用它，資料結構也是很重要的觀念之一。

再來講到架構的部份，我覺的<a href="http://www.javaworld.com.tw/roller/qing/">這位網友在他的 blog</a> (我不認得他本人，只是常看他文章) 發表的這兩篇文章很不錯:

1. <a href="http://www.javaworld.com.tw/roller/qing/entry/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E7%9A%84%E5%85%A9%E5%80%8B%E8%A7%80%E9%BB%9E_1_2">程式設計的兩個觀點 (1/2)</a>
2. <a href="http://www.javaworld.com.tw/roller/qing/entry/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E7%9A%84%E5%85%A9%E5%80%8B%E8%A7%80%E9%BB%9E_2_2">程式設計的兩個觀點 (2/2)</a>

他這兩篇講的就是兩個極端，一個講求效率跟演算法，另一個則是講求架構跟程式的美感。而這兩者通常不容易兼顧。以我來說我比較偏後者，效能的部份，我會捨棄一些小地方以換來程式碼的可擴充性，可讀性，架構等等。不過我不會放棄的是資料結構跟演算法的正確性，就如同前面寫的例子一樣，程式碼有沒有最佳化，差的是 xx % 的效能，但是演算法跟資料結構的差距，則是好幾倍。我一向認為不會跑就要學飛，遲早會跌下來的，所以才會寫這三篇針對 programmer 的文章。

接下來，就換到 software engineer 了。這個階段就不只是把程式碼 "寫對" 或是 "寫出來" 而以，而是要開始考慮怎樣才 "寫的好" 了。有興趣的讀者們請耐心等待續集 :D

&nbsp;

--
範例程式下載: <a href="/wp-content/be-files/Taiwan-Highway.zip">Taiwan-Highway.zip</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2008-10-08 03:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-08 03:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-3-%e9%80%b2%e9%9a%8e%e6%87%89%e7%94%a8-%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b-%e5%95%8f%e9%a1%8c%e5%88%86%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="good_programmer"><![CDATA[系列文章: 如何學好寫程式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenny2061@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-10 14:46:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-10 14:46:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇的深度不淺，許多地方都讓需要好好的思考一番。
拜讀您的文章有如看一本好書，感謝您的分享，也期待您的續作。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-13 17:57:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-13 17:57:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇東西比較多，都寫寫不完 (打字好累 @_@)
不打感覺又跳的太快，我只好挑重點說明，各位看的時後就辛苦一點，仔細想想就想的通了。

謝謝鼓勵，最近比較忙，不過我還是會努力一個禮拜生一篇出來，敬請期待 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>得獎了 :D~~~</title>
		<link>http://columns.chicken-house.net/2008/10/01/%e5%be%97%e7%8d%8e%e4%ba%86-d/</link>
		<pubDate>Wed, 01 Oct 2008 22:43:22 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2008/10/01/e5be97e78d8ee4ba86-D7e7e7e.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&nbsp;<img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="500" alt="IMG_9142" src="/wp-content/be-files/WindowsLiveWriter/D_12C2/IMG_9142_1.jpg" width="660" border="0"> </p> <p>&nbsp;</p> <p>雖然<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/09/23/vsts-winner.aspx">上禮拜就知道了</a>，不過<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/07/21/win-a-vsts-2008.aspx">獎品</a>還沒拿到，當然要忍一下再發表... 哈哈!</p> <p>花了幾個晚上拼了<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/09/02/coding-for-fun-contest-start.aspx">猜數字的程式</a>，運氣不錯，順利拼到冠軍了。除了寫程式，把心得貼到 BLOG 也花了不少時間.. 主要貼的這四篇:</p> <ol> <li><a href="http://columns.chicken-house.net/post/Thread-Sync-1-e6a682e5bfb5e7af87-e5a682e4bd95e58c96e8a2abe58b95e782bae4b8bbe58b95.aspx">Thread Sync #1. 概念篇 - 如何化被動為主動?</a>  <li><a href="http://columns.chicken-house.net/post/Thread-Sync-2-e5afa6e4bd9ce7af87-e4ba92e79bb8e7ad89e5be85e79a84e585a9e5808be59fb7e8a18ce7b792.aspx">Thread Sync #2. 實作篇 - 互相等待的兩個執行緒</a>  <li><a href="http://columns.chicken-house.net/post/C-yield-return-1-How-It-Work-.aspx">[C#: yield return] #1. How It Work ?</a>  <li><a href="http://columns.chicken-house.net/post/YieldReturn2_ThreadSyncReplacement.aspx">[C# yield return] #2. 另類的應用 - Thread Sync 替代方案</a></li></ol> <p>&nbsp;</p> <p>蠻有意思的比賽。雖然過去也參加過不少比賽，運氣不錯也騙到一些獎品...，不過這次倒是寫的最起勁，因為其它比賽都是 "廠商" 讚助，不是 Microsoft 就是 Cisco ... 都要想儘辦法把他們的技術發揮出來才能得獎，老實說寫起來跟工作差不多，總是要滿足那些 "市場" 的需求。</p> <p>這次題目老實說很 "不實用"，純粹是比 code 誰寫的又快又好而已，不過還蠻合我胃口的 :D。正好這次碰到誰呼叫誰這種結構上的問題，就是上面四篇文章一直在討論的 GameHost 為主還是 Player 為主的思考方式，解決這問題花的工夫還比較多。想到這兩套解決方式，我覺的收穫是蠻值得的，至少我多學到兩種不同的設計模式。</p> <p>最後當然要感謝一下<a href="http://blog.darkthread.net/">主辦人</a>，下班專程騎車過來頒獎... 哈哈，獎品對我還蠻實用的，算是大獎一枚! 正好是我需要的東西，看來可以開始物色新硬碟，還有要準備來更新我的 SERVER 了 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2008-10-01 22:43:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-01 22:43:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%97%e7%8d%8e%e4%ba%86-d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-02 09:28:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-02 09:28:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[很高興看到執行緒的方式贏得勝利!
等有空再來好好看看這次你是怎麼運用的]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-02 11:30:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-02 11:30:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[謝謝 :D

不過執行緒的版本花太多時間在 wait, 最後送出的程式碼是用 yield return 換掉 thread sync.
也算是執行緒觀念的應用啦..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>106</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-02 13:11:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-02 13:11:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒拍到頒獎典禮，扼腕中!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zeng.stephen@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-03 23:25:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-03 23:25:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[恭喜楼主，你儿子很帅，很喜欢你的blog！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>升級到 BlogEngine.NET 1.6.0.0 了!</title>
		<link>http://columns.chicken-house.net/2010/02/19/%e5%8d%87%e7%b4%9a%e5%88%b0-blogengine-net-1-6-0-0-%e4%ba%86/</link>
		<pubDate>Fri, 19 Feb 2010 04:05:21 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/02/19/e58d87e7b49ae588b0-BlogEngineNET-1600-e4ba86!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>1.6.0.0 出來一陣子了，不過到過年才有空升級... 主要的原因只有一個，就是最近 spam comments 實在太多了 =_=，新版對於這類問題的處理比較像樣一點..</p>  <p>其它改進還有 nested comments 跟其它一堆改進，就不一一列出來了，有興趣的人可到<a href="http://www.codeplex.com/blogengine">官方網站</a>去看看。</p>  <p>試了一下，升級後沒啥大問題，除了 CSS 有點走樣之外... 如果各位有發現什麼地方漏掉了，請再通知我 :D</p>  <p>祝大家新年快樂 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2010-02-19 04:05:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-19 04:05:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%87%e7%b4%9a%e5%88%b0-blogengine-net-1-6-0-0-%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Roger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Roger@cetdomain.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-17 06:29:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-17 06:29:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好～我想請教一下，我上週剛剛架好BlogEngine.NET 1.6，但是它內建的表情圖示、顯示HTML Editor等等需要pop-up的功能統統都不正常，pop-up會出來，可是裡面該有的內容都沒有，請問這是出了什麼問題呢？我該放的檔案都有放，裡面的js檔案看起來也正常....]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[設計案例] 清除Cache物件 #2. Create Custom CacheDependency</title>
		<link>http://columns.chicken-house.net/2009/12/19/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e6%b8%85%e9%99%a4cache%e7%89%a9%e4%bb%b6-2-create-custom-cachedependency/</link>
		<pubDate>Sat, 19 Dec 2009 15:47:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/12/19/e8a8ade8a888e6a188e4be8b-e6b885e999a4Cachee789a9e4bbb6-2-Create-Custom-CacheDependency.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[上一篇廢話了這麼多，其實重點只有一個，我這次打算利用 CacheDependency 的機制，只要一聲令下，我想移除的 cache item 就會因為 CacheDependency 的關係自動失效，而不用很辛苦的拿著 cache key 一個一個移除。

我的想法是用 tags 的概念，建立起一套靠某個 tag 就能對應到一組 cache item，然後將它移除。開始之前先來想像一下 code 寫好長什麼樣子:
<div>

<b>透過 tags 來控制 cache items 的範例程式</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre class="">        static void Main(string[] args)
        {
            string[] urls = new string[] {
                "http://columns.chicken-house.net/",
                // 共 50 組網址... 略
            };

            foreach (string url in urls)
            {
                DownloadData(new Uri(url));
            }

            Console.ReadLine();
            TaggingCacheDependency.DependencyDispose("funp.com");
            Console.ReadLine();
        }

        private static void Info(string key, object value, CacheItemRemovedReason reason)
        {
                Console.WriteLine("Remove: {0}", key);
        }

        private static byte[] DownloadData(Uri sourceURL)
        {
            byte[] buffer = (byte[])HttpRuntime.Cache[sourceURL.ToString()];

            if (buffer == null)
            {
                // 直接到指定網址下載。略...
                buffer = null;

                HttpRuntime.Cache.Add(
                    sourceURL.ToString(),
                    buffer,
                    new TaggingCacheDependency(sourceURL.Host, sourceURL.Scheme),
                    Cache.NoAbsoluteExpiration,
                    TimeSpan.FromSeconds(600),
                    CacheItemPriority.NotRemovable,
                    Info);
            }

            return buffer;
        }
    }
</pre>
<!-- end of code area -->

</div>
&nbsp;

&nbsp;

這段 sample code 做的事很簡單，程式準備了 50 個網址清單，用 for-loop 一個一個下載。下載的 method: DownloadData(Uri sourceURL) 會先檢查 cache 是否已經有資料，沒有才真正下載 (不過下載的細節不是本篇要講的，所以就直接略過了...)。

而主程式的最後一行，則是想要把指定網站 ( funp.com ) 下載的所有資料，都從 cache 移除。為了方便觀看程式結果，我特地加上了 callback method, 當 cache item 被移除時, 會在畫面顯示資訊:

<img style="display: inline; border: 0px;" title="image" src="/wp-content/be-files/WindowsLiveWriter/Cache2.CreateCustomCacheDependency/624B07FE/image.png" alt="image" width="961" height="447" border="0" />

由執行結果來看，果然被移出 cache 的都是來在 funp.com 的網址... 接著來看看程式碼中出現的 TaggingCacheDependecny 是怎麼實作的。相關的 code 如下:
<div><b>TaggingCacheDependency 的實作</b>
<span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>    public class TaggingCacheDependency : CacheDependency
    {
        private static Dictionary&lt;string, List&lt;TaggingCacheDependency&gt;&gt; _lists = new Dictionary&lt;string, List&lt;TaggingCacheDependency&gt;&gt;();

        public TaggingCacheDependency(params string[] tags)
        {
            foreach (string tag in tags)
            {
                if (_lists.ContainsKey(tag) == false)
                {
                    _lists.Add(tag, new List&lt;TaggingCacheDependency&gt;());
                }
                _lists[tag].Add(this);
            }
            this.SetUtcLastModified(DateTime.MinValue);
            this.FinishInit();
        }

        public static void DependencyDispose(string tag)
        {
            if (_lists.ContainsKey(tag) == true)
            {
                foreach (TaggingCacheDependency tcd in _lists[tag])
                {
                    tcd.NotifyDependencyChanged(null, EventArgs.Empty);
                }
                _lists[tag].Clear();
                _lists.Remove(tag);
            }
        }
    }</pre>
<!-- end of code area -->

</div>
&nbsp;

30行不到... 其實程式很簡單，TaggingCacheDependency 繼承自 CacheDependency, 額外宣告一個靜態的 Dictionary&lt;string, List&lt;TaggingCacheDependency&gt;&gt; 來處理各個標簽及 TaggingCacheDependency 的關係，剩下的就沒什麼了。呼叫 DependencyDispose( ) 就可以通知 .NET Cache 機制，將相關的 cache item 移除。

用法很簡單，當你要把任何物件放進 cache 時，只要用 TaggingCacheDependency 物件來標示它的 tag:
<div>

<b>把物件加進 Cache, 配上 TaggingCacheDependency ...</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>                HttpRuntime.Cache.Add(
                    sourceURL.ToString(),
                    buffer,
                    new TaggingCacheDependency(sourceURL.Host, sourceURL.Scheme),
                    Cache.NoAbsoluteExpiration,
                    TimeSpan.FromSeconds(600),
                    CacheItemPriority.NotRemovable,
                    Info);</pre>
<!-- end of code area -->

</div>
在這個例子裡 (line 4), 直接在 TaggingCacheDependency 物件的 constructor 上直接標上 tags, 在此例是直接把網址的 hostname, scheme 兩個部份當作 tag, 未來就可以依照這兩種資訊直接讓 cache 裡的相關物件失效。

而要下令讓 Cache 內有標上某個 tag 的 cache item 失效，只要這行:

&nbsp;
<div>

<b>將標為 "funp.com" 的 cache item 設為失效的 cache item</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>            TaggingCacheDependency.DependencyDispose("funp.com");</pre>
<!-- end of code area -->

</div>
&nbsp;

結果就會如同上面的程式範例一樣，還留在 cache 的該網址下載資料，在這一瞬間通通都會被清掉...

&nbsp;

用這種方式，是不是比拿到 key 再去呼叫 Cache.Remove( key ) 的方式簡單多了呢? 同時也能夠更快速的處理複雜的移除機制。其實運用 tagging 的方式只是一例，需要的話你也可以設計合適的 CacheDependency 類別。

以下是本篇文章的兩個附加參考檔案:
<div id="scid:FF7EC618-8FBE-49a5-B908-2339AF2ABCDF:4f0bfb95-1fe5-46d6-b535-705e4f48b241" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div>Download File - <a href="http://columns.chicken-house.net/wp-content/be-files/WindowsLiveWriter/Cache2.CreateCustomCacheDependency/192B4E9C/tmp22EC.zip" target="_self">URL清單</a></div>
</div>
&nbsp;
<div id="scid:FF7EC618-8FBE-49a5-B908-2339AF2ABCDF:e141b4ea-31f5-4ed3-86b0-958acd691fdb" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div>Download File - <a href="http://columns.chicken-house.net/wp-content/be-files/WindowsLiveWriter/Cache2.CreateCustomCacheDependency/32271EE1/tmpB405.zip" target="_self">Visual Studio 2008 Project</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2009-12-19 23:47:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-19 15:47:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e6%b8%85%e9%99%a4cache%e7%89%a9%e4%bb%b6-2-create-custom-cachedependency]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] 清除Cache物件 #1. 問題與作法</title>
		<link>http://columns.chicken-house.net/2009/12/19/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e6%b8%85%e9%99%a4cache%e7%89%a9%e4%bb%b6-1-%e5%95%8f%e9%a1%8c%e8%88%87%e4%bd%9c%e6%b3%95/</link>
		<pubDate>Fri, 18 Dec 2009 20:29:29 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/12/19/e8a8ade8a888e6a188e4be8b-e6b885e999a4Cachee789a9e4bbb6-1-e5958fe9a18ce88887e4bd9ce6b395.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>每次心裡有什麼好點子想寫出來時，第一關就卡在想不出個好標題... 想來想去的標題，怎麼看就是既不顯眼又不聳動... 果然是個老實的工程師性格 =_= ...&#160; 這次要講的，是 .NET HttpRuntime 裡提供的 Cache 物件的操作心得。這個東西我想不用我多作介紹，大家都用到爛掉了吧? 不過好用歸好用，有個老問題其實一直困擾著我很久了...</p>  <blockquote>   <p><em><strong><font color="#008000">&quot; 我該怎麼手動的把某個物件從 cache 裡移除? &quot;</font></strong></em></p> </blockquote>  <p>老實說，這問題蠻沒水準的... 老叫別人要翻 MSDN，我自己怎麼沒翻? 不不... 容我花點篇幅先說明一下問題。Cache物件，是個典型的 Dictionary 型態的應用 (雖然它沒有 implement interface: IDictionary… ), 透過 key 就可以拿到 cached item. 要從 cache 裡移除某個 item, 簡單的很，只要用 <a href="http://msdn.microsoft.com/zh-tw/library/system.web.caching.cache.remove.aspx">Remove</a> 這個 method, 一行就搞定了:</p>  <blockquote>   <div><b>從 key 移除指定的 cache item</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>      <div style="display: none">       <pre style="display: none" id="codeData">HttpRuntime.Cache.Remove(“cache-key”);</pre>
    </div>

    <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
      <div class="csharpcode">
        <pre class="alt"><span class="lnum">   1:  </span>HttpRuntime.Cache.Remove(“cache-key”);</pre>
      </div>
    </div>
<!-- end of code area --></div>
</blockquote>

<p>別小看這一行，實作起來障礙還不少。首先，你得額外去記著 cache key 的值。當你要移除的 cache item 有多個的時後，或是移除的 items 之間的關係有點複雜時，這些 code 就不怎麼漂亮了。下一個問題是:</p>

<blockquote>
  <p><em><strong><font color="#008000">&quot; 我該如何得知所有存在 Cache 內的 keys 有那些? &quot;</font></strong></em></p>
</blockquote>

<p>這個問題單純的多，那些把 intelligent sense 當購物網站的人 (平常不看文件，只會按下 . 然後挑個順眼 method 來用的人)，可能這次就碰壁了... Cache 物件不像一般的 Dictionary 一樣，有提供 Keys 這樣的 property ... 它藏在 <a href="http://msdn.microsoft.com/zh-tw/library/system.web.caching.cache.remove.aspx">GetEnumerator</a> 這 method 內，它會把所有的 keys 給巡一遍，你需要所有的 keys 的話，可以這樣用:</p>

<blockquote>
  <div><b>跑過 cache 裡每一個 key</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>

    <div style="display: none">
      <pre style="display: none" id="codeData">foreach (string key in HttpRuntime.Cache) { 
    // … 
}</pre>
    </div>

    <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
      <div class="csharpcode">
        <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">foreach</span> (<span class="kwrd">string</span> key <span class="kwrd">in</span> HttpRuntime.Cache) { </pre>

        <pre><span class="lnum">   2:  </span>    <span class="rem">// … </span></pre>

        <pre class="alt"><span class="lnum">   3:  </span>}</pre>
      </div>
    </div>
<!-- end of code area --></div>
</blockquote>

<p>不過這樣的風險也是蠻高的，誰曉得你拿到 key 後的下一秒，這個 cache item 還在不在 cache 內?</p>

<h6>&#160;</h6>

<p>&#160;</p>

<p>&#160;</p>

<p>--------------------------------------------------------------</p>

<p>本文正式開始! 哈哈，前面那一段只是廢話 + 碎碎唸，現在才是正題。前面想表達的只是，因為 cache 的不確定性 (資料隨時都會被 remove), 操作起來變的要格外小心, 即使它用起來像一般的 Dictionary 一樣。</p>

<p>我舉個案例，來說明我應用 cache 的情況。假如我想實作一個簡單的 web browser, 透過網路下載資源是很慢的動作，每種 browser 都會有某種程度的 cache 機制。我們就拿 Cache 物件替代 IE 的 &quot;temporary internet files” 目錄吧。這時很簡單，只要用 URL 當作 KEY，下載的 content 就當物件塞進去就好...</p>

<p>不過事情沒那麼簡單。如果程式運作了一陣子，我想提供使用者手動清除 &quot;部份&quot; cache 的功能的話，那該怎麼辦? 我舉幾種情況:</p>

<ol>
  <li>從 cache 裡刪除所有從某個特定網站 (如: columns.chicken-house.net) 下載的資料 </li>

  <li>從 cache 裡刪除所有特定類型的資料 (如: content-type 為 image/jpeg 的圖檔) </li>

  <li>從 cache 裡刪除所有透過特定 protocol (如: https) 下載的資料 </li>
</ol>

<p>這樣的要求應該不算過份吧? 用前面提到的兩種作法，你會想哭吧 XD .. 用這些基礎，你大概只能選這幾種作法 (各位網友有好作法也記得提供一下):</p>

<ol>
  <li>自己另外管理所有下載過的 URL, 用盡各種適合的資料結構，讓你可以順利的挑出這些 match 的 key, 然後移除它。 
    <br />

    <br />缺點: 都作這麼多，你乾脆自己重寫個 cache 機制好了... 何況時間一久，你管理的 key, 那些對應的資料搞不好老早就通通從 cache 裡清掉了... 

    <br /></li>

  <li>聰明一點，用 regular expression … 從 GetEnumerator( ) 一筆一筆過濾出要移除的 URL, 然後清掉它... 
    <br />

    <br />缺點: 這作法只會檢查還留在 cache 內的 URL，不過這樣的 cache 隨便也有成千上萬個，每次都要 looping 掃一次實在不怎麼好看... 有違處女座有潔癖的個性... </li>
</ol>

<p>&#160;</p>

<p>這些方法 code 寫起來實在不怎麼漂亮，我就不寫 sample code 了，請各位自行想像一下寫起來的樣子。抱歉，如果你用的正好是上面的作法... 那請多包含... :D&#160;&#160; 這些都是 workable 的作法，但是看起來就是沒什麼設計感；程式可以動，不過就效能、簡潔、可讀性、美感來看，就是覺的不夠精緻 @@。跟朋友討論到這個問題時，我想到一個爛主意...</p>

<blockquote>
  <p><em><strong><font color="#008000">&quot; 用蠢方法，這些 cache item 先分好類，每一類去關聯一個檔案，設 CacheDependency … 要清掉時去 touch 一下這個檔案，一整組的物件就會自動被清出 cache 了…。”</font></strong></em></p>
</blockquote>

<p>老實說，我覺的這是個既聰明又愚蠢的作法。聰明的是它很漂亮的解決我要如何移除某一群 item 的問題...，愚蠢的是這種單純程式內可以解決的事，竟然要繞到外面不必要的 file system I/O 動作... 而這通常是最慢的...</p>

<p>&#160;</p>

<p>--</p>

<p>咳，寫太晚，實際的程式碼明天待續...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2009-12-19 04:29:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-18 20:29:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e6%b8%85%e9%99%a4cache%e7%89%a9%e4%bb%b6-1-%e5%95%8f%e9%a1%8c%e8%88%87%e4%bd%9c%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>終於突破單日 100KM 了 :D (台北  大溪)</title>
		<link>http://columns.chicken-house.net/2009/11/22/%e7%b5%82%e6%96%bc%e7%aa%81%e7%a0%b4%e5%96%ae%e6%97%a5-100km-%e4%ba%86-d-%e5%8f%b0%e5%8c%97-%e5%a4%a7%e6%ba%aa/</link>
		<pubDate>Sun, 22 Nov 2009 02:20:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/11/22/e7b582e696bce7aa81e7a0b4e596aee697a5-100KM-e4ba86-D-(e58fb0e58c97-3c-3e-e5a4a7e6baaa).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
自從上個月，在露拍買了台二手車 (GIANT YUKON) 後，總算脫離每次都搭捷運租車來騎的日子了... 其實租車也沒什麼不好，不過租來的車子一來每次租的都不大一樣，二來都不能裝些慣用的配件... 騎起來總是不大順手，三來每次都得還車，行程多少會受限...
</p>
<p>
買了車後，可以騎的路線就廣多了.. 上上週搭捷運，試騎了 <a href="http://www.facebook.com/#/album.php?aid=11267&amp;id=1836073899">[捷運永寧站] &lt;----&gt; [大溪]</a> 的路線，還蠻好騎的，風景也棒，這次就決定從家裡出發，拼一拼從大溪來回，順便突破單日破百..
</p>
<p>
<a href="/wp-content/be-files/WindowsLiveWriter/100KMD/2866A2D8/image.png" target="_blank"><img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/2E414671/image_thumb.png" border="0" alt="image" title="image" width="660" height="458" /></a> 
</p>
<p>
圖一: 永寧 &lt;--&gt; 大溪 GPS Log, 來回約 50km。感謝<a href="http://www.michadel.net">小熊子</a>贊助 GPS Logger :D
</p>
<p>
沒錯，男人就是這麼愛面子，自從上回<a href="/post/e9979ce6b8a1e9a88ee596aee8bb8a.aspx#comment">有人留了</a>話之後，有沒有單日破百，心裡總是覺的怪怪的... 加上沒趁機會累積一些當年勇，以後那有當年勇可以掛在嘴邊? 趁著這次小孩回娘家，天氣又正好，就來試一下... 
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/4DF782A4/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[4.5km] 台北市淡水河三號水門 (延平門)，我家到台北市河濱道，就走這裡最近了..
</p>
<p>
因為這次拼 100km, 路上老停下來照相大概就騎不完了，加上我的 G9 被帶回外婆家了，這次用的是我老爸的相機... 不大順手就沒照太多了... 中間這段就沒特別照了。所以有些地點的照片就直接用上回拍的... 上次是大晴天，這次是陰天，一看就知道了 :D
</p>
<p>
路線大概是這樣，到淡水河邊後，沿著淡水河右岸往南走，到華江橋牽車過橋，再往南沿著大漢溪右岸到新海橋，牽車上橋到左岸後一路騎到鶯歌..
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/348F7F6A/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[19.3km] 大漢溪左岸，快到城林橋了。
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/5B5D95AA/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
(上回的舊照片) 剛過城林橋..
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/1F31CA02/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[27km] 轉眼間已經到鶯歌了..
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/53D2263D/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[28km] (上回舊照片) 鶯歌陶瓷博物館，經過了好幾次，可是都沒進去過 @_@
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/73810005/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[28.3 km] 三鶯大橋下，鶯歌到大溪的自行車道 (2009/07 才通車)
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/1E596418/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
過了三鶯大橋後，腳踏車道的風景就完全不一樣了 (Y)
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/52F9C053/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
過了個閘門，原來水都被關在這裡，難怪一路上大漢溪都沒什麼水...
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/0BA46A61/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
真棒的風景，我喜歡這種有有山有水的 (Y)
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/646A212B/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
離開溪邊，到大溪的這段路變成鄉間小逕，兩旁都是韭菜田及稻田...
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/190A7D67/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[41.2km] 到大溪橋了 (這次沒照照片，拿上次的照片充數... :P)
</p>
<p>
看看碼錶，才 41.2km, 騎回家大概連 90 都不到，更別提破百了，真是失算 @@ 看看時間還夠，回程就繞去三峽老街逛逛好了。
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/0ACC0477/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
雖然公司有好幾個人住三峽，不過每個都不知道那家有名的牛角麵包是那一家&hellip; 只會跟我講我上次買錯家了 XD...
</p>
<p>
看來還是 GOOGLE + 路人比較可靠，這次就找到了... 是在條不起眼的巷子裡，一家叫 [福美軒] 的麵包店.. 一堆人等著麵包出爐，排隊排到店外面... 足足排了一小時才買到 =_=，一個 20 元，每人限購 30 個... 
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/6391BB41/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
在回程的路上拿了兩個出來吃，果然好吃 (Y)
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/1832177D/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
柑園橋旁的XX公園 (抱歉，名字忘記了)，有一片草地，前面的是蓮花池... 不過季節不對，看不到蓮花 @@ 那堆綠綠的是布袋蓮，可不是草地... 踩下去是會掉下去的
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/37E0F145/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
[85km] 華江橋上照的.. 
</p>
<p>
&nbsp;
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/100KMD/10A6A810/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
最後回到家，最後一個巷子口看了一下碼錶，98.5km&hellip;. @@
</p>
<p>
單日破百的行程怎麼可以敗在這最後這區區 1.5km ? 於是就繞了點路，去附近的腳踏車店打個氣，然後再回家... 正好 100.29 km! 哇哈哈，單日破百的成就達成!
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2009-11-22 02:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-22 02:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b5%82%e6%96%bc%e7%aa%81%e7%a0%b4%e5%96%ae%e6%97%a5-100km-%e4%ba%86-d-%e5%8f%b0%e5%8c%97-%e5%a4%a7%e6%ba%aa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[na@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.darkthread.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-11-22 08:54:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-11-22 08:54:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哇! 閣下真是一條鐵錚錚的鐵馬鐵漢，甘拜下風 orz...
(我的紀錄被人打破了，要不要扳回一成呢？想了一下，還是保住老命比較重要，哈!!)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>原來在家裝 SERVER 的魔人還真不少...</title>
		<link>http://columns.chicken-house.net/2009/10/08/%e5%8e%9f%e4%be%86%e5%9c%a8%e5%ae%b6%e8%a3%9d-server-%e7%9a%84%e9%ad%94%e4%ba%ba%e9%82%84%e7%9c%9f%e4%b8%8d%e5%b0%91/</link>
		<pubDate>Thu, 08 Oct 2009 02:14:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/10/08/e58e9fe4be86e59ca8e5aeb6e8a39d-SERVER-e79a84e9ad94e4babae98284e79c9fe4b88de5b091.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>看了<a href="http://blogs.msdn.com/virtual_pc_guy/archive/2009/10/06/hyper-v-in-my-house.aspx">這一篇</a> (virtual pc guy’s weblog)，才發現我比起來真是小 CASE ... 哈哈，看他這樣寫，正好最近升級到 2008R2，我也趁機把我的 SERVER 介紹一下好了 :D</p>  <p>最早在家裡架 SERVER，可以追溯到 1997 ... 當時剛當兵，花了一些時間在看 MCSE 那堆 NT server administration 的書... 雖然後來沒去考，不過學到的東西還挺有用的。第一個想架的念頭，就是在 NT4 上面裝 RRAS，然後讓全家 (其實也只有我跟我姊而已) 共用一台 modem 撥接上網... 那時就弄起 RRAS，自己也寫了個 DCOM 的小程式，方便從我的 PC 遠端叫 NT SERVER 的 modem 撥號上網...</p>  <p>接著就越用越兇了，基本的 NAT, NT domain controller, File Server, Printer Server, Fax Server, DHCP server 都是基本用途... 後來開始架網站，買了 chicken-house.net 這 domain name 後，開始加上 DNS / IIS / SQL 起來... 再來連 VPN 都弄起來後，事業就越作越大了..</p>  <p>NT4 進步到 2000 時，原本的 NT domain 升級成 Active Directory, 開始覺的在家裡弄個 AD 有點過頭了，所以之後就沒再用 Domain, 只用 workgroup .. 直到現在...。每次重灌 SERVER 最頭痛的就是那堆帳號全部得重設一次，加上現在 Hyper-V 的效能很不錯，已經到了實用的階段，就重新燃起這念頭，也就是現在的配置。正式來介紹一下我的 SERVER 吧 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2009-10-08 02:14:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-08 02:14:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8e%9f%e4%be%86%e5%9c%a8%e5%ae%b6%e8%a3%9d-server-%e7%9a%84%e9%ad%94%e4%ba%ba%e9%82%84%e7%9c%9f%e4%b8%8d%e5%b0%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="diy"><![CDATA[水電工]]></category>
	</item>
	<item>
		<title>[設計案例] 生命遊戲 #6, 抽像化 (Abstraction)</title>
		<link>http://columns.chicken-house.net/2009/10/03/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-6-%e6%8a%bd%e5%83%8f%e5%8c%96-abstraction/</link>
		<pubDate>Sat, 03 Oct 2009 14:24:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/10/03/e8a8ade8a888e6a188e4be8b-6-e68abde5838fe58c96.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[原定 <a href="/post/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b2-4-e69c89e69588e78e87e79a84e4bdbfe794a8e59fb7e8a18ce7b792.aspx">#4</a> 就提到的 "抽像化"，竟然被我連拖兩期，拖到 #6 才提到它... 人老了果然比較囉唆... 在前面的幾篇，重點都在如何 "具體" 的描述 "生命遊戲" 裡的細胞。不過現在要把這程式擴大到能容納各種不同的生物，先作好抽像化的工作是必要的...。

一般物件導向所指的 "抽像化"，是指你對某些事物的一般概念。比如有人問你:

<em><span style="color: #008000;">"你會開車嗎?"</span></em>

你腦袋裡想的應該是一般印像中的車子，有方向盤，排檔打下去，油門踩了就會前進，煞車踩了就會停下來...，這就是你對 "車子" 的抽像化。你不會去管車子是什麼牌的，什麼顏色，是二門跑車，或是休旅車之類的細節... 而你 "會" 開的車，也不會因為這些細節，有太大的不同。

這樣的抽像化概念，套用到考駕照這件事來說，你只要知道方向盤，油門等等的用法，同時也練習過，能正確的控制教練車，通過測驗，監理所就會發張駕照給你，證明你會開一般的車子。就算是在你學會開車後十年才上市發表的新車也是一樣。

看起來沒什麼了不起的描述，在電腦的世界裡可不是這麼一回事。Microsoft Word 1.0 想要順利開啟 Microsoft Word 6.0 的檔案，大概想都不用想，因為 1.0 版設計之初，有太多 6.0 版的變化是無法事先預料的，自然無法設計出能正確操作的程式，這現像在電腦的世界很正常。不過如果你兩年前考到的駕照，碰到兩年後的新車你就不會開了，甚至監理所還要求你重考張新的架照... 那這駕照等於一點用都沒有。中間的差別，就在於駕駛者對於開車的認知，跟實際的車子，中間是隔著一層 "抽像化" 的概念，而只要能掌握這抽像化的定義，就能順利操作未來的車種。

因此物件技術不斷的想要模擬這樣的關係，就發展出繼承這樣的方式，來表達這個概念。先用一個類別 (base class) 或是介面 (interface) 來表達這個 "抽像化" 的概念，而不表達細節。其它要跟它互動的程式，只能透過這個抽像化型別來溝通，而其它的細節或實作，則被藏在裡面，或是衍生類別。中間的故事我就不再多說了，再說我就直接去寫 OOP 的書好了 =_=，有興趣可以參考這本經典 [<a href="/post/e4b896e7b480e69cabe8bb9fe9ab94e99da9e591bde5bea9e588bbe78988.aspx">世紀末軟體革命</a>]，有復刻版喔。套用到我們的 "生命遊戲" 裡，要定義的就是 "世界" 如何跟 "生命" 互動? 之間的關係是什麼? 另外就是 "生命" 有各種不同的型態，所有的 "生命" 型態是否都能順利的在同一個 "世界" 裡生存?

先試著用簡單文字來描述吧。在我們的定義裡，世界是個 M * N 的棋盤，每一格都能放一個生物。每個生物有自己的狀態 (生/死)，也會隨著時間與環境的不同，讓生物的狀態產生變化。畫成 UML 的 class diagram, 大概就像這樣 (手邊沒工具，用 power point 大概畫一下… Orz):

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/WindowsLiveWriter/6/540DA0FC/image.png" alt="image" width="660" height="422" border="0" />

我們在撰寫程式時，就必需思考題目中講到的生物各種特性，那些是所有的生命共有的特色? 這部份要把它定義在 Life … 另一部份是某種細胞特有的，則要放在衍生類別 Cell 裡。而世界必需要能跟生命作適當的互動，讓生命的進行能繼續下去。這樣的架構好處是，未來如果有第二種 Cell 或是其它的生物，只要是從 Life 繼承下來，都能很順利的在 World 裡活著，因為物件導向技術的 "抽像化" 概念，保證這樣程式的可行性。

好，我們就以需要跟 World 接觸跟互動的部份為主，把原程式的 Cell 抽離出來，放到它的上層類別 Life 裡。這也是物件技術裡常提到的 "generalization" (一般化)，越一般的特性要越往上層類別移動，而越往下就是 "specialization" (特殊化)，底層的類別要去實作特殊的部份，或是特有的細節。

先把原程式作好調整吧。原 Cell 的程式碼，部份被搬移到 Life, 同時這兩個類別有了繼承關係，如下:

<img style="display: inline; border-width: 0px;" title="ClassDiagram1" src="/wp-content/be-files/WindowsLiveWriter/6/48E416B2/ClassDiagram1.png" alt="ClassDiagram1" width="543" height="743" border="0" />

Life 的部份，定義了所有 Life 都該表達出來的特性，也就是我們對於 Life 的認知，都應該描述在裡面，像是 Life 活在 World (CurrentWorld) 裡，會有它的座標 (PosX, PosY), 也會有它在這個棋盤內顯示的方式 (DisplayText) 等。而跟 World 互動的方面，Life 則透過 GetNextWorldTask( ) 來讓 World 來讓 Life 驅動它生命的進行。

在 World 的這邊，不管是那種 Life 衍生類別的物件，一律都當成 Life 的 "抽像概念" 來操作。這樣的優點，在還不曉得未來這世界到底還有多少種不同的 Life 會在裡面生活時，主要程式就能開發了。未來 Life 可以一直擴充，衍生出多種不同的 Life 子類別，而 Life / World 之間的互動及規範，則可以完全不用修正。

接下來就要讓這遊戲的規則，變的更真實一點了。實際的情況下，應該是我們已經知道會有那些不同的生物，經過歸納 (一般化及特殊化) 之後，可以設計出我們需要的類別架構。不過實際寫起程式來可沒這麼好命 (就像 USER 永遠不會一次給你完整確定的需求一樣)，很多時後你得去 "猜" 或是 "假設"，因此跟本沒有 "一般化" 這回事，你得預先去猜測未來要應付什麼問題，而在細節都還不清楚時就先定義出上層類別。

我們開始來試看看，我們定義的夠不夠抽像吧! 如果助教看你這麼快就把生命遊戲的作業交出來，覺的很沒面子，想把題目變難一點，加上有病毒感染的情況。於是原題目的四條規則追加一條，變成這樣:
<ol>
 	<li><em><span style="color: #c0c0c0;">孤單死亡：如果細胞的鄰居小於一個，則該細胞在下一次狀態將死亡。</span></em></li>
 	<li><em><span style="color: #c0c0c0;">擁擠死亡：如果細胞的鄰居在四個以上，則該細胞在下一次狀態將死亡。</span></em></li>
 	<li><em><span style="color: #c0c0c0;">穩定：如果細胞的鄰居為二個或三個，則下一次狀態為穩定存活。</span></em></li>
 	<li><em><span style="color: #c0c0c0;">復活：如果某位置原無細胞存活，而該位置的鄰居為三個，則該位置將復活一細胞。</span></em></li>
 	<li><em><strong><span style="color: #008000;">感染：正常的細胞有 ( 1 + 受感染的鄰居數量 x5 )% 的機率受到病毒感染。已感染的細胞在 3 次狀態改變後會痊癒。受感染的狀況下，有 10% 的機率會死亡。</span></strong></em></li>
</ol>
我們的程式該怎麼配合它改變? (對，機車的 USER 就都是這樣臨時修改規格...) 先來看看執行的結果，畫面上已經分的出來活著的 Cell 跟受感染的 Cell ... 除了看到 Cell 活著與死亡的變化之外，也看的到病毒擴散的狀況是怎麼樣。執行的畫面如下:

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/WindowsLiveWriter/6/0FB7A1AD/image.png" alt="image" width="537" height="559" border="0" />

圖例: ◎受感染的細胞，●活著的正常細胞，○死亡的細胞

接著，來看看改版後的程式碼:
<pre class="lang:c# decode:true">public bool IsInfected
{
    get
    {
        return this.InfectedCount &gt; 0;
    }
}
private int InfectedCount = 0;
public override string DisplayText
{
    get
    {
        if (this.IsAlive == true) return "●";
        else if (this.IsInfected == true) return "◎";
        else return "○";
    }
}
protected override IEnumerable&lt;TimeSpan&gt; WholeLife()
{
    yield
    return TimeSpan.FromMilliseconds(_rnd.Next(800, 1200));
    for (int index = 0; index &lt; int.MaxValue; index++)
    {
        int livesCount = 0;
        int infectsCount = 0;
        foreach (Cell item in this.FindNeighbors())
        {
            if (item.IsAlive == true) livesCount++;
            if (item.IsInfected == true) infectsCount++;
        }
        bool? value = _table[this.IsAlive ? 1 : 0, livesCount];
        if (value.HasValue == true)
        {
            this.IsAlive = value.Value;
        }
        if (this.IsInfected == true)
        {
            this.InfectedCount--;
            if (this.InProbability(10) == true) this.IsAlive = false;
        }
        else
        {
            if (this.InProbability(1 + infectsCount * 5) == true) this.InfectedCount = 3;
        }
        yield
        return TimeSpan.FromMilliseconds(_rnd.Next(800, 1200));
    }
    this.Dispose();
    yield
    break;
}</pre>
細節我就不多介紹了。這裡的重點是經過抽像化的動作後，把 Life / Cell 之間的邏輯做明確的劃分。World 的類別程式碼完全沒有出現任何有關 Cell 的 Code, 只有出現 Life 而已。除了在主程式 GameHost 有這麼一段，明確的把 Cell 建立起來，把它放進 World:
<pre class="lang:c# decode:true">static void Main(string[] args)
{
    int worldSizeX = 30;
    int worldSizeY = 30;
    World realworld = new World(worldSizeX, worldSizeY);
    Random _rnd = new Random();
    for (int x = 0; x &lt; worldSizeX; x++) {
        for (int y = 0; y &lt; worldSizeY; y++) {
            Cell item = new Cell();
            realworld.PutOn(item, x, y);
        }
    }            
    // ...

}</pre>
這樣的作法，其實已經引含了 "動態聯結" 的特性了。在開發主程式的階段 (指 World / Life 這兩個主要的 class), 都還沒有 Cell 的相關細節，而事後執行的程式碼卻可以依照 Cell 裡的邏輯來執行。這代表了我們不需要改主程式的設計，就能不斷的加入新的規責，甚至是新的生物進來一起運作。

如何? 物件技術的 "抽像化" 能力，的確很有效的解決了這樣的變化需求。下一篇會沿用一樣的架構，但是執行的範例會完全不一樣 (這次不用細胞了，直接用草原上的生態: 草、羊、虎) 的生命及規則，來套進這個框架，看看它能怎麼模擬出一個新的生態系統。

這樣的架構可以應付未來未知的變化，只要你的抽像化概念不變的前題下都沒問題。這種保留彈性，卻又不用在 design time 去多做不必要的實作，才是物件技術強大的地方。我舉個反例，很多剛入行的軟體工程師，你給他一個需求，他會想太多... 一個簡單的輸入 1 + 1 要顯示 2 的結果，他會這麼想:

<em><span style="color: #008000;">USER 需不需要列印啊? 我先把這需求放進去好了，然後加個 config 預設關掉它，以免以後需要我還得大改程式...</span></em>

<em><span style="color: #008000;">只能算 1 + 1? 如果以後 USER 要算 3 * 5 怎麼辦? 好吧，我把 + 用一個 mode 來代表好了，以後 USER 需要括充為支援 +-*/ 就不用大改程式了...</span></em>

<span style="color: #008000;">...</span>

碰到這些狀況，我只能誇獎這位年青有為的程式設計師一句話:

<em><span style="color: #008000;">"你很認真... 辛苦了..."</span></em>

不過我心裡會苦笑... 只不過要你寫個 1 + 1 = 2，搞這麼一大包? 多作考慮，預留未來可能需要的功能，不是件壞事。不過既然是未知的需求，你又如何保證你能夠正確的 "預知" ，然後進一步 "預留" ? 何況這些多做的需求，未來真正會用上的有多少? 用不到的話，只是開發成本的浪費，及讓你的架構複雜性提高，維護的困難增加而已。物件技術真的解決的了這種問題嗎? 下一篇的目標，我們會定在不修改 World / Life 的設計為前題，把生命遊戲的模擬內容換成草原的生態模擬。敬請期待續集 :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2009-10-03 14:24:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-10-03 14:24:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-6-%e6%8a%bd%e5%83%8f%e5%8c%96-abstraction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>電腦時鐘越來越慢...</title>
		<link>http://columns.chicken-house.net/2009/09/29/%e9%9b%bb%e8%85%a6%e6%99%82%e9%90%98%e8%b6%8a%e4%be%86%e8%b6%8a%e6%85%a2/</link>
		<pubDate>Tue, 29 Sep 2009 00:44:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/29/e99bbbe885a6e69982e99098e8b68ae4be86e8b68ae685a2.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最近這兩個禮拜，很扯... 我的<a href="http://columns.chicken-house.net/post/e696b0e6898be6a99fe79c9fe698afe8ae9a-(y).aspx">手機</a>時鐘越來越不準，竟然每天會晚個幾分鐘，不到兩個禮拜，竟然跟正常時間比起來已經差了廿分鐘...</p>  <p>天那，這什麼時代了，一個五十塊的電子錶都比我這隻五為數價位 (幾年前的價位啦 =_=) 的手機準時... 怪的是，白天再公司又是準的 !? 越看越怪，難不成這時代，連看個時鐘都得先 DEBUG 一番... 今天就花了點心思追一下問題 @@</p>  <p>首先，原來慢的不是我的手機，而是我家裡的 PC，因為手機插上 USB 充電 + SYNC，會順便對時，就這樣誤差越來越大了。不過 PC 不是都會上網對時嘛? 後來就再繼續追下去...</p>  <p>繼續追下去，家裡 PC 是跟家裡的 SERVER (domain controller) 對時的... 原來時間慢的是家裡的 SERVER... 不過問題還是一樣啊! 現在一直都連上網的 SERVER 怎麼可能會這樣?</p>  <p>因為每次重灌，一堆帳號就要重建，很麻煩，所以上個月重灌 SERVER時，就順手在 VM 裡裝了台 SERVER，當作 Active Directory 的 domain controller (Guest OS)… 而 SERVER 本身 (Host OS) 才是拿來做 NAT / RRAS / FILE SERVER 等服務...</p>  <p>這樣的架構，機車的地方就在於: Hyper-V 本身 VM 會跟 Host 做 time sync ... 而 Host 有加入 AD, Host 又會跟 Guest 同步時間，Hyper 又替 Guest 跟 Host 同步時間... 每次誤差一點，幾週下來就變這樣了 @@ 害我的手機莫名奇妙就晚了快半小時...</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/f45cd5a15979/727116E0/image.png" width="728" height="690" /> </p>  <p>&#160;</p>  <p>果然，這選項移除後，就一切正常了 @@，頂多就讓 DC 脫褲子放屁，到外面的 server 去對時吧... 嗯，這年頭，真的什麼怪事都會發生... 還好這次有抓到問題，哈哈... 這篇就給跟我一樣宅的人參考吧 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2009-09-29 00:44:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-29 00:44:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9b%bb%e8%85%a6%e6%99%82%e9%90%98%e8%b6%8a%e4%be%86%e8%b6%8a%e6%85%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>[設計案例] 生命遊戲 #5, 中場休息</title>
		<link>http://columns.chicken-house.net/2009/09/24/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-5-%e4%b8%ad%e5%a0%b4%e4%bc%91%e6%81%af/</link>
		<pubDate>Wed, 23 Sep 2009 18:42:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/24/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b2-5-e4b8ade5a0b4e4bc91e681af.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
在繼續下去之前，先來講一下，我希望讓這個 &quot;生命遊戲&quot; 程式，發展到什麼程度吧。其實前面四篇都還只是基礎入門，跟準備動作而已，接下來才開始會有些有趣的。
</p>
<p>
我希望這系列文章寫完後，這個程式要能扮演一個真正可運作的 Matrix &hellip; 沒錯，就是像電影駭客任務裡的母體一樣，這個程式會變成 Matrix 的主要架構，而各式各樣的 &quot;生物&quot; 可以在這個虛擬世界裡生活。為了讓它真的跑的動，所以前幾篇提到的效能問題，執行緒問題，就不能不考慮。為了讓這個虛擬世界能更擬真一點，它至少要是個依時間驅動的模式，而不是像 &quot;生命遊戲&quot; 最早定義的回合制，因此這個問題也要在基本架構裡解決掉。
</p>
<p>
這些 &quot;生物&quot; 那裡來? 當然是大家來開發 :D 最終目標是要把這 Matrix 建起來，讓各位的生物可以放進來互相較勁一番... 因此先替這些程式 (生物) 抽像化，定義好它跟世界，及跟其它生物之間互動的規格 (就是下篇 &quot;抽像化 / 多型&quot; 要說的) 就是必要的工作之一了。替生命定義好抽像化介面之後，就可以開始衍生出各種不同的生命型態，一起加入這個虛擬世界，因此繼承、多型的技術就派上用場了。
</p>
<p>
生命是會演化的，當世界上真的演化出一種新的生命型態時，整個世界可以 &quot;安裝&quot; 好新的生命型態，然後全部存檔，重新啟動嗎? 當然不行... 因此如何 &quot;動態&quot; 的加入新的生命型態，如何不停止 GameHost 的前提下，由新的 Assembly 載入 Class (再下篇要說明的 &quot;動態載入&quot;)，也是必需克服的技術之一。
</p>
<p>
這幾個階段及目標，就是我這一系列文章想要做到的。聽起來好像很有趣，可是卻又沒什麼實際的用途... Orz, 沒辦法，我就是喜歡寫這類要動點腦筋的程式，即使畫面一點都不炫也沒關係... 平常工作就不大有機會寫這種程式了，加上現在又只剩一張嘴...。
</p>
<p>
如果順利的發展，我倒是有個打算，這個 GameHost 成形之後，我打算定些基本的規則，比如土地上會有一定的機率及規則，長出草 (食物) 來。而這世界有各種不同的生物 (EX: 羊)，需要靠這世界上的資源維持生命。到時大家可以把自己創造的 &quot;羊&quot; 一起放到這個世界內，看看執行了一陣子之後，誰設計的 &quot;品種&quot; 比較好，最後可以一代一代的繁衍下來...。
</p>
<p>
想的很美好，不過我不像 darkthread 可以替最後優勝的造物者提供獎品.. Orz.. 未來的設計藍圖就先規劃到這裡。在繼續下去之前，我把程式重新整理了一下，有興趣的人可以下載回去。這份程式碼跟 #4 的功能結構是一樣的，只不過整個架構都作過重整，變數等命名也調整過了，是為了往後說明相關物件技術時，不會被這些從 #1 ~ #4 改的支離破碎的程式碼干擾... 
</p>
<p>
嗯，講了一堆廢話，結論就是: 敬請期待續集 :D&nbsp; 哈哈... 
</p>
<p>
下載重整過的程式碼:
</p>
<div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:6edb8e97-44c0-4701-844c-0091d02bbdf2" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px">
<div>
<a href="/wp-content/be-files/WindowsLiveWriter/5/37267DF0/BLOG_5.zip" target="_self">BLOG #5.zip</a>
</div>
</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2009-09-24 02:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-23 18:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-5-%e4%b8%ad%e5%a0%b4%e4%bc%91%e6%81%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] 生命遊戲 #4, 有效率的使用執行緒</title>
		<link>http://columns.chicken-house.net/2009/09/19/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-4-%e6%9c%89%e6%95%88%e7%8e%87%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9f%b7%e8%a1%8c%e7%b7%92/</link>
		<pubDate>Sat, 19 Sep 2009 15:58:22 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/19/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b2-4-e69c89e69588e78e87e79a84e4bdbfe794a8e59fb7e8a18ce7b792.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[原本這篇不講執行緒，要直接跳到 OOP 多型的應用... 不過看一看 <a href="http://columns.chicken-house.net/post/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b23-e69982e5ba8fe79a84e68ea7e588b6.aspx">#3</a> 自己寫的程式，實在有點看不下去... 30x30 的大小，程式跑起來就看到 903 條執行緒在那邊跑... 而看一下 CPU usage, 只有 5% 不到... 這實在不是很好看的實作範例，如果這是線上遊戲的 SERVER 程式，裡面的每個人，每個怪物等等都用一條專用的執行緒在控制他的行為的話，我看這遊戲不用太多人玩，SERVER 就掛掉了吧! 因此要繼續更貼近實際的生命模擬遊戲前，我們先來解決效能的問題，所以多安插了這篇進來 :D

前一篇 (<a href="http://columns.chicken-house.net/post/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b23-e69982e5ba8fe79a84e68ea7e588b6.aspx">#3</a>) 的主題是把生命的進行，從被動的在固定時間被喚醒 (callback) 的作法，改成主動的在指定時間執行 (execute)。 想也知道，現實世界的生物都是 "主動" 的，後面的作法比較符合 OOP 的 "<a href="http://columns.chicken-house.net/post/e4b896e7b480e69cabe8bb9fe9ab94e99da9e591bde5bea9e588bbe78988.aspx">模擬世界，加以處理</a>" 的精神。但是，一個小程式就吃掉 900 條執行緒，是有點過頭了。不知道還有沒有人<a href="/post/Thread-Sync-2-e5afa6e4bd9ce7af87-e4ba92e79bb8e7ad89e5be85e79a84e585a9e5808be59fb7e8a18ce7b792.aspx">記得</a>，我騙到獎品的這個程式... 很另類的用 yield return 來解決類似問題的作法... 藉著 compiler 很雞婆的把單一流程翻成數段可以切開執行的邏輯...，正好拿來利用一下，替我們把一連串連續的邏輯切段，以便利用多執行緒來處理。我的想法是這樣，原程式是用個迴圈，作完該作的事，就休息 (sleep) 一段時間。而新的寫法，我打算用 yield return new TimeSpan(…) 來取代 Thread.Sleep(…)。每個 Cell內部的程式結構修改不大，不過對於 GameHost 就是個挑戰了... 來看看修改前及修改後的程式碼:
<pre>        // 修改前
        // 使用 Thread.Sleep( ) 來控制時間
        public void WholeLife(object state)
        {
            int generation = (int)state;
            for (int index = 0; index &lt; generation; index++)
            {
                this.OnNextStateChange();
                Thread.Sleep(_rnd.Next(950, 1050));
            }
        }
        //
        //
        //
        // 修改後
        // 使用 yield return new TimeSpan( ) 來控制時間
        public IEnumerable&lt;TimeSpan&gt; WholeLife(object state)
        {
            int generation = (int)state;
            for (int index = 0; index &lt; generation; index++)
            {
                this.OnNextStateChange();
                yield return TimeSpan.FromMilliseconds(_rnd.Next(950, 1050));
            }
            yield break;
        }
</pre>
別想的太美，只改這樣，程式是不會動的... 修改過之後，麻煩的地方會在 GameHost. 因為整個 GameHost 的邏輯都反過來了。原本是 GameHost 只要放著那九百條執行緒自生自滅，它只要不斷的刷新畫面就好了。現在它則得用 foreach(…) 去詢問:
<blockquote><em><span style="color: #008000;">"大爺，這次您要休息多久?"</span></em></blockquote>
接到 yield return 傳回的 TimeSpan 物件 (代表它要休息多久後，繼續下一個動作) 後，經過這段時間，GameHost 就要再去叫醒 cell, 然後再詢問一次:
<blockquote><em><span style="color: #008000;">"大爺，這次您要休息多久?"</span></em></blockquote>
關鍵就在於 GameHost 如何能透過少量的 thread 來伺後這些大爺，而不是像 #3 的程式一樣，每個大爺都用一條專屬的 thread… 要共用執行緒，就要先想辦法把工作切碎，這是基本法則。如果你希望你的生命遊戲程式不只是作業的話，那麼效能跟即時回應的問題是必需要考慮的。在動手改寫 GameHost 程式之前，先來分析一下改寫的目標有那些:
<blockquote><strong><em><span style="color: #008000;">目標是要達到像 #2 範例一樣的效果，但是要用更有效率的方式。</span></em></strong></blockquote>
目標很清楚，再來就看看有什麼手段可以用了。第一個是過量的執行緒，應該要想辦法改用執行緒集區。因為 #2 用了高達 900 條執行緒，不過整體 CPU USAGE 不到 5%，大部份的執行緒都在閒置狀態。如果能想辦法把這些運算丟到執行緒集區，由集區動態管理會有效率的多。

第二，就是把原本的 Thread.Sleep(ts) 改成 yield return ts 後，原本每個 thread 自己睡覺的機制，就要改成 cell 各自回報 game host 它想要睡多久，然後由 game host 統一在時間到時叫醒它。由於一次有多個 cell 同時在運作，因此我們需要一個簡單的排程器，作法像這樣:
<ol>
 	<li>建立一個時間表，依照時間順序，把每個 cell 預計要被叫醒的時間標上去。</li>
 	<li>時間到了之後，就去呼叫該 cell 的 OnNextStateChangeEx()，同時取得該 cell 下次要喚醒的時間，再標到時間表上</li>
 	<li>GameHost就不斷的替每個 cell 重複 (1) (2) 的動作..</li>
 	<li>同時另外用一條獨立的執行緒，作畫面更新的動作。</li>
</ol>
嗯，要處理的方式越來越清楚了。剩下的是 "時間表" 要用什麼型式來表現? 我的選擇是，我希望它是個 ToDo List, 會幫我排好時間，我只要把工作標上時間，丟進 ToDo List, 然後 ToDo List 只要能忠實的回報給我還有沒有排定的工作? 如果有，下一個要處理的工作是那一個? 什麼時後處理?

它的用法只有丟工作進去，跟拿工作出來，因此我設計它的公開介面長這個樣子:
<pre>        public class CellToDoList
        {
            public void AddCell(Cell cell) {...}
            public Cell GetNextCell() {...}
            public Cell CheckNextCell() {...}
            public int Count {get;}
        }
</pre>
裡面的實作，我就不多說了。我是把它當成 QUEUE 在設計，唯一的差別是，放進 QUEUE 的東西會先經過排序，因此不見得是 "First In First Out" 這種典型的貯列，而是會以 Cell 上標示的時間為準，依序 Out …。實作起來很簡單，用現成的 SortedList 當內部的儲存方式，加上基本的 lock 機制來確保它是 thread safe 的就夠了。

好，這些雞絲都準備好之後，就可以來打造我們的新版 GameHost 了。來看看 Code:
<pre>        static CellToDoList _cq;
        static void _YieldReturnGameHost(string[] args)
        {
            int worldSizeX = 30;
            int worldSizeY = 30;

            World realworld = new World(worldSizeX, worldSizeY);

            _cq = new CellToDoList();
            // init threads for each cell
            for (int positionX = 0; positionX &lt; worldSizeX; positionX++)
            {
                for (int positionY = 0; positionY &lt; worldSizeY; positionY++)
                {
                    Cell cell = realworld.GetCell(positionX, positionY);
                    cell.OnNextStateChangeEx();
                    _cq.AddCell(cell);
                }
            }

            // 啟動定期更新畫面的執行緒
            Thread t = new Thread(RefreshScreen);
            t.Start(realworld);

            while (_cq.Count &gt; 0)
            {
                Cell item = _cq.GetNextCell();
                if (item.NextWakeUpTime &gt; DateTime.Now)
                {
                    // 時間還沒到，發呆一下等到時間到為止
                    Thread.Sleep(item.NextWakeUpTime - DateTime.Now);
                }
                
                ThreadPool.QueueUserWorkItem(RunCellNextStateChange, item);
            }
        }

        private static void RunCellNextStateChange(object state)
        {
            Cell item = state as Cell;
            TimeSpan? ts = item.OnNextStateChangeEx();
            if (ts != null) _cq.AddCell(item);
        }


        private static void RefreshScreen(object state)
        {
            while (true)
            {
                Thread.Sleep(500);
                (state as World).ShowMaps("");
            }
        }</pre>
&nbsp;

GameHost 的工作很明確，一開始 (line 18 ~ 20) 就把更新畫面的動作完全交給另一個執行緒，之後就專心處理 ToDoList 內的工作了。

接著後面的 while loop (line 21 ~ 30) 則是很單純的從 ToDoList 裡取出下一個要要動作的 Cell, 如果時間還沒到就 Sleep 等一下它。執行完後會再詢問下一次是什麼時後，同時再把他加到 ToDoList 內等待下一次輪到他時繼續。

這次的程式我沒有設定停止的條件，因此你會看到程式會不斷的執行下去。程式執行起來，結果跟 #3 沒什麼不同，畫面上的每個細胞會照著題目的規則生長或死亡，不同的是 #3 的 Game Host 需要用到 903 條執行緒，而這版的 Game Host 只要 9 條執行緒...

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/WindowsLiveWriter/4/79791A16/image.png" alt="image" width="537" height="559" border="0" />

&nbsp;

其實，以這樣的範例題，我大可以不用顧慮到效能的問題，不過就是示範程式怎麼寫嘛。不過，我的目標如果只是訂在怎麼寫這練習題，大可以 GOOGLE 一下就有一堆作業解答了 :D。我的目標是要展示一下，該如何開發這樣的 GameHost ? 這樣的程式，是大部份的遊戲的基礎，尤其是像線上遊戲或是 facebook 這類互動遊戲的基礎。有了像樣的 Game Host 之後，接下來就把目標放在如何建立多樣的生物，一起放在這世界裡面生活了。接下來就會大量運用到 OOP 的特點 (對，就是上一篇預告的...) 繼承及多型。

有沒有人覺的，這種程式越寫越像 Matrix (就是駭客任務裡的 "母體") 了? 裡面活著的東西其實都在我的掌控之下... =_= 哈哈... 未完待續，請期待續集 :D。

--

範例程式:
<div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:12de9024-79d0-4f2a-b0f2-e009f9c38085" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://columns.chicken-house.net/wp-content/be-files/WindowsLiveWriter/4/7DFFC8B9/BLOG_4.zip" target="_self">BLOG #4.zip</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2009-09-19 15:58:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-19 15:58:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-4-%e6%9c%89%e6%95%88%e7%8e%87%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9f%b7%e8%a1%8c%e7%b7%92]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[laneser]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lane@bridgewell.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-20 02:13:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-20 02:13:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[恩?! 
用 yield return 取代 multi-thread,
開始有點 CCR 跟 DSS 的味道了...
refer to http://www.microsoft.com/ccrdss/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-20 02:31:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-20 02:31:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[還真的有人這樣用，而且Microsoft還有搭配工具跟整套SDK... (Y)

我還是第一次看到 CCR&amp;DSS ... 謝謝提供這資訊 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Sean]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shuohus@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-07 01:13:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-07 01:13:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[感覺起來安德魯兄是在自製一個Threading.Timer的機制。根據MSDN的說法，整個邏輯非常像您的sample code。我的想法是cell裡放入一個Threading.Timer，讓Timer去管什麼時候該醒過來，這樣code應該會更乾淨，連GameHost裡的new thread都省掉了。不知道您比較過二者的performance的差別嗎?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-08 03:12:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-08 03:12:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是的，其實我的作法跟 threading.timer 都一樣，是靠 thread pool 去做事。

最初的想法，是這樣作可以省掉很多不必要的 context switch... 如果執行速度很快的話，甚至不用 thread 都能得到類似的效果，yield return 能很漂亮的用編譯器的技術，把破碎的流程串在單一 thread 內。

在這種極端的例子裡，效能差異是很大的。以之前我碰到的例子來說(見下面的網址)，光是多了 thread sync 之類的動作，就有好幾倍的效能差距 (當然也跟 thread 主體沒做啥事有關)。
http://columns.chicken-house.net/post/YieldReturn2_ThreadSyncReplacement.aspx

當然不直接用 timer 也是想，這樣未來比較有機會做適當的調整。整個 .net framework 裡就有三種完全不同用途的 timer ... 沒仔細研究的話，太依賴 timer 會有種不踏實的感覺.. 哈哈]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Sean]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shuohus@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-09 12:26:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-09 12:26:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這個例子我猜二種做法的效能差不多，搞不好Threading.Timer的source code幾乎和您的sample code一樣。畢竟這個例子沒有thread sync的問題，我們反而期待的是每個cell是完全獨立的。cellular automata的問題其實還滿有趣的，以前讀的時候還沒想過實作的問題，沒想到和Gamehost的作法是一樣的。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-12-15 02:04:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-12-15 02:04:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[後來我仔細想了一下，既然都是用 thread pool, 效能應該是沒差太多，唯一有差別的是寫法。

用 timer 的話，程式的邏輯是切開的，變成 &quot;time/event driven&quot; 的模式。

用 yield return 的話，則像是寫很長的一段程式一樣，可以一連串的寫下去，比較像每個 cellular 有單一的 thread, 而在程式內搭配 Thread.Sleep(...) 使用的寫法。

]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[設計案例] Login With SSL ?</title>
		<link>http://columns.chicken-house.net/2009/09/17/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-login-with-ssl/</link>
		<pubDate>Thu, 17 Sep 2009 19:08:35 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/17/e8a8ade8a888e6a188e4be8b-Login-With-SSL-.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Game Of Life 那一系列的，先暫停一期 :D，先穿插一篇不相干的內容...。這篇要講的是網站的登入部份要改用 SSL 的作法。這是很常見的問題，不過對怎麼作搞不清楚的人，仍然大有人在... 所以興起了寫這篇的念頭。</p>  <p><font color="#c0c0c0">先從 &quot;為什麼&quot; 來說好了。實際碰到的客戶，常常會把 &quot;SSL&quot; 跟 &quot;加密&quot; 劃上等號... 以為網站加上 SSL 就固若金湯了。這樣講是沒錯啦，不過 SSL ( Secure Socket Layer。Wiki 有說明) 再安全，也只是個 &quot;加密&quot; 的傳輸方式，只有對外人 (竊聽者) 是加密的... 正所謂內賊難防... SSL 可以防外賊，但是防不了內賊。因此 SSL 是不等於 DRM 這類技術的...</font></p>  <p><font color="#c0c0c0">扯遠了，會這樣講只是因為，很多客戶需要的其實是 DRM，不過客戶的 IT 卻天真的以為，網站加上 SSL 就萬無一失了... 於是老有客戶在問:</font></p>  <p><font color="#c0c0c0"></font></p>  <p><font color="#c0c0c0">客: &quot;你們的系統可以整個放到 HTTPS 裡嗎?&quot;</font></p>  <p><font color="#c0c0c0">我: &quot;可以啊，不過效能會很糟，有什麼特別的需求，要這樣作嗎?&quot;</font></p>  <p><font color="#c0c0c0">客: &quot;老闆說網站的文件怕流出去，所以要用 HTTPS&quot;</font></p>  <p><font color="#c0c0c0">我: &quot;....&quot;</font></p>  <p><font color="#c0c0c0"></font></p>  <p><font color="#c0c0c0">很想把 DRM / DPM 的介紹貼給客戶看... 不過只能很婉轉的引導客戶的需求...</font></p>  <p><font color="#c0c0c0">我: &quot;HTTPS 只是防竊聽，不防把資料存下來偷帶出去的... 要防外賊，只要保互好登入過程傳輸帳號秘碼&quot;</font></p>  <p>&#160;</p>  <p>大部份人對 SSL 的第一個誤解，就是 SSL 只是個加密的傳輸方式，不是加密的儲存方式。就好像你用黑貓寄東西，他是用貨車載... 像 Mission Impossible 裡的阿湯哥那種身手，一下就可以把你的包裹摸出來... 如果你的包裹給保全公司送，他們用的安全規格就完全不同了... 至少是運鈔車的那種規格 (不過應該也擋不住阿湯哥就是...)。</p>  <p>不過，貨物送到對方手上之後，保護就不見了... 這點就是大家常常沒搞清楚的地方。</p>  <p>弄清楚 SSL 只保護傳輸過程後，該怎麼應用，該應用在那裡，就很清楚了。最典型的例子，就是用在網站登入 (輸入帳號密碼，輸入信用卡號碼等等) 的地方。登入成功後就沒必要繼續留在 SSL (HTTPS) 保護的範圍了，就可以切回一般網站 (HTTP)。</p>  <p>剩下的就跟你怎麼設計，怎麼規劃有關了。概念上來說，一般網站就像這張圖一樣:</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/LoginWithSSL_109B9/image_5.png" width="660" height="379" /> </p>  <p>所有資訊都在橘色 (不安全) 的部份傳輸。為了確保重要資訊不被竊聽，我們至少要改成這樣:</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/LoginWithSSL_109B9/image_6.png" width="660" height="406" /> </p>  <p>如果把 HTTP / HTTPS 當成兩個網站，則帳號密碼一定要在綠色(安全)部份傳輸。而兩台SERVER之間可以用HTTPS，或是其它管道傳輸，不一定要加密，不過至少可以把外面的駭客檔在門外。</p>  <p>接下來的作法就各憑本事了，沒有標準的解法。我的客戶因為有可能有各種不同的認證規則，這規則可能跟網站的邏輯有關，所以不大適合把認證的部份擺在 HTTPS 這端，因此我的設計是:</p>  <ol>   <li>把帳號密碼，透過HTTPS安全送到A網站，儲存起來。</li>    <li>A網站發出一個 TOKEN (可以搭配一些HASH及EXPIRE的處理)，再把這 TOKEN 轉給B網站。</li>    <li>B網站再根據收到的 TOKEN，先作好基本的HASH及EXPIRE的檢查後無誤後，最後再到後端的 STORAGE 把當初 (1) 儲存的登入資訊取出。</li>    <li>取得登入資訊後，就在B網站用正常的登入程序，進行驗證工作。</li>    <li>驗證成功後，就可以正常的設定SESSION，使用網站的各個功能。</li> </ol>  <p>&#160;</p>  <p>打個比方，這就是傳統的商店刷信用卡時，會用電話等方式，銀行先跟使用者確認資訊後，給店家一個授權碼。之後店家就只能在規範的條件下，用這授權碼取款。這授權碼是不怕被盜取的，因為它只是個代號，外人取得它完全無法做壞事，就好像上例的 TOKEN 一樣。</p>  <p>接下來，就來看看程式該怎麼寫了。只要使用量不大的話，A/B兩網站是可以放在同一台SERVER上，這時中間的傳輸方式就很多種簡易的選擇 (比如 local file)。考量到整個系統的 scalability, HTTPS 的部份屬 CPU BOUND，量大的話有可能影響到原網站的運作，因此實際部屬時，有可能碰到 A 網站必需跟 B 網站獨立出來，而且 B 網站也有可能因為效能問題，而再分散成多個 Web Farm 的運作方式...，這時 AB 網站間的傳輸方式就得能跨 SERVER 運作，就得挑選 DB / WCF 等等方式進行。 (當然 ASP.NET Session State Server 也可以啦，不過暫不考慮，不然就沒東西好寫了...)</p>  <p>&#160;</p>  <p>整理一下最後要實作的需求，跟架構設計。都到設計階段了，Use Case 就跳過去，直接到 Sequence Diagram…</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>用到的技術反而沒什麼特別的。我舉幾個常見的難題，或是常被忽略掉的漏洞:</p>  <ol>   <li>HTTP / HTTPS 可能是不同的網站，SESSION 不會通... 怎麼把 LOGIN 成功的資訊， *安全* 的帶到 HTTP 這邊的 SESSION ?</li>    <li></li> </ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2009-09-17 19:08:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-17 19:08:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-login-with-ssl]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
	</item>
	<item>
		<title>[設計案例] 生命遊戲#3, 時序的控制</title>
		<link>http://columns.chicken-house.net/2009/09/15/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b23-%e6%99%82%e5%ba%8f%e7%9a%84%e6%8e%a7%e5%88%b6/</link>
		<pubDate>Tue, 15 Sep 2009 02:26:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/15/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b23-e69982e5ba8fe79a84e68ea7e588b6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[原本的範例，其實有些盲點，不知各位有沒看到? 一樣的起始狀態，一樣的遊戲規則，你不一定會得到一樣的結果。為什麼? 因為這會跟你程式 SCAN 的順序有關。怎麼說? 因為到目前為只，整個遊戲就好像下棋一樣，是 "回合制"，我下完了換你... 一路一直輪下去。

這時先下後下就會影響結果了。現實世界的生命不是這樣的啊... 不知有沒有人玩過早期的太空戰士 (Final Fantasy) 系列遊戲? 當年 FF 有個很重要的突破，就是把 RPG 從傳統的 "回合制" 改成即時戰鬥... 每個人都有個倒數的碼錶，數到 0 你就可以發動下一次的攻擊... 這樣才接近現實世界啊。套用到我們的生命遊戲，這次我們想作的改變，就是把程式改成這種模式。

因此來調整一下規則，每個細胞每隔 1000ms 後會進到下一個狀態。不過生命總是沒有完全一樣的，因此每個細胞進到下一個狀態的時間差，都會有 10% 的誤差 (也就是 950ms ~ 1050ms 之間的時間都有可能)。其它規責則維持不變，來看看程式該怎麼改寫。

這種 "即時制"，是比較合乎現實的情況的，如果未來你想發展到像 facebook 上的那些小遊戲，或是其它線上遊戲一樣的話， "回合制" 是決對行不通的... 這時，我們可以想像，每個細胞都有自己的執行緒，每換過一次狀態後就 Sleep() 一段時間，醒來再換到下一次狀態... 一直到指定的世代 (generation) 到達為止。

來看一下改版過的程式。我們先不動原本的 Cell, 只追加一個 method: WholeLife( ), 呼叫後就會一直更新這個細胞的狀態，直到它結束為止 (不是死掉喔，是 generation 到達)。而整個世界的所有細胞，都是獨立的個體，都有個專屬的執行緒在運作...。這時 Game Host 就得換個方式來讓這些細胞過日子 (執行)，同時 Game Host 好像有個人造衛星一樣，不斷的在上空拍照來更新畫面，而完全不影響這些細胞的生命進行。

來看一下改寫過的 Cell 追加的 method:
<pre class="lang:c# decode:true ">        public void WholeLife(object state)
        {
            int generation = (int)state;
            for (int index = 0; index &amp;lt; generation; index++)
            {
                this.OnNextStateChange();
                Thread.Sleep(_rnd.Next(950, 1050));
            }
        }</pre>
&nbsp;

改變不大，只是多個簡單的迴圈，跟 sleep 來控制時間而已。再來看看 Game Host 要怎麼改:
<pre class="lang:c# decode:true ">        static void Main(string[] args)
        {
            int worldSizeX = 30;
            int worldSizeY = 30;
            int maxGenerationCount = 100;

            World realworld = new World(worldSizeX, worldSizeY);

            // init threads for each cell
            List&amp;lt;Thread&amp;gt; threads = new List&amp;lt;Thread&amp;gt;();
            for (int positionX = 0; positionX &amp;lt; worldSizeX; positionX++)
            {
                for (int positionY = 0; positionY &amp;lt; worldSizeY; positionY++)
                {
                    Cell cell = realworld.GetCell(positionX, positionY);
                    Thread t = new Thread(cell.WholeLife);
                    threads.Add(t);
                    t.Start(maxGenerationCount);
                }
            }

            // reflesh maps
            do
            {
                realworld.ShowMaps("");
                Thread.Sleep(100);
            } while (IsAllThreadStopped(threads) == false);

            // wait all thread exit.
            foreach (Thread t in threads) t.Join();
        }

        private static bool IsAllThreadStopped(List&amp;lt;Thread&amp;gt; threads)
        {
            foreach (Thread t in threads)
            {
                if (t.ThreadState != ThreadState.Stopped) return false;
            }
            return true;
        }</pre>
&nbsp;

&nbsp;

其實這卅幾行 code, 大都花在控制執行緒上面，有興趣的讀者可以翻翻我之前寫的那系列文章，我就不多作說明了。調整之後，這個世界變的更不可測了，一樣的起始環境，連上帝 (在這模擬世界裡，我就是上帝 XD) 都無法預測下一秒會發生什麼事...

<img style="display: inline; border: 0px;" title="image" src="/wp-content/be-files/WindowsLiveWriter/3/14B4CC9D/image.png" alt="image" width="519" height="541" border="0" />

&nbsp;

感覺就好像看電視一樣。畫面不斷的在閃動，而畫面裡的細胞會不規責的跳動，不像上一版程式一樣，每刷一次就變一次那樣的枯燥無聊。如果畫面呈現的地方再多用點心思，就可以弄的像卡通一樣，每個細胞都各自用自己的步調在活著...

到這裡，如何? 應該沒有人把作業寫到這個樣子了吧 XD (就說別抄我的程式去交作業了)。不適當的利用執行緒，也做的到類似的結果。不過，你花費的代價會很大，因為你的程式得自己來做 context switch (這些是 OS + thread scheduler 會幫你解決掉的，只要你曉得要用 thread)。

接下來下一篇，我們再繼續調整這世界的遊戲規則，加入更多元素進去，看看程式會變怎樣? 多執行緒解決時間的問題了，再來我們要用繼承及多型，讓不同的生命可以在同一個世界下共同生活...  ((待續))

&nbsp;
<div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:b1926623-59e3-4aef-a8a8-dd6457f93278" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://columns.chicken-house.net/wp-content/be-files/WindowsLiveWriter/3/5579A0F9/BLOG_3.zip" target="_self">Multi-Thread Source Code</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2009-09-15 02:26:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-15 02:26:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b23-%e6%99%82%e5%ba%8f%e7%9a%84%e6%8e%a7%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-20 20:37:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-20 20:37:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OO的好處真的在擴展方面很明顯
例如做出基本生物後，利用繼承+不同的屬性與事件就變成全新的生物，生存/死亡/生產/獵食等級(體型)等條件增加還可以做出類似生物鏈的感覺。(這已經不是細胞了:p)
還可以做出全新的屬性如遷徙：食物不足(少於某量)時生物會主動往某方向移動：可推展出遷徙速度、耐飢餓能力(遷徙時多少時間內仍沒有適合的環境即死亡)。
再來還可以做出自行演化，例如某生物常處於飢餓狀態時就會逐漸演化成體型小、食量少、遷徙快、不易生產的屬性，反之亦然，而穩定的話則是以目前值隨機小幅改變(如您的狀態時間差是10%一般)。也可以繼承演化成突變，在生產時會以某一機率出現屬性大幅改變的獨特種(例如某屬性增加或減少50%)，至於這獨特種是會馬上滅絕還是發揚光大就看他自己的命運了。

至於世界也可以做擴展：例如草地量；或是直接做成更複雜的降雨量、日曬量等基礎屬性可影響草地的生長速度與類型，而草地就直接視為生物而不屬於世界屬性。而隨著時間可以改變這些基礎屬性，做出四季的感覺。

嗯，愈來愈有'神'的感覺了。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-21 01:54:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-21 01:54:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[套句 matrix 的台詞...

welcome to the real world :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[設計案例] 生命遊戲#2, OOP版的範例程式</title>
		<link>http://columns.chicken-house.net/2009/09/14/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b22-oop%e7%89%88%e7%9a%84%e7%af%84%e4%be%8b%e7%a8%8b%e5%bc%8f/</link>
		<pubDate>Mon, 14 Sep 2009 01:32:02 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/14/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b22-OOPe78988e79a84e7af84e4be8be7a88be5bc8f.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>還好，第一版的程式沒有難產。這版的目的很簡單，就是把題目實作出來，同時我會盡量套用物件導向的理念去設計程式的結構，而不是只把結果算出來而已。其實我一直覺的，這類生命模擬的程式，是非常適合用OOPL來實作的範例，大概OOPL所有強調的特性 (封裝、繼承、多型、動態聯結... 等等) 都用的到，算是完美的應用範例題吧! </p>  <p>不過很奇怪的，我特地 GOOGLE 了一下，不知 OOPL 高手都不屑寫這種範例還是怎樣，找到的範例程式，不管用什麼語言 (C/C++/Java/C#都有) 寫的，清一色都很沒有物件導向的 fu ... 好吧，只好自己來寫一個。</p>  <p>第一步，一定是先看看你的程式，分析出需要那些類別/物件，及它們之間的關係。比較正規的作法就是 UML 的 UseCase 了。不過這範例其實不大，我就直接跳到 Class Diagram 了 (因為VS2008剛好有現成的...)... 主要的類別有兩個: World (世界) 及 Cell (細胞)。</p>  <p>World 就是給 Cell 生活的空間，我們只訂義一個有限大小的二維空間，就一個 M x N 的棋盤這樣。而 Cell 則是一個細胞，描述單一一個細胞本身，在各種不同的條件下會有什麼反應。先貼一下 class diagram:</p>  <p>&#160;</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/2OOP/38218C71/image.png" width="453" height="343" />&#160;&#160; <br />圖1. class diagram (World &amp; Cell)</p>  <p>老實說，這張圖還蠻乏善可陳的，World對外公開的介面，大概包含了幾個主要功能，就是取得指定座標的 Cell (GetCell), 及把目前的整個 World 狀態印出來 (ShowMaps) 的 method 而已。而 Cell 的公開介面，不外乎是它目前是活著還是死的，還有它的建構式，及呼叫後會把狀態轉移到下一次狀態的 method。</p>  <p>其它都是 World / Cell 互相溝通用，或是 Init 用的 Method / Prop, 就不多作介紹。先來看看主程式，扮演上帝的你，如何讓這堆單細胞生物，在你的世界裡活起來:</p>  


<div><b>Game Of Life 主程式</b><span class="copycode" title="copy code into clipboard."></span>

<pre>        static void Main(string[] args)
        {
            int worldSizeX = 30;
            int worldSizeY = 30;
            int maxGenerationCount = 100;

            World realworld = new World(worldSizeX, worldSizeY);
            for (int generation = 1; generation &lt;= maxGenerationCount; generation++)
            {
                realworld.ShowMaps(string.Format(&quot;Generation: {0}&quot;, generation));
                Thread.Sleep(1000);

                for (int positionX = 0; positionX &lt; worldSizeX; positionX++)
                {
                    for (int positionY = 0; positionY &lt; worldSizeY; positionY++)
                    {
                        // do day pass
                        Cell cell = realworld.GetCell(positionX, positionY) as Cell;
                        cell.OnNextStateChange();
                    }
                }
            }
        }</pre>
<!-- end of code area --></div>

<p>&#160;</p>

<p>主程式我還沒把不相干的動作刪掉，也才廿一行... line 1 ~ 5 只是初始值，line 6 建立整個世界，之後就每跑完一個世代 (generation) 就休息一秒鍾，繼續下一次進化。這樣隨著時間的過去，畫面上會一直更新整個世界的狀態... 直到只定的次數到了為止。</p>

<p>&#160;</p>

<p>class World 的部份就沒什麼特別的，就只是把一個二維陣列包裝一下而已。直接貼 Code 就混過去吧 XD，一樣沒有刪掉程式碼，原 CODE 照貼:</p>

<div><b>class World 的程式碼</b>
    <pre>    public class World
    {
        private int SizeX = 0;
        private int SizeY = 0;
        private Cell[,] _map;
        public World(int maxPosX, int maxPosY)
        {
            this._map = new Cell[maxPosX, maxPosY];
            this.SizeX = maxPosX;
            this.SizeY = maxPosY;

            for (int posX = 0; posX &lt; maxPosX; posX++)
            {
                for (int posY = 0; posY &lt; maxPosY; posY++)
                {
                    this._map[posX, posY] = new Cell(this, posX, posY);
                }
            }
        }

        internal void PutOn(Cell item, int posX, int posY)
        {
            if (this._map[posX, posY] == null)
            {
                this._map[posX, posY] = item;
                item.PosX = posX;
                item.PosY = posY;
            }
            else
            {
                throw new ArgumentException();
            }
        }

        public Cell GetCell(int posX, int posY)
        {
            if (posX &gt;= this.SizeX) return null;
            if (posY &gt;= this.SizeY) return null;
            if (posX &lt; 0) return null;
            if (posY &lt; 0) return null;

            return this._map[posX, posY];
        }

        public void ShowMaps(string title)
        {
            Console.Title = title;
            Console.SetWindowSize(this.SizeX * 2, this.SizeY);
            Console.SetCursorPosition(0, 0);
            Console.Clear();

            for (int y = 0; y &lt; this.SizeY; y++)
            {
                for (int x = 0; x &lt; this.SizeX; x++)
                {
                    Cell item = this.GetCell(x, y);
                    Console.SetCursorPosition(x * 2, y);
                    Console.Write(item.IsAlive? &quot;●&quot;:&quot;○&quot;);
                }
            }
        }
    }</pre>
<!-- end of code area --></div>

<p>&#160;</p>

<p>接下來是封裝每個細胞本身跟環境互動的影響，把上一篇講的規則對應成程式碼的樣子。先來看看 CODE:</p>

<div><b>class Cell 的程式碼</b>
    <pre>    public class Cell //: Life
    {
        protected World CurrentWorld { get; private set; }

        internal int PosX = 0;
        internal int PosY = 0;

        private const double InitAliveProbability = 0.2D;


        private static Random _rnd = new Random();
        public Cell(World world, int posX, int posY) //: base(world, posX, posY)
        {
            this.CurrentWorld = world;

            // setup world
            this.PosX = posY;
            this.PosY = posY;
            this.CurrentWorld.PutOn(this, posX, posY);

            this.IsAlive = (_rnd.NextDouble() &lt; InitAliveProbability);
        }

        public bool IsAlive { get; private set; }

        protected IEnumerable&lt;Cell&gt; FindNeighbors()
        {
            foreach (Cell item in new Cell[] {
                this.CurrentWorld.GetCell(this.PosX -1, this.PosY-1),
                this.CurrentWorld.GetCell(this.PosX, this.PosY-1),
                this.CurrentWorld.GetCell(this.PosX+1, this.PosY-1),
                this.CurrentWorld.GetCell(this.PosX-1, this.PosY),
                this.CurrentWorld.GetCell(this.PosX+1, this.PosY),
                this.CurrentWorld.GetCell(this.PosX-1, this.PosY+1),
                this.CurrentWorld.GetCell(this.PosX, this.PosY+1),
                this.CurrentWorld.GetCell(this.PosX+1, this.PosY+1)})
            {
                if (item != null) yield return item;
            }
            yield break;
        }

        public void OnNextStateChange()
        {
            int livesCount = 0;
            foreach (Cell item in this.FindNeighbors())
            {
                if (item.IsAlive == true) livesCount++;
            }

            if (this.IsAlive == true &amp;&amp; livesCount &lt;1)
            {
                //孤單死亡：如果細胞的鄰居小於一個，則該細胞在下一次狀態將死亡。
                this.IsAlive = false;
            }
            else if (this.IsAlive == true &amp;&amp; livesCount &gt;= 4)
            {
                //擁擠死亡：如果細胞的鄰居在四個以上，則該細胞在下一次狀態將死亡。
                this.IsAlive = false;
            }
            else if (this.IsAlive == true &amp;&amp; (livesCount == 2 || livesCount == 3))
            {
                //穩定：如果細胞的鄰居為二個或三個，則下一次狀態為穩定存活。
                //this.IsAlive = true;
            }
            else if (this.IsAlive == false &amp;&amp; livesCount == 3)
            {
                //復活：如果某位置原無細胞存活，而該位置的鄰居為三個，則該位置將復活一細胞。
                this.IsAlive = true;
            }
            else
            {
                // ToDo: 未定義的狀態? assert
            }
        }
    }</pre>
<!-- end of code area --></div>

<p>這裡開始應用到 OOPL 第一個特性: 封裝。從程式碼可以看到，主要的邏輯都被包在裡面了，就 Game Of Life 裡提到的四條規則。</p>

<p>程式這樣寫起來，比那些作業的標準答案看起來舒服多了吧? 雖然行數多了一些，不過看起來比較有 OO 的樣子了。當然只是看起來爽是沒用的，這樣的架構，到目前為只除了邏輯清楚一點之外，還看不到其它很明顯的好處。不過當這個規責稍微複雜一點，OOPL的優點就會被突顯出來了。</p>

<p>下回，把題目做點變化，再來看看程式該如何調整…&#160;&#160; ((待續))</p>

<p>--
  <br />附件: 範例程式碼 </p>

<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:02bb5ed8-262e-4d77-bdb5-6100d1a9a8c3" class="wlWriterEditableSmartContent"><p><div><a href="http://columns.chicken-house.net/wp-content/be-files/WindowsLiveWriter/2OOP/35ED9624/BLOG_2.zip" target="_self">SourceCode.zip</a></div></p></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2009-09-14 01:32:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-14 01:32:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b22-oop%e7%89%88%e7%9a%84%e7%af%84%e4%be%8b%e7%a8%8b%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] 生命遊戲#1, 前言</title>
		<link>http://columns.chicken-house.net/2009/09/12/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b21-%e5%89%8d%e8%a8%80/</link>
		<pubDate>Sat, 12 Sep 2009 04:09:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/09/12/e8a8ade8a888e6a188e4be8b-e7949fe591bde9818ae688b21-e5898de8a880.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>[前言]</p>  <p>好久沒寫點自己覺的有內容的東西了... 最近 code 寫的少，實在沒有什麼了不起的新技術可以分享，而 thread 那種 &quot;古典&quot; 計算機科學的東西也寫的差不多了.. 就懶了起來。</p>  <p>雖然沒新技術好寫，不過老狗玩的把戲還是能榨出點渣的... 很多人都熟新技術，可以寫出很炫的程式，不過也常看到程式的結構真的是亂搞一通的... 所以我打算寫些 [設計案例] 的文章，舉一些我實作過的案例，說明什麼樣的問題可以用什麼方式或技術來解決。其實我想寫的就是像 design patterns 那類的東西，只不過我程度還差的遠，只能稱作 &quot;案例&quot; ... Orz</p>  <p>----------------------------------------------------------------------------------</p>  <p>最近 facebook 上有一些小遊戲，不知道在紅什麼... 突然間大家都在玩，就都是些模擬遊戲，像是開心農場、My FishBowl … 之類的，你要在裡面種東西或養魚，條件充足就會長大，收成等等... 然後透過 Facebook API 可以跟別人互動的遊戲。看到這類的 GAME，不禁想起過去在唸書時，幾個經典的作業題目，其中一個 [生命遊戲] (Game of Life) 就是這種 GAME 的始祖...</p>  <p>在 Wiki 找的到這段介紹:</p>  <blockquote>   <p><a title="http://zh.wikipedia.org/zh-hk/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" href="http://zh.wikipedia.org/zh-hk/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F"><em><font color="#008000">http://zh.wikipedia.org/zh-hk/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F</font></em></a></p>    <p><em><font color="#008000"><b>生命遊戲</b>（Game of Life），又稱<b>生命棋</b>，是</font></em><a href="http://zh.wikipedia.org/zh-hk/%E8%8B%B1%E5%9B%BD"><em><font color="#008000">英國</font></em></a><a href="http://zh.wikipedia.org/zh-hk/%E6%95%B0%E5%AD%A6%E5%AE%B6"><em><font color="#008000">數學家</font></em></a><a href="http://zh.wikipedia.org/zh-hk/%E8%A9%B9%C2%B7%E4%BD%95%E9%A0%93%C2%B7%E5%BA%B7%E5%A8%81"><em><font color="#008000">約翰·何頓·康威</font></em></a><em><font color="#008000">（John Horton Conway）在</font></em><a href="http://zh.wikipedia.org/zh-hk/1970%E5%B9%B4"><em><font color="#008000">1970年</font></em></a><em><font color="#008000">發明的</font></em><a href="http://zh.wikipedia.org/zh-hk/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F"><em><font color="#008000">細胞自動機</font></em></a><em><font color="#008000">（cellular automaton，也翻譯成「格狀自動機」）。</font></em></p>    <p><em><font color="#008000">它最初於</font></em><a href="http://zh.wikipedia.org/zh-hk/1970%E5%B9%B4"><em><font color="#008000">1970年</font></em></a><a href="http://zh.wikipedia.org/zh-hk/10%E6%9C%88"><em><font color="#008000">10月</font></em></a><em><font color="#008000">在《</font></em><a href="http://zh.wikipedia.org/zh-hk/%E7%A7%91%E5%AD%B8%E7%BE%8E%E5%9C%8B%E4%BA%BA"><em><font color="#008000">科學美國人</font></em></a><em><font color="#008000">》（Scientific American）雜誌中</font></em><a href="http://zh.wikipedia.org/w/index.php?title=%E9%A6%AC%E4%B8%81%C2%B7%E8%91%9B%E7%99%BB%E8%83%BD&amp;action=edit&amp;redlink=1"><em><font color="#008000">馬丁·葛登能</font></em></a><em><font color="#008000">（Martin Gardner）的「數學遊戲」專欄出現。</font></em></p> </blockquote>  <p>1970… 我還沒出生... Orz, 不過, 這麼一個古老經典的問題，找的到一大堆範例程式，或是作業解答。清一色是用 C 這類配的上它的年紀的程式語言寫的，就算有 JAVA 版，大概也是換湯不換藥... 這四十年程式語言及軟體技術的進步，寫這種程式總該有點改變吧?</p>  <p>這篇我想寫的，就是這樣的問題，配合現在的 .NET / C#，能怎麼寫它? 這年代的軟體開發技術，對這種古典的程式能發揮什麼效益? </p>  <p>(警告: 剛好要交作業的人，可千萬別用我的方法交出去啊... 你的助教看不懂可能會給你零分...)</p>  <p>先找個範例來看看... 為了不讓過多的畫面處理程式碼，干擾到主程式的架構，我特地找了兩個 console based 的範例:</p>  <p>Java 版:   <br /><a title="http://tw.myblog.yahoo.com/dust512/article?mid=25&amp;prev=28&amp;next=-1" href="http://tw.myblog.yahoo.com/dust512/article?mid=25&amp;prev=28&amp;next=-1">http://tw.myblog.yahoo.com/dust512/article?mid=25&amp;prev=28&amp;next=-1</a></p>  <p>多語言版 (C, Java, Python, Scala):   <br /><a title="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/LifeGame.htm" href="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/LifeGame.htm">http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/LifeGame.htm</a></p>  <p>這... 這就是典型的 &quot;Java 版 C 程式碼&quot; 的範例... 用 Java 來寫只寫這樣，有點用牛刀的感覺... 新的開發環境強調這幾項:</p>  <ol>   <li>物件導向 (封裝，多型，動態連結... etc)</li>    <li>多執行緒</li>    <li>其它語言特色 (這次會講到的是 yield return)</li> </ol>  <p>這些技術怎麼套進這程式? 先來看看這遊戲有幾個障礙要克服吧。遊戲的規則簡單明瞭，借轉貼上面第二個範例的說明:</p>  <blockquote>   <p><small><em><font color="#008000">生命遊戲（game of life）為1970年由英國數學家J. H. Conway所提出，某一細胞的鄰居包括上、下、左、右、左上、左下、右上與右下相鄰之細胞，遊戲規則如下：           <br /></font></em></small></p>    <ol>     <li><small><em><font color="#008000">孤單死亡：如果細胞的鄰居小於一個，則該細胞在下一次狀態將死亡。</font></em></small></li>      <li><small><em><font color="#008000">擁擠死亡：如果細胞的鄰居在四個以上，則該細胞在下一次狀態將死亡。</font></em></small></li>      <li><small><em><font color="#008000">穩定：如果細胞的鄰居為二個或三個，則下一次狀態為穩定存活。</font></em></small></li>      <li><small><em><font color="#008000">復活：如果某位置原無細胞存活，而該位置的鄰居為三個，則該位置將復活一細胞。</font></em></small></li>   </ol> </blockquote>  <p>以前我最討厭寫這種程式了，這種程式寫起來就跟 Regexp 一樣，是 &quot;write only” 的 code… 怎麼說? 程式寫好後，可能自己都看不懂了，因為邏輯被切的亂七八糟... GAME 裡可能同時有好幾個細胞，每個都有獨立的規則，不過程式卻是一個主迴圈，每次執行每個細胞的一小段邏輯... 程式的流程就這樣被切碎了... 我打算用C#的 yield return, 解決這邏輯破碎的問題。</p>  <p>第二個障礙，就是這類程式，某種程度都是隨著時間的進行而跑的，比如上面的條件都是 &quot;下一次狀態&quot; … 把每次狀態改變定義一個時間 (比如一秒)，這就是個 realtime 的模擬程式了。如果有的細胞是一秒改變一次狀態，有的是兩秒，有的是五秒... 那就傷腦筋了... 你的程式會被切的更破碎... 這些每種細胞特殊的部份，我打算用 OOP 的多型來解決。</p>  <p>最後，這種很明顯是 &quot;並行&quot; 的問題，照道理來說，用多執行緒是最適合的了。不過隨便也有成千上萬個 &quot;細胞&quot; 在成長，每個都來一個 thread 養它，再高級的 server 都撐不住吧? 這邊會來探討一下，怎麼用執行緒相關的技巧，來解決這問題。</p>  <p>&#160;</p>  <p>--------------------------------------------------------------------------------------</p>  <p>寫到這裡，突然覺的這題目好大... Orz, 搞不好這幾篇要撐幾個月才寫的完... 至少有個題材好寫，等到我生出第一個 sample code, 就會有下一篇了... 如果有同好也想試試看的，也歡迎分享看看你的 code… 只不過我沒像 darkthread 有本錢提供<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/07/21/win-a-vsts-2008.aspx">獎品</a>... 哈哈 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2009-09-12 04:09:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-12 04:09:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b21-%e5%89%8d%e8%a8%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<category domain="category" nicename="game_of_life"><![CDATA[系列文章: 生命遊戲]]></category>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[araon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[araonliu@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-12 10:10:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-12 10:10:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thread的配置可以交給ThreadPool, 比其自己new一大堆, ThreadPool管理比較有效率]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-12 18:48:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-12 18:48:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以將得到的獎再繼續給得獎的人…]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-09-12 22:14:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-09-12 22:14:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[獎品早用掉了，而且快用完了 XD]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>HVRemote (Hyper-V Remote Management Configuration Utility)</title>
		<link>http://columns.chicken-house.net/2009/08/16/hvremote-hyper-v-remote-management-configuration-utility/</link>
		<pubDate>Sun, 16 Aug 2009 02:43:27 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/08/16/HVRemote-(Hyper-V-Remote-Management-Configuration-Utility).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>被這東西搞了半天，過了幾個月後發現有善心人事寫了個工具，今天看到了特地來記一篇... 免的以後又忘了 @@</p>  <p>話說 Microsoft 從幾年前開始被一堆 security 的問題苦惱後，決定所有產品都把安全視為第一優先... 這是件好事啦，不過為了 security 問題，真的會把 MIS 及 DEV 的相關工作難度加上好幾倍... 今天這個就是一例: 在沒有 AD 環境下，如何遠端的管理 Hyper-V server ?</p>  <p>之前把家裡的 SERVER 升級到 Windows Server 2008 + Hyper-V, PC 升級為 Vista 後，當然很高興的抓了 Hyper-V 的遠端管理工具回來裝。想說大概跟以往的 MMC 一樣，輸入 SERVER 的資訊，帳號密碼打一打，就可以用了...</p>  <p>事情當然沒這麼簡單，不然就沒這篇了... 直接使用的結果當然只是丟個沒權限之類的訊息。GOOGLE 找了一下解決方式... 找到這文章 (有五篇，別以為很辛苦的把它照作就結束了，還有 part 2 ~ part 5 @@):</p>  <p><a title="http://blogs.technet.com/jhoward/archive/2008/03/28/part-1-hyper-v-remote-management-you-do-not-have-the-requested-permission-to-complete-this-task-contact-the-administrator-of-the-authorization-policy-for-the-computer-computername.aspx" href="http://blogs.technet.com/jhoward/archive/2008/03/28/part-1-hyper-v-remote-management-you-do-not-have-the-requested-permission-to-complete-this-task-contact-the-administrator-of-the-authorization-policy-for-the-computer-computername.aspx">http://blogs.technet.com/jhoward/archive/2008/03/28/part-1-hyper-v-remote-management-you-do-not-have-the-requested-permission-to-complete-this-task-contact-the-administrator-of-the-authorization-policy-for-the-computer-computername.aspx</a></p>  <p>&#160;</p>  <p>細節就不講了，要調整的步驟還真它X的多... 先在 CLIENT / SERVER 都建好帳號，防火牆要允許 WMI，DCOM... 再設定 WMI 相關的權限給指定的帳號，還有後續一堆安全相關的設定要開... 最後搞了半天，真的成功了，不過... 最近趕流行，把 Vista 換成 Windows 7... 真糟糕，這堆步驟又要來一次 @@</p>  <p>這次又找了一下解決方式，還是一樣有這堆設定要改，不過跟幾個月前找到的同一個 BLOG，版主真是個好人，他把他整理出來的步驟寫成了個工具: HVRemote.wsf … 沒錯，就只是個 script 而已，不過它可不簡單。先看一下它的網站:</p>  <p><a title="http://blogs.technet.com/jhoward/archive/2008/11/14/configure-hyper-v-remote-management-in-seconds.aspx" href="http://blogs.technet.com/jhoward/archive/2008/11/14/configure-hyper-v-remote-management-in-seconds.aspx">http://blogs.technet.com/jhoward/archive/2008/11/14/configure-hyper-v-remote-management-in-seconds.aspx</a></p>  <p><a title="http://code.msdn.microsoft.com/HVRemote" href="http://code.msdn.microsoft.com/HVRemote">http://code.msdn.microsoft.com/HVRemote</a></p>  <p><a title="http://technet.microsoft.com/en-us/library/ee256062(WS.10).aspx" href="http://technet.microsoft.com/en-us/library/ee256062(WS.10).aspx">http://technet.microsoft.com/en-us/library/ee256062(WS.10).aspx</a></p>  <p>作者把上面那一大串的步驟都寫成 script 了，你只要把這 script 抓下來，放到 client / server 都執行一次，就搞定了 :D&#160; 真專業，還有一份很完整的操作說明 PDF 檔... 一定要推一下這個工具 (Y)</p>  <p>&#160;</p>  <p>附帶提一下，Hyper-V 遠端管理工具是透過 MMC 來執行的，但是我喜歡像 Remote Desktop 那種簡單的作法，只要開個連線工具，驗證過之後就可以遠端桌面這樣... Hyper-V 也有提供這樣的工具。只要裝好管理工具，你的電腦就會有這檔案:</p>  <p>C:\Program Files\Hyper-V\vmconnect.exe</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/HVRemoteHyperVRemoteManagementConfigurat/425ECE48/image.png" width="481" height="240" /> </p>  <p>&#160;</p>  <p>搞什麼，連登入視窗都弄的跟 Remote Desktop Client 一模一樣，有時不小心還真會弄錯 =_=</p>  <p>開起來後就是大家熟悉的 Hyper-V 遠端管理的畫面了。這工具只是讓你省掉從 MMC 去 connect VM 這些步驟而以，像 RDP 一樣開了就能用:</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/HVRemoteHyperVRemoteManagementConfigurat/61A1751B/image.png" width="590" height="500" /> </p>  <p>&#160;</p>  <p>當然透過這工具，上面那堆設定步驟也要照做才會通啦，只是順帶提一下這個 tips 而已。有了 HVRemote 這工具，要設定遠端管理 Hyper-V VM 就更輕鬆了，有需要的人就參考看看吧!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2009-08-16 02:43:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-08-16 02:43:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hvremote-hyper-v-remote-management-configuration-utility]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>JPEG XR (就是 Microsoft HD Photo 啦) 已經是 ISO 正式標準了...</title>
		<link>http://columns.chicken-house.net/2009/08/05/jpeg-xr-%e5%b0%b1%e6%98%af-microsoft-hd-photo-%e5%95%a6-%e5%b7%b2%e7%b6%93%e6%98%af-iso-%e6%ad%a3%e5%bc%8f%e6%a8%99%e6%ba%96%e4%ba%86/</link>
		<pubDate>Wed, 05 Aug 2009 02:30:49 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/08/05/JPEG-XR-(e5b0b1e698af-Microsoft-HD-Photo-e595a6)-e5b7b2e7b693e698af-ISO-e6ada3e5bc8fe6a899e6ba96e4ba86.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>先寫在前面，這篇不是什麼技術的探討或是評論，純脆是我個人看到這消息的想法而已。很久沒貼些軟體相關的文章了，最近比較少在動手寫 Code, 自然就沒什麼新題材好寫 @@，不過這兩天倒是看到一個蠻令人興奮的新聞，就是:</p>  <p>&#160;</p>  <p><strong><font color="#008000" size="4">JPEG XR 已經正式通過 ISO 標準了!!</font></strong></p>  <p>&#160;</p>  <p><a title="http://jpeg.org/newsrel26.html" href="http://jpeg.org/newsrel26.html">http://jpeg.org/newsrel26.html</a>    <br /><a title="http://blogs.msdn.com/billcrow/archive/2009/07/29/jpeg-xr-is-now-an-international-standard.aspx" href="http://blogs.msdn.com/billcrow/archive/2009/07/29/jpeg-xr-is-now-an-international-standard.aspx">http://blogs.msdn.com/billcrow/archive/2009/07/29/jpeg-xr-is-now-an-international-standard.aspx</a></p>  <p>&#160;</p>  <p>JPEG 應該已經無人不知，無人不曉了吧? 不過當年還是有朋友鬧過笑話... 曾有人正經八百的來問我</p>  <p>&quot;什麼是 [結合照片專業群組] 啊???&quot; 就是 JPEG 啦 (無聊的話看一下底下的題外話)</p>  <blockquote>   <p><font color="#808080">我還丈二金剛摸不著頭腦，把他在看的整篇文章拿過來看，才晃然大悟他到底在問啥 =_= ... 原來是 &quot;JPEG: Joint Photographic Experts Group”的縮寫... 當然類似的 MPEG (Moving Picture Experts Group) 也碰過類似的笑話... 無聊 GOOGLE 一下，竟然還查的到一篇範例...</font></p> </blockquote>  <blockquote>   <p><a title="http://support.microsoft.com/default.aspx/kb/235928/zh-tw" href="http://support.microsoft.com/default.aspx/kb/235928/zh-tw"><font color="#808080">http://support.microsoft.com/default.aspx/kb/235928/zh-tw</font></a></p>    <p><font color="#808080">My God… 這翻譯真是比之前碰到了 &quot;<a href="/post/e6b0b4e99bbbe5b7a5e697a5e8aa8c-4-e9858de68ea5e99bbbe8a9b1e7b79a-amp3b-e7b6b2e8b7afe7b79a.aspx">註冊傑克</a>&quot; 還絕 XD...</font></p> </blockquote>  <p>之前其實沒特別注意這些標準，曾經有印像的就是用 wavelet 壓縮方式的 JPEG2000... 嘗試取代 JPEG，也取得 ISO 的標準化，不過一直沒達成它的目的，只在特定領域還有應用空間。兩年前 Microsoft 隨著 Vista / WPF 推出 Windows Media Photo 的格式，後來為了讓它成為標準，換了個叫沒有 MS 色彩的名字: HD Photo, 最後變成現在的 JPEG XR ..</p>  <p>我是在兩年前，隨著 .NET 3.0 推出 WPF，剛好自己用的 CANON 相機的 RAW FILE 又被 WPF 支援，所以開始<a href="/category/WPF.aspx">研究</a>相關的 API 及 support .. 在關於 HD Photo 眾多報導中，有個觀點是我相當認同的。找不到較具代表性的消息來源，我就憑記憶寫一下，大意是:</p>  <p>&#160;</p>  <p>隨著技術進步，未來影像設備 (如印表機，掃描器，顯示器等等) 的色彩表現能力及色域會遠超過 JPEG 格式的範圍 (現在就是了)，因此儲存格式支援的動態範圍 (dynamic range) 越高，對於影像的長期保存越重要。</p>  <p>&#160;</p>  <p>這就是處女座的龜毛個性啊... 衝著這個看法，我從 Canon PowerShot G2 時代開始，我就試著盡量用 .CRW 格式 (CANON RAW) 來保存相片，而不是用 JPEG。後來換了 Canon PowerShot G9，正好 WPF 出來，我就開始改用保存 .CR2 檔，而另外轉一份 JPEG 檔來作一般用途 (畢竟 JPEG 還是方便的多)。不過一張照片花掉 15 ~ 20mb, 保存起來壓力還真不小 =_=</p>  <p>&#160;</p>  <p>現在看到 JPEG XR 的標準化，正好是我要的東西啊 :D&#160;&#160; 我需要的正是個能妥善保存這些影像資料細節的方式，同時能讓我輕鬆愉快的使用，不用耽心工具支不支援，或是其它五四三等問題困擾...。這些問題對阿宅來說，一點都不困難，有一缸子的工具辦的到，不過... 如果隨變看個照片，或是要 COPY 給家人朋友看，還要動用一堆雞絲，那也太辛苦了一點... 能有個通用的標準格式及大廠背書，那是再好也不過了 :D</p>  <p>&#160;</p>  <p>所以，接下來要做什麼? 我突然慶興我一直都有留著這幾年拍下來的 RAW file (.CRW / .CR2) 檔案... 該是替我的歸檔程式翻新的時後了，下一步是開始嘗試用 .WDP 來取代現在放兩份 RAW + JPEG 的方式... </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2009-08-05 02:30:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-08-05 02:30:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jpeg-xr-%e5%b0%b1%e6%98%af-microsoft-hd-photo-%e5%95%a6-%e5%b7%b2%e7%b6%93%e6%98%af-iso-%e6%ad%a3%e5%bc%8f%e6%a8%99%e6%ba%96%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>拼了! 80公里長征... (關渡 - 鶯歌)</title>
		<link>http://columns.chicken-house.net/2009/07/21/%e6%8b%bc%e4%ba%86-80%e5%85%ac%e9%87%8c%e9%95%b7%e5%be%81-%e9%97%9c%e6%b8%a1-%e9%b6%af%e6%ad%8c/</link>
		<pubDate>Tue, 21 Jul 2009 22:39:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/07/21/e68bbce4ba86!-80e585ace9878ce995b7e5be81-(e9979ce6b8a1-e9b6afe6ad8c).aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
自從<a href="/post/e9979ce6b8a1e9a88ee596aee8bb8a.aspx">上次騎了一次關渡到八里</a>之後，其實後來又去騎了幾次，發現也沒想像中的困難嘛，於是這次就計劃來拼長一點的路線... 關渡到鶯歌。會挑這路線，主要是上次騎到二重疏洪道時，有個路人問我:
</p>
<p>
&quot;<font color="#008000"><strong>請問往鶯歌要怎麼騎?</strong></font>&rdquo;
</p>
<p>
我才發現，原來可以騎到鶯歌啊... 不過當下的反應是騎到那邊腿會斷掉吧? 不過用 google maps 看了一下，單程 35 公里 (加上迷路的一段路，來回應該有 80 了)... 之前近 30 公里都拼完了，騎到鶯歌好好休息，再騎回來應該沒什麼了不起吧? 加上上次那篇<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/05/20/3068.aspx">有人</a>留話嗆了一句
</p>
<p>
&quot;<strong><font color="#008000">是男人就要挑戰百里長征啦</font></strong>&quot; 
</p>
<p>
....&nbsp;&nbsp; 愛面子的男人於是就很天真的出發了... =_=
</p>
<p>
很多人問我，為什麼每次都從關渡出發? 哈哈... 原因只有一個: 我很懶 :D，因為那邊捷運出站就有租車店，一輛還可以的變速登山車，當天租一次一台只要一百塊... 想想我一個月頂多騎一次，帶車子搭捷運票價也不止這個錢... 用租的比較方便，所以每次騎的路線就都挑從關渡為起點..
</p>
<p>
不過這次騎完，開始改變想法了... 哈哈，最後面再講。先來看看這次計劃的路線:
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/292C72CA/image.png" border="0" alt="image" title="image" width="704" height="763" /> 
</p>
<p>
有 GOOGLE Maps 真是方便... 這次路線很簡單，前 1/3 是之前騎過的，之前是繞蘆洲三重一圈就回關渡了，這次會過重新橋，就改沿著大漢溪左岸，一路騎到鶯歌鎮...
</p>
<p>
出發前上網查了查，發現很多人騎過這段，最後是參考<a href="http://www.wretch.cc/blog/gaujei/7166453">這個人</a>的行程，看了才知道原來鶯歌有個 [阿婆壽司] ... 特色是便宜又不錯吃。雖然我沒有特別愛吃壽司，不過就把它當個目標吧，不然拼到鶯歌我也不知道要幹嘛 XD
</p>
<p>
算了算時間，一趟算 2.5 hr, 來回 5 hr, 加上一個小時休息吃東西，嗯，不用太早出門... 
</p>
<p>
(<font color="#c0c0c0">啊，大家不要學... 你會後悔的 =_=</font>)
</p>
<p>
2009/07/19 12:25
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/13628A6D/image.png" border="0" alt="image" title="image" width="380" height="500" /> 
</p>
<p>
過程就不多說了 :P，到了關渡捷運站後，東摸西摸，騎上車開始動身後，過了大度路就先拍一張。我懶的拿紙筆出來計了，就拿起相機拍一拍了事 (時間可以從 EXIF 查，正好省掉記錄的動作)，只可惜我的 G9 不支援 GPS ... 不然連地圖都不用標了 :D&nbsp; Canon 你什麼時後要出內建 GPS 的相機...
</p>
<p>
路上的便利商店，買了兩罐冰釀綠茶，加上租車店老闆送的一罐水... 就上路了...
</p>
<p>
2009/07/19 13:37
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/681DF365/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
悠哉的騎了一個小時，到了重新橋... 橋下有跳蚤市場，真熱鬧... 好多人 :D，不過騎著車不好人擠人，就沒進去逛了..
</p>
<p>
2009/07/19 13:43
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/07CCCD2E/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
雖然沒進去逛，不過也是要拍張照紀念。這邊的路標示實在不怎麼清楚，到了橋下就迷路了 :D 哈哈.. 在那邊摸了十幾分鐘，地圖拿出來，還看太陽在那邊認一認方向，硬著頭皮找了對的方向就騎下去... 沒有自行車道，只好走省道，自己識相一點靠邊邊騎...
</p>
<p>
好在沒騎多遠，就找到自行車道 =_=，就一路沿著大漢溪左岸的自行車道一路往西南騎...
</p>
<p>
雖然是 &quot;自行車道&quot;，不過實際上也只是快速道路隔一條出來給自行車專用... 經費的關係吧 @@，沒關係，有就好，標示清楚一點就好。至少這邊不會騎一段就找不到路... 這是好處 :P
</p>
<p>
2009/07/19 14:02
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/798E543D/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
騎到一半，才發現，原來新莊的 IKEA 就在路邊耶 :D
</p>
<p>
沒想到第一次來新莊的 IKEA 是騎著自行車來... 今天沒機會進去逛逛，只好拍張照紀念一下。
</p>
<p>
2009/07/19 14:15
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/39583AC3/image.png" border="0" alt="image" title="image" width="660" height="500" />
</p>
<p>
騎到一半，看到一座天橋，上去後就可以在河提上面繼續騎，或是跨過河提到另一面的巷道裡。我也忘了看誰的文章介紹，他特別介紹了天橋兩側的鐵管... 我就糊理糊塗的跟著牽上去...
</p>
<p>
(大家不要學啊，這條路是錯的 XD 請不要上橋，繼續沿著自行車道騎就好 &hellip;)
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/1FF03789/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
都走錯了，不過走過總要留個記錄，還是貼一下好了，不要小看那兩根鐵管併起來的軌道，這樣子牽單車上橋還真的很輕鬆耶 (Y)(Y)(Y)，不但很輕鬆就推上去了，鐵管中間還能卡著腳踏車的輪胎，不會亂跑，連車子都不用特別去控制它的方向，只要花點力氣把車往前推就好，真是聰明的設計 (Y)
</p>
<p>
2009/07/19 14:32
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/5FBA1E0E/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
沿著河岸騎了一段之後，自行車道到這邊就結束了... 這邊下來把車扛上河提之後，就進入最後一段 [淡水-鶯歌] 10KM 的車道...
</p>
<p>
我是不知道為什麼這段叫 [淡水-鶯歌] 啦 @@，不曉得的人還以為真的 10 KM 就到了... 總之，這 10 KM 騎完就到鶯歌了，快到了快到了...
</p>
<p>
2009/07/19 14:49
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/666D2791/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
遠遠看到這棟建築，還以為是什麼紀念館還是啥的... 原來是個抽水站...
</p>
<p>
2009/07/19 15:05
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/0A264F2C/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
路過看到的，覺的很有意思就拍一下 :D
</p>
<p>
河邊放了一堆消波塊，竟然有人把它漆成這個樣子... 哈哈，真有創意，看起來就像一堆躲在草叢裡探出頭找獵物的迅猛龍...
</p>
<p>
2009/07/19 15:37
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/29D528F4/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
一路都沒看到路標，也不知道到底還多久 @@，最後怎麼覺的那一公里好遠... 騎到這邊早就沒力氣了，都慢慢騎... 總算撐到了鶯歌。看看地圖，其實離火車站沒多遠，不過懶的過去照相了 @@，動身去找阿婆壽司..
</p>
<p>
2009/07/19 16:12
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/255EA82D/image.png" border="0" alt="image" title="image" width="660" height="500" />&nbsp; 
</p>
<p>
一開始問了一個媽媽，說往前騎，看到中正三路左轉就到了 (最後找到的地點是中正一路右轉)...
</p>
<p>
騎錯之後又問一個廿歲左右的小妹妹... 前面路口右轉就到了 (最後是左轉才對 =_=)
</p>
<p>
路人都報錯，我怎麼還找的到? @@，一切都要感謝全家便利商店外面整面牆上畫的地圖... 哈哈，最後是靠那張地圖找到的...
</p>
<p>
停下來吃了盒壽司 + 茶碗蒸，肚子餓了什麼都好吃... 50塊就吃飽了... 順手多帶了一盒回去... 水到這邊也都喝光光，去便利商店再補兩罐...
</p>
<p>
2009/07/19 19:00
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/17202F3D/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/3DEE457D/image.png" border="0" alt="image" title="image" width="660" height="500" />
</p>
<p>
回程的路線都一樣，就不再多介紹了，當然迷路過的地方就不會再走錯了 :P
</p>
<p>
路上河邊有好多人在玩搖控飛機，看了好想也去買來玩... :D&nbsp; 有個傢伙好強，控制的好靈活，其它的只是在亂飛而已。看他表演了好幾招，最後還表演了高級空戰技巧 - <a href="http://www.acewings.com/cobrachen/publish/articles/flightschool/flight-6.htm">英麥曼迴轉</a> (Immelman turn) ... 可惜他秀完這招就降落了 (降落的動作也很乾淨利絡... 其它的看起來都像要墜機的樣子 XD)，不然我大概會在旁邊一直看吧...
</p>
<p>
其實從鶯歌要回程起，早就沒啥力氣了 :D，回來的速度就慢多了，騎回二重已經七點了... 當天天空雲還蠻厚的，不過我鐵齒沒搽防曬油，兩隻手被曬的好痛 Q_Q ...
</p>
<p>
不過也多虧這樣的天氣，當天有晚霞耶... 趕路歸趕路，有大景還是要停下來照一下 :D
</p>
<p>
不過沒背腳架，騎的很累手也拿不穩相機 @@，只好亂拍一通... 貼幾張還可以看的相片....
</p>
<p>
&nbsp;
</p>
<p>
2009/07/19 19:27
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/5D9D1F45/image.png" border="0" alt="image" title="image" width="660" height="500" /> <img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/08758358/image.png" border="0" alt="image" title="image" width="660" height="500" /> 
</p>
<p>
騎到關渡大橋，那段上坡早就沒力了，連試著騎上來的念頭都沒有.. 當大家都往前衝時我就很沒面子的下來用牽的... 哈哈。一路上一直很納悶，怎麼那些身材嬌小的長腿正妹，每個體力都這麼好 =_= 騎在前面跟都跟不上.... 車子比較好的關係嘛 @@
</p>
<p>
牽上橋後，休息一下，相機靠著欄干拍了幾張夜景，拍完就繼續往捷運站趕路了...
</p>
<p>
2009/07/19 19:50
</p>
<p>
<img style="display: inline; border-width: 0px" src="/wp-content/be-files/WindowsLiveWriter/3656ac82c210/762CBC95/image.png" border="0" alt="image" title="image" width="660" height="500" />&nbsp; 
</p>
<p>
總算... 我頭一次這麼期待進到捷運站... 哈哈，總算可以坐下來了... 不然騎一天下來，屁股還真的會痛 @@
</p>
<p>
趕在 20:00 之前，總算拼完今天的行程了 :D&nbsp; 哈哈... 今天這樣騎下來，才發現裝備是很重要的... 平時騎兩三個小時那種就沒差了，要騎長程一點的真的要準備一下... 喝的一次就喝掉五罐小保特瓶... 延路都沒便利商店好補貨... 手套要戴 (不然手會握的很痛)，排汗衣褲 (不然流一堆汗很難過)，適合的背包 (一樣... 不然背很難過)，還有電池夠力的 MP3 (我買了台 <a href="http://www.luxpro.com.tw/product/iPico.htm">iPico</a>, 還不錯 (Y)，連續聽了七個小時... 只有最後一小段路沒得聽)... 
</p>
<p>
最後，挑台自己的車好像也很重要... 哈哈... 這天我動過不只一次的念頭，很想到鶯歌就扛著腳踏車，搭火車回台北... 不過想到還要回到關渡去還車，就很懶... 還是騎回去好了。看看地圖，如果有自己的車的話，搭捷運到永寧，出來就樹林那一帶了，騎一個小時左右就可以到鶯歌了吧，省了不少路 :D&nbsp; 不過等到有買車再試吧...
</p>
<p>
這次相片放在 <a href="http://www.facebook.com/album.php?aid=4743&amp;id=1836073899&amp;l=e32fcd4896">facebook</a> 上，有興趣的人過去看看吧 :D
</p>
<p>
這次在鶯歌，又有路人在鶯歌問我 &quot;<strong><font color="#008000">請問大溪要怎麼去</font></strong>&quot; @@
</p>
<p>
嗯，再說... 這一定是巧合... 這一定是巧合...
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2009-07-21 22:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-21 22:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8b%bc%e4%ba%86-80%e5%85%ac%e9%87%8c%e9%95%b7%e5%be%81-%e9%97%9c%e6%b8%a1-%e9%b6%af%e6%ad%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kevinfan.abyss@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 10:09:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 10:09:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[既然都到了鶯歌，幹麻不來三峽坐坐，你老闆在等你。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[S@M]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sam@chicken-house.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-27 10:35:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-27 10:35:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;一路上一直很納悶，怎麼那些身材嬌小的長腿正妹，每個體力都這麼好 =_= 騎在前面跟都跟不上.... 車子比較好的關係嘛 @@ 

這個我知,因為年紀大了...科科


話說上週也去騎過,從大稻埕到八里,租台北市的車
而且我還可以放雙手騎車過彎哩]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[carol]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lxnujrhu@yahoo.com.hk]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-31 22:49:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-31 22:49:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大溪怎麼走，哈哈
鶯歌火車站，前面那條路，直直走
會到桃園的介壽路
左轉再直直走
不然，走三峽的中正路，三峽老街直走到底
接台三線，爬過一座山，也是直直走o
連彎都省了
就到了^^
我住桃園，倒是常常騎到鶯歌，三峽
是滿想走林口淡水，但~
大大說的好，車要買好一點
上次爬滿月圓差點掛點
屁屁痛了三天 ^^!



]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-04 21:56:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-04 21:56:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Carol, 

騎車爬山 @@，饒了我吧.. 哈哈..
就算有變速，還是很累.. 還是換條平面的路線好了 :D

謝謝你提供的資訊 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>555555 人次紀念!</title>
		<link>http://columns.chicken-house.net/2009/05/13/555555-%e4%ba%ba%e6%ac%a1%e7%b4%80%e5%bf%b5/</link>
		<pubDate>Wed, 13 May 2009 15:40:03 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/05/13/555555-e4babae6aca1e7b480e5bfb5!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="/wp-content/be-files/WindowsLiveWriter/555555_DBB7/image_2.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/555555_DBB7/image_thumb.png" width="717" height="285" /></a> </p>  <p>正好想到，開了自己的部落格來看，啊!!! 總點閱次數: 555551 ...</p>  <p>多按了幾下 F5，就抓到這個畫面 :D</p>  <p>&#160;</p>  <p>沒啥特別的，單純記念一下... 這個幸運兒，只是個 Bot 啦...&#160; T_T</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2009-05-13 15:40:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-05-13 15:40:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[555555-%e4%ba%ba%e6%ac%a1%e7%b4%80%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-15 08:20:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-15 08:20:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真厲害

我的才破10萬而已 ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>關渡騎單車</title>
		<link>http://columns.chicken-house.net/2009/05/05/%e9%97%9c%e6%b8%a1%e9%a8%8e%e5%96%ae%e8%bb%8a/</link>
		<pubDate>Tue, 05 May 2009 03:12:38 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/05/05/e9979ce6b8a1e9a88ee596aee8bb8a.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>這次來寫點不一樣的，寫點休閒的吧。</p>  <p>&#160;</p>  <p>上個月跟家裡大人跟兩個小孩，去了趟關渡騎腳踏車，騎完覺的那邊還不錯 :D，不過因為小孩狀況多，最後沒能騎到八里天就黑了，租來的腳踏車又沒燈，只好半路就折回來了。回家翻了一下地圖，發現只剩 1/3 不到的路程啊 @_@... 於是這次趁著大人帶著小孩回娘家，碰到難得的好天氣，就自己一個人帶著裝備出發去了 :D</p>  <p>計劃要騎的路線很簡單，一點都不困難... 就是從捷運 [關渡站]，往關山公園，沿著淡水河岸的腳踏車道，騎過關渡大橋，到八里老街，再一路騎到十三行博物館。 不過計劃總是跟實際執行時不一樣 =_= ...&#160; 直接來寫流水帳吧... 照我騎的順序看下去...</p>  <p>這篇不是什麼專業的介紹，老實說我也是第一次騎而已，沒做什麼功課，想來參考的可能會失望吧 :D 只是單純的記下來自己留個紀錄而以。有興趣的請繼續往下看 :D</p>  <p>&#160;</p>  <p>&#160;</p>  <h2><strong><font color="#0000ff">1. 捷運關渡站(15:09) ~ 八里渡船碼頭 (16:05), 共 8.4 KM</font></strong></h2>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/306A640E/image.png" width="759" height="803" />&#160; </p>  <p>GOOGLE MAPS 還蠻好用的，地圖跟路線都標的好好的 :D 上面的路線其實是車子走的，跟我真正騎的腳踏車道有點不同... 不過差不多啦，我就借用它的地圖標示一下。上面的每個點 (綠色的英文字母) 就是底下照片標的 ABC，各位可以對照著看。</p>  <p>第一段的路限很簡單，就是到了關渡捷運站後，租了腳踏車就上路了。從關渡捷運站出發，一路騎到八里渡船口而以.. 太陽還不小，但是天空雲也很多，還頗耽心會不會下雨... 因為這次出發帶了一堆配備 (腳架，相機，閃光燈，耳機...)，就是沒帶傘 ... </p>  <p>&#160;</p>  <p><strong><font color="#008000">A. 15:09，捷運關渡站 ( 0.0 km )</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/1C25A79B/IMG_1086CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1086 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1086 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/5BEF8E20/IMG_1086CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>搭了半個多小時的捷運，到了關渡站，拍個照紀念一下。其實這裡沒什麼好照的，只是我也懶的拿紙筆出來記時間了... 哈哈，直接拍個照，回家可以看到照片，也看的到時間...&#160; 突然覺的應該買個有 GPS 的照相手機，這樣拍出來連座標都有了 [Y]</p>  <p>另外一個敗家目標是 MP3 隨身聽... 平常沒在聽，不過自己一個人邊騎車邊聽還真愜意，聽了一下午的陳綺貞... 結果聽到連手機都沒電了 =_=，看來用手機聽 MP3 不是長久之計，有空來物色一台...</p>  <p>好，列入敗家清單內... 出了捷運站就有租腳踏車的地方。雖然看其它網站，都是說要步行 15 分鐘到關渡宮那邊再租車，不過... 實在是懶的多走這 15 分鐘的路程了，在門口的租車店就租下去，到晚上八點，一次一百... </p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><font color="#008000"><strong>B. 15:16，大度路 (0.3km)</strong></font>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/22D8B11E/IMG_1090CanonPowerShotG9768x1024.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1090 (Canon PowerShot G9) (768x1024)" border="0" alt="IMG_1090 (Canon PowerShot G9) (768x1024)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0DE72EAB/IMG_1090CanonPowerShotG9768x1024_thumb.jpg" width="184" height="244" /></a> </p>  <p>騎出巷子口，穿過橋下就到大度路口了，單純覺的這個景跟這個建築，好像在國外的感覺，就順手拍了一張...</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">C. 15:26，關渡棧橋碼頭 (1.1km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/3BD48163/IMG_1091CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1091 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1091 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0D7AFBB6/IMG_1091CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/3B684E6E/IMG_1092CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1092 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1092 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2676CBFB/IMG_1092CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>騎著腳踏車還蠻快的，穿過巷子，經過關渡醫院，到了關度宮，就到 [關渡棧橋碼頭] 了... 十分鐘不到的車程而已。在這邊看到天氣有點陰陰的，遠方已經看的到等等要過去的關渡大橋...</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">D. 15:32，關渡大橋上 (2.5km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/54641EB3/IMG_1095CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1095 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1095 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0251716C/IMG_1095CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>騎起來好像真的沒什麼挑戰 @_@，跟上次載著小孩完全不一樣，一方面親子車本來就不好騎，另一方面自己騎也比較自在一點，不到十分鐘已經在關渡大橋上了... 上橋是吃力了一點，人也多，只好下車用牽的... 這張照片就是在橋邊的步道拍的... 再往前左轉就在橋上了.. </p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">E. 15:56，已經到對岸了 (5.5km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/6D5FEEF8/IMG_1100CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1100 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1100 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/1B4D41B1/IMG_1100CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/1B4D41B1/IMG_1104CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1104 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1104 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/344911F6/IMG_1104CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a>     <br />過到對岸後，沿著河畔騎了廿分鐘左右，這個點不知道叫啥名字，會停下來只是喝帶來的冰釀綠茶，也剛好看到有個左右相反的 [八里左岸] 石碑，停下來照個相記錄一下... 不過有對姊妹 (應該是姊妹吧) 抱著狗一直在那邊照... 哈哈，心裡噓了半天還是不肯走... 還一直猛拍，一直拍，一直拍.... =_=，我又不想跟她們慢慢耗...，就讓妳們倆跟愛犬免費登上我的部落格一次吧 =_= ...</p>  <p>&#160;</p>  <p>騎到這邊已經快到八里渡船頭了，沒有想像中的久嘛... 上次竟然騎不到 @_@</p>  <p>&#160; </p>  <p>&#160;</p>  <p><strong><font color="#008000">F. 16:05，八里渡船頭 (8.4km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/344911F6/IMG_1106CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1106 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1106 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/142E0539/IMG_1106CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/421B57F1/IMG_1107CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1107 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1107 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2D29D57E/IMG_1107CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>再往前騎不到十分鐘，就... 到.. 了 @_@，從租到車到騎到八里，也才五十分鐘左右，扣掉停下來喝個水，照個相的時間... Hmm… 果然是很休閒的路線...</p>  <p>這裡一樣一堆人，趕不走 (我也沒那個膽.. 哈哈)，就照進去了 :D</p>  <p>這邊是八里渡船頭，可以直接搭渡輪到淡水碼頭... 就是有顆大蓉樹那邊，還有一堆阿給小吃店的地方。</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2D29D57E/IMG_1109CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1109 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1109 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7412F87B/IMG_1109CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7412F87B/IMG_1112CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1112 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1112 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0D0EC8C1/IMG_1112CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>照完相想繼續往下騎，一路直攻十三行博物館... 不過… My God! 那來這麼多人... 我最討厭人擠人了 :@，看到一堆人就很沒力... 何況牽著車跟本動彈不得... 就放棄繼續往前走的念頭了。</p>  <p>翻了翻地圖，另一邊有生態公園，看看時間跟騎的速度，應該還很夠吧 :D，就改變計劃往回走了... </p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <h2><strong><font color="#0000ff">2. 八里渡船碼頭 (16:05) ~ 疏洪生態公園 (17:20)，共 8.0 KM</font></strong></h2>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0B4405CE/image.png" width="759" height="913" /> </p>  <p>在決定不想擠過人群，往十三行博物館前進之後，看了看地圖，就決定往南騎到生態公園看看，這種地方人應該不會那麼多吧 :D</p>  <p>這一趟的路程也差不多一樣八公里，沒騎過，反正自己一個人就騎看看 :D</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">B. 16:26，八里左岸石碑 (11.3km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/3AFC1B79/IMG_1114CanonPowerShotG9768x1024.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1114 (Canon PowerShot G9) (768x1024)" border="0" alt="IMG_1114 (Canon PowerShot G9) (768x1024)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/260A9906/IMG_1114CanonPowerShotG9768x1024_thumb.jpg" width="184" height="244" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/53F7EBBE/IMG_1119CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1119 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1119 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/6CF3BC03/IMG_1119CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>又回來這裡了! 不過，這次那對姊妹跟狗已經不在了 :D，沒人在拍照...&#160; 終於輪到我拍了 :D</p>  <p>石碑旁邊原來還有說明啊... 剛才都沒看到。本來想拿起相機自拍，不過技術不好，都拍不到後面，腳架也懶的扛出來... 就算了...，繼續往下一站!</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">C. 16:38 岸邊某個休息區 (12.3km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/6CF3BC03/IMG_1122CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1122 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1122 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/05EF8C49/IMG_1122CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> </p>  <p>回程的途中，有一小片沙灘，正好看的到關渡大橋，就照一下紀錄時間...</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">D. 16:50，虹橋廣場 (12.9km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/05EF8C49/IMG_1124CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1124 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1124 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/61CA31B9/IMG_1124CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/61CA31B9/IMG_1128CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1128 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1128 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7AC601FE/IMG_1128CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/36C35B67/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/208D4015/image_thumb.png" width="230" height="244" /></a> </p>  <p>已經騎回來到關渡大橋橋下了，這邊剛好是從橋上下來的自行車道的地方，原來這 SQUARE 叫 &quot;虹橋廣場&quot; 啊... 拍個照。</p>  <p>不過這次沒有要過橋了，繼續沿著左岸往南騎... </p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">E. 17:06 獅子頭長橋 (14.5km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7AC601FE/IMG_1133CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1133 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1133 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/5AAAF541/IMG_1133CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/5AAAF541/IMG_1136CanonPowerShotG9768x1024.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1136 (Canon PowerShot G9) (768x1024)" border="0" alt="IMG_1136 (Canon PowerShot G9) (768x1024)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/73A6C586/IMG_1136CanonPowerShotG9768x1024_thumb.jpg" width="184" height="244" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/66981B1A/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/544F5458/image_thumb.png" width="231" height="244" /></a> </p>  <p>這裡是個半園型的橋... 不大會講，我剛好也沒照 @_@，抓張 GOOGLE MAP 的衛星照來看看... 那個像量角器的東西，就是獅子頭長橋啦...</p>  <p>這邊我只停下來拍照而已，沒多休息就往下一站去了...</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">17:12 觀音坑溪橋 (15.2km)       <br /></font></strong><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2194183F/IMG_1140CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1140 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1140 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0CA295CC/IMG_1140CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/3A8FE884/IMG_1141CanonPowerShotG9768x1024.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1141 (Canon PowerShot G9) (768x1024)" border="0" alt="IMG_1141 (Canon PowerShot G9) (768x1024)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/259E6611/IMG_1141CanonPowerShotG9768x1024_thumb.jpg" width="184" height="244" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7C67E585/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/6057269A/image_thumb.png" width="230" height="244" /></a> </p>  <p>還蠻特別的一座橋，造型不錯就照了一下，其實橋很小一座... 就貼個照片跟 GOOGLE 衛星空照圖意思一下..</p>  <p>&#160; </p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">17:20 疏洪生態公園 (16.0km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/538BB8C9/IMG_1146CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1146 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1146 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/01790B82/IMG_1146CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/6E296C95/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/00060063/image_thumb.png" width="231" height="244" /></a> </p>  <p>不知不覺就騎到目的的了，果然沒很多人，一邊是河一邊是草地，在這邊坐著休息還蠻舒服的... 陪我騎了半天的腳踏車，終於有機會入鏡頭了 :D，叫不出來的牌子，不過還蠻好騎的 (Y)，一次一百塊，我是覺的不貴啦，自己買一台少說四五千吧? 光是帶車子搭捷運就不只這一百塊了 =_=，還是當場用租的方便...</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <h2><strong><font color="#0000ff">3. 疏洪生態公園 (17:20) ~ 捷運關渡站 (19:00)，共 6.6 KM</font></strong></h2>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/72A4F69D/image.png" width="758" height="801" /> </p>  <p>看看時間也差不多了，還得趕回去接大人跟少爺公主回家 =_=，在疏洪生態公園休息一下就回頭了。一路上的風景跟景點都介紹過，就不多提了。在回程的路上，才發現 MP3 隨身聽的重要啊 @_@，一整天聽下來，也沒幾個小時 (3HR左右)，我的手機在接到大人打來的電話之後，就... 沒... 電... 了，嘖嘖，<a href="http://columns.chicken-house.net/post/e696b0e6898be6a99fe79c9fe698afe8ae9a-(y).aspx">windows mobile 的手機</a>聽個 MP3 就這麼耗電...</p>  <p>不過這樣一路聽聽 MP3 還真是過癮，就是這樣我才想去買台來用... 有沒有推薦的? iPod 就不用推了，我沒這麼時尚 @_@...</p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">17:42 關渡大橋 (八里 --&gt; 淡水，19.0 km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/05835954/IMG_1156CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1156 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1156 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/615DFEC4/IMG_1156CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/615DFEC4/IMG_1160CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1160 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1160 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/4142F207/IMG_1160CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/5BE0A5D3/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/34A65C9E/image_thumb.png" width="230" height="244" /></a> </p>  <p>又回到關渡大橋了，這次是從左岸南方的步道上橋，第一張照片是還沒過橋前照的，第二張照片則是同一個地點，拍上來的地方，就是從畫面中間一路往右邊爬上來... 第三張是 GOOGLE MAPS 的空照圖，順手放上來...</p>  <p>這次因為時間的關係，不能待太晚，可惜沒等到晚一點天黑，沒機會拍到關渡大橋的夜景... @_@，看來腳架是白帶了... </p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">18:14 關渡宮前的小吃 (21.5km)</font></strong>    <br /><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2C516F94/IMG_1190CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1190 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1190 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/454D3FD9/IMG_1190CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/4DA22CE3/IMG_1196CanonPowerShotG9.jpg"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="IMG_1196 (Canon PowerShot G9)" border="0" alt="IMG_1196 (Canon PowerShot G9)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/7B8F7F9B/IMG_1196CanonPowerShotG9_thumb.jpg" width="199" height="244" /></a> <a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/669DFD28/image.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/3B596621/image_thumb.png" width="231" height="244" /></a> </p>  <p>繼續往回騎，騎到關渡宮前面的小市集吃東西... 其實當地我也不知道有什麼特別的小吃，就點了平常愛吃的就好... 這邊的鹹鴨蛋好像還蠻出名的，上回大人有買一些，不過這次就沒買了。另外離這裡不遠的淡水很有名的鐵蛋，這邊也有... 不過 $$ 幾乎便宜了一半 (9顆50)，這個吃起來比鹹鴨蛋方便 (哈哈，不用剝殼)，常常買了就當零嘴吃.. =_=</p>  <p>關渡宮就是 GOOGLE 衛星照中間的橘色建築，隔著馬路對面 (橘色屋頂)，一個正方型的建築就是個小吃攤集中的場地... 無奈當天沒啥胃口，吃了一盤蚵仔煎 (五十元) ... 一份花生糖冰淇淋 (卅五元) ... 一顆鐵蛋 (帶了一包回家，九顆 50 元) 就... 飽了 =_=&#160; 不然還有其它的東西想吃一吃... </p>  <p>&#160;</p>  <p>&#160;</p>  <p><strong><font color="#008000">18:24 一堆怪名字的租車店</font></strong>    <br />&#160;<a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/454D3FD9/IMG_1191CanonPowerShotG9768x1024.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1191 (Canon PowerShot G9) (768x1024)" border="0" alt="IMG_1191 (Canon PowerShot G9) (768x1024)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2127E54A/IMG_1191CanonPowerShotG9768x1024_thumb.jpg" width="184" height="244" /></a><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0C3662D7/IMG_1192CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1192 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1192 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2532331C/IMG_1192CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a><a href="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/2532331C/IMG_1197CanonPowerShotG91024x768.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_1197 (Canon PowerShot G9) (1024x768)" border="0" alt="IMG_1197 (Canon PowerShot G9) (1024x768)" src="/wp-content/be-files/WindowsLiveWriter/9cd00c756831/0517265F/IMG_1197CanonPowerShotG91024x768_thumb.jpg" width="244" height="184" /></a></p>  <p>除了蚵仔煎是坐在裡面的位子吃之外，其它我就在路邊的椅子買了就坐下來吃，路邊不是小吃就是租車店，發現他們店名還真有創意... 哈哈，害我邊吃邊笑..</p>  <p>第一家叫 &quot;租八借&quot;，虧老闆想的出來... </p>  <p>第二家叫 &quot;租羅記&quot;，老闆八成姓羅吧... =_=</p>  <p>這邊租一次只要 80，不過搭捷運的話，大概來回得多走個卅分鐘吧，算了，我是懶人，就讓另外的店家多賺廿塊錢吧...</p>  <p>第三家在旁邊一點，喵喵休閒車，人氣就差多了... 哈哈，招牌還在，不過店已經收起來了，底下是掛著店面出租的紅紙... 果然名字好不好記還是有差.. @_@</p>  <p>&#160;</p>  <p><strong><font color="#008000">最後 19:00 整，回到捷運站前的租車店 (22.6km)</font></strong></p>  <p>這裡就沒再拍照了 @_@&#160;&#160;&#160; 沒想到這樣很輕鬆的騎下來，也不知不覺騎了廿幾公里... 夠高速公路從台北開到桃園了吧? 這樣看起來好像還蠻遠的.. 哈哈。自己一個人騎，聽聽 MP3 就不無聊了，騎了多遠也沒什麼感覺，很適合來放鬆的。騎單車還真不錯，有風景可以看不會無聊 (平常騎機車或開車，都不能看風景 =_=)，也 &quot;好像&quot; 有運動到，聽起來比較健康一點... :D </p>  <p>&#160;</p>  <p>下次再看看天氣怎樣，試試別條路線... 看了看<a href="http://tour.tpc.gov.tw/bicycle/a1_1.htm">台北縣市自行車道的介紹</a> (<a href="http://tour.tpc.gov.tw/bicycle/imsages/all.pdf">這裡有地圖PDF檔下載</a>)，其它路線有往淡水 (不過淡水去過幾次，都像八里一樣人擠人 @_@)，也有往關渡自然公園看水鳥的路線 (這路途比較短，不用一個小時就到了吧)....，另外還有往三重方向，可以繞一整圈三重/蘆洲... 還會經過三和夜市... 不知道有沒有好吃的小吃? 還有不知道會不會經過很紅的爆米花店? 哈哈，順便買個兩桶回來 :D</p>  <p>&#160;</p>  <p>雖然自己騎蠻自在的，不過有人要跟團也接受報名啦 :D&#160; 看看下次有沒有機會拼完三重蘆洲這條自行車道... </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2009-05-05 03:12:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-05-05 03:12:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%97%9c%e6%b8%a1%e9%a8%8e%e5%96%ae%e8%bb%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<category domain="category" nicename="past"><![CDATA[當年勇]]></category>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[kennyshu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kennyshu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://kennyshu.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-06 10:12:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-06 10:12:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[騎自行車的話，可以到綠色工廠(http://portable.easylife.idv.tw/)去看看，該blog的主人也是很愛騎自行車的喔～]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-06 13:00:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-06 13:00:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[下次要找黑大，他除了考古也愛騎單車，這個路線，似乎都是他的家常菜。

只是…黑大的生活作息，可能跟您的時間兜不上，唯一可能的應該是2200~0200的夜騎吧~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Darkthread]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mail@blog.darkthread.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-06 13:14:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-06 13:14:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[是男人的話一定要挑戰一下百里長征的啦~~~ http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/05/20/3068.aspx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-06 13:50:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-06 13:50:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈，百里長征... 看來我的 23km 只是小 case ... @_@

下次先來挑戰 50km ...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>個人檔案 + 版本控制...</title>
		<link>http://columns.chicken-house.net/2009/04/20/%e5%80%8b%e4%ba%ba%e6%aa%94%e6%a1%88-%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6/</link>
		<pubDate>Mon, 20 Apr 2009 03:46:36 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/04/20/e5808be4babae6aa94e6a188-2b-e78988e69cace68ea7e588b6.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>自從過年時換了 SERVER 的作業系統，加上過年前 NOTEBOOK 掛掉換 <a href="http://columns.chicken-house.net/post/ThinkPadX40-SSD.aspx">X40 + SSD</a> 之後，這幾個月都陷在東換換西調調的狀態中 @_@, 好在換了 2008 之後，有 Hyper-V 的幫忙，問題簡化不少...。不過今天要講的倒是很不起眼的小東西: <a href="http://subversion.tigris.org/">SVN (Subversion)</a>。</p>  <p>SVN 這種<a href="http://en.wikipedia.org/wiki/Revision_control">版本控制系統</a>，通常是用來作程式碼的版本管理。也對啦，除了軟體開發之外，其它場合好像也不大需要這麼複雜的版本機制。不過這類系統弄多了，平常在非軟體開發的場合，也發現其實很多時後都有檔案版本問題要處理。像是平常的文件 (WORD)，簡報 (PPT) 等等，都會作好一份通用的，碰到 A 客戶就改一改拿來用，B 客戶再改一改... 這不就是 brench / merge 之類的問題嘛? 所以我一直在找這樣的 solution，看看有沒有適合一般使用的。不過到現在，也換了好幾種作法，歷年來試過的作法有好幾種:</p>  <ol>   <li><a href="http://msdn.microsoft.com/en-us/aa740435.aspx">VSS</a> (Microsoft Visual SourceSafe 5.0)       <br />      <br />這個有用過的人，看版本號碼就知道有多古老了… 不過真正在用是 6.0 版開始。因為工作上會用的到，就順便拿來用了。它的好處是很簡單，搞懂它的邏輯就很容易上手。架設也簡單，完全是 File Based, 不需要架設專用的 Server。不過這也是後來換掉它的原因之一。       <br />      <br />它的使用方式，是以嚴格的控制為主要邏輯。什麼意思? 意思是你不能隨意更改檔案，要開使改檔案之前，要先 check-out 才能開始改。這樣的邏輯就是要避免未來一連串的版本衝突 (conflict) 及合併 (merge) 帶來的問題。 以軟體開發的角度來看，這樣的作法還不錯，整個團隊的開發是值得這樣作的。不過拿來管理個人檔案的話，就太過頭了。個人檔案不大會發生 LOCK 的問題，就是我改你也改，最後存檔總會有一個人的資料被蓋掉... 不過，如果我是大老闆，有十幾個秘書在幫我打雜的話就難說了 [H]       <br />      <br /></li>    <li><a href="http://columns.chicken-house.net/post/Volume-Shadow-Copy-Service-.aspx">VSS (Windows Volume Shadow Copy Service)</a>       <br />      <br />Visual Source Safe 用了之後，發現障礙多於它帶來的優點 (以處理一般文件而言)。主要的缺點是，VSS 透過網路 / Internet / VPN 使用的速度實在是龜到可以，雖然後來 Microsoft 推出了 LAN Boost Service (還是很慢)，也另外推出了 HTTP / Web Service 的存取方式 (只能透過 Visual Studio) 速度也不快。另一個缺點是一定要先開 VSS Explorer / Visual Studio, 我不過只是想開個 WORD 檔啊...       <br />      <br />所以後來換了另一個角度找 solution, 就試用了 windows 2003 內建的 VSS (Volume Shadow Copy Service), 替代版本控制用的軟體。它是做在 File System 層次上的機制，用了 <a href="http://en.wikipedia.org/wiki/Copy_on_write">Copy On Write</a> (COW.. 這是縮寫，不是在罵人...) 的方式，做版本的差異控制。因此只要把檔案放在開啟 VSS 的磁碟機，完全不用更改任何使用習慣..。      <br />      <br />但是太自動的東西還是不適用。這種作法主要的問題在於版本太不精確了。VSS 仰賴定期作快照 (<a href="http://en.wikipedia.org/wiki/Snapshot_algorithm">snapshot</a>) 來作版本的管理。定期做的快照，留下來的版本很可能是無意義的，你也無法針對特定檔案的特定版本作註記 or 回複... 另外自動的快照也無法選則那些檔案要進版本，那些要退出。總之一切全自動，沒有什麼好選的。很簡單，但是功能也很有限。       <br />      <br />不過即使如此，一般情況下也夠用了，操作也夠簡單，當作第二種保護機制也不錯。這個 solution 我也用了好一陣子...。       <br />      <br /></li>    <li>TFS (Team Foundation Server)      <br />      <br />老實說，連一般小型軟體開發，用到 TFS 都太肥了一點，自己的檔案管理用到這個真是太離譜了... 哈哈，因此這個 solution 只是閃過念頭而已，跟本沒實際裝起來試過。用這個方案，工具會是個大問題... 用的時後得開個 Visual Studio, SERVER 還得裝一大票軟體 (IIS, TFS, SQL + Reporting, SharePoint Team Service, AD…)       <br />      <br /></li>    <li>USB DISK + PortableApps      <br />      <br />其實這個算不上是個 SOLUTION，只不過順便把它列上來，待會說明用。某次無意間，同事告訴我 <a href="http://portableapps.com/">PortableApps.com</a> 這個工具，它是個灌在 USB 隨身碟上面的工具 &amp; 一些綠色軟體，有自己專用的 &quot;開始&quot; 選單，方便你插上隨便一台電腦，就把它當作你自己的 PC 一樣使用... 老實說還不錯用 (Y)，我就試著用一陣子，把所有個人相關的資料都移到上面了。現在的工作環境有點複雜，公司一台 PC，家裡一台 PC，偶爾還需要用 notebook 去客戶那邊簡報 (咳，就是我那台只有 8GB SSD 的 X40，正好沒地方放檔案)       <br />      <br />用了一陣子還不錯，不過碰到的又是很常見的問題: 檔案掉了怎辦? 備份問題? 讀寫速度問題? Flash Disk 寫入次數限制問題... 不外乎常備份，每天一份 ZIP 檔，用苦力作好版本控制…       <br />      <br />      <br /></li>    <li>USB DISK + SVN      <br />      <br />最後，就是現在用的方案了... 主要是補 (4) 的不足: 一般的定期 ZIP 備份就跟快照一樣，事後要追出變更其實很麻煩，每次變更想加個註解又更麻煩了。當然搭配 Visual Source Safe 這種工具，把 Working Folder 指到 USB DISK 上就可以兩全齊美了。       <br />      <br />不過使用便利則是另一個問題，我希望能夠找個無腦一點的工具，不需事先 check-out (lock) 的動作就可以開始編輯，改完再決定 check-in (commit) 或是 undo (revert) 的模式最好。用了 USB DISK 就是希望能拔來拔去，如果必需配合特定工具 &amp; 要即時連上 SERVER，那就有點麻煩... 想看看，當我 USB DISK 插到 NOTEBOOK 帶到客戶那邊去，都按兩下打開 PPT 在簡報了，臨時要改幾個字，用 VSS 的話，我得關掉 PPT，打開 VSS，CHECK-OUT，打開PPT，修改...       <br />      <br />所以後來的首選就變成 SVN 了。SVN 因應 internet / open source project 的開發模式，採取的就跟 Microsoft 是不同的策略，就是先改再說。SVN 賭你不會多人同時編同一個檔案，就算會，也不會編同一段 code … 真的碰到就再人工處理吧。另外它支援各種不同的 protocol, 透過 internet 這種連線來使用，效能也不會很糟糕... </li> </ol>  <p>&#160;</p>  <p>到目前為止，我用的就是 (5) USB DISK + SVN 這種 solution, 老實說越用越覺的它不錯 (Y)。SVN 我還是個新手，應該輪不到我來介紹他的特色吧 XD，不過我還是挑幾個特別的地方介紹一下，這些是我用它的主要原因啊...</p>  <ol>   <li>操作邏輯合適      <br />      <br />SVN 是 CVS 的接班人，它先天就繼承了 CVS 的特性: 就是適用 open source 的開發團隊。Open Source 的開發團隊跟一般的開發團隊有什麼差別? 一般商業開發都是正職的工作，很固定且很密集的進行開發及變更，因此像 Microsoft Solution (VSS / TFS) 那種要事先 lock 的機制會比較有效率。不過 open source project 就反過來，業餘的比例比較高，而且人都散布在世界各地，如果真正用 LOCK 的機制大概會哭出來吧...。我要改的檔案被你 LOCK 住了，不過我又不知道你是誰? 除了等就沒辦法了...。       <br />      <br />因此 SVN 先天就是以這樣的觀點來設計: 你先改了再說，改完就 commit 。反正只要沒人跟你改同一個檔案就沒事... 如果運氣真的不好，那這個人不要跟你改同一段 code 也沒事，直接 merge 就好... 只有真的很背的時後，有人跟你改同一段，那麼後 commit 的人就要負責處理 merge 的問題。不過機率很低嘛 (沒錯，尤其是只有我自己用的時後)，你可以不用管它...       <br />      <br />過去用 VSS 常碰到這種情況: 原本只是開個文件起來看 (READ)，跟本沒想要去改它，就沒有先作 check-out 的動作了。不過看到一半發現內容有誤，想要修正時... 問題就來了。以 WORD 來說，已經開起來才去 check-out 檔案的話，WORD還是會認為檔案是唯讀的... 除非你關掉 WORD 再開啟一次才有用。不過這麼一來思緒都被打斷了...。      <br />      <br />當然，還是一樣，正規的開發動作還可以要求，一般的文書處理要求到這樣就有點過頭了。因此 SVN 這樣的邏輯就佔了點優勢，我最常碰到的案例就是: 要出門開會，把 USB_DISK 拔出來帶走。開會過程中 (在外面，沒有網路連線) 修修改改 PPT 的內容，回到公司後直接在 NB 或是把 USB DISK 插回 PC，再用 SVN 作 commit 的動作...。      <br />      <br /></li>    <li>SERVER 的資訊跟著目錄      <br />      <br />有些工具 (像是 TFS)，你的工作目錄對應到那個 SERVER，是工具在維護的 (TFS 的 workspace)，這時搭配 USB DISK 可能會在不同的電腦 (可能是我的 PC，也可能是我的 NOTEBOOK，甚至是帶回家裡用)。一般把設定綁在工具上的作法就很頭痛，因為好幾台都要設成一樣的，而且 USB DISK 還有可能每次的磁碟機路逕都不大一樣...      <br />      <br />我用的工具是小烏龜 (TortoiseSVN)，它的設定就是在每個目錄下放個 .svn / _svn 的子目錄，檔案總管按右鍵叫出 SVN 的選單後，藏在裡面的設定就自動套上來了。這種操作模式，剛好對於我的用法 (USB_DISK) 很方便...       <br />      <br /></li>    <li>更精確，更有效率的 &quot;備份機制&quot;     <br />      <br />現在隨身碟廠商，都很愛在商品上加一些小工具，有的有壓縮，有的有密碼保護... 不過 USB DISK 很容易掉，所以所有廠商都不會忘記附上一個備份工具。連我前面介紹的 PortableApps.com 都有附一個 ( 7-ZIP + SHELL )。不過這些備份工具都有個通病... 它就真的只是 &quot;備份&quot; 而已，是讓你心安的。使用時機是你自己要勤勞點，記得每天按 BACKUP。要還原回來，通常就是整支 USB DISK 的內容都還原回來了，如果你只想要還原某幾個檔，或是只要查看過去備份的某個檔，那你得點好幾下滑鼠，甚至是要把整個備份解開才看的到。      <br />      <br />另一個備份問題是，每次都是 FULL BACKUP ... 雖然有些工具作的比較好，有差異備份 ( PortableApps.com 就有提供 7-ZIP 的差異備份)，不過不還原還好，一旦要把舊資料撈出來也是很辛苦。當然這些並不是備份工具的錯，備份本來就是作這些事。中間有落差的地方在於 USER 需要的是一個歸檔的機制啊，除了備份也需要調閱舊的版本內容。這時版本控管工具，正好就成為 USB DISK 在 PC 上的第一線 &quot;備份資料庫&quot; 了。當你在 check-in / commit 時，不自覺的就在版本系統內放了一份備份了，不放心的人可以再啟用像 VSS (Volume Shadow Copy Service) 或是定期壓 ZIP 這類一般的備份機制作第二層保護，就很足夠了。      <br />      <br />這裡的重點倒不是備份安不安全啦，而是這樣的操作方式，很自然的就會在 SVN Repository 內留下一份內容，同時也方便你替這個版本作註記，未來要調閱，甚至是比對內容差異都很容易...      <br />      <br /></li>    <li>異地存取     <br />      <br />USB DISK 雖然很方便，也可以隨身攜帶，但是我就是會常常忘掉它... 常常忘了拔就出門... 在外面如果還要存取我的 USB DISK 的內容，有網路的話，版本控制系統也很好用。我用的 SVN SERVER 是 Visual SVN，它就有個很簡易的 WEB 介面，真的忘了帶還可以連回我自己的 PC，把檔案下載回來。      <br />      <br />如果用的電腦有灌 SVN CLIENT，那你還可以做些基本的操作...。這套比起來就比 VSS 強的多。VSS 完全是 file system base, 透過遠端的操作必需先用網芳之類模擬 file I/O 的方式，效能很糟糕... 雖然 2003 年左右 Microsoft 替 VSS 加其了很多功能，像是 LAN Boost Service (我搞不懂它怎麼做的)，或是替 VSS 加上 Web Service Interface (可以透過 HTTP)，不過效果都不盡理想。      <br /></li> </ol>  <p>這些功能加一加，就是我現在在用的個人檔案管理方案了啦。家裡有台現成 SERVER，很多問題就更好解了。這套作法正好给有需要的人參考看看，如果你用了有什麼心得，或是有其它更好的用法也歡迎分享 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2009-04-20 03:46:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-04-20 03:46:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%80%8b%e4%ba%ba%e6%aa%94%e6%a1%88-%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.michadel.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-23 09:51:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-23 09:51:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[太久沒有新文章，連 cookie 都過期，新增評論都要重打個人資訊。

你看多嚴重，要常常寫文章哦~

SVN 用 TortoiseSVN 真是殺手級的版本控制，超級直覺。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-23 10:30:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-23 10:30:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈... 有這麼久嘛 :$

TortoiseSVN 不錯用，不過用慣 Microsoft 那套，一些名詞還真的要習慣一下 @_@]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[elleryq]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[elleryq@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.roodo.com/thinkingmore/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-24 09:18:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-24 09:18:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[從你需求看起來，找 DVCS 類的工具會比較適合，例如：git、mercurial...
git 有 windows 版：http://code.google.com/p/msysgit/
mercurial 也有：totorisehg...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>RUNPC 精選文章 - 運用ThreadPool發揮CPU運算能力</title>
		<link>http://columns.chicken-house.net/2009/04/17/runpc-%e7%b2%be%e9%81%b8%e6%96%87%e7%ab%a0-%e9%81%8b%e7%94%a8threadpool%e7%99%bc%e6%8f%aecpu%e9%81%8b%e7%ae%97%e8%83%bd%e5%8a%9b/</link>
		<pubDate>Fri, 17 Apr 2009 19:51:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2009/04/17/RUNPC-e7b2bee981b8e69687e7aba0-e9818be794a8ThreadPoole799bce68faeCPUe9818be7ae97e883bde58a9b.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
果然這個什麼東西都上網的年代，要三不五時的 GOOGLE 一下自己，才會知道那些網站把你的八卦跟內幕爆了出來... 不過應該沒啥週刊記者對我有興趣吧? 哈哈。在 GOOGLE 自己名字時，倒是意外發現，之前投稿的文章，又有一篇被拿來登在網站上的精選文章了 :D
</p>
<p>
特此留念一下 :D
</p>
<p>
<a href="http://www.runpc.com.tw/content/main_content.aspx?mgo=176&amp;fid=E02" title="http://www.runpc.com.tw/content/main_content.aspx?mgo=176&amp;fid=E02">http://www.runpc.com.tw/content/main_content.aspx?mgo=176&amp;fid=E02</a>
</p>
<p>
--
</p>
<p>
順便整理一下懶人包:
</p>
<p>
另一篇精選文章 [<a href="/post/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx">RUN!PC 精選文章 - 生產線模式的多執行緒應用</a>]
</p>
<p>
過去投過的系列文章 (multi-threading programming using c#):
</p>
<p>
<a href="/post/RUNPC-2008-11.aspx">2008/11</a>. <strong>生產線模式的多執行緒應用</strong> <br />
<a href="/post/RUNPC-2008-09.aspx">2008/09</a>. <strong>用ThreadPool發揮CPU運算能力 <br />
</strong><a href="/post/RUNPC-2008-06.aspx">2008/06</a>. <strong>SEMAPHORE在ASP.NET的應用 <br />
</strong><a href="/post/RUNPC-2008-04.aspx">2008/04</a>. <strong>以ASP.NET開發同步WEB應用程式</strong>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2009-04-17 19:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-04-17 19:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[runpc-%e7%b2%be%e9%81%b8%e6%96%87%e7%ab%a0-%e9%81%8b%e7%94%a8threadpool%e7%99%bc%e6%8f%aecpu%e9%81%8b%e7%ae%97%e8%83%bd%e5%8a%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
	</item>
	<item>
		<title>處理大型資料的技巧 – Async / Await</title>
		<link>http://columns.chicken-house.net/2013/04/14/%e8%99%95%e7%90%86%e5%a4%a7%e5%9e%8b%e8%b3%87%e6%96%99%e7%9a%84%e6%8a%80%e5%b7%a7-async-await/</link>
		<pubDate>Sun, 14 Apr 2013 19:23:10 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2013/04/14/e89995e79086e5a4a7e59e8be8b387e69699e79a84e68a80e5b7a7-e28093-Async-Await.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[原本只是很單純的把大型檔案 (100mb 左右的 video) 放到 Azure Storage 的 BLOB 而已，結果效能一直不如預期般的理想。才又把過去的 thread 技巧搬出來用，結果又花了點時間改寫，用 async / await 的效果還更漂亮一點，於是就多了這篇文章 :D

&nbsp;

其實這次要處理的問題很單純，就是 WEB 要從 Azure Storage Blob 讀取大型檔案，處理前端的認證授權之後，將檔案做編碼處理後直接從 Response 輸出。主要要解決的問題是效能過於糟糕... 透過層層的處理，效能 (3.5 Mbps) 跟直接從 Azure Storage 取得檔案 (7.3 Mbps) 相比只剩一半左右.. 過程中監控過 SERVER 的 CPU，頻寬等等，看來這些都不是效能的瓶頸。

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_16.png" alt="image" width="640" height="260" border="0" />

&nbsp;

為了簡化問題，我另外寫了個簡單的 Sample Code, 來呈現這問題。最後找出來的原因是，程式碼就是單純的跑 while loop, 不斷的把檔案內容讀進 buffer 並處理後，將 buffer 輸出。結果因為程式完全是 single thread 的處理方式，也沒有使用任何非同步的處理技巧，導致程式在讀取及處理時，輸出就暫停了，而在輸出時，讀取及處理的部份就暫停了，讓輸入及輸出的 I/O, 還有 CPU 都沒有達到滿載... 於是效能就打對折了。用時間軸表達，過程就如下圖:

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_17.png" alt="image" width="640" height="165" border="0" />

這樣的設計方式，同一時間只能做一件事。若把上圖換成各種資源的使用率，會發現不論是 DISK、NETWORK、CPU等等資源，都沒有同時間保持忙碌。換句話說好像公司請了三個員工，可是同時間只有一個人在做事一樣，這樣的工作安排是很沒效率的。要改善的方法就是讓三個員工都保持忙碌，同時還能亂中有序，能彼此協調共同完成任務。

同樣的狀況應該很普遍吧? 不要說別人了，就連我自己都寫過很多這樣的 CODE ... 光是 COPY 大型檔案，大家一定都是這樣寫的: 用個 while loop, 把來源檔讀進 buffer, buffer 滿了寫到目地檔，然後不斷重複這動作，直到整個檔案複製完成為止。這不是一模一樣的情況嗎? 只是大部份的人不會去考量如何加速這樣的動作而已...

我先把目前的CODE簡化一下，拿掉一些不相關的部份，單純的用 Read( ) / Process( ) / Write( ) 三個空的 method 代表執行這三部份的工作，執行過程需要的時間，就用 Task.Delay( 100 ) 來取代。經簡過後的 Code 如下:
<div>

<b>經簡後的示意程式碼：</b>
<pre>public class Program
{
    static Stopwatch read_timer = new Stopwatch();
    static Stopwatch proc_timer = new Stopwatch();
    static Stopwatch write_timer = new Stopwatch();
    static Stopwatch overall_timer = new Stopwatch();
    public static void Main(string[] args)
    {
        overall_timer.Start();
        for (int count = 0; count &lt; 10; count++)
        {
            Read();
            Process();
            Write();
        }
        overall_timer.Stop();
        Console.WriteLine("Total Time (over all): {0} ms", overall_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Read Time:       {0} ms", read_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Process Time:    {0} ms", proc_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Write Time:      {0} ms", write_timer.ElapsedMilliseconds);
    }
    public static void Read()
    {
        read_timer.Start();
        Task.Delay(200).Wait();
        read_timer.Stop();
    }
    public static void Process()
    {
        proc_timer.Start();
        Task.Delay(300).Wait();
        proc_timer.Stop();
    }
    public static void Write()
    {
        write_timer.Start();
        Task.Delay(500).Wait();
        write_timer.Stop();
    }
}
</pre>
<!-- end of code area -->

</div>
程式執行結果：

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_18.png" alt="image" width="326" height="104" border="0" />

程式總共要花掉 10 秒鐘才執行完畢，由於完全沒有任何並行的處理，因此就是很簡單的 Read 花掉 2 秒，Process 花掉 3 秒，Write 則花掉 5 秒，加起來剛好就是總執行時間 10 秒。

&nbsp;

回顧一下，過去寫過幾篇如何善用多執行緒來解決各種效能問題的文章，其中兩篇跟這次的案例有關:
<ol>
	<li><a href="http://columns.chicken-house.net/post/MSDN-Magazine-e996b1e8ae80e5bf83e5be97-Stream-Pipeline.aspx">MSDN Magazine 閱讀心得: Stream Pipeline</a> (2008/01/19)</li>
	<li><a href="http://columns.chicken-house.net/post/e7949fe794a2e88085-vs-e6b688e8b2bbe88085-BlockQueue-e5afa6e4bd9c.aspx">生產者 vs 消費者 - BlockQueue 實作</a> (2008/10/18)</li>
	<li><a href="http://columns.chicken-house.net/post/RUNPC-2008-11.aspx">[RUN! PC] 2008 十一月號</a> 生產線模式的多執行緒應用 (2008/11/04)</li>
	<li><a href="http://columns.chicken-house.net/post/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx">RUN!PC 精選文章 - 生產線模式的多執行緒應用</a> (2009/01/16)</li>
</ol>
其實這些方法的目的都一樣，都是透過各種執行緒的操作技巧，讓一件大型工作的不同部份，能夠重疊在一起。這樣的話，整體完成的時間就能縮短。不過，隨著 .NET Framework 一直發展，C# 5.0 提供的 Syntax Sugar 也越來越精彩，到了 .NET Framework 4.5 開始提供了 Async / Await 的語法，能夠大幅簡化非同步模式的設計工作。

非同步的程式設計，其實也是 multi-threading 的一種運用。簡單的說，它就是把要非同步執行的任務丟到另一條執行緒去執行，等到它執行結束後再回過頭來找它拿結果。只是為了這樣的一個動作，往往得寫上數十行程式碼，加上原本程式的結構被迫切的亂七八糟，過去往往非絕對必要，否則不會用這樣的模式。

這次我的目的，其實用前面那幾篇的技巧就能解決了。不過這次實作我想換個方法，都已經 2013 了，有 Async / Await 為何要丟著不用? 這次就用新方法來試看看。先用上面的時間軸那張圖，來看看改進後的程式執行狀況，應該是什麼樣子:

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_19.png" alt="image" width="640" height="198" border="0" />

解釋一下這張圖: 橘色的部份代表是用非同步的方式呼叫的，呼叫後不會 BLOCK 原呼叫者，而是會立即 RETURN，兩邊同時進行。而圖中有個箭頭 + await, 則代表第二個非同步呼叫 Write( ) 的動作，會等待前一個 Write( ) 完成後才會繼續。

Write( ) 跟下一次的 Read( ) 其實並無相依性，因此在開始 Write( ) 時，其實可以同時開始下一回的 Read( ), 因此時間軸上標計的執行順序就可以被壓縮，調整一下執行的順序，馬上得到大幅的效能改進。這次要改善的，就是把 Read( ) + Process( ) 跟 Write( ) 重疊在一起，預期會有一倍的效能提升。

想要瞭解 C# 的 async / await 該怎麼用，網路上的資源有很多，我習慣看官方的文件，有需要參考的可以看這幾篇:
<ol>
	<li><a href="http://msdn.microsoft.com/en-us/library/vstudio/hh156513.aspx">async (C# Reference)</a></li>
	<li><a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">Asynchronous Programming with Async and Await (C# and Visual Basic)</a></li>
</ol>
Async / Await 的細節我就不多說了，簡單的說在 method 宣告加上 async 的話，代表它的傳回值會被改成 Task&lt;T&gt;, 而呼叫這個 method 會變成非同步的，一旦呼叫就會立刻 Return, 若需要這個 method 的執行結果，可用 await 等待，直到 method 已經執行完畢才會繼續...

廢話不多說，過程就沒啥好說的了，直接來看改好的程式碼跟執行結果:

&nbsp;
<div>

<b>改寫為非同步模式的 CODE:</b>
<pre>public class Program
{
    static Stopwatch read_timer = new Stopwatch();
    static Stopwatch proc_timer = new Stopwatch();
    static Stopwatch write_timer = new Stopwatch();
    static Stopwatch overall_timer = new Stopwatch();
    public static void Main(string[] args)
    {
        overall_timer.Start();
        DoWork().Wait();
        overall_timer.Stop();
        Console.WriteLine("Total Time (over all): {0} ms", overall_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Read Time:       {0} ms", read_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Process Time:    {0} ms", proc_timer.ElapsedMilliseconds);
        Console.WriteLine("Total Write Time:      {0} ms", write_timer.ElapsedMilliseconds);
    }
    public static void Read()
    {
        read_timer.Start();
        Task.Delay(200).Wait();
        read_timer.Stop();
    }
    public static void Process()
    {
        proc_timer.Start();
        Task.Delay(300).Wait();
        proc_timer.Stop();
    }
    public static async Task Write()
    {
        write_timer.Start();
        await Task.Delay(500);
        write_timer.Stop();
    }
    private static async Task DoWork()
    {
        Task write_result = null;
        for (int count = 0; count &lt; 10; count++)
        {
            Read();
            Process();
            if (write_result != null) await write_result;
            write_result = Write();
        }
        await write_result;
    }   
}
</pre>
<!-- end of code area -->

</div>
程式碼幾乎都沒有動，不過就是把 Write( ) 改寫為 Async 版本，同時在主程式 DoWork( ) 用 Task 形別，把 Write( ) 傳回的 Task 物件，保留到下一次呼叫 Write( ) 前，用 await 來確保上一個 Write( ) 已經完成。

改寫過的版本，程式碼很簡單易懂，90% 以上的程式碼結構，都跟原本同步的版本是一樣的，大幅維持了程式碼的可讀性，完全不像過去用了多執行緒或是非同步的版本，整個結構都被切的亂七八糟。看看程式的執行結果，果然跟預期的一樣，整體執行時間大約為 5 秒。多出來的 660 ms, 就是第一次的 Read( ) + Process( ), 跟最後一次的 Write( ) 是沒有重疊的，因此會多出 500 ms, 再加上一些執行的誤差及額外負擔，就是這 660ms 的來源了。

<a href="/wp-content/be-files/image_20.png"><img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_thumb_2.png" alt="image" width="307" height="118" border="0" /></a>

&nbsp;

&nbsp;

最後，來看一下效能的改善。在我實際的案例裡，Read 是受限於 VM 與 Storage 之間的頻寬，固定為 200Mbps, 而 Process 是受限於 VM 的 CPU 效能，也是固定可控制的, 最後 Write 則是受限於 client 到 VM 之間的頻寬，可能從 2Mbps ~ 20Mbps 不等，這會直接影響到到 Write 需要的時間。

不管是用 thread 或是 async ，都不是萬靈丹，主要還是看你的狀況適不適合用這方法解決。這次我的案例是用 async 的方式，將 Read / Write 閒置的時間重疊在一起，節省的時間就反應在整個工作完成的時間縮短了。因此兩者花費的時間差距如果過大，則就沒有效果了。

我簡單列了一張表，來表達這個關係。分別針對 client 端的頻寬，從 2Mbps ~ 200Mbps, 列出使用 async 改善前後的花費時間，及效能改善的幅度:
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="159"></td>
<td width="72">*200M</td>
<td width="72">100M</td>
<td width="72">80M</td>
<td width="72">50M</td>
<td width="72">20M</td>
<td width="72">10M</td>
<td width="72">5M</td>
<td width="72">2M</td>
</tr>
<tr>
<td>原花費時間(ms)</td>
<td>7000</td>
<td>9000</td>
<td>10000</td>
<td>13000</td>
<td>25000</td>
<td>45000</td>
<td>85000</td>
<td>205000</td>
</tr>
<tr>
<td>ASYNC花費時間(ms)</td>
<td>5500</td>
<td>5500</td>
<td>5500</td>
<td>8500</td>
<td>20500</td>
<td>40500</td>
<td>80500</td>
<td>200500</td>
</tr>
<tr>
<td>效能改善%</td>
<td>127.27%</td>
<td>163.64%</td>
<td>181.82%</td>
<td>152.94%</td>
<td>121.95%</td>
<td>111.11%</td>
<td>105.59%</td>
<td>102.24%</td>
</tr>
</tbody>
</table>
&nbsp;

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_21.png" alt="image" width="480" height="288" border="0" />

以執行時間來看，頻寬低於 80M 之後，改善的程度就固定下來了，隨著頻寬越來越低，WRITE 需要花費的時間越來越長，改善的幅度就越來越不明顯。同樣這些數據，換成改善的百分比，換成下一張圖:

&nbsp;

<img style="display: inline; border-width: 0px;" title="image" src="/wp-content/be-files/image_22.png" alt="image" width="480" height="288" border="0" />

改善幅度最好的地方，發生在 80Mbps, 這時正好是 Read( ) + Process( ) 的時間，正好跟 Write( ) 花費的時間一樣的地方。頻寬高於或低於這個地方，效果就開始打折扣了。通常改善幅度若低於 10%, 那就屬於 "無感" 的改善了。

簡單的下個結論，其實任何效能問題都很類似，能用 async 改善的效能問題，一定有這種模式存在: 整個程式執行過程中，有太多等待的狀況發生。不論是 IO 等待 CPU，或是 DISK IO 等待 NETWORK IO 等等，都屬此類。從外界能觀察到的狀況，就是幾個主要的硬體資源，如 Network, CPU, DISK, Memory 等等，都沒有明顯的負載過重，但是整體效能就是無法提升，大概就屬於這種模式了。找出流程能夠重新安排的地方後，剩下的就是如何善用這些技巧 (async)，把它實作出來就結束了。

而 async / await, 處理這類問題，遠比 thread 來的有效率。就我看來，若需要大規模的平行處理，還是 thread 合適。但是像這次的案例，只是希望將片段的任務以非同步的模式進行，重點在精確的切割任務，同時要在特定的 timing 等待先前的任務完成，這時 async / await 會合適的多。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2013-04-14 19:23:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-14 19:23:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%99%95%e7%90%86%e5%a4%a7%e5%9e%8b%e8%b3%87%e6%96%99%e7%9a%84%e6%8a%80%e5%b7%a7-async-await]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[laneser]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[laneser.kuo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-14 20:10:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-14 20:10:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[async , await 不錯,
但是這個 case 使用 task + BlockingQueue 也許更適合...
就像 producer - consumer pattern 一樣.
3 tasks to run read, process, write , 然後用 blocking queue 串起來.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[小明]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tasi.neil@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-15 09:08:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-15 09:08:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我看到有錯字：ASYNC花&quot;廢&quot;時間，應該是花&quot;費&quot;時間才對。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-16 00:48:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-16 00:48:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯，Blocking Queue 是我比較愛用的做法，這個例子會用 await / async 只有兩個理由:

1. 環境是 web application, 我想盡量控制主程式不要用到過多 threading 的技巧
2. 已有原本的程式邏輯, 想盡量維持原本的結構

當然, 另一個原因就是好不容易升上來 .net 4.5, 手癢想試試新語法 XD]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-16 00:48:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-16 00:48:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈，沒有讚可以按 XD
修正了~ 3Q]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>662</wp:comment_id>
			<wp:comment_author><![CDATA[Jed]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jed1978@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-01 22:07:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-01 14:07:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[若要更進一步的效能提昇，可以採用Lock-free的資料結構取代Blocking Queue]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>669</wp:comment_id>
			<wp:comment_author><![CDATA[changyuheng]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mr.changyuheng@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://changyuheng.me/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-22 03:45:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-21 19:45:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒有 async、await 這種語法，也可以做到一樣的架構，得到一樣的 performance。Async、await 是對 reactive programming 的語言層面支援，他們的優點是讓寫 code 更直覺 (top-down)，進而增加程式設計師的產能和降低維護成本。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>678</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Wu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/chicken.wu</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-28 15:23:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-28 07:23:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[沒錯，真的是這樣

C# 很讚的一點就是，有很多這種 Syntactic sugar, 可以讓複雜的流程變得簡潔易懂。
這種東西用 library 很難做得漂亮，能直接在 language 就支援他是最讚的

async / await 就是其中之一，另外像 Linq, yield return 等等都是很經典的例子 (Y)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>669</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[Azure] Multi-Tenancy Application #3, (資料層)實作案例</title>
		<link>http://columns.chicken-house.net/2013/03/21/azure-multi-tenancy-application-3-%e8%b3%87%e6%96%99%e5%b1%a4%e5%af%a6%e4%bd%9c%e6%a1%88%e4%be%8b/</link>
		<pubDate>Thu, 21 Mar 2013 03:00:55 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2013/03/21/Azure-Multi-Tenancy-Application-3-e5afa6e4bd9ce6a188e4be8b.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&#160;</p>  <p>上篇花了一堆口水，說明各種 data layer 的設計方式，這回不噴口水了，直接來實作...。開始前先說明一下我的期望，我先假設各位都用過 Entity Framework 或是這類的 solution, 我希望在 data context 這層，就能處理掉所有隔離 tenancy data 的問題，也就是我可以用一般 application 的開發概念來開發 multi-tenancy 的 application。換另一個說法，我希望在一個 storage 內，模擬出讓每個 tenancy 都有獨立的 storage 可運用的介面。</p>  <p>Web 的這部份也是一樣的概念，我希望在網址這層，邏輯上就讓每個 tenancy 有獨立的 URL (虛擬目錄)。有這種網址上自行客製的需求，當然是非 MVC 不可，因此這次會在 MVC 的 Routing 上動手腳，除了 controller 及 action 之外，能夠再切出一層 client 出來，讓 application 也像是能夠虛擬化一樣，每個用戶可擁有自己的 partition。</p>  <p>最後當然也希望 WEB 這邊的架構，能緊密的跟 DATA 這邊結合。讓開發人員就照一般的方法就能快速開發出Multi-Tenancy Applicaiotn。寫這種系統，若規模不夠大就沒意思了，因此我初期就把目標鎖定在 Windows Azure Storage + MVC4, 而應用程式就以常見的 &quot;訂便當系統&quot; 為案例。</p>  <p>訂便當系統，是個很適合開發成 Multi-Tenancy 模式的主題。原因有幾個:</p>  <ol>   <li>這系統一定是一個團體才會需要用的，如果你只有兩三個人，用講的比較快... 通常是部門、辦公室、或是規模不大，可以一起訂便當的團體會需要使用。這需要基本的每日訂單管理，還有簡單的會員管理功能。     <br /></li>    <li>既然是 Multi-Tenancy Application, 那麼用 SaaS (Service as a Service) 的方式營運也是很理所當然的。所有客戶通用的內容，就可以由營運單位來負責整理及規劃。     <br /></li>    <li>除了切割很多獨立的 &quot;分割區&quot; 各自運作之外，Hosting 的一方其實也有很多商機，像是合作的餐聽或是便當店，這些資料就可以共用。甚至是可以主動匯入，讓客戶訂購起來更方便。若這樣能為便當店帶來生意，Hosting 的一方抽點庸金也是很合理的 XD     <br /></li>    <li>後台 BI 也是很有商機的一環。Service Hosting 的一方，就可以看看各種統計報表，看跟那家餐廳合作的機會較大，另外也可以設計客戶 share 他們自己開發的便當店資訊，給其它客戶使用。若越多客戶採用，可以給些系統租金的回饋等等….</li> </ol>  <p>越想越多，再想下去這個 POC 用的 prototype 就寫不完了，需求給各位讀者再去延伸，我這邊作 POC 就把需求收殮一下...。偷學一下 SCRUM 的 story 撰寫技巧，以下是我這次 POC 要實作的 stories:</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>好，看來一個設計良好的 DataContext, 可以省掉不少工夫。大部份的 coding logic, 都是在客戶的專區內運作的。我把整套系統稱作 &quot;Hub”, 而每個客戶專區內的資料，就通稱為 &quot;HubData”, 如會員資料，或是訂單等等。而其它非 HubData, 就是整個系統通用的資料。因此，我希望 Hub 用的 Data Context 能有這些功能:</p>  <ol>   <li>取得 HubDataContext 時，就已經能確定目前是在那個 Client 的使用範圍。</li>    <li>HubDataContext 能直接提供該 Client 才能用的 Data Collection, 我只要拿來再用 Linq 過濾即可，即使我沒控制好，也不會拿到別的 Client 專區內的 HubData。</li>    <li>全域 (共用) 的資料則不在此限。每個 Client 都能完整存取這些資料內容。</li> </ol>  <p>OK，噴了三篇的口水，終於看到第一段程式碼了 Q_Q，HubDataContext 的 interface 看起來要像這樣:</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>使用它的 Code 要像這樣 (這段我就寫在 unit test 內…):</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>花了一點時間，總算把實作都寫出來，成功通過單元測試了。套句 Luddy Lee 前輩常說的話，寫雲端的程式測試跟佈署都比以前麻煩，因此做好完整的規劃跟測試就變的更重要了，單元測試是少不了的，請各位切記。過去吃了很多苦頭，更加證明 Luddy Lee 前輩講的話一點都沒錯....</p>  <p>最終的 HubDataContext 實作如下... 其實也沒幾行:</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>&#160;</p>  <p>OK，第一步通過了，接下來我們開始來規劃一下 Data Schema …. Azure Table Storage 已經沒有所謂的 &quot;schema” 這回事了，它完全就像 EF5 裡面的 code first 一樣，你的 Data Entity class 定義好，就可以跑了... 這些細節就不在這篇裡多做說明，各位有興趣可以參考其它的資料。既然都是 Code First 開發模式了，我就直接用 class diagram 來描述這些資料 (Entity) 之間的關係:</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2013-03-21 03:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-21 03:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-multi-tenancy-application-3-%e8%b3%87%e6%96%99%e5%b1%a4%e5%af%a6%e4%bd%9c%e6%a1%88%e4%be%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
	</item>
	<item>
		<title>[Azure] Multi-Tenancy Application #2, 資料層的選擇</title>
		<link>http://columns.chicken-house.net/2013/03/17/azure-multi-tenancy-application-2-%e8%b3%87%e6%96%99%e5%b1%a4%e7%9a%84%e9%81%b8%e6%93%87/</link>
		<pubDate>Sun, 17 Mar 2013 03:38:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2013/03/17/Azure-Multi-Tenancy-Application-2-e8b387e69699e5b1a4e79a84e981b8e69387.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&nbsp;</p>
<p>其實上一篇設計概念還沒寫完，只不過很晚了想睡覺就先貼了，本篇繼續..</p>
<p>之前介紹 MSDN 的那篇<a href="http://msdn.microsoft.com/en-us/library/aa479086.aspx" target="_blank">文章</a>，作者很精確的分析了資料層面的三種設計方式。不過仔細研究之後，真正能搬上台面的，也只有最後一種 &ldquo;Shared Schema&rdquo; 而已。我從系統實際運作的角度，來分別考量這三種方式的可行性，各位就知道我為何這樣說了..。上篇介紹了各種可行的方案，這篇則會說明我認為的最佳方案。</p>
<p>我的看法很簡單，除非你的 Multi-Tenancy 的 &ldquo;Tenancy&rdquo; 規模只有幾十個的數量，否則 Separated DB / Separated Schema 都不適用，因為這兩種方式都是依賴把資料放在不同的 DB 或是 TABLE，來達到隔離的目的。並不是說這樣不好，而是這些都是 "過渡" 的作法，讓傳統的 application 不需要大符修改就能化身變為 Multi-Tenancy 的應用系統。而且 database / table 的數量都是有限制的，無法無限制的擴張。同時，以系統設計的角度來看，在系統執行的過程中，動態去建立 DB 或是建立 TABLE 也不是個很好的作法，在我眼裡都會覺的這是禁忌 XD。</p>
<p>當你辛辛苦苦建立了 SaaS 服務，總不可能只服務兩三隻小貓吧? 因此下列的分析會用使用量及 DB 各種功能的理論上限來做簡單的評估。Multi-Tenancy 的用戶數量，就抓個 50000 好了，至於每個用戶的 profile 我也依過去的經驗大致預估看看。依這些假設，就可以來評估各種資料層的處理方式，會有啥問題。</p>
<p>以下是一般的應用，每個用戶需要的資料規模 (假設):</p>
<table style="width: 362px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td width="199" valign="top">&nbsp;</td>
<td width="161" valign="top">平均數量</td>
</tr>
<tr>
<td width="219" valign="top">資料表 (table)</td>
<td width="170" valign="top">500</td>
</tr>
<tr>
<td width="223" valign="top">物件 (Sql obj, 如 table, view, trigger, function&hellip; etc)</td>
<td width="173" valign="top">5000</td>
</tr>
<tr>
<td width="223" valign="top">資料筆數 (rows per table)</td>
<td width="173" valign="top">100000</td>
</tr>
<tr>
<td width="223" valign="top">總容量 (data size)</td>
<td width="175" valign="top">5GB</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>1. 能容納的用戶量限制</h1>
<p>以 SalesForce.com 為例，它會為每個 "公司" 開設一個專區，接著看該公司買了多少帳號，就開幾個 User Account。這裡的 "公司" 就是一個用戶，也就是 Multi-Tenancy 裡指的 "Tenancy&rdquo;。這用戶的數量合理的數量應該是多少? 而系統的理論上限又是多少?</p>
<p>實際運作當然還有軟硬體搭配跟效能問題，這理就先就 "理論上限" 來探討。理論上限值，應該要在任何情況都足夠使用才合理。我特地去挖了 Microsoft SQL Server 的各種物件的數量上限，下表是從<a href="http://msdn.microsoft.com/en-us/library/ms143432.aspx" target="_blank">官方資料</a> 整理出來的，以目前最新的 SQL 2012 為準，單一一套 SQL SERVER 可以:</p>
<table style="width: 589px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td width="199" valign="top"><strong>數值名稱</strong></td>
<td width="388" valign="top"><strong>最大上限</strong></td>
</tr>
<tr>
<td width="219" valign="top">Database size</td>
<td width="388" valign="top">524272 TB</td>
</tr>
<tr>
<td width="223" valign="top">Databases per instance</td>
<td width="388" valign="top"><strong><span style="color: #ff0000;">32767</span></strong></td>
</tr>
<tr>
<td width="223" valign="top">Instance per computer</td>
<td width="388" valign="top">50</td>
</tr>
<tr>
<td width="222" valign="top">Tables per database</td>
<td width="388" valign="top">2147483647          <br />(所有database objects總數上限)</td>
</tr>
<tr>
<td width="222" valign="top">User connections</td>
<td width="388" valign="top"><span style="color: #ff0000;"><strong>32767</strong></span></td>
</tr>
</tbody>
</table>
<p>看起來，最需要注意的就是 database 數量了。一套 SQL SERVER 最多只能開設3萬個database, 如果你採用 Separated DB 的作法，不論使用量為何，連同試用用戶，或是測試用戶在內，只能給三萬個用戶使用... 雖然不見得每個系統都會有這麼多用戶，不過一定會有不少熱門的應用會超出這樣的限制。</p>
<p>那第二種切割作法 (Separated Schema) 情況如何? SQL server 是以 database objects 的總數來計算的，包含 table, view, function, trigger 等等都算是 database object. 一個資料庫能容納 2G (20億) 個 database objects, 相當於能容納 400K (40萬) 個用戶。這數值比 Separated DB 的 3 萬好上一些... 在台灣，以公司為單位的服務，應該還沒有問題。若是以部門、團隊、或是家庭、社團設計的 application, 這樣的容量上限就需要耽心了。</p>
<p>Share Schema 則完全沒這些問題，只要儲存空間足夠，系統的效能能夠負耽，就沒有這種物理的上限限制了。</p>
<p>&nbsp;</p>
<h1>2. 效能擴充 (scale out) 的限制</h1>
<p>如果考量到大型一點的規模，其實這三種方式都有困難。Separated DB 本身就已經是獨立DB，SQL server 本身執行的負擔就大很多，對於數量很多的用戶，但是每個用戶的人數都不多時，會浪費太多系統資源在執行這堆 DB 上面。不過相對的，這種架構很容易做 Scale Out 的擴充。</p>
<p>另一個要考量的是，雖然稱做 Multi-Tenancy, 但是總有些資料是要讓全部的用互共用吧? 這時這類資料就會變的很難處理，一個不小心就會動用到橫跨上千個 database 的 sql query ..</p>
<p>另一個極端的 Share Schema 做法就完全相反，沒有執行多個 DB 的負擔，執行起來效能是最好的。但是因為所有資料都塞在一起，很容易就面臨到單一 table 的資料筆數過大的問題。以這次的例子，一個用戶有10萬筆資料的話，隨便 1000 個用戶就有 1 億筆資料了... insert / delete / update 資料時，更新 index 的成本會變的很高。一般的查詢就會很吃力了，若是碰到沒寫好的 table join 會更想哭... 換句話說，這樣的架構規劃下，資料庫的最佳化非常的重要。因為你面臨到的就是大型資料庫效能調校問題..</p>
<p>再者，資料庫相對於 WEB 來說，是很不容易 Scale Out 的... 比較合適的作法是對資料庫做 Partition. 不過，這也不是件容易的事，已超出我的理解範圍了 XD，我只能說，要是老闆決定這樣做，那 $$ 決對是省不了的...</p>
<p>&nbsp;</p>
<p><strong></strong></p>
<p>&nbsp;</p>
<h1><strong>3. RDBMS 之外的選擇: Azure Table Store</strong></h1>
<p>前面講的，其實都是幾年前我在傷腦筋的問題。傳統的資料庫是為了資料的正確性及一致性而打造的儲存技術，過多的限制 (schema, constraint, relation&hellip;) 也限制了它無法有效 scale / partition 的特性。要徹底解決這些問題，不砍掉重練的話就只能花大錢及人力，來追上雲端服務的使用量了...。</p>
<p>不論是 Google, 或是 Microsoft Azure, 或是依據 Google 提出 MapReduce 而發展出來的 Hadoop, 都有處理巨量資料的能力。我就挑我最熟的 Azure 來說明。近幾年資料庫相關的技術，開始有了不一樣的變化。開始出現 "<a href="http://en.wikipedia.org/wiki/NoSQL" target="_blank">NO SQL</a>&rdquo; 的資料儲存方式。這種儲存方式有著跟 RDBMS 完全不一樣的特性，它比較簡單，主要是以 Key-Value 的型式來存取。因為 NO SQL 的結構比 RDBMS 簡單，因此能夠很容易的做到 scale out, 將單一資料庫，擴充到上千台 server 的規模。而 Azure 提供的 Table Storage, 則是將這種 NO SQL 的資料，跟 RDBMS 表格式的資料，做了一個很好的串接。</p>
<p>想瞭解 Azure 的細節，這輪不到我來說，市面上有幾本書很不錯，像是 MVC 小朱的<a href="http://books.gotop.com.tw/a_ACL036700" target="_blank">新書</a>，或是大師 Lee Ruddy 的大作都很值得參考，若不介意看英文書，那選擇就更多了~，我就不在這多說太多了。但是 Azure Table Storage 有兩個很重要的特色，一定要講一下:</p>
<p><strong>1. PartitionKey / RowKey:</strong>&nbsp;</p>
<p>老實說，這對 Multi-Tenancy 來說，是最完美的設計了。<a href="http://robbincremers.me/2012/03/01/everything-you-need-to-know-about-windows-azure-table-storage-to-use-a-scalable-non-relational-structured-data-store/" target="_blank">這篇文章</a>講的很精闢，你要用 Azure Table Storage 的話一定要好好的研究 PartitionKey / RowKey, 因為我看過太多可笑的用法，實在糟蹋了這樣好的設計...。這篇文章前面講的都是howto, 最後一章是 "Why using Windows Azure Table Storage&rdquo;, 我截錄一段:</p>
<blockquote>
<p><em><span style="color: #0080ff;">The storage system <strong><span style="color: #ff0000;">achieves good scalability by distributing the partitions</span></strong> across many storage nodes.</span></em></p>
<p><em><span style="color: #0080ff;">The system monitors the usage patterns of the partitions, and <strong>automatically balances these partitions across all the storage nodes</strong>. This allows the system and your application to <strong>scale to meet the traffic needs</strong> of your table. That is, if there is a lot of traffic to some of your partitions, the system will automatically spread them out to many storage nodes, so that the traffic load will be spread across many servers. However, a partition i.e. all entities with same partition key, will be served by a single node. Even so, the amount of data stored within a partition is not limited by the storage capacity of one storage node.</span></em></p>
<p><em><span style="color: #0080ff;">The entities within the same partition are stored together. This allows efficient querying within a partition. Furthermore, your application can benefit from efficient caching and other performance optimizations that are provided by data locality within a partition. <strong><span style="color: #ff0000;">Choosing a partition key is important</span></strong> for an application to be able to scale well. There is a tradeoff here between trying to benefit from entity locality, where you get efficient queries over entities in the same partition, and the scalability of your table, where the more partitions your table has the easier it is for Windows Azure Table to spread the load out over many servers.</span></em></p>
</blockquote>
<p>翻成白話，意思就是，開發人員只要慎選 partition key, 則 Azure 就會把同一個 partition 的資料放在同一個 node (不限於同一個 table 的 entities)。因此查詢會受惠於各種 cache 及 optimiaztion 機制，得到最佳效能。同時 Azure 也會自動依照 partition key 來分散到多個 node, 達到最佳的 scalability。</p>
<p>&nbsp;</p>
<p><strong>2. Scalability Issues, and Query optimization issues</strong></p>
<p>另外，MSDN magazine 也有一篇值得一讀的<a href="http://msdn.microsoft.com/en-gb/magazine/ff796231.aspx" target="_blank">文章</a>... "Windows Azure Table Storage &ndash; Not Your Father&rsquo;s Database" (中譯: 不是令北的資料庫&hellip; Orz), 一樣切重點出來:</p>
<blockquote>
<h4><em><span style="color: #0080ff;">PartitionKeys and RowKeys Drive Performance and Scalability</span></em></h4>
<p><em><span style="color: #0080ff;">Many developers are used to a system of primary keys, foreign keys and constraints between the two. With Windows Azure Table storage, you have to let go of these concepts or you&rsquo;ll have difficulty grasping its system of keys.</span></em></p>
<p><em><span style="color: #0080ff;"><span style="color: #ff0000;">In Windows Azure Tables, the string PartitionKey and RowKey properties work together as an index for your table, so when defining them, you must consider how your data is queried</span>. Together, the properties also provide for uniqueness, acting as a primary key for the row. Each entity in a table must have a unique PartitionKey/RowKey combination.</span></em></p>
</blockquote>
<p>這篇就實際一點了，講到很多 Azure Table Storage 的特性，也帶出了設計時必需考慮的要點。因為設計理念不同，連帶的查詢時的限制 &amp; 表現，跟傳統的 RDBMS 完全不同... 有沒有仔細規劃 partition key / row key, 決定了你的 query 效能的好壞。</p>
<p>除了內定的 partition key / row key 之外，其它 "欄位" 完全沒有任何的索引機制。這就是最需要顧慮的地方。實際上，Azure Table Storage 跟本就沒有 Schema 的設計，當然也沒有像 RDBMS 那樣的表格，反而是個典型的 Key-Value Pair 的 storage 而已。至於這些看起來像欄位的東西，完全是用 Code (TableEntity) 跟實際儲存的 Data (應該是 XML，或是類似的結構化 data) 變出來的東西。也因此，Query 完全需要良好的規劃才能有好的表現。</p>
<p>若各位對 Azure Table Storage 的 Query 技巧有興趣，這段 <a href="http://www.microsoftpdc.com/2009/svc09" target="_blank">VIDEO</a> 很值得一看。這是 2009 PDC 的一個場次: "Windows Azure Tables and Queues Deep Dive&rdquo;, 講到很多 Query 的技巧..</p>
<p>再回到<a href="http://robbincremers.me/2012/03/01/everything-you-need-to-know-about-windows-azure-table-storage-to-use-a-scalable-non-relational-structured-data-store/" target="_blank">前面那篇參考文章</a>，最後作者也列了一些缺點及建議，強烈建議各位在決定採用 Azure Table Storage 前要認真閱讀:</p>
<blockquote>
<p><em><span style="color: #0080ff;">Windows Azure table storage is designed for high scalability, but there are some <strong>drawbacks </strong>to it though:</span></em></p>
<ul>
<li><em><span style="color: #0080ff;"><span style="color: #ff0000;">There is no possibility to sort the data through your query</span>. The data is being sorted by default by the partition and row key and that&rsquo;s the only order you can retrieve the information from the table storage. This can often be a painful issue when using table storage. Sorting is apparently an expensive operation, so for scalability this is not supported. </span></em></li>
<li><em><span style="color: #0080ff;">Each entity will have a primary key based on the partition key and row key </span></em></li>
<li><em><span style="color: #0080ff;">The only clustered index is on the PartitionKey and the RowKey. That means if you need to build a query that searches on another property then these, performance will go down. <span style="color: #ff0000;">If you need to query for data that doesn&rsquo;t search on the partition key, performance will go down drastically</span>. With the relational database we are used to make filters on about any column when needed. With table storage this is not a good idea or you might end up with slow data retrieval. </span></em></li>
<li><em><span style="color: #0080ff;"><span style="color: #ff0000;">Joining related data is not possible by default</span>. You need to read from seperate tables and doing the stitching yourself </span></em></li>
<li><em><span style="color: #0080ff;">There is no possibility to execute a count on your table, except for looping over all your entities, which is a very expensive query </span></em></li>
<li><em><span style="color: #0080ff;">Paging with table storage can be of more of a challenge then it was with the relational database </span></em></li>
<li><em><span style="color: #ff0000;">Generating reports from table storage is nearly impossible as it&rsquo;s non-relational</span></em></li>
</ul>
<p><em><span style="color: #0080ff;">If you can not manage with these restrictions, then Windows Azure table storage might not be the ideal storage solution.<strong> The use of Windows Azure table storage is depending on the needs and priorities of your application</strong>. But if you have a look at how large companies like Twitter, Facebook, Bing, Google and so forth work with data, you&rsquo;ll see they are moving away from the traditional relational data model. <strong>It&rsquo;s trading some features like filtering, sorting and joining for scalability and performance</strong>. The larger your data volume is growing, the more the latter will be impacted.</span></em></p>
</blockquote>
<p>看起來蠻恐佈的，由於架構的不同，Azure Table Storage 無法題供像 RDBMS 那樣多樣化的查詢能力，除了 partition key / row key 之外，甚至連 RDBMS 最基本的 index 都沒有，這也導至這篇的作者連這點也列入缺點 "<em>Generating reports from table storage is nearly impossible as it&rsquo;s non-relational</em>" ...</p>
<p>不過，實際的狀況其實沒這麼嚴重。Azure Table Storage 極為強大的 scalability 可以彌補查詢上的不足，平行的查詢，及針對巨量資料的設計，都是你在處理巨量資料的武器，而這些是 RDBMS 所無法提供的。</p>
<p>&nbsp;</p>
<p>寫到這裡，我簡單下個結論。Azure Table Storage, 是個很棒的 &ldquo;storage&rdquo;, 有絕佳的延申及擴充能力。能夠輕易的儲存及處理巨量資料，不論是資料大小或是資料筆數都一樣。不過它畢竟不是 "R"DBMS，而是 NO SQL這一類的 storage, 因此在執行覆雜的 QUERY 上不是 RDBMS 的對手。一些統計方面的功能 (如 SUM, COUNT, AVERAGE &hellip;. 等等) 就更不用說了。這部份得靠 ORM、Linq 及你的程式來補足。</p>
<p>而 Azure Table Storage 的規劃就將 partition 的機制放進去了，拿來做 Multi-Tenancy 的資料切割機制真是絕配! 跟本就是為了這樣的應用而設計的... 下一篇我會示範實際的程式碼，用 Azure Table Storage 來實作 Multi-Tenancy Applicaion 的 Data Layer ..</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2013-03-17 03:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-17 03:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-multi-tenancy-application-2-%e8%b3%87%e6%96%99%e5%b1%a4%e7%9a%84%e9%81%b8%e6%93%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2b8fb88f22322c5827aebbc4f6a98a80]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[535]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Azure] Multi-Tenancy Application #1, 設計概念</title>
		<link>http://columns.chicken-house.net/2013/03/12/azure-multi-tenancy-application-1-%e8%a8%ad%e8%a8%88%e6%a6%82%e5%bf%b5/</link>
		<pubDate>Tue, 12 Mar 2013 01:05:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2013/03/12/Azure-Multi-Tenancy-Application-1-e8a8ade8a888e6a682e5bfb5.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&#160;</p>  <p>對，各位你沒看錯，我的部落格在隔了一年半之後又有新文章了 XD</p>  <p>好久沒寫了，這年頭什麼東西都流行加個 &quot;微&quot; ... BLOG 有微博，Messenger 有微信... MV有微電影... 連我們在做的數位學習也出現 &quot;微型課件&quot; ... 什麼都微型化的後果，就是越來越懶的 POST 這種 &quot;大型&quot; 的文章在 BLOG 上了.. 常常想到一些東西，還沒成熟到一個完整概念，就貼到 FB 上，越來越速食的結果就越來越沒顧到 BLOG... Orz…</p>  <p>不過，世界果然是在往M型的方向發展，雲端到現在已經是個成熟的技術 &amp; 概念了，WEB APP的開發也越來越大型化，用了 Azure 當 <a href="http://en.wikipedia.org/wiki/Platform_as_a_service" target="_blank">PaaS</a> (Platform as a Service) 後，要開發大型的 Web Application 門檻也不像過去那麼高。這次要寫的，就是 <a href="http://en.wikipedia.org/wiki/SaaS" target="_blank">SaaS</a> (Software as a Service) 被廣為流傳的設計概念: 多租戶 (<a href="http://en.wikipedia.org/wiki/Multi-tenancy" target="_blank">Multi-Tenancy</a>) 的設計方式。</p>  <p>其實說明 SaaS 或是 Multi-Tenancy 的文章一大堆，完全輪不到我這種文筆程度的人來寫 XD，一樣，我只針對特別的地方下筆。Multi-Tenancy 顧名思義，就是讓一個 Application 能做適當的切割，&quot;分租&quot; 給多個客戶使用。跟過去一個 Application 就服務一個客戶不一樣，Multi-Tenancy 先天就是設計來服務多個客戶用的，也因為當年 SalesForce 的成功而聲名大噪。</p>  <p>回到系統的角度來思考，要設計一個漂亮的 Multi-Tenancy (Web) Application, 還真的是個不小的挑戰... 沒錯，我就吃過這種苦頭 XD，大概六年前因為工作上的關係，就已經有這樣的設計架構了，不過當年一切都要自己來，因此什麼釘子都碰過了。用現在的技術，有太多簡潔的作法，不過確看不到有太多的人在討論 (至少中文的沒有)，就動起這念頭，想來寫幾篇.. 內容就定位在用當紅技術: Microsoft Azure + ASP.NET MVC4 當作底層開始吧~~</p>  <p>先來探討一下幾種常見的 Multi-Tenancy 的設計方式。MSDN 有篇<a href="http://msdn.microsoft.com/en-us/library/aa479086.aspx" target="_blank">文章</a>寫的很精闢，快七年前的文章了，當年靠著這篇給我不少靈感... 我就先來導讀一下，標一下幾個架構設計的重點 (底下圖片皆引用 MSDN 該篇文章):</p>  <p>&#160;</p>  <p><strong>三種架構: Separated DB / Separate Schema / Shared Schema 比較:</strong>     <br />    <br /><img alt="Aa479086.mlttntda02(en-us,MSDN.10).gif" src="http://i.msdn.microsoft.com/dynimg/IC124001.gif" /></p>  <p>要把多個客戶塞進同一套系統內，最直接的問題就是資料隔離的 issue 了。暫時不管 application, 只管 data, 若對隔離及安全性要求越高，就要在越底層就做到隔離的機制。</p>  <p>&#160;</p>  <ol>   <li><strong>Separated DB        <br />        <br /></strong><img alt="Aa479086.mlttntda03(en-us,MSDN.10).gif" src="http://i.msdn.microsoft.com/dynimg/IC6354.gif" />       <br />最高隔離等級，就是每個客戶一個 database (Separated DB)。用這種模式，再怎麼粗心的工程師，也不會不小心把別的客戶的資料給秀出來。舉個例，系統內的A客戶，就會連到A資料庫，B客戶就用B資料庫。每個客戶的資料庫各自獨立，不會互相打架。       <br />      <br /></li>    <li><strong>Separate Schemas</strong> (Shared Database)       <br />      <br /><img alt="Aa479086.mlttntda04(en-us,MSDN.10).gif" src="http://i.msdn.microsoft.com/dynimg/IC106518.gif" />       <br />這種作法比第一種 Separated DB 好一點，它共用同一個 DB，但是替每一個客戶建立一組 Tables。這種作法不需要那麼高的成本 (看過 $$ 就知道，資料庫很貴的….)，多個客戶可以共用資料庫，不過因為 Schema 的層級隔離了，簡單的說不同客戶的 Table Name 是不一樣的，因此粗心的工程師造成客戶資料混在一起的機率也不算高，還有不錯的隔離機制。       <br />      <br />這方式實作有點辛苦，不過 SQL 2005 之後開始支援 Schema 這機制，實作上可以簡單的多。       <br />      <br /></li>    <li><strong>Shared Schema </strong>(Shared Database &amp; Shared Schema)       <br />      <br /><img alt="Aa479086.mlttntda05(en-us,MSDN.10).gif" src="http://i.msdn.microsoft.com/dynimg/IC216.gif" />       <br />      <br />這作法最極端了，所有資料都放在同一個資料庫，同一組資料表... 靠的是一個客戶ID的欄位來區別。這種方式成本最低，設計也最簡易直覺，不過... 整個系統只要有一道 SQL query 寫錯 (漏掉 where TenantID = ‘MyAccount’)，一切就完了，A客戶的資料就會出現在B客戶的報表裡... </li> </ol>  <p>   <br />當然，這篇是 MSDN 的文章，自然也提到了 Microsoft 的技術 (SQL server) 如何因應這三種不同的需求。這張表格是整篇文章的精華了，很清楚的講到三種模式，對各種問題的最佳處理方式。表格貼不過來 @@，我直接用截圖來說明:</p>  <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; margin-left: 0px; display: inline; border-top-width: 0px; margin-right: 0px" border="0" alt="image" src="/wp-content/be-files/image_15.png" width="724" height="421" /> </p>  <p>簡單舉個例子，Extensibility Patterns 這欄說明的是如何擴充你的資料? 這裡指的擴充不是指效能，是只你要如何增加新的資料型態?</p>  <p>Separate DB&#160; or Shared DB 最簡單，就照一般的方法，開新的欄位就好。對於 Shared Schema 的系統來說就沒這麼容易了，只能預先開幾個備用欄位 (如每個 table 都開: column1, column2, column3 …. etc)，不然就只能弄出像 NO SQL 那種 Name-Values 的方式來處理。不過，有經驗的開發者都知道，這樣搞下去，QUERY 實在很難寫...</p>  <p>其實這篇文章講的很務實，從設計架構、開發、到系統上線的維護及調校都講的很清楚，若各位有在企業內部 (INTRANET) 的環境建立 Multi-Tenancy Application 的需求，只能用 Windows Server + SQL Server 的話，這篇文章很值得參考。不過，這篇文章的時空被景是 2006 年，當年沒有 Azure 這種東西... MVC 也沒今天那麼成熟... 現在要做同樣的事，你有更厲害的武器可以用...</p>  <p>現在該怎麼做? 當然是等下一篇 XD</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2013-03-12 01:05:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-12 01:05:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-multi-tenancy-application-1-%e8%a8%ad%e8%a8%88%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[535]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LINQ to Object #2, Indexes for Objects</title>
		<link>http://columns.chicken-house.net/2011/10/30/linq-to-object-2-indexes-for-objects/</link>
		<pubDate>Sat, 29 Oct 2011 19:00:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2011/10/30/LINQ-to-Object-2-Indexes-for-Objects.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

上一篇自己寫了很不成熟的範例，示範怎麼同時使用 LINQ to Object 的方式查詢物件，同時又能用到索引的機制。不過示範歸示範，總是要有上的了檯面的作法... 這就是本篇的目的: i4o (indexes for objects) 這套函式庫的應用!

開始囉唆前，先來看看怎麼用吧! 接續上一篇的範例，我做了點調整，一方面把查詢的對像，從原本的 string 換成 Foo，另一方面也加上了第三種對照組: 使用 i4o 來建立索引。程式碼及執行結果如下:
<div>

<strong>對三種不同的 collection 進行 Linq 查詢</strong><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>Stopwatch timer = new Stopwatch();

// 建立資料集合 list1: 使用 List&lt;Foo&gt;, 沒有索引
List&lt;Foo&gt; list1 = new List&lt;Foo&gt;();
list1.AddRange(RndFooSeq(8072, 1000000));

// 建立資料集合 list2: 使用 IndexedList, 自訂型別，針對 Foo.Text 及 Foo.Number 建立索引，Query 只支援 == 運算元
IndexedList list2 = new IndexedList();
list2.AddRange(list1);

// 建立資料集合 list3: 使用 i4o library
IndexableCollection&lt;Foo&gt; list3 = list1.ToIndexableCollection&lt;Foo&gt;();

// 對 list1 進行 query
Console.WriteLine("\n\n\nQuery Test (non-indexed):");
timer.Restart();
(from x in list1 where x.Text == "888365" select x.Text).ToList&lt;string&gt;();
Console.WriteLine("Query time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);

// 對 list2 建立索引，進行 query
Console.WriteLine("\n\n\nQuery Test (indexed, dic):");
timer.Restart();
list2.ReIndex();
Console.WriteLine("Build Index time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);
timer.Restart();
(from x in list2 where x.Text == "888365" select x.Text).ToList&lt;string&gt;();
Console.WriteLine("Query time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);

// 對 list3 建立索引，進行 query
Console.WriteLine("\n\n\nQuery Test (indexed, i4o):");
timer.Restart();
list3.CreateIndexFor(i =&gt; i.Text).CreateIndexFor(i=&gt;i.Number);
Console.WriteLine("Build Index time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);
timer.Restart();
(from x in list3 where x.Text == "888365" select x.Text).ToList&lt;string&gt;();
Console.WriteLine("Query time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);</pre>




<!-- end of code area -->

</div>
&nbsp;

<a href="/wp-content/be-files/image_14.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" src="/wp-content/be-files/image_thumb_1.png" alt="image" width="280" height="251" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2011-10-30 03:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-29 19:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linq-to-object-2-indexes-for-objects]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[未分類]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[CODE] LINQ to Object - 替物件加上索引!</title>
		<link>http://columns.chicken-house.net/2011/10/25/code-linq-to-object-%e6%9b%bf%e7%89%a9%e4%bb%b6%e5%8a%a0%e4%b8%8a%e7%b4%a2%e5%bc%95/</link>
		<pubDate>Tue, 25 Oct 2011 02:47:39 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2011/10/25/indexed_linq.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

好久沒寫文章了，看了一下<a href="http://columns.chicken-house.net/post/2011/01/03/CODE-e58fafe4bba5e8bcb8e587bae588b0-TextBox-e79a84-TextWriter-TextBoxWriter!.aspx">上一篇</a>的日期... 嚇，再撐幾天就 10 個月了 =_=,  週末看了 darkthread 的<a href="http://blog.darkthread.net/post-2011-10-20-linq-search-performance-issue.aspx">這篇文章: 當心LINQ搜尋的效能陷阱</a>，想說 LINQ to SQL, LINQ to Entity Framework, LINQ to … 都支援索引, 沒道理 LINQ to Object 不行啊, 一定只是沒人補上實作而已.. 動了這個念頭之後, 接下來的時間就都在研究這些...

回到主題，年紀夠大的網友，大概都還聽過 "<a href="http://en.wikipedia.org/wiki/Embedded_SQL">Embedded SQL</a>” 吧? 當年用 C/C++ 要存取資料庫，實在不是件簡單的事... 光是那堆 initial database connection 的動作就搞死人了，因此有些開發工具廠商，就搞出了 Embedded SQL 這種內嵌在程式語言內的 SQL .. 貼一段 CODE，看起來大概像這樣:

<b>Embedded SQL sample code</b>

<pre>

/* code to find student name given id */
/* ... */
for (;;) {
    printf("Give student id number : ");
    scanf("%d", &amp;id);
    EXEC SQL WHENEVER NOT FOUND GOTO notfound;
    EXEC SQL SELECT studentname INTO :st_name
             FROM   student
             WHERE  studentid = :id;
    printf("Name of student is %s.\n", st_name);
    continue;
notfound:
    printf("No record exists for id %d!\n", id);
}
/* ... */
</pre>
<!-- end of code area -->

</div>
&nbsp;

有沒有跟現在的 LINQ 很像? CODE 就不多解釋了，這類的工具，大都是遵循這樣的模式: 透過編譯器 (或是 code generator / preprocessor)，將 query language 的部份代換成一般的 data access code，最後編譯成一般的執行檔，執行起來就有你預期的效果...

看到 darkthread 探討 LINQ to Object 效能問題之後，第一個反應就是:

<em><strong><span style="color: #0000ff;">"該怎麼替 LINQ to Object 加上索引??"</span></strong></em>

LINQ 這堆指令，最終是會被翻譯成 extension method, 而這些 extension method 是可以自訂的，就先寫了一個小程式試看看..

&nbsp;

<pre >

    public class IndexedList : List&lt;string&gt;
    {
    }

    public static class IndexedListLinqExtensions
    {
        public static IEnumerable&lt;string&gt; Where(this IndexedList context, Expression&lt;Func&lt;string, bool&gt;&gt; expr)
        {
            Console.WriteLine("My code!!!");
            foreach (string value in context.Where(expr)) yield return value;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            IndexedList list1 = new IndexedList();
            // init list1 ...

            foreach (string value in (from x in list1 where x == "888365" select x)) Console.WriteLine("find: {0}", value);
        }
    }

</pre>
<!-- end of code area -->

</div>
&nbsp;

程式很簡單，只是做個 POC，證明這段 CODE 會動而已。從 List&lt;string&gt; 衍生出一個新類別: IndexedList, 然後針對它定義了專屬的 Extension method: Where( … ), 然後試著對 IndexedList 這集合物件，用 LINQ 查詢... 果然 LINQ 在執行 where x == “888365” 這語句時，會轉到我們自訂的 extension method !

接下來的工作就不是那麼簡單了，我自認很愛挖這些 framework 的設計，又自認 C# 語法掌握能力也不差，結果我也是花了一些時間才摸清楚它的來龍去脈... 事情沒這麼簡單，所以我做了極度的簡化...

首先，我只想做個 POC (Proof of concept), 證明可行就好, 完全沒打算把它做成可用的 library .. 因為在研究的過程中，早已找到有人在做這件事了 (i4o, index for objects, <a href="http://i4o.codeplex.com/">http://i4o.codeplex.com/</a>)。為了讓 code 簡短到一眼就看的懂的程度，我的目標定在:
<ol>
	<li>查詢對相只針對 List&lt;string&gt; 處理，不做泛型及自訂索引欄位。</li>
	<li>查詢只針對 == 做處理。如下列 LINQ 語句的紅字部份:

from x in list1 <strong><span style="color: #ff0000;">where x == “123456”</span></strong> select x</li>
	<li>條件只限於 x == “123456”, 只提供 == 運算元，只提供常數的比對，常數只能放在右邊...</li>
</ol>
接下來就是索引的部份了，因為 where 只處理 == 這種運算，也不用排序了，採用 HashSet 就很夠用了，速度又快又好用，時間複雜度只有 O(1) .. 看起來很理想，於是剛才的 Sample Code 就可以改成這樣:

&nbsp;

<b>IndexedList : 加上索引的 List&lt;string&gt; 實作</b>
<pre>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;

namespace IndexedLinqTest
{
    public class IndexedList : List&lt;string&gt;
    {
        public readonly HashSet&lt;string&gt; _index = new HashSet&lt;string&gt;();

        public void ReIndex()
        {
            foreach (string value in this)
            {
                this._index.Add(value);
            }
        }
    }

    public static class IndexedListLinqExtensions
    {
        public static IEnumerable&lt;string&gt; Where(this IndexedList context, Expression&lt;Func&lt;string, bool&gt;&gt; expr)
        {
            if (expr.CanReduce == false &amp;&amp; expr.Body.NodeType == ExpressionType.Equal)
            {
                BinaryExpression binExp = (BinaryExpression)expr.Body;
                string expectedValue = (binExp.Right as ConstantExpression).Value as string;
                if (context._index.Contains(expectedValue)) yield return expectedValue;
            }
            else
            {
                //return context.Where(expr);
                foreach (string value in context.Where(expr)) yield return value;
            }
        }
    }
}

</pre>
<!-- end of code area -->

</div>
&nbsp;

&nbsp;

程式碼稍等再說明，先來看看怎麼用! darkthread 的作法真不錯用，借兩招來試試... 程式大概執行這幾個步驟:
<ol>
	<li>準備 10000000 筆資料，用亂數打亂，建立 list1 (含索引, type: IndexedList) 及 list2 (不含索引, type: List&lt;string&gt;)</li>
	<li>呼叫 list1.ReIndex(), 替 list1 重建索引 (HashSet), 記錄建立索引花費的時間</li>
	<li>分別對list1, list2進行LINQ查詢，查出四筆指定的資料，計算查詢花費的時間</li>
</ol>
直接來看看程式碼吧:

&nbsp;


<b>測試 Indexed LINQ 的程式碼</b>
<pre >
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch timer = new Stopwatch();


            IndexedList list1 = new IndexedList();
            list1.AddRange(RndSeq(8072, 10000000));

            List&lt;string&gt; list2 = new List&lt;string&gt;();
            list2.AddRange(list1);

            timer.Restart();
            list1.ReIndex();
            Console.WriteLine("Build Index time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);


            Console.WriteLine("\n\n\nQuery Test (indexed):");
            timer.Restart();
            foreach (string value in (from x in list1 where x == "888365" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list1 where x == "663867" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list1 where x == "555600" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list1 where x == "888824" select x)) Console.WriteLine("find: {0}", value);
            Console.WriteLine("Query time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);

            Console.WriteLine("\n\n\nQuery Test (non-indexed):");
            timer.Restart();
            foreach (string value in (from x in list2 where x == "888365" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list2 where x == "663867" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list2 where x == "555600" select x)) Console.WriteLine("find: {0}", value);
            foreach (string value in (from x in list2 where x == "888824" select x)) Console.WriteLine("find: {0}", value);
            Console.WriteLine("Query time: {0:0.00} msec", timer.Elapsed.TotalMilliseconds);

        
        
        
        }

        private static IEnumerable&lt;string&gt; SeqGenerator(int count)
        {
            for (int i = 0; i &lt; count; i++) yield return i.ToString();
        }
        private static IEnumerable&lt;string&gt; RndSeq(int seed, int count)
        {
            Random rnd = new Random(seed);
            foreach (string value in (from x in SeqGenerator(count) orderby rnd.Next() select x)) yield return value;
        }
    }

</pre>

<!-- end of code area -->

</div>
&nbsp;

而程式執行的結果:

<a href="/wp-content/be-files/image_13.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" src="/wp-content/be-files/image_thumb.png" alt="image" width="354" height="393" border="0" /></a>

貼一下參考配備 (這是炫耀文...)，給大家體會一下速度...

<strong><span style="color: #ff0000;">CPU: INTEL i7 2600K, INTEL Z68 主機板

</span></strong>RAM: 8GB

OS: Windows 7 (x64)

&nbsp;

看起來藉著 HashSet 當索引，來加速 LINQ 查詢的目的已經達到了。不加索引需要 2147.83 ms, 而加上索引只需要 2.19ms … 兩者時間複雜度分別是 O(1) v.s. O(n), 要是資料的筆數再往上加，兩者的差距會更大...

回過頭來看看程式碼吧! 關鍵在 LINQ 的 Extension 上面:

&nbsp;


<b>支援索引的 LINQ extension: where( )</b>
<pre >
        public static IEnumerable&lt;string&gt; Where(this IndexedList context, Expression&lt;Func&lt;string, bool&gt;&gt; expr)
        {
            if (expr.CanReduce == false &amp;&amp; expr.Body.NodeType == ExpressionType.Equal)
            {
                BinaryExpression binExp = (BinaryExpression)expr.Body;
                string expectedValue = (binExp.Right as ConstantExpression).Value as string;
                if (context._index.Contains(expectedValue)) yield return expectedValue;
            }
            else
            {
                //return context.Where(expr);
                foreach (string value in context.Where(expr)) yield return value;
            }
        }
</pre>

<!-- end of code area -->

</div>
&nbsp;

line 1 的宣告，限制了只有對 IndexedList 型別的物件，下達 WHERE 語句的情況下，才會交由你的 extension method 執行。而 Microsoft 會把整個 where 語句，建構成 Expression 這型別的物件。

前面我下的一堆條件，像是只能用 == 運算元，只針對字串常數比對等等，就都寫在 line 3 的判段式了。基本上只要不符合這些條件，就會跳到 line 12, 索引等於完全無用武之地了。

要是符合使用索引的條件，則程式會進到 line 5 ~ line 7.  程式會透過 HashSet 去檢查要找的 data 是否存在於 List 內? 前面提過了，用 HashSet.Contains( … ) 來檢查 (O(1))，效能遠比 List&lt;string&gt;.Contains( … ) 的效能 (O(n) ) 好的多。

實驗的結果到此為止，很明顯了，索引的確發揮出效果了，不過老實說，這段 code 真的沒什麼實用的價值... 哈哈，與其這樣繞一大圈，用 LINQ 很帥氣的查資料，還不如直接用程式找 HashSet 就好... 這只是證明 it works, 不繼續完成它，主要的原因是已經有人做了，而且做的比我好 XD! 需要的人可以參考看看 i4o 這套 library. 想體會這東西怎麼用，可以先看看作者的 BLOG，這篇是使用範例:

<a href="http://staxmanade.blogspot.com/2008/12/i4o-indexspecification-for.html">http://staxmanade.blogspot.com/2008/12/i4o-indexspecification-for.html</a>

要下載的話，它的 project hosted 在 codeplex:

<a href="http://i4o.codeplex.com/">http://i4o.codeplex.com/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2011-10-25 02:47:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-10-25 02:47:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code-linq-to-object-%e6%9b%bf%e7%89%a9%e4%bb%b6%e5%8a%a0%e4%b8%8a%e7%b4%a2%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[KKBruce]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kingkong.bruce@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://kkbruce.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-25 11:28:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-25 11:28:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[好文一篇，推。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-27 01:54:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-27 01:54:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多謝~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[CODE] 可以輸出到 TextBox 的 TextWriter: TextBoxWriter!</title>
		<link>http://columns.chicken-house.net/2011/01/03/code-%e5%8f%af%e4%bb%a5%e8%bc%b8%e5%87%ba%e5%88%b0-textbox-%e7%9a%84-textwriter-textboxwriter/</link>
		<pubDate>Mon, 03 Jan 2011 02:35:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2011/01/03/CODE-e58fafe4bba5e8bcb8e587bae588b0-TextBox-e79a84-TextWriter-TextBoxWriter!.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>吃葡萄不吐葡萄皮... 對，這不是繞口令... 哈哈...。</p>  <p>先祝各位 2011 新年快樂!!&#160; 這幾個月忙翻了, 一方面系統要移轉到 windows azure, 另一方面要改善原本系統的排程 (原本是 console app + scheduler task service), 現在要用 windows service 來取代, 突然之間之前覺的工作上用不到的 multi-threading 技巧, 現在都派上用場了...</p>  <p>題外話先扯一下, 在 azure 因為架構上就已經把 web role (presentation layer) / worker role (business logic layer) / azure storage (data layer) 分的很清楚, 相對的每一層之間的 communication 時間就拉長了, 我們碰到的狀況就是 worker role 對 azure storage 有大量的 I/O 的話, 效能就很糟糕... 在這邊用了<a href="http://columns.chicken-house.net/post/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx">生產線</a>的模式, 結果效能提升了十幾倍... 果然<a href="http://ruddyleemsblog.wordpress.com/">前輩</a>說的沒錯: 架構對了，什麼事都變簡單了... </p>  <p>另一個案例則是把原本靠 windows task scheduler 執行的排程，改成用自行開發的 windwos service ... 不過開發成 service 實在是不大好除錯, 再加上多執行緒先天也是除錯不易... 因此開發階段都寫成windows form, 提供 START / STOP / PAUSE / CONTINUE 等控制的功能，簡化前段的開發作業。</p>  <p>azure / service 都用到了不少多執行緒的技巧, 改寫成 service 也用了老字號的 Cassini 解決另一部份的問題，這些都是值得介紹一下的部份，不過今天主題不在這，改天另起專欄再說。在改寫成 windows service 的過程中，需要把過去寫成 Console application 的 code 移到 service ，而過去這些程式都直接用 Console.Out 這個 TextWriter 輸出訊息到 DOS command prompt / log file, 移到 windows form 之後, 要輸出到 TextBox 就變的麻煩了點, 本來不想理它, 後來發現不好好處理這個問題還不行...</p>  <p>如果不講究 code 好不好看，其實改一下程式就可以了，把原本的 Console.Out.WriteLine( ) 改成 <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.textboxbase.appendtext(v=VS.90).aspx">TextBox.AppendText( )</a> 就好，但是...</p>  <ol>   <li>原程式得改寫，不能直接用 TextWriter ... 另外, 很多現有的函式庫都接受 TextWriter, 不能靠 TextWriter 輸出的話程式會變很雜 </li>    <li>只有 create control 的 UI thread 可以呼叫 AppendText( ) ... </li>    <li>thread-safe 的問題: 輸出的訊息會交錯輸出, 無法閱讀 </li>    <li>長時間連續執行，TextBox 的訊息會太多, 得要有 recycle 的機制 </li>    <li>最好可以順便寫 LOG 檔... </li> </ol>  <p>老實說，除了 (1) 之外，其它點都是自己寫個專用的 OutputLog method 就可以解決。不過考量到程式未來真正執行時，是在 service 的環境, 在那邊是沒有 TextBox 這種 UI control 的, 最終還是要透過 TextWriter 輸出到 log file, 或是透過 socket 輸出... 何況用 TextWriter 輸出 log 也比較符合抽象化的原則, 不需要去碰到太多輸出方式的細節...</p>  <p>問題跟目的都搞清楚之後，接下來就是實作了。這次實作目標就是要想個辦法，用 TextWriter 的方式輸出 LOG 訊息，而這些訊息要自動呈現在 WebForm 的 TextBox control 上, 就好像在 DOS command prompt 裡執行 console application 一樣。先來想像一下 code 寫起來跟看起來是什麼樣子:</p>  <p>&#160;</p>  <div><span class="copycode" title="copy code into clipboard.">[copy code]</span>     <div style="display: none">     <pre style="display: none" id="codeData">        private TextWriter output;
        public Form1()
        {
            InitializeComponent();
            this.output = TextWriter.Synchronized(new TextBoxWriter(this.textBox1));
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            for (int i = 0; i &lt; 300; i++)
            {
                this.output.WriteLine(&quot;{0}. Hello!!!&quot;, i);
            }
        }</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">private</span> TextWriter output;</pre>

      <pre><span class="lnum">   2:  </span><span class="kwrd">public</span> Form1()</pre>

      <pre class="alt"><span class="lnum">   3:  </span>{</pre>

      <pre><span class="lnum">   4:  </span>    InitializeComponent();</pre>

      <pre class="alt"><span class="lnum">   5:  </span>    <span class="kwrd">this</span>.output = TextWriter.Synchronized(<span class="kwrd">new</span> TextBoxWriter(<span class="kwrd">this</span>.textBox1));</pre>

      <pre><span class="lnum">   6:  </span>}</pre>

      <pre class="alt"><span class="lnum">   7:  </span><span class="kwrd">private</span> <span class="kwrd">void</span> Form1_Load(<span class="kwrd">object</span> sender, EventArgs e)</pre>

      <pre><span class="lnum">   8:  </span>{</pre>

      <pre class="alt"><span class="lnum">   9:  </span>    <span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; 300; i++)</pre>

      <pre><span class="lnum">  10:  </span>    {</pre>

      <pre class="alt"><span class="lnum">  11:  </span>        <span class="kwrd">this</span>.output.WriteLine(<span class="str">&quot;{0}. Hello!!!&quot;</span>, i);</pre>

      <pre><span class="lnum">  12:  </span>    }</pre>

      <pre class="alt"><span class="lnum">  13:  </span>}</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>&#160;</p>

<p>建立好 TextWriter 之後，後面只管用這 writer 輸出訊息，對應的 TextBox 自然就會像 terminal 般，不斷的跑出訊息出來...</p>

<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_11.png" width="660" height="398" /> </p>

<p>基本要求達到了，這就是我要的功能。其實這東西上網 <a href="http://www.google.com.tw/search?hl=zh-TW&amp;source=hp&amp;biw=1024&amp;bih=1219&amp;q=textboxwriter&amp;aq=f&amp;aqi=g2&amp;aql=&amp;oq=&amp;gs_rfai=">GOOGLE</a> 一下, 類似的例子也有, 不過一來寫起來沒幾行, 二來功能跟我要的有點出入... 想想還是自己寫一個。先來看看這個 writer 是怎麼實作的? </p>

<p>&#160; </p>

<p>TextWriter 要實作並不難，不過不熟悉的話，也是得花些時間才能搞定。主要是 TextWriter 的 <a href="http://msdn.microsoft.com/en-us/library/system.io.textwriter.write(v=VS.90).aspx">Writer( )</a> 跟 <a href="http://msdn.microsoft.com/en-us/library/system.io.textwriter.writeline(v=VS.90).aspx">WriterLine( )</a> 就共有 35 種不同的多載... HELP 沒有清楚的寫到這堆 method 之間的關係，一時也不知 override 那一個的效果是最好的...。一開始我是從最基本的 void TextWriter.Write(char value) 下手, 結果效能慘不忍睹... 輸出一行字就要一秒鐘, 好像回到了當年DOS時代加上倚天中文後, 按個DIR字是一行一行跑出來的光景... Orz, 後來花了點時間追蹤這卅幾個 method 的先後關係，才改了這個效能 OK 的版本:</p>

<div><span class="copycode" title="copy code into clipboard.">[copy code]</span> 

  <div style="display: none">
    <pre style="display: none" id="codeData">   public class TextBoxWriter : TextWriter
    {
        private TextBox _textbox;
        public TextBoxWriter(TextBox textbox)
        {
            this._textbox = textbox;
        }

        public override void Write(char value)
        {
            this.Write(new char[] { value }, 0, 1);
        }

        public override void Write(char[] buffer, int index, int count)
        {
            if (this._textbox.InvokeRequired)
            {
                this._textbox.Invoke((Action&lt;string&gt;)this.AppendTextBox, new string(buffer, index, count));
            }
            else
            {
                this.AppendTextBox(new string(buffer, index, count));
            }
        }



        private void AppendTextBox(string text)
        {
            this._textbox.AppendText(text);
        }



        public override Encoding Encoding
        {
            get { return Encoding.UTF8; }
        }
    }</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> TextBoxWriter : TextWriter</pre>

      <pre><span class="lnum">   2:  </span> {</pre>

      <pre class="alt"><span class="lnum">   3:  </span>     <span class="kwrd">private</span> TextBox _textbox;</pre>

      <pre><span class="lnum">   4:  </span>     <span class="kwrd">public</span> TextBoxWriter(TextBox textbox)</pre>

      <pre class="alt"><span class="lnum">   5:  </span>     {</pre>

      <pre><span class="lnum">   6:  </span>         <span class="kwrd">this</span>._textbox = textbox;</pre>

      <pre class="alt"><span class="lnum">   7:  </span>     }</pre>

      <pre><span class="lnum">   8:  </span>     <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Write(<span class="kwrd">char</span> <span class="kwrd">value</span>)</pre>

      <pre class="alt"><span class="lnum">   9:  </span>     {</pre>

      <pre><span class="lnum">  10:  </span>         <span class="kwrd">this</span>.Write(<span class="kwrd">new</span> <span class="kwrd">char</span>[] { <span class="kwrd">value</span> }, 0, 1);</pre>

      <pre class="alt"><span class="lnum">  11:  </span>     }</pre>

      <pre><span class="lnum">  12:  </span>     <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Write(<span class="kwrd">char</span>[] buffer, <span class="kwrd">int</span> index, <span class="kwrd">int</span> count)</pre>

      <pre class="alt"><span class="lnum">  13:  </span>     {</pre>

      <pre><span class="lnum">  14:  </span>         <span class="kwrd">if</span> (<span class="kwrd">this</span>._textbox.InvokeRequired)</pre>

      <pre class="alt"><span class="lnum">  15:  </span>         {</pre>

      <pre><span class="lnum">  16:  </span>             <span class="kwrd">this</span>._textbox.Invoke((Action&lt;<span class="kwrd">string</span>&gt;)<span class="kwrd">this</span>.AppendTextBox, <span class="kwrd">new</span> <span class="kwrd">string</span>(buffer, index, count));</pre>

      <pre class="alt"><span class="lnum">  17:  </span>         }</pre>

      <pre><span class="lnum">  18:  </span>         <span class="kwrd">else</span></pre>

      <pre class="alt"><span class="lnum">  19:  </span>         {</pre>

      <pre><span class="lnum">  20:  </span>             <span class="kwrd">this</span>.AppendTextBox(<span class="kwrd">new</span> <span class="kwrd">string</span>(buffer, index, count));</pre>

      <pre class="alt"><span class="lnum">  21:  </span>         }</pre>

      <pre><span class="lnum">  22:  </span>     }</pre>

      <pre class="alt"><span class="lnum">  23:  </span>     <span class="kwrd">private</span> <span class="kwrd">void</span> AppendTextBox(<span class="kwrd">string</span> text)</pre>

      <pre><span class="lnum">  24:  </span>     {</pre>

      <pre class="alt"><span class="lnum">  25:  </span>         <span class="kwrd">this</span>._textbox.AppendText(text);</pre>

      <pre><span class="lnum">  26:  </span>     }</pre>

      <pre class="alt"><span class="lnum">  27:  </span>     <span class="kwrd">public</span> <span class="kwrd">override</span> Encoding Encoding</pre>

      <pre><span class="lnum">  28:  </span>     {</pre>

      <pre class="alt"><span class="lnum">  29:  </span>         get { <span class="kwrd">return</span> Encoding.UTF8; }</pre>

      <pre><span class="lnum">  30:  </span>     }</pre>

      <pre class="alt"><span class="lnum">  31:  </span> }</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>其中補充說明一下, 在 line 14 ~ 21 為何要大費周章的, 把要呼叫 AppendTextBox( ) 的動作, 放到 delegate, 再交由 TextBox 控制項自行 Invoke 呼叫 ? 這是源自 windows form 的一條規範, 要是你寫的程式有多執行緒的應用，一定要知道這鐵律:</p>

<blockquote>
  <p><em>UI thread 的限制: 只有 create control 的 thread 可以更動 control 的狀態。</em></p>
</blockquote>

<p>如果不遵守這個規則，執行時就會被警告:</p>

<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_12.png" width="660" height="261" /> </p>

<p>解法就參考 line 14 ~ 21 的部份就好，說明的話 darkthread 這篇講的很清楚, 我就不客氣直接引用了 :D</p>

<p><a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2007/09/29/tips-about-ui-thread-limitation.aspx">http://blog.darkthread.net/blogs/darkthreadtw/archive/2007/09/29/tips-about-ui-thread-limitation.aspx</a></p>

<p>&#160;</p>

<p>&#160;</p>

<p>&#160;</p>

<p>不過，這樣只是達到基本需求而已，還有其它的問題... (3 ~ 5), 太久沒寫文章了，沒想到一篇寫不完... 請待下回分解 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2011-01-03 02:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-01-03 02:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code-%e5%8f%af%e4%bb%a5%e8%bc%b8%e5%87%ba%e5%88%b0-textbox-%e7%9a%84-textwriter-textboxwriter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Tang]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tomtang0406@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://newtom-it.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-17 20:09:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-17 20:09:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[真是辛苦...
為何不直接導入 log4net 這樣的 logging framework 一勞永逸地解決所有 log output 的問題?
只要修改 config 就可以指定輸出到多個不同的目的地, 不論是 DOS console / socket / database / rolling file / EventLog...etc, 日後根本不需要再改任何程式碼處理 log 的問題, 不需要的時候還可以關掉或是設定不同層級的 filter, 減少 log 的輸出量.

雖然不能寫到 UI control(TextBox), 但是這個 UI control 本來就只是開發時期用來看 log, 這種用途我會選擇用 log4net 輸出到 DebugOutputString, 然後用 Dbwin32.exe 或是 SystemInternals 的 DbgView.exe 來側錄還可以用關鍵字 high-light.

提供給您參考囉.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-19 20:12:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-19 20:12:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bingo, 實際的 code 是有搭配 log4net 輸出 LOG，不過我的需求還是有 &quot;輸出到 UI&quot; 這一項。就 &quot;輸出LOG&quot; 這件事，是不需要花這麼多工夫，我的目的是想把輸出到 TextBox 這件事，簡化到像輸出到 Console 那樣容易，同時是透過慣用的 TextWriter 來完成。

實際上的需求是這樣: 這個 application 最終是要包裝成 windows service + windows form 兩用的型態，在 windows form 模式下還是需要輸出到 TextBox. 另外實作這個 TextWriter 也有其它的目的，只要提供了 TextWriter, 就能很容易的跟其它 framework 串在一起。比如只要把 Console.Out 改到 TextBoxWriter, log4net 就可以輸出到我自訂的 UI。


不過你提供的建議，用 dbwin32.exe / dbgview.exe 倒是個好方法，感謝你的分享 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-21 09:39:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-21 09:39:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[移轉到WindowsAzure的話,
我想請問怎麼通過信用卡認證(扣款)的,
我用台灣的信用卡過不了
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-23 23:48:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-23 23:48:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[帳單收件地址得用美國的... 想辦法生一個出來吧!
台灣區還沒正式營運前，大概就只能這樣用了

倒是信用卡用台灣的 OK]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Litfal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[litfal1265@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tw.myblog.yahoo.com/litfal</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-02-26 12:01:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-02-26 12:01:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好：
我前陣子也遇到相同的狀況：debug string 都利用Console.Write 紀錄，之後改成Win Form後就看不到訊息了。
不巧的是debug string 散佈各處，雖然當時有利用#define選擇關閉，但並沒有考慮到UI的狀況...

後來選擇使用 Console.SetOut( textWriter ) 的方式，將Console的資訊轉寫到其他的 textWriter。
實作使用與您相似的方式：使用 TextWriter 去轉接目標Control。
不過有些不同的是，我建立了一個 BaseControlWriter 來處理InvokeRequired，並sealed。另外新建了WriteCore等供後續繼承類別修改。
剩下的TextBoxWriter 與 ListBoxWriter 只需修改一些 ctor 與 WriteCore 的方法即可順利運行。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Extension Methods 的應用: Save DataSet as Excel file...</title>
		<link>http://columns.chicken-house.net/2010/11/06/extension-methods-%e7%9a%84%e6%87%89%e7%94%a8-save-dataset-as-excel-file/</link>
		<pubDate>Sat, 06 Nov 2010 02:17:45 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/11/06/SaveDataSetAsExcelFile.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[好久沒寫東西了，趁著還記得 C# 怎麼寫的時後多補幾篇 =_=

要靠程式輸出Excel已經是個FAQ級的問題了，看過我之前文章的大概都知到，我很懶的寫那種FAQ級的東西，不是說寫了沒用，而是太多人寫，一定有寫的比我好的... 到最後連我自己忘了都會去查別人寫的，那我寫了還有啥用?

所以當然是有些特別的東西，才會想寫這篇...  我碰到的問題是，程式要處理的都是 DataSet 物件，不過 DataSet 物件是從 Excel 來的，處理完也要能回存回 Excel ..., 只不過為了先把 POC 作完，現在是以 DataSet 原生的 XML 格式代替。

其實以儲存的角度來看，XML很好用。不過要教會客戶編輯XML可是個大挑戰啊... 像 Excel 這樣有個表格還是比較容易上手一點。原本的程式長的像這樣:

&nbsp;
<div><b>原本的程式 (處理 dataset xml)</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>            DataSet ds = new DataSet();
            ds.ReadXml("data.xml");
            // do something
            ds.WriteXml("data.xml");
</pre>
</div>
<!-- end of code area -->

</div>
&nbsp;

我對程式碼的要求其實還蠻龜毛的，常常光為了一個變數名字取的好不好，就要想半天... 對於程式的結構寫起來漂不漂亮也是。上面的程式，要把 XML 換成 EXCEL 其實很簡單，把 ReadXml( ) 換成對等的載入 Excel 的程式碼，WriteXml( ) 也換成對等的輸出 Excel 就可以收工了。不過看起來就是不順眼，因為被太多細節干擾了，未來回過頭來看自己寫的 code, 如果一眼望去不能馬上看出這段 code 在做什麼，那就是不及格的作品了... 所以，我想要的 code 最好能像這樣:

&nbsp;
<div>

<b>期望的程式 (處理 excel 檔)</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>            DataSet ds = new DataSet();
            ds.ReadExcel("data.xls");
            // do something
            ds.WriteExcel("data.xls");
</pre>
</div>
<!-- end of code area -->

</div>
&nbsp;

看起來酷多了，這段程式很清楚的說明他在幹嘛... load excel, processing... and save excel...

繼承的作法，想都不用想就不考慮了。因為我的程式要嘛就直接用 System.Data.DataSet, 不然就是配合 XSD 讓 visual studio 替我 generate typed dataset 的類別... 這些情況下要用到我自訂的衍生類別都不方便... 於是我就把念頭動到 C# 的 extension ...

要怎麼把 DataSet 存成 Excel, 這就是典型的 FAQ 級的問題了，請各位 GOOGLE 一下就有了，不然文後我也附了幾個參考連結...。這裡的重點是 C# extension, 它很神奇的能讓你不需要重新編譯，也不需要拿到原始碼，就能 "擴充" 原本類別的能力。靠這樣的機制，我就能夠改造 .NET Framework 內建的 DataSet, 把它改造成我想要的樣子，如上面的範例用的 ReadExcel( ) / WriteExcel( )。

C# Extension 是我慣用的說法，其實它正統的名字是 Extension Methods, 是 .NET 3.0 之後提供的功能，不只 C#，VB.NET 也支援。它能讓你在現有的 class 上 "附加" 新的 method ...  是的，沒錯，它的能力有限，只能增加 "method", 而且只能是 instance method, 不能是 class ( static ) method, 也不能是 property 或 field ...

不過這樣也足夠了，先來看看這種 code 要怎麼寫:
<div>

<b>ExtensionMethods 示範</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>    public static class NPOIExtension
    {
        public static void ReadExcel(this DataSet ds, string inputFile)
        {
            //do something
        }

        public static void WriteExcel(this DataSet ds, string outputFile)
        {
            //do something
        }
    }</pre>
<!-- end of code area -->

</div>
&nbsp;

其實這又是另一種 Microsoft 提供的 Syntex Sugar 而已.. 注意到關鍵在那邊了嗎? 其實 "extension methods" 只不過是普通的 static method 而已，關鍵就在它的第一個參數，型別就是要附加的 class, 而宣告時要再額外加個 "this" modifier 來標示它，意思就是在裡面的 code, 這個參數就把它當作 "this" 來用 ...

換個角度看，其實這只是編譯器幫我們動一點手腳而已，好讓我們的 code 看起來會漂亮一點。用 extension methods 寫的 code, 其實跟這樣的寫法是完全同等的:
<div>

<b>不用 extension methods 的寫法</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>        DataSet ds = new DataSet();
        NPOIExtension.ReadXml(ds, "data.xml");
        // do something
        NPOIExtension.WriteXml(ds, "data.xml");



     public static class NPOIExtension
    {
       public static void ReadExcel(DataSet context, string inputFile)
        {
            // do something
        }
       public static void WriteExcel(DataSet context, string outputFile)
        {
            // do something
        }
    }</pre>
<!-- end of code area -->

</div>
&nbsp;

少了 this 的用法，看起來就沒這麼神奇了。就是一般的 static method 而已。我喜歡 C# 就是喜歡它有很多這類的 syntax sugar, 可以滿足我寫程式想把程式碼弄的漂漂亮亮的慾望... extension methids 就是一例，還有像 yield return, attribute 等等也是個經典...

這樣的改變讓我想起，以前公司新進工程師我都會教一堂課，就是講物件是怎麼一回事? 最早是 C / C++ 版，後來改用 javascript 來講這門課。講的就是一步一步示範如何由 procedure oriented language 轉變到 object oriented language 的過程。C++ 是個最清楚的例子，它靠 C 的 function pointer + struct, 用指標指向 function, 把 data 及 function 包裝在 struct 裡，就變成一個 object. (所以 C++ 的 struct 才會跟 class 這麼像啊)。而繼承的問題，則是在 struct 裡動一點手腳，用 virtual table 的方式，讓你寫起 code 來 "好像" 真的有物件導向這麼回事。其實 C++ 的 method, 也只是個普通的 function, 只不過它第一個參數一定叫作 "this" 而已...

扯遠了，整篇的目的只是要講，用 Extension Method 可以把 code 包的很漂亮，而且也真的可以動而已... 哈哈，最後貼一下完整的 source code, 證明我沒有唬爛...

程式我調一下，我只實作了 WriteExcel( ) 的部份，從 DataSet XML 讀進來，存成 Excel, 單純的一個轉檔程式。而轉換的過程中是這樣對應的: 一個 DataSet 就代表一個 EXCEL workbook，而一個 DataTable, 則對應到 EXCEL sheet。DataTable 的 Row / Column, 當然就是對應到 EXCEL Row 跟 Cell 了:
<div>

<b>完整的 source code</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<pre>    public class Program
    {
        static void Main(string[] args)
        {
            DataSet ds = new DataSet();
            ds.ReadXml("data.xml");
            // do something
            ds.WriteExcel("data.xls");
        }
    }
    
    public static class NPOIExtension
    {
        public static void WriteExcel(this DataSet context, string outputFile)
        {
            HSSFWorkbook workbook = new HSSFWorkbook();

            foreach (DataTable table in context.Tables)
            {
                Sheet sheet = workbook.CreateSheet(table.TableName);

                Row headerRow = sheet.CreateRow(0);
                for(int cpos = 0; cpos &lt; table.Columns.Count; cpos++)
                {
                    Cell cell = headerRow.CreateCell(cpos);
                    cell.SetCellType(CellType.STRING);
                    cell.SetCellValue(table.Columns[cpos].ColumnName);
                }

                int rpos = 0;
                foreach (DataRow row in table.Rows)
                {
                    rpos++;
                    Row sheetRow = sheet.CreateRow(rpos);
                    for (int cpos = 0; cpos &lt; table.Columns.Count; cpos++)
                    {
                        object value = row[cpos];
                        Cell cell = sheetRow.CreateCell(cpos);
                        cell.SetCellValue((value == null) ? (null) : (value.ToString()));
                    }
                }
            }

            if (File.Exists(outputFile)) File.Delete(outputFile);
            FileStream fs = File.OpenWrite(outputFile);
            workbook.Write(fs);
            fs.Close();
        }
    }
</pre>
<!-- end of code area -->

</div>
&nbsp;

對啦，這真的是全部的 code ... 開個 console project 就可以跑了。我就說我很少貼超過百行的 code ... 哈哈

順帶一提，NPOI 這個 open source project 做的真不錯，可以在 pure .net 環境下就能處理 excel ... 這個範例就是用 NPOI 寫的，有興趣的朋友可以參考看看!

&nbsp;

&nbsp;

&nbsp;

&nbsp;

-------------

Reference:
<ol>
	<li>MSDN:  Extension Methods (C# Programming Guide)
<a title="http://msdn.microsoft.com/en-us/library/bb383977.aspx" href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">http://msdn.microsoft.com/en-us/library/bb383977.aspx</a></li>
	<li>NPOI (in CodePlex.com)
<a href="http://npoi.codeplex.com/">http://npoi.codeplex.com/</a></li>
	<li>MSDN 學習園地的 NPOI 介紹文章 (中譯版)
在 Server 端存取 Excel 檔案的利器：NPOI Library
<a title="http://msdn.microsoft.com/zh-tw/ee818993.aspx" href="http://msdn.microsoft.com/zh-tw/ee818993.aspx">http://msdn.microsoft.com/zh-tw/ee818993.aspx</a></li>
	<li>另一套類似NPOI 的函式庫: Koogra
Koogra Excel BIFF/XLSX Reader Library
<a title="http://koogra.sourceforge.net/" href="http://koogra.sourceforge.net/">http://koogra.sourceforge.net/</a></li>
	<li>直接用 OpenXML format 的範例
<a title="http://www.dotblogs.com.tw/mis2000lab/archive/2008/04/24/3454.aspx" href="http://www.dotblogs.com.tw/mis2000lab/archive/2008/04/24/3454.aspx">http://www.dotblogs.com.tw/mis2000lab/archive/2008/04/24/3454.aspx</a></li>
	<li>Microsoft Open XML SDK 1.0 / 2.0 for Microsoft Office
1.0 (<a title="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=AD0B72FB-4A1D-4C52-BDB5-7DD7E816D046&amp;displaylang=en" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=AD0B72FB-4A1D-4C52-BDB5-7DD7E816D046&amp;displaylang=en">http://www.microsoft.com/downloads/en/details.aspx?FamilyId=AD0B72FB-4A1D-4C52-BDB5-7DD7E816D046&amp;displaylang=en</a>)
2.0 (<a title="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c6e744e5-36e9-45f5-8d8c-331df206e0d0&amp;DisplayLang=en" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c6e744e5-36e9-45f5-8d8c-331df206e0d0&amp;DisplayLang=en">http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c6e744e5-36e9-45f5-8d8c-331df206e0d0&amp;DisplayLang=en</a>)</li>
</ol>
後記: 本來有寫一段，是整理到底有幾種方法，可以在 .NET 環境下輸出 EXCEL 的... 不過後來決定沒放在本文，就挪到 reference ... 簡單的比較，需要的可以看看
<ol>
	<li>直接用 Excel 提供的物件

這種方式就是透過程式去操作 Excel 。優點是只要 Excel 有提供的功能，大概都做的到。不過也因為功能太多，用起來很複雜。這方法致命的缺點就是效能。它相當於你真的開啟 Excel 然後命令它做事，想像一下，要能很順暢的執行 Excel 的機器，都不會太差。單機的 windows form 程式還好，如果碰到 server side 的程式，如 ASP.NET 這種，只要同時有五個人點這個功能，你的 server 大概就跑不動了...。</li>
	<li>透過 Jet odbc / oledb driver

這種方式沒有第一種的缺點，不過也沒有它的優點。既然是透過 odbc 這類存取資料庫的 driver 來存取，那麼你也只能把 Excel 檔當成某種資料庫來看待。處理資料還不成問題，要套用公式或是輸出畫面就辦不到了。這方法還有個大缺點，Jet driver <a href="/post/2008/07/26/x64-2-ASPNET-2b-ODBC-(e8ae80e58f96-CSV).aspx">沒有 x64 的版本</a> .... windows 2008 r2 之後就沒有 x86 版了，這方法不是長久之計...</li>
	<li>輸出 HTML, 用 Excel 開啟

這方法很簡單，只要輸出 HTML table, 再調整 content type, 讓 browser 叫 excel 出來幫你開啟就好了。老實說我一直覺的這招有點投機 XD，好處是很簡單，缺點是對 EXCEL 的掌控程度很低，大概就是幫你把資料貼進去的程度而已，不能用公式，也不能輸出多個 sheet 。</li>
	<li>Open XML Format 直接輸出

Office 2007  開始，就放棄用了十幾年的 Ole structed storage compound file 二進位檔的格式，改以 XML 為主 (當然還是支援舊版的格式啦)。只要你知道它的 schema, 不需要太複雜的步驟就可以直接輸出 .xlsx 了。

熟 XML 的話，甚至是寫寫 XSLT 就可以生的出來。不過這還蠻考驗你對 XML / Open XML 的掌握程度... 算是小有門崁的作法。</li>
	<li>透過 NPOI / Koogra 這類 3rd party 含式庫

這些含式庫都可以不需要安裝龐大的 Excel, 就有處理 excel 檔的能力。跟 Open XML 不同的是，這些 library 能夠處理到比較頭痛的 2003 及之前版本的 binary file, 相容性比 XML 來的好。</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2010-11-06 02:17:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-06 02:17:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[extension-methods-%e7%9a%84%e6%87%89%e7%94%a8-save-dataset-as-excel-file]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[gattaca]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gattaca88077@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-16 08:47:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-16 08:47:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Html5中也有多執行緒可用了，搭配WebSocket，平行處理的話題可是要繼續下去喔！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-17 11:20:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-17 11:20:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[看了 HTML5 的 worker 設計，好奇妙的感覺... 過去 web programming 一直都跟這些領域扯不上關係。

早該有這種東西了 (Y)
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[RUN! PC] 2010 七月號 - 結合檔案及資料庫的交易處理</title>
		<link>http://columns.chicken-house.net/2010/07/09/run-pc-2010-%e4%b8%83%e6%9c%88%e8%99%9f-%e7%b5%90%e5%90%88%e6%aa%94%e6%a1%88%e5%8f%8a%e8%b3%87%e6%96%99%e5%ba%ab%e7%9a%84%e4%ba%a4%e6%98%93%e8%99%95%e7%90%86/</link>
		<pubDate>Fri, 09 Jul 2010 13:44:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/07/09/RUN!-PC-2010-e4b883e69c88e8999f-e7b590e59088e6aa94e6a188e58f8ae8b387e69699e5baabe79a84e4baa4e69893e89995e79086.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&#160;</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IMG_3972" border="0" alt="IMG_3972" src="/wp-content/be-files/IMG_3972_1.jpg" width="660" height="447" /> </p>  <p>再次感謝編輯大人 :D，Transactional NTFS&#160; #2 也刊出來了!</p>  <p>這篇是延續<a href="/post/2010/05/05/RUNPC-2010-05.aspx" target="_blank">上一篇</a>，進一步的介紹 TxF&#160; 如何與 TransactionScope 互動，讓你可以結合檔案系統及資料庫的異動，變成單一交易的技巧。</p>  <p>由於TxF還沒有正式在.NET Framework裡支援，所以這篇最後也介紹了 AlphaFS，可以簡化應用時的障礙。AlphaFS 是一套想要取代 System.IO.* 的類別庫，它支援了許多 NTFS 的進階功能 (像是 VSS、HardLink 等) 的功能，而 TxF 也在範圍內，透過它就不用再像 <a href="/post/2010/05/05/RUNPC-2010-05.aspx" target="_blank">上一篇</a> 一樣，辛苦的用 P/Invoke 了。</p>  <p>&#160;</p>  <p>這篇提到的範例程式可以在<a href="/wp-content/be-files/RunPC-201007.zip" target="_blank">這裡</a>下載。有任何意見也歡迎在這裡留話給我 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2010-07-09 21:44:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-09 13:44:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2010-%e4%b8%83%e6%9c%88%e8%99%9f-%e7%b5%90%e5%90%88%e6%aa%94%e6%a1%88%e5%8f%8a%e8%b3%87%e6%96%99%e5%ba%ab%e7%9a%84%e4%ba%a4%e6%98%93%e8%99%95%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="txf"><![CDATA[Transactional NTFS]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[RUN! PC] 2010 五月號 - TxF讓檔案系統也能達到交易控制</title>
		<link>http://columns.chicken-house.net/2010/05/05/run-pc-2010-%e4%ba%94%e6%9c%88%e8%99%9f-txf%e8%ae%93%e6%aa%94%e6%a1%88%e7%b3%bb%e7%b5%b1%e4%b9%9f%e8%83%bd%e9%81%94%e5%88%b0%e4%ba%a4%e6%98%93%e6%8e%a7%e5%88%b6/</link>
		<pubDate>Tue, 04 May 2010 17:51:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/05/05/RUNPC-2010-05.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&#160;</p>  <p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_10.png" width="660" height="418" />&#160; </p>  <p>五月號就刊出來，還真有點意外 :D，這次稿件趕不及，晚了幾天才交出去，編輯大人還是讓我上五月號啦，真是感謝 :D</p>  <p>之前執行緒的系列，是打算把各種應用執行緒的演算法都介紹一下，寫了五篇就沒靈感了。實際寫CODE的技巧倒是很多可以介紹，不過 .NET FX 4.0 出來之後，這些鎖碎的 coding 技巧又大幅簡化了，除非有特別的演算法需要 (如同之前那五篇 :D)，否則還自己拿 Thread 物件硬幹已經沒什麼意義了，所以就換另一個我有興趣的主題 - Transactional NTFS 來寫。</p>  <p>這系列第一篇出爐了，主要就是先介紹它的觀念及如何入門，國內這類資訊還不多，我就野人獻曝寫了一篇，試著寫看看了。較鎖碎的實作技巧 (如 P/Invoke) 我會直接貼 BLOG，而較完整的概念及實作探討等等就會整理成文章拿來投稿了。</p>  <p>再次感謝各位支持啦，底下有範例程式跟一些參考資源的 LINK，需要的歡迎取用 :D</p>  <p>&#160;</p>  <p>範例程式:</p>  <ol>   <li>Visual Studio 2008 Project (C#) File: <a href="/wp-content/be-files/TransactionDemo.zip" target="_blank">TransactionDemo.zip</a> </li> </ol>  <p>&#160;</p>  <p>參考資訊:</p>  <ol>   <li>AlphaFS: Brining Advanced Windows FileSystem Support to .NET      <br /><a href="http://alphafs.codeplex.com/">http://alphafs.codeplex.com/</a> </li>    <li>MSDN magazine (July 2007): Enhance Your Apps With File System Transactions      <br /><a href="http://msdn.microsoft.com/en-us/magazine/cc163388.aspx">http://msdn.microsoft.com/en-us/magazine/cc163388.aspx</a> </li>    <li>B# .NET BLOG: Windows Vista - Introducing TxF In C#      <br />Part 1: <a href="http://community.bartdesmet.net/blogs/bart/archive/2006/11/05/Windows-Vista-_2D00_-Introducing-TxF-in-C_2300_-_2800_part-1_2900_-_2D00_-Transacted-file-delete.aspx">Transacted File Delete</a>       <br />Part 2: <a href="http://community.bartdesmet.net/blogs/bart/archive/2006/11/19/Windows-Vista-_2D00_-Introducing-TxF-in-C_2300_-_2800_part-2_2900_-_2D00_-Using-System.Transactions-and-the-DTC.aspx">Using System.Transactions and the DTC</a>       <br />Part 3: <a href="http://community.bartdesmet.net/blogs/bart/archive/2007/02/21/windows-vista-introducing-txf-in-c-part-3-createfiletransacted-demo.aspx">CreateFileTransacted Demo</a> </li>    <li>Code Project: Windows Vista TxF / TxR      <br /><a href="http://www.codeproject.com/KB/vista/KTM.aspx">http://www.codeproject.com/KB/vista/KTM.aspx</a> </li>    <li>BLOG: Because we can      <br /><a href="http://blogs.msdn.com/because_we_can/archive/2005/05/18/419809.aspx">http://blogs.msdn.com/because_we_can/archive/2005/05/18/419809.aspx</a>       <br />Discussion and explanation relating to the Transactional NTFS feature coming in Longhorn, plus any other interesting anecdotes... </li>    <li>Performance Consoderations for Transactional NTFS      <br /><a href="http://msdn.microsoft.com/en-us/library/ee240893(VS.85).aspx">http://msdn.microsoft.com/en-us/library/ee240893(VS.85).aspx</a> </li>    <li>When to Use Transactional NTFS      <br /><a href="http://msdn.microsoft.com/en-us/library/aa365738(VS.85).aspx">http://msdn.microsoft.com/en-us/library/aa365738(VS.85).aspx</a> </li> </ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2010-05-05 01:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-04 17:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2010-%e4%ba%94%e6%9c%88%e8%99%9f-txf%e8%ae%93%e6%aa%94%e6%a1%88%e7%b3%bb%e7%b5%b1%e4%b9%9f%e8%83%bd%e9%81%94%e5%88%b0%e4%ba%a4%e6%98%93%e6%8e%a7%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="txf"><![CDATA[Transactional NTFS]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[RUN! PC] 2010 四月號 - 生產者vs消費者– 執行緒的供需問題</title>
		<link>http://columns.chicken-house.net/2010/04/05/run-pc-2010-%e5%9b%9b%e6%9c%88%e8%99%9f-%e7%94%9f%e7%94%a2%e8%80%85vs%e6%b6%88%e8%b2%bb%e8%80%85-%e5%9f%b7%e8%a1%8c%e7%b7%92%e7%9a%84%e4%be%9b%e9%9c%80%e5%95%8f%e9%a1%8c/</link>
		<pubDate>Mon, 05 Apr 2010 03:31:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/04/05/RUNPC-2010-04.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_9.png" width="620" height="394" />&#160; </p>  <p>&#160;</p>  <p>隔了足足一年，趁著過年，生出第五篇了 :D，再次感謝編輯賞光啦，願意刊登我寫的題材...</p>  <p>這篇 [生產者/消費者] 其實是延續上一篇 [生產線模式] 而來的，生產線模式，是利用 PIPE 的方式，把工作切成各個階段同時進行。而生產者消費者，則是去探討兩個階段之間如何做好進度的協調。這篇除了講講處理的原則之外，也實作了BlockQueue來簡化這個問題。</p>  <p>其實更漂亮的用法，是我在 MSDN Magazine 上看到的 BlockingStream, 直接把它作成 System.IO.Stream 的衍生類別。像那些包裝成 Stream 的資料處理 (像是壓縮、加密、或是 Socket 這類)，都很適合。不過一般情況下不是所有應用都能套上 Stream 的模式，因此就有了把它包裝成 Queue 的念頭，也就是這篇寫的 BlockQueue 的應用。</p>  <p>相關的東西其實過去也寫了幾篇，只不過 BLOG 寫的都比較瑣碎，都是針對特定主題較深入的討論，而投稿的文章就會比較完整的介紹原理及作法等等，細節就沒辦法兼顧了。有興趣的讀者可以參考一下我部落格的相關文章 :D&#160;&#160; 這期的範例程式可以在底下下載，相關的 LINK 也列在底下。</p>  <p>再次謝謝各位支持啦 :D</p>  <p><strong>     <br /></strong><a href="http://columns.chicken-house.net/post/MSDN-Magazine-e996b1e8ae80e5bf83e5be97-Stream-Pipeline.aspx">MSDN Magazine 閱讀心得: Stream Pipeline</a>    <br /><a href="http://columns.chicken-house.net/post/RUN!PC-e7b2bee981b8e69687e7aba0-e7949fe794a2e7b79ae6a8a1e5bc8fe79a84e5a49ae59fb7e8a18ce7b792e68789e794a8.aspx">RUN!PC 精選文章 - 生產線模式的多執行緒應用</a>    <br /><a href="http://columns.chicken-house.net/post/RUNPC-2008-11.aspx">[RUN! PC] 2008 十一月號</a> 生產線模式的多執行緒應用    <br /><a href="http://columns.chicken-house.net/post/e7949fe794a2e88085-vs-e6b688e8b2bbe88085-BlockQueue-e5afa6e4bd9c.aspx">生產者 vs 消費者 - BlockQueue 實作</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2010-04-05 03:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-05 03:31:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[run-pc-2010-%e5%9b%9b%e6%9c%88%e8%99%9f-%e7%94%9f%e7%94%a2%e8%80%85vs%e6%b6%88%e8%b2%bb%e8%80%85-%e5%9f%b7%e8%a1%8c%e7%b7%92%e7%9a%84%e4%be%9b%e9%9c%80%e5%95%8f%e9%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="runpc"><![CDATA[RUN! PC]]></category>
		<category domain="category" nicename="art"><![CDATA[作品集]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[小貝]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[s800901219@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-05-02 22:40:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-05-02 22:40:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好

請問一開始學程式設計

練習玩課本上的範例後

該怎麼不看課本自己寫出一個程式呢

是因為我還沒懂他的邏輯嘛？

現在是看得懂他的程式是要做什麼

但要自己寫出來就是寫不出來]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[descent]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[descent0@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-07 10:15:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-07 10:15:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問要怎麼投 runpc 呢？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[TxF] #2. 先作功課 - 熟悉 P/Invoke 及 Win32 檔案處理...</title>
		<link>http://columns.chicken-house.net/2010/03/23/txf-2-%e5%85%88%e4%bd%9c%e5%8a%9f%e8%aa%b2-%e7%86%9f%e6%82%89-pinvoke-%e5%8f%8a-win32-%e6%aa%94%e6%a1%88%e8%99%95%e7%90%86/</link>
		<pubDate>Tue, 23 Mar 2010 02:16:52 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/03/23/TxF-2-e58588e4bd9ce58a9fe8aab2-e7869fe68289-PInvoke-e58f8a-Win32-e6aa94e6a188e89995e79086.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>&#160;</p>  <p>其實這篇是多寫的，因為<a href="/post/TxF-1-Transactional-NTFS-e5889de9ab94e9a997.aspx" target="_blank">前一篇</a>提到的 Transactional NTFS 官方只提供 Win32 API 而已，不提供包裝好的 managed code 用的 library... 因此現階段想始用它，<a href="http://msdn.microsoft.com/en-us/library/aa446536.aspx" target="_blank">P/Invoke</a> 是逃不掉的... 這篇就先來複習一下，想要在 C# 裡呼叫 unmanaged code 該怎麼用吧。這邊的例子為了配合後面幾篇，就同樣的以檔案處理為例。</p>  <p>這篇我不想去長篇大論的討論 P/Invoke 那堆規則及語法，也不想去討論那堆 Marshal 的觀念等等... 想學好 P/Invoke 就別看我這篇了，應該去 MSDN 看... 這篇我只想交待一下該如何配合 windows api 來作檔案處理而已。因為這些是往後要用到 Transactional NTFS 必要的技巧，TxF 新的 API 都是跟 win32 標準檔案處理的 API 一一對應的，弄懂了如何用 win32 api 操作檔案，你大概就學會八成的 TxF 了... 想用 TxF ...&#160; 熟悉點 P/Invoke 是應該的...</p>  <p>&#160;</p>  <p>先從最單純的 <a href="http://msdn.microsoft.com/en-us/library/aa365239(VS.85).aspx" target="_blank">MoveFile</a> 開始吧，它沒有扯到啥 pointer 或是 handle ... 算是最單純的例子.. 先來看看這 API 原生的樣子:</p>  <p><code></code></p>  <p><code>BOOL WINAPI MoveFile( __in LPCTSTR lpExistingFileName, __in LPCTSTR lpNewFileName );</code></p>  <p>&#160;</p>  <p>&#160;</p>  <p>這 API 做啥事就不用多說了，把 lpExistingFileName 這檔案搬到 lpNewFileName 去... 搬成功還是失敗，就用 BOOL 值把結果傳回來。這時就要透過 P/Invoke 的用法，想辦法產生一個可以對應到 unmanaged code 的 C# function ... 我先把宣告方式貼出來，再來解試 code ...</p>  <div><b>P/Invoke: MoveFile</b><span class="copycode" title="copy code into clipboard.">[copy code]</span>     <div style="display: none">     <pre style="display: none" id="codeData">[DllImport(&quot;kernel32.dll&quot;)]
static extern bool MoveFile(string lpExistingFileName, string lpNewFileName);</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span>[DllImport(<span class="str">&quot;kernel32.dll&quot;</span>)]</pre>

      <pre><span class="lnum">   2:  </span><span class="kwrd">static</span> <span class="kwrd">extern</span> <span class="kwrd">bool</span> MoveFile(<span class="kwrd">string</span> lpExistingFileName, <span class="kwrd">string</span> lpNewFileName);</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>寫過 C / C++ 的人，大概對 <a href="http://msdn.microsoft.com/zh-tw/library/e59b22c5.aspx" target="_blank">extern</a> 這個 keyword 不陌生吧? extern 這修飾字代表這個 function 是外來的，C# 正好拿來用在這裡。外來的 DLL 都是 function 型態，所以一定是 static, 沒有綁著任何一個物件... 而標在上面的 Attribute: <a href="http://msdn.microsoft.com/zh-tw/library/aa984739(VS.71).aspx" target="_blank">DllImport</a>, 則是標上這個 function 是來自那個 DLL。</p>

<p>在這個例子裡，這樣就足夠了，直接在程式裡試著寫一段 C# (managed code) 來試看看結果吧:</p>

<div><b>P/Invoke Sample #1. MoveFile</b><span class="copycode" title="copy code into clipboard.">[copy code]</span> 

  <div style="display: none">
    <pre style="display: none" id="codeData">    public class PInvokeTest
    {
        [DllImport(&quot;kernel32.dll&quot;)]
        static extern bool MoveFile(string lpExistingFileName, string lpNewFileName);

        public static void Main(string[] args)
        {
            string srcFileName = @&quot;C:\file1.txt&quot;;
            string dstFileName = @&quot;C:\file2.txt&quot;;

            Console.Write(&quot;move file: from [{0}] to [{1}] ... &quot;, srcFileName, dstFileName);

            if (MoveFile(srcFileName, dstFileName) == true)
            {
                Console.WriteLine(&quot;OK!&quot;);
            }
            else
            {
                Console.WriteLine(&quot;FAIL!&quot;);
            }
        }
    }</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> PInvokeTest</pre>

      <pre><span class="lnum">   2:  </span>{</pre>

      <pre class="alt"><span class="lnum">   3:  </span>    [DllImport(<span class="str">&quot;kernel32.dll&quot;</span>)]</pre>

      <pre><span class="lnum">   4:  </span>    <span class="kwrd">static</span> <span class="kwrd">extern</span> <span class="kwrd">bool</span> MoveFile(<span class="kwrd">string</span> lpExistingFileName, <span class="kwrd">string</span> lpNewFileName);</pre>

      <pre class="alt"><span class="lnum">   5:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)</pre>

      <pre><span class="lnum">   6:  </span>    {</pre>

      <pre class="alt"><span class="lnum">   7:  </span>        <span class="kwrd">string</span> srcFileName = <span class="str">@&quot;C:\file1.txt&quot;</span>;</pre>

      <pre><span class="lnum">   8:  </span>        <span class="kwrd">string</span> dstFileName = <span class="str">@&quot;C:\file2.txt&quot;</span>;</pre>

      <pre class="alt"><span class="lnum">   9:  </span>        Console.Write(<span class="str">&quot;move file: from [{0}] to [{1}] ... &quot;</span>, srcFileName, dstFileName);</pre>

      <pre><span class="lnum">  10:  </span>        <span class="kwrd">if</span> (MoveFile(srcFileName, dstFileName) == <span class="kwrd">true</span>)</pre>

      <pre class="alt"><span class="lnum">  11:  </span>        {</pre>

      <pre><span class="lnum">  12:  </span>            Console.WriteLine(<span class="str">&quot;OK!&quot;</span>);</pre>

      <pre class="alt"><span class="lnum">  13:  </span>        }</pre>

      <pre><span class="lnum">  14:  </span>        <span class="kwrd">else</span></pre>

      <pre class="alt"><span class="lnum">  15:  </span>        {</pre>

      <pre><span class="lnum">  16:  </span>            Console.WriteLine(<span class="str">&quot;FAIL!&quot;</span>);</pre>

      <pre class="alt"><span class="lnum">  17:  </span>        }</pre>

      <pre><span class="lnum">  18:  </span>    }</pre>

      <pre class="alt"><span class="lnum">  19:  </span>}</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>程式執行前，看一下 C:\ 的 DIR *.TXT 指令執行結果:</p>

<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_6.png" width="617" height="287" /> </p>

<p>沒錯，有 c:\file1.txt 這檔案... 接著來執行範例程式:</p>

<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_7.png" width="617" height="127" /> </p>

<p>執行成功。再重新看一下 C:\ 的 DIR *.TXT 指令執行結果:</p>

<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_8.png" width="617" height="287" /> </p>

<p>看來程式很順利的呼叫了 win32 api 裡定義的 MoveFile( ... ) ... 這種範例有點不入流，要處理檔案總不可能只有這樣吧? 接著我們再來看看需要 Open File 加上讀寫檔案內容的應用。</p>

<p>Windows 是個以 HANDLE 為主的作業系統，一般在寫 C / C++ 程式，都是以指標(POINTER)的方式在處理資料，但是在 windows 裡，作業系統提供的資料用的指標，則特別以 &quot;HANDLE&quot; 來稱呼，它比一般的 POINTER 來說多了一些管理的動作。因此你開啟的檔案，或是建立的視窗，通通都以 HANDLE 來稱呼，而不是單純的用 POINTER (雖然它也是個 POINTER 啦)。接下來的例子就來看看 HANDLE 的應用。</p>

<div><span class="copycode" title="copy code into clipboard.">[copy code]</span> 

  <div style="display: none">
    <pre style="display: none" id="codeData">    public class PInvokeTest2
    {
        [DllImport(&quot;kernel32.dll&quot;, SetLastError = true, CharSet = CharSet.Auto)]
        public static extern IntPtr CreateFile(
               string lpFileName,
               uint dwDesiredAccess,
               uint dwShareMode,
               IntPtr SecurityAttributes,
               uint dwCreationDisposition,
               uint dwFlagsAndAttributes,
               IntPtr hTemplateFile
               );

        [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]
        static extern bool CloseHandle(IntPtr hObject);

        public static void Main(string[] args)
        {
            IntPtr pFile = CreateFile(
                @&quot;c:\file1.txt&quot;,
                0x80000000,
                0x00000001,
                IntPtr.Zero,
                3,
                0,
                IntPtr.Zero);

            Stream fs = new FileStream(pFile, FileAccess.Read);
            TextReader tr = new StreamReader(fs);

            Console.WriteLine(tr.ReadToEnd());

            tr.Close();
            fs.Close();
            CloseHandle(pFile);
        }
    }</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> PInvokeTest2</pre>

      <pre><span class="lnum">   2:  </span>{</pre>

      <pre class="alt"><span class="lnum">   3:  </span>    [DllImport(<span class="str">&quot;kernel32.dll&quot;</span>, SetLastError = <span class="kwrd">true</span>, CharSet = CharSet.Auto)]</pre>

      <pre><span class="lnum">   4:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">extern</span> IntPtr CreateFile(</pre>

      <pre class="alt"><span class="lnum">   5:  </span>           <span class="kwrd">string</span> lpFileName,</pre>

      <pre><span class="lnum">   6:  </span>           <span class="kwrd">uint</span> dwDesiredAccess,</pre>

      <pre class="alt"><span class="lnum">   7:  </span>           <span class="kwrd">uint</span> dwShareMode,</pre>

      <pre><span class="lnum">   8:  </span>           IntPtr SecurityAttributes,</pre>

      <pre class="alt"><span class="lnum">   9:  </span>           <span class="kwrd">uint</span> dwCreationDisposition,</pre>

      <pre><span class="lnum">  10:  </span>           <span class="kwrd">uint</span> dwFlagsAndAttributes,</pre>

      <pre class="alt"><span class="lnum">  11:  </span>           IntPtr hTemplateFile</pre>

      <pre><span class="lnum">  12:  </span>           );</pre>

      <pre class="alt"><span class="lnum">  13:  </span>    [DllImport(<span class="str">&quot;kernel32.dll&quot;</span>, SetLastError = <span class="kwrd">true</span>)]</pre>

      <pre><span class="lnum">  14:  </span>    <span class="kwrd">static</span> <span class="kwrd">extern</span> <span class="kwrd">bool</span> CloseHandle(IntPtr hObject);</pre>

      <pre class="alt"><span class="lnum">  15:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)</pre>

      <pre><span class="lnum">  16:  </span>    {</pre>

      <pre class="alt"><span class="lnum">  17:  </span>        IntPtr pFile = CreateFile(</pre>

      <pre><span class="lnum">  18:  </span>            <span class="str">@&quot;c:\file1.txt&quot;</span>,</pre>

      <pre class="alt"><span class="lnum">  19:  </span>            0x80000000,</pre>

      <pre><span class="lnum">  20:  </span>            0x00000001,</pre>

      <pre class="alt"><span class="lnum">  21:  </span>            IntPtr.Zero,</pre>

      <pre><span class="lnum">  22:  </span>            3,</pre>

      <pre class="alt"><span class="lnum">  23:  </span>            0,</pre>

      <pre><span class="lnum">  24:  </span>            IntPtr.Zero);</pre>

      <pre class="alt"><span class="lnum">  25:  </span>        Stream fs = <span class="kwrd">new</span> FileStream(pFile, FileAccess.Read);</pre>

      <pre><span class="lnum">  26:  </span>        TextReader tr = <span class="kwrd">new</span> StreamReader(fs);</pre>

      <pre class="alt"><span class="lnum">  27:  </span>        Console.WriteLine(tr.ReadToEnd());</pre>

      <pre><span class="lnum">  28:  </span>        tr.Close();</pre>

      <pre class="alt"><span class="lnum">  29:  </span>        fs.Close();</pre>

      <pre><span class="lnum">  30:  </span>        CloseHandle(pFile);</pre>

      <pre class="alt"><span class="lnum">  31:  </span>    }</pre>

      <pre><span class="lnum">  32:  </span>}</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>這個例子裡，很 &quot;神奇&quot; 的把 unmanaged code 拿到的指標 (IntPtr), 丟給 System.IO.* 底下的 FileStream 來用，竟然還能成功的開啟檔案並且把資料讀出來... 沒錯，MS寫的東西本來就都是同一家人，System.IO 那堆東西就是這樣包出來的。 這段範例程式除了看起來複雜一點之外，跟那堆要查文件才知道是啥意思的 flags 之外，其它都很簡單，不過就 Open File, 然後讀出內容，接著 Close ...</p>

<p>較特別的是，在 P/Invoke 的世界裡，都用 struct System.IntPtr 這個型別，來代表 unmanaged 世界裡常用到的 POINTER.. 藉著這個型別，我們就可以把兩個世界的橋樑給搭起來。不過當你執行這個範例時，編譯器會給你一個很礙眼的警告:</p>

<p>&#160;</p>

<blockquote>
  <p><em>'System.IO.FileStream.FileStream(System.IntPtr, System.IO.FileAccess)' is obsolete: 'This constructor has been deprecated.&#160; Please use new FileStream(SafeFileHandle handle, FileAccess access) instead.&#160; </em><a href="http://go.microsoft.com/fwlink/?linkid=14202'"><em>http://go.microsoft.com/fwlink/?linkid=14202'</em></a><em>&#160;&#160; </em></p>
</blockquote>

<p>&#160;</p>

<p>沒錯，這是老用法了，一如用指標有數不盡的缺點，新的語言都想盡辦法扔掉它 (POINTER: 我是無辜的...)，連包裝過的 IntPtr 也不例外。在 .NET Framework 2.0 裡就不再建議你用這個建構式了，請改用 SafeFileHandle .... 既然在 windows 的世界裡，一切系統的資源都是以 HANDLE 來處理，自然的在 managed code 裡也有對應的型別，它就是 <a href="http://msdn.microsoft.com/zh-tw/library/system.runtime.interopservices.safehandle(v=VS.90).aspx" target="_blank">System.Runtime.InteropServices.SafeHandle</a> 。接著再來看看改用 SafeHandle 的版本:</p>

<div><span class="copycode" title="copy code into clipboard.">[copy code]</span> 

  <div style="display: none">
    <pre style="display: none" id="codeData">    public class PInvokeTest3
    {
        [DllImport(&quot;Kernel32.dll&quot;, SetLastError = true, CharSet = CharSet.Auto)]
        static extern SafeFileHandle CreateFile(
            string fileName,
            uint fileAccess,
            uint fileShare,
            IntPtr securityAttributes,
            uint creationDisposition,
            uint flags,
            IntPtr template);

        public static void Main(string[] args)
        {
            SafeFileHandle pFile = CreateFile(
                @&quot;c:\file1.txt&quot;,
                0x80000000,
                0x00000001,
                IntPtr.Zero,
                3,
                0,
                IntPtr.Zero);

            Stream fs = new FileStream(pFile, FileAccess.Read);
            TextReader tr = new StreamReader(fs);

            Console.WriteLine(tr.ReadToEnd());

            tr.Close();
            fs.Close();

            pFile.Close();
        }

    }</pre>
  </div>

  <div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
    <div class="csharpcode">
      <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> PInvokeTest3</pre>

      <pre><span class="lnum">   2:  </span>{</pre>

      <pre class="alt"><span class="lnum">   3:  </span>    [DllImport(<span class="str">&quot;Kernel32.dll&quot;</span>, SetLastError = <span class="kwrd">true</span>, CharSet = CharSet.Auto)]</pre>

      <pre><span class="lnum">   4:  </span>    <span class="kwrd">static</span> <span class="kwrd">extern</span> SafeFileHandle CreateFile(</pre>

      <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">string</span> fileName,</pre>

      <pre><span class="lnum">   6:  </span>        <span class="kwrd">uint</span> fileAccess,</pre>

      <pre class="alt"><span class="lnum">   7:  </span>        <span class="kwrd">uint</span> fileShare,</pre>

      <pre><span class="lnum">   8:  </span>        IntPtr securityAttributes,</pre>

      <pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">uint</span> creationDisposition,</pre>

      <pre><span class="lnum">  10:  </span>        <span class="kwrd">uint</span> flags,</pre>

      <pre class="alt"><span class="lnum">  11:  </span>        IntPtr template);</pre>

      <pre><span class="lnum">  12:  </span>    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)</pre>

      <pre class="alt"><span class="lnum">  13:  </span>    {</pre>

      <pre><span class="lnum">  14:  </span>        SafeFileHandle pFile = CreateFile(</pre>

      <pre class="alt"><span class="lnum">  15:  </span>            <span class="str">@&quot;c:\file1.txt&quot;</span>,</pre>

      <pre><span class="lnum">  16:  </span>            0x80000000,</pre>

      <pre class="alt"><span class="lnum">  17:  </span>            0x00000001,</pre>

      <pre><span class="lnum">  18:  </span>            IntPtr.Zero,</pre>

      <pre class="alt"><span class="lnum">  19:  </span>            3,</pre>

      <pre><span class="lnum">  20:  </span>            0,</pre>

      <pre class="alt"><span class="lnum">  21:  </span>            IntPtr.Zero);</pre>

      <pre><span class="lnum">  22:  </span>        Stream fs = <span class="kwrd">new</span> FileStream(pFile, FileAccess.Read);</pre>

      <pre class="alt"><span class="lnum">  23:  </span>        TextReader tr = <span class="kwrd">new</span> StreamReader(fs);</pre>

      <pre><span class="lnum">  24:  </span>        Console.WriteLine(tr.ReadToEnd());</pre>

      <pre class="alt"><span class="lnum">  25:  </span>        tr.Close();</pre>

      <pre><span class="lnum">  26:  </span>        fs.Close();</pre>

      <pre class="alt"><span class="lnum">  27:  </span>        pFile.Close();</pre>

      <pre><span class="lnum">  28:  </span>    }</pre>

      <pre class="alt"><span class="lnum">  29:  </span>}</pre>
    </div>
  </div>
<!-- end of code area --></div>

<p>&#160;</p>

<p>執行的結果，當然也是順利的把文字檔內容印到 CONSOLE 裡了，我就不再多貼，直接看程式碼。</p>

<p>其實這裡有點偷吃步，用的是 SafeFileHandle, 而不是 SafeHandle。雖然兩者有繼承關係啦。不過後面我就都把它當成 SafeHandle 看待。這個版本的程式，除了把 IntPtr 換成 SafeFileHandle 之外，及最後的 CloseHandle( pFile ) 改成直接呼叫 SafeHandle.Close( ) 之外，沒有太大的不同了。有啦，把 IntPtr 跟 CloseHandle 兩者包裝在同一個 SafeHandler 裡是<a href="http://msdn.microsoft.com/zh-tw/library/fh21e17c(v=VS.90).aspx" target="_blank">安全</a>的多，至少 SafeHandle 實作了 IDispose 的介面，在適當的情況下，它至少會自動的被呼叫 Dispose( ) 回收資源... </p>

<p>&#160;</p>

<p>看到這裡，以前老搞不清楚的 FileStream 為什麼有幾個怪怪的 constructor, 自從研究了 TxF 之後，意外的晃然大悟... 算是額外的收穫吧! 原來就是要配合 P/Invoke 使用...</p>

<p>其實說穿了，呼叫 win32 api 大概就這幾招了，幾種 unmanaged code 裡用到的型別，指標都可以對應之後，程式寫起來就簡單了。這篇我特意漏掉一部份，就是各種用 uint 來當作 flags 的型別，沒有轉到對應的 enum 列舉型別，我是覺的這是 option 啦，畢竟查查文件就有，多列上來我得多打好多字... 篇幅有限 XD</p>

<p>這幾個例子如果都看懂後，那麼 TxF 就沒有障礙了! 接下來就看下回分解了 :D&#160;&#160;&#160; 下回會看到第一個 &quot;交易式&quot; 的檔案處理範例! 沒灌 windows vista / 2008 / 7 / 2008 R2 的讀者門，快去準備吧!</p>

<p>&#160;</p>

<p>參考資訊:</p>

<ol>
  <li>有用的網站: PINVOKE.NET 
    <br /><a title="http://www.pinvoke.net/index.aspx" href="http://www.pinvoke.net/index.aspx">http://www.pinvoke.net/index.aspx</a> 

    <br />

    <br />這網站幫你整理好了各種 win32 api 該如何宣告它的 C# signature, 以供 p/Invoke 使用。如果你不熟它的語法，這網站可以幫你不少忙。另外它也提供了一些方便的工具，像是 winform 的查詢工具，或是 visual studio 用的 add-ins 

    <br /></li>

  <li>MSDN 的 API 說明: MoveFile 
    <br /><a title="http://msdn.microsoft.com/en-us/library/aa365239(VS.85).aspx" href="http://msdn.microsoft.com/en-us/library/aa365239(VS.85).aspx">http://msdn.microsoft.com/en-us/library/aa365239(VS.85).aspx</a> 

    <br /></li>

  <li>什麼是 P/Invoke ? Wiki 的說明: 
    <br /><a title="http://en.wikipedia.org/wiki/Pinvoke" href="http://en.wikipedia.org/wiki/Pinvoke">http://en.wikipedia.org/wiki/Pinvoke</a> 

    <br /></li>

  <li>Safe Handle &amp; Critical Finalization
    <br />(實在是看不懂的中譯... &quot;安全控制代碼和關鍵結束&quot; ???)

    <br /><a title="http://msdn.microsoft.com/zh-tw/library/fh21e17c(v=VS.90).aspx" href="http://msdn.microsoft.com/zh-tw/library/fh21e17c(v=VS.90).aspx">http://msdn.microsoft.com/zh-tw/library/fh21e17c(v=VS.90).aspx</a>

    <br /></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2010-03-23 02:16:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-23 02:16:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[txf-2-%e5%85%88%e4%bd%9c%e5%8a%9f%e8%aa%b2-%e7%86%9f%e6%82%89-pinvoke-%e5%8f%8a-win32-%e6%aa%94%e6%a1%88%e8%99%95%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="txf"><![CDATA[Transactional NTFS]]></category>
	</item>
	<item>
		<title>[TxF] #1. 初探 Transactional NTFS</title>
		<link>http://columns.chicken-house.net/2010/03/18/txf-1-%e5%88%9d%e6%8e%a2-transactional-ntfs/</link>
		<pubDate>Wed, 17 Mar 2010 16:06:00 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/03/18/TxF-1-Transactional-NTFS-e5889de9ab94e9a997.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>其實想用 TxF (Transactional NTFS, 交易式的 NTFS) 已經很久了，不過老是被一些雜事卡著，到過年期間才有空好好研究一下。這篇主要是介紹而已，就不講太多 Code, 先以瞭解 TxF 是什麼，及如何善用它等等方面為主。詳細的用法，就等後面幾篇吧!</p>
<p>Transactional NTFS, 中文是 "交易式NTFS"，或是常見到的縮寫 "TxF&rdquo;，早期的相關文章也有人寫 "TxFS&rdquo;。這是在 Windows Vista / 2008 推出時，首次正式提供的功能。雖然它叫作 Transactional &ldquo;<strong>NTFS</strong>&rdquo;, 實際上它並不是一個新的檔案系統，而是一組新的 API (跟原有的檔案處理 API 幾乎是一對一的對應),&nbsp; 支援你用交易的方式操作檔案。一起推出的還有 Transactional Registry (TxR)，一樣是有對應的 windows API，只不過它處理的對像是 windows registry，不是檔案...。</p>
<p>用這種方式處理檔案的讀寫動作，有種很神奇的感覺，過去都只在資料庫裡有機會這樣用，現在檔案的處理也可以了。配合像是 DTC 這類交易協調器的支援，甚至可以把檔案的處理及資料庫的處理，通通都包裝成一個交易來進行，一但任何一個環節失敗，都可以回復到最初的狀態，感覺好像是在用 DB，而不是寫檔案... 目前官方並沒有推出 managed code 的含式庫，現在要用只有幾種選擇:</p>
<ol>
<li>直接用 C / C++ 呼叫 win32 api </li>
<li>用 P/Invoke，在 C# 裡呼叫 win32 api </li>
<li>找那些別人 (非官方) 包裝好的 .net class library .. </li>
</ol>
<p>這些用起來都有點不踏實，畢竟用 P/Invoke 不是長久之計，總覺的遲早會被替換掉。不過即使如此，這項還是掩蓋不了這技術的價值。我貼一段自己寫的 sample code，讓還沒用過的人體會一下，寫檔案還支援交易處理的 "爽度" ...</p>
<p>&nbsp;</p>
<div><span class="copycode" title="copy code into clipboard.">[copy code]</span>
<div style="display: none">
<pre id="codeData" style="display: none">            // 建立 KTM transaction object
            IntPtr transaction = CreateTransaction(
                IntPtr.Zero,
                IntPtr.Zero,
                0, 0, 0, 0,
                null);

            string[] files = new string[] {
                @"c:\file1.txt",
                @"c:\file2.txt",
                @"c:\file3.txt"};



            try
            {
                foreach (string file in files)
                {
                    // 使用支援交易的 delete file API
                    if (DeleteFileTransactedW(file, transaction) == false)
                    {
                        // 刪除失敗
                        throw new InvalidOperationException();
                    }
                }

                // 認可交易
                CommitTransaction(transaction);
            }
            catch (Exception ex)
            {
                // 還原交易
                RollbackTransaction(transaction);
            }
            CloseHandle(transaction);</pre>
</div>
<div style="border-bottom: 1px solid; border-left: 1px solid; border-top: 1px solid; border-right: 1px solid">
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span><span class="rem">// 建立 KTM transaction object</span></pre>
<pre><span class="lnum">   2:  </span>IntPtr transaction = CreateTransaction(</pre>
<pre class="alt"><span class="lnum">   3:  </span>    IntPtr.Zero,</pre>
<pre><span class="lnum">   4:  </span>    IntPtr.Zero,</pre>
<pre class="alt"><span class="lnum">   5:  </span>    0, 0, 0, 0,</pre>
<pre><span class="lnum">   6:  </span>    <span class="kwrd">null</span>);</pre>
<pre class="alt"><span class="lnum">   7:  </span><span class="kwrd">string</span>[] files = <span class="kwrd">new</span> <span class="kwrd">string</span>[] {</pre>
<pre><span class="lnum">   8:  </span>    <span class="str">@"c:\file1.txt"</span>,</pre>
<pre class="alt"><span class="lnum">   9:  </span>    <span class="str">@"c:\file2.txt"</span>,</pre>
<pre><span class="lnum">  10:  </span>    <span class="str">@"c:\file3.txt"</span>};</pre>
<pre class="alt"><span class="lnum">  11:  </span><span class="kwrd">try</span></pre>
<pre><span class="lnum">  12:  </span>{</pre>
<pre class="alt"><span class="lnum">  13:  </span>    <span class="kwrd">foreach</span> (<span class="kwrd">string</span> file <span class="kwrd">in</span> files)</pre>
<pre><span class="lnum">  14:  </span>    {</pre>
<pre class="alt"><span class="lnum">  15:  </span>        <span class="rem">// 使用支援交易的 delete file API</span></pre>
<pre><span class="lnum">  16:  </span>        <span class="kwrd">if</span> (DeleteFileTransactedW(file, transaction) == <span class="kwrd">false</span>)</pre>
<pre class="alt"><span class="lnum">  17:  </span>        {</pre>
<pre><span class="lnum">  18:  </span>            <span class="rem">// 刪除失敗</span></pre>
<pre class="alt"><span class="lnum">  19:  </span>            <span class="kwrd">throw</span> <span class="kwrd">new</span> InvalidOperationException();</pre>
<pre><span class="lnum">  20:  </span>        }</pre>
<pre class="alt"><span class="lnum">  21:  </span>    }</pre>
<pre><span class="lnum">  22:  </span>    <span class="rem">// 認可交易</span></pre>
<pre class="alt"><span class="lnum">  23:  </span>    CommitTransaction(transaction);</pre>
<pre><span class="lnum">  24:  </span>}</pre>
<pre class="alt"><span class="lnum">  25:  </span><span class="kwrd">catch</span> (Exception ex)</pre>
<pre><span class="lnum">  26:  </span>{</pre>
<pre class="alt"><span class="lnum">  27:  </span>    <span class="rem">// 還原交易</span></pre>
<pre><span class="lnum">  28:  </span>    RollbackTransaction(transaction);</pre>
<pre class="alt"><span class="lnum">  29:  </span>}</pre>
<pre><span class="lnum">  30:  </span>CloseHandle(transaction);</pre>
</div>
</div>
<!-- end of code area --></div>
<p>&nbsp;</p>
<p>範例裡用到的幾個 method, 像是 CreateTransaction( ), DeleteFileTransactedW( ), CommitTransaction( ), RollbackTransaction( ) ... 等等，都是透過 P/Invoke 的方式呼叫的 win32 api... 除了用的型別不如 pure .net class library 般直覺之外，這樣的 code 也已經很簡單了，短短卅行就可以搞定...</p>
<p>雖然這樣的 code 實在不大合我胃口，但是它畢竟是個堪用的方案... 對於 code 有潔癖的，可以考慮其它的用法。前面是最基本的 API call，如果你不滿意，MS自家的技術 <a href="http://en.wikipedia.org/wiki/Distributed_Transaction_Coordinator" target="_blank">DTC</a> (Distributed Transaction Coordinator) 當然也支援 TxF。DTC 可以提供額外的好處，就是允許你做分散式的交易管理。意思是你配合 DTC，就可以把 Local File I/O 跟 database access 整合在同一個交易範圍內。</p>
<p>這邊的 sample code 我就不貼了，在 managed code 裡去呼叫到 COM 的那堆介面 (啥 QueryInterface 的) 實在跟 .NET programming 的 style 有點格格不入... 在 C# 的世界裡，應該用 TransactionScope 才對。在 MS 的世界裡，TxF + TxR + DB 都可以是 TransactionScope 內的一部份。這部份的 Sample Code 我一樣先不貼了，不然貼一堆 code 又沒篇幅說明，感覺很混...</p>
<p>其實，MS 該做的都做了，唯一缺的就是它竟然沒正式的併入 .NET Framework 內的一員... 如果 TxF 真的是你想用的東西，倒是有個 OpenSource Project 可以考慮一下: AlphaFS, 它的目標是能替換掉 namespace System.IO.*, 所以很多你常用的 class library, 它都有對等一樣用法的版本，當然它提供了更多的功能及改善... 其中 TxF 的支援就在內，你想用 TxF 來開發軟體的話，這是個不錯的選擇...</p>
<p>總之，這篇只是個開始，目的是想先 "預覽" 一下 TxF 的能耐，及未來它配 DTC / TransactionScope 後，能怎麼應用它的方式，還有其它可用的相關資源。接下來我會陸續整理一些相關的研究心得.. (別太期待，大概一兩週生一篇就很偷笑了 XD)，下回見 !</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>參考資訊:</p>
<ol>
<li>AlphaFS: Brining Advanced Windows FileSystem Support to .NET <br /><a title="http://alphafs.codeplex.com/" href="http://alphafs.codeplex.com/">http://alphafs.codeplex.com/</a> </li>
<li>MSDN magazine (July 2007): Enhance Your Apps With File System Transactions <br /><a title="http://msdn.microsoft.com/en-us/magazine/cc163388.aspx" href="http://msdn.microsoft.com/en-us/magazine/cc163388.aspx">http://msdn.microsoft.com/en-us/magazine/cc163388.aspx</a> </li>
<li>B# .NET BLOG: Windows Vista - Introducing TxF In C# <br />Part 1: <a href="http://community.bartdesmet.net/blogs/bart/archive/2006/11/05/Windows-Vista-_2D00_-Introducing-TxF-in-C_2300_-_2800_part-1_2900_-_2D00_-Transacted-file-delete.aspx" target="_blank">Transacted File Delete</a> <br />Part 2: <a href="http://community.bartdesmet.net/blogs/bart/archive/2006/11/19/Windows-Vista-_2D00_-Introducing-TxF-in-C_2300_-_2800_part-2_2900_-_2D00_-Using-System.Transactions-and-the-DTC.aspx" target="_blank">Using System.Transactions and the DTC</a> <br />Part 3: <a href="http://community.bartdesmet.net/blogs/bart/archive/2007/02/21/windows-vista-introducing-txf-in-c-part-3-createfiletransacted-demo.aspx" target="_blank">CreateFileTransacted Demo</a> </li>
<li>Code Project: Windows Vista TxF / TxR <br /><a title="http://www.codeproject.com/KB/vista/KTM.aspx" href="http://www.codeproject.com/KB/vista/KTM.aspx">http://www.codeproject.com/KB/vista/KTM.aspx</a> </li>
<li>BLOG: Because we can <br /><a title="http://blogs.msdn.com/because_we_can/archive/2005/05/18/419809.aspx" href="http://blogs.msdn.com/because_we_can/archive/2005/05/18/419809.aspx">http://blogs.msdn.com/because_we_can/archive/2005/05/18/419809.aspx</a> <br />Discussion and explanation relating to the Transactional NTFS feature coming in Longhorn, plus any other interesting anecdotes... </li>
<li>Performance Consoderations for Transactional NTFS <br /><a title="http://msdn.microsoft.com/en-us/library/ee240893(VS.85).aspx" href="http://msdn.microsoft.com/en-us/library/ee240893(VS.85).aspx">http://msdn.microsoft.com/en-us/library/ee240893(VS.85).aspx</a> </li>
<li>When to Use Transactional NTFS <br /><a title="http://msdn.microsoft.com/en-us/library/aa365738(VS.85).aspx" href="http://msdn.microsoft.com/en-us/library/aa365738(VS.85).aspx">http://msdn.microsoft.com/en-us/library/aa365738(VS.85).aspx</a></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2010-03-18 00:06:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-17 16:06:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[txf-1-%e5%88%9d%e6%8e%a2-transactional-ntfs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="sql"><![CDATA[SQL]]></category>
		<category domain="category" nicename="txf"><![CDATA[Transactional NTFS]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Tips] 用 “磁碟鏡像&quot; 更換硬碟 #2, Windows 2003 的跨距磁區</title>
		<link>http://columns.chicken-house.net/2010/03/11/tips-%e7%94%a8-%e7%a3%81%e7%a2%9f%e9%8f%a1%e5%83%8f-%e6%9b%b4%e6%8f%9b%e7%a1%ac%e7%a2%9f-2-windows-2003-%e7%9a%84%e8%b7%a8%e8%b7%9d%e7%a3%81%e5%8d%80/</link>
		<pubDate>Thu, 11 Mar 2010 03:00:58 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/03/11/Tips-e794a8-e2809ce7a381e7a29fe98fa1e5838f-e69bb4e68f9be7a1ace7a29f-2-Windows-2003-e79a84e8b7a8e8b79de7a381e58d80.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>繼<a href="/post/Tips-e794a8-e2809ce7a381e7a29fe98fa1e5838f-e784a1e7979be69bb4e68f9be7a1ace7a29f.aspx">上一篇</a>，介紹了如何用windows server内建的磁碟鏡像 (Mirror) 更換硬碟後，這次剛好有windows 2003，就拿來試了一下... </p>  <p>廢話就不多說了，先來看一下 2003 的步驟，再來看看跟 2008 / 2008R2 差在那裡: </p>  <ol>   <li>原本的樣子，磁碟1 (8.00GB) 是舊的硬碟，磁碟2 (16.00GB) 是要換上來的新硬碟:      <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image001" border="0" alt="image001" src="/wp-content/be-files/image001.png" width="602" height="283" />       <br />      <br /></li>    <li>磁碟1 + 磁碟2 做成鏡像 (MIRROR):      <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image002" border="0" alt="image002" src="/wp-content/be-files/image002.png" width="532" height="403" />       <br />      <br />      <br />等待重新同步化 (Resync) 完成:       <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image003" border="0" alt="image003" src="/wp-content/be-files/image003.png" width="666" height="355" />       <br />      <br />      <br /></li>    <li>Resync 完成後，移除鏡像:      <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image004" border="0" alt="image004" src="/wp-content/be-files/image004.png" width="670" height="429" />       <br />      <br />      <br />移除鏡像完成後的狀態:       <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image005" border="0" alt="image005" src="/wp-content/be-files/image005.png" width="701" height="291" />&#160; <br />      <br /></li>    <li>用 2003 的延伸磁區，把磁碟2後面沒用到的空間也併進 D: 來      <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image006" border="0" alt="image006" src="/wp-content/be-files/image006.png" width="718" height="462" />       <br />      <br />      <br />合併之後的狀態:       <br /><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image007" border="0" alt="image007" src="/wp-content/be-files/image007.png" width="712" height="370" />&#160; <br />      <br />      <br />      <br /></li> </ol>  <p>整個步驟跟前一篇都差不多，主要都是靠鏡像(MIRROR)搬完資料後，再把新硬碟多的可用空間併進來。唯一的差別就在這裡: 2003 的 &quot;延伸磁區&quot; (英文: extend volume) 是可以把兩個硬碟，或是兩個分割區併在一起使用。在磁碟管理員還是看的到這些分割區的存在。這就有點像 <a href="http://en.wikipedia.org/wiki/Non-RAID_drive_architectures#JBOD">JBOD</a> (Just a Bunch Of Disks) 的模式。</p>  <p>不過在 2008 之後 (其實 vista 也是)，這個功能就改了。原本的名字 extend volumn 現在改成直接擴大原分割區，把原分割區後面可用的空間都納進來，就像你砍掉再重建一個大的分割區一樣，只是資料會留著不會掉。當然有 extend 也有相對的 shrink volume, 這功能會把分割區縮小，騰出空間來讓你多切一個分割區...。而原本 JBOD 模式的功能，則改為 span disk, 用起來效果就如上圖一樣，當然你願意的話，也可以把多顆硬碟 (可以不同容量) 通通併成一個來使用，最多可以併到 32 顆硬碟...。</p>  <p>沒經過這次更換硬碟，還真沒發現 2008 / vista 總算內建這組 extend / shrink volume 的功能進來。雖然很陽春，不過已經很實用了，在過去這種動作是得搬出像 partition magic 這類軟體才能做的到，而這種東西每次用起來心裡都會毛毛的，深怕一不小心就把資料都給毀了...。</p>  <p>這篇小品文章就記到這裡，希望有幫到需要的人 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2010-03-11 03:00:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-11 03:00:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips-%e7%94%a8-%e7%a3%81%e7%a2%9f%e9%8f%a1%e5%83%8f-%e6%9b%b4%e6%8f%9b%e7%a1%ac%e7%a2%9f-2-windows-2003-%e7%9a%84%e8%b7%a8%e8%b7%9d%e7%a3%81%e5%8d%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[ella]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lenientlmt@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-18 13:43:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-18 13:43:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問版主~若原來磁碟是IDE界面的，可以鏡像系統磁區到SATA硬碟嗎?會不會有無法開機的問題呢?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-19 03:26:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-19 03:26:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[鏡像是沒問題的，不過能不能開機就是個大工程了 @@

光是完全一樣型號的硬碟，要能開機就得先作些準備動作, 微軟這篇 KB 有說明步驟:

http://support.microsoft.com/kb/167045/zh-tw

IDE + SATA 我就真的沒試過了 :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[謝振裕]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eric@fanisys.com.tw]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.fanisys.com.tw/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-20 10:27:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-20 10:27:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問步驟3.Resync 完成後，移除鏡像:  , 一定要移除境像嗎.?  我很怕那棵新HD如果開機不順利, 而原始的HD又被作掉了, 那就糟了。

我這次SERVER 2003 (Raid 1), 是先把 200G 的 C糟40G , Mirror 到新HD 1.5T上 ; OK後拆掉200G,先確定 1.5T 可以正常開機,在去把硬碟後面未分割空間給做出一個新的D糟 ,關機, 在把 第2棵 1.5T 先暫時接上去 , 把200G 用 USB TO IDE的轉接線 (外接成隨身碟) , 把200G 的D糟資料都COPY到 1.5T 上面 後, 在把2棵 1.5T 做 Mirror。

PS: 另外, 請問, 有什麼軟體可以支援動態HD的 ReSize 調整磁區大小。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-09-20 16:48:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-09-20 16:48:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[耽心的話可以這樣做。

&quot;移除鏡像&quot; 是指 disk 1 + disk 2 做 mirror, 移除是只留其中一台，另一台就刪掉了。

你可以用另一個 &quot;中斷鏡像&quot;。中斷則會把 disk1 / disk2 視為兩台獨立的磁碟，也就是中斷後你從檔案總管可以看到兩台一模一樣的硬碟，彼此不會再 sync 了

動態 resize 喔? 要錢的軟體我就不熟了，沒辦法推鍵給你，請你上網 search 看看。倒是 windows 2008 / R2 / vista / win7 都有基本的支援，可以讓你調大小。不過內建的只是堪用而已，蠻兩光的，別抱太大的期待 :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[Tips] 用 “磁碟鏡像&quot; 無痛更換硬碟</title>
		<link>http://columns.chicken-house.net/2010/03/06/tips-%e7%94%a8-%e7%a3%81%e7%a2%9f%e9%8f%a1%e5%83%8f-%e7%84%a1%e7%97%9b%e6%9b%b4%e6%8f%9b%e7%a1%ac%e7%a2%9f/</link>
		<pubDate>Sat, 06 Mar 2010 02:54:22 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">/columns/post/2010/03/06/Tips-e794a8-e2809ce7a381e7a29fe98fa1e5838f-e784a1e7979be69bb4e68f9be7a1ace7a29f.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>老是寫一堆像外星文，沒人看的懂的 multi-threading 文章，偶爾也來換換口味吧。前陣子把 SERVER 的兩顆 750GB HDD (RAID1) 升級了一下，升級成兩顆 1.5TB HDD (RAID1)。更換硬碟是小事，不過這個硬碟上有些服務，如網站，資料庫，還有一些重要資料，跟分享資料夾，想一想要更換也是挺囉唆的...。</p>  <p>想了幾個辦法，不過都不符合我既懶又挑毛病的個性... 原本考慮的更換方式有:</p>  <ol>   <li>硬上... 新硬碟裝上去，檔案COPY過去，能停的服務就停掉，花一堆時間搬資料，然後再恢復原服務 (如 SQL、IIS等等)。至於比較麻煩的，像是目錄分享的，只好移掉再重建。中斷服務的時間就是從關機裝硬碟，一直到全部完成為止。     <br /></li>    <li>用 disk clone 的工具，如 true image / ghost 之類的軟體。不過這樣通常得停機做 clone, 750GB 也是要執行好一段時間，加上我這次買的是 <a href="http://www.wdc.com/wdproducts/library/WhitePapers/CHT/2579-771430.pdf" target="_blank">Advanced Format</a> 的硬碟，用這類工具會有效能的問題，事後還得校正回來… ouch, 算了...</li> </ol>  <p>想來想去，我用的是 windows server, 有內建的 Mirror set, 就拿來用一用好了。我真正作的是把 mirror set 的兩顆都升級，不過為了簡化說明，我底下的例子就只以替換一般的硬碟就好，反正道理是一樣的。</p>  <p>說穿了不值錢，就是用 mirror 的磁碟複製特性，加上 extend volume 的功能，我除了需要關機裝上新硬碟之外，其它包含資料複製的所有時間，原服務都不用中斷 (當然速度會慢一點)，所有服務的設定也都不用修改，算是既無腦又防呆的完美方案... 只要簡單的按幾下滑鼠就可以達成我的目標。</p>  <p>&#160;</p>  <p>直接來看看怎麼作的吧! 很簡單，先利用 mirror 把資料轉移到新硬碟... 然後中斷 mirror, 再用 extend volume 把磁區大小調大就可以收工了。來看分解步驟:</p>  <p>&#160;</p>  <ol>   <li>我原本的磁碟組態是長這個樣子 (圖我是事後用 VM 模擬的)，其中 Disk 1 (8.00GB) 就是我要換掉的...     <br /><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image.png" width="617" height="358" />&#160; <br />       <br />      <br /></li>    <li>關機裝上一顆新的硬碟 Disk 2 之後，變成這樣 (Disk 2 (16.00GB) 是新的硬碟):     <br /><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_1.png" width="619" height="397" />      <br />      <br />      <br /></li>    <li>把 disk1 / disk2 做成磁碟鏡像之後，就變成這樣:     <br />&#160;<img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_2.png" width="610" height="410" />      <br />      <br />      <br /></li>    <li>鏡像做好，Resync 完成後，就可以中斷鏡像了。中斷之後變成這個樣子:     <br /><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_3.png" width="596" height="389" />&#160; <br />      <br />      <br /></li>    <li>目前為止，看來磁碟轉移已經完成了，剩下就是想辦法把後面的空間吃進來。接下來的就用 Extend Volume 括大 D: 的大小:     <br /><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_4.png" width="613" height="525" />&#160; <br /><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="/wp-content/be-files/image_5.png" width="598" height="391" /> </li> </ol>  <p>&#160;</p>  <p>之後就大功告成了。這方法不但簡單，而且整個過程中，全程 D:\ 都可以正常的使用。除了 (1) --&gt; (2) 需要關機裝硬碟之外， (2) ~ (5) 全程，放在 D:\ 的 SQL DB，IIS 網站，還有 pagefile 通通都正常運作中。有了 windows server 的磁碟陣列還真是好用啊 :D</p>  <p>不過，事情也是有黑暗面的... 這個方法是有幾個小缺點啦...</p>  <ol>   <li>被迫使用 &quot;動態磁碟&quot; :     <br />dynamic disk 其實不是什麼缺點啦，不過你要是會用到其它 OS，像 linux 之類的，或是用其它的磁碟管理軟體，可能就不認得了。這是缺點之一..      <br /></li>    <li>只有 windows server 可以使用:     <br />desktop os (windows 2000 pro, xp, vista, win7) 都只支援部份的磁碟管理功能，這作法關鍵的 mirror 是不支援的... 只能乾瞪眼 @@      <br /></li>    <li>Extend Volume 只適用 windows 2008 以上的版本:     <br />記得 windows 2003 只支援到 span volume, 在 disk manager 裡還是會顯示兩個 partition, 只不過只會有一個磁碟機代號，容量會是兩個加起來的而已。一樣啦，是不會有什麼大問題，看起來不大爽而已 XD</li> </ol>  <p>偶爾換個口味，貼些小品文章，這邊我也不是很專業，有啥更好的作法也歡迎留 comment 啊 :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2010-03-06 02:54:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-06 02:54:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips-%e7%94%a8-%e7%a3%81%e7%a2%9f%e9%8f%a1%e5%83%8f-%e7%84%a1%e7%97%9b%e6%9b%b4%e6%8f%9b%e7%a1%ac%e7%a2%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[小熊子]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Michael.chien.pub@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-09 22:33:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-09 22:33:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[推！！不過、佈景可以用iphone相容的呀]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Frank Wang]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nell.frank@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-10 11:19:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-10 11:19:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Extend volume 我記得2003server就可以做到，只是要進dos視窗，執行 diskpart去手動敲指令。 ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[chicken]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-03-11 18:07:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-03-11 18:07:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[試了一下... 2003 disk part 真的有 extend volume 可以用，不過只是名字一樣而已 =_=
這指令建出來的磁區是 &quot;跨距磁區&quot; ... 跟 2008 的 spanned volume 是一樣的東西... 不是 2008 的 extend volume ..

試都試了，我整理一下再貼一篇...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Docker 初體驗 - Synology DSM 上面架設 WordPress / Redmine / Reverse Proxy</title>
		<link>http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/</link>
		<pubDate>Mon, 12 Oct 2015 18:11:12 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=339</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358907f0c81.png"><img class="size-full wp-image-416 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358907f0c81.png" alt="img_56358907f0c81" width="256" height="256" /></a>前言: 先讓我講一點前情提要 XD，想看安裝步驟的請自己跳到後面...

在買這台 NAS 之前 (Synology DS-412+), 我是自己在家裡弄了台 PC, 裝了一堆硬碟充當個人用 file server, 同時順便在裡面架了自己常用的網站，包含這部落格的前身 (BlogEngine)，還有自己用的 Visual SVN, 另外也架了 Linux VM 裝 Redmine 等等其他的東西..

後來 PC 開始不聽話了，開始三不五時當機，心一橫，兩年多前就買了台 4Bays NAS 把 Server 換掉，頓時輕鬆許多... 只是 NAS 不比 Server, 慣用 Windows Server 的我一時找不到替代品，這些服務就一個一個搬家了。其中最重要的 BLOG，就搬到 GoDaddy 的免費 web hosting (有 IIS)，繼續在上面掛著..

用過 Synology NAS 的大概都知道，它的特色就是 DSM 很好用，也有提供很多 Package, 讓 NAS 加裝軟體就像手機逛 App Store 一樣簡單... 不過，DSM 的裝機量不比手機，很多套件要是沒有經過 Synology 包裝，要安裝就是件麻煩事了。就算有 Synology 官方的打包套件，更新或是維護也不比這些軟體的官方來的快。尤其是從小到大都是抱著 Microsoft 大腿的我更是不適應 @@

直到幾個月前 Synology Release DSM 5.2, <a href="https://www.synology.com/zh-tw/dsm/app_packages/Docker">正式在裡面搭載了 Docker </a>! 這真是天大的好消息..  :D

Docker 是個好物，沒用過或沒聽過的可以參考這裡:  <a href="https://www.docker.com/whatisdocker" target="_blank">What is docker ?</a>

簡單的說，是另一種虛擬化的應用。他不像 VM 是將硬體虛擬化，所以不用在上面安裝 OS，只虛擬化執行環境... 啟動速度很快，兩三秒就可以啟動了，少掉 OS 這層，整個就很輕量化，架在 Docker 裡，跟原生地執行環境速度，CPU / RAM 資源的使用沒甚麼明顯差別...  我覺得 DSM 加入 Docker 真的是 Synology 最聰明的決定了，比 Q 牌直接導入正統的虛擬化技術還實用... 畢竟個人用的 NAS 都不會有太強大的運算資源，為了這樣去拚硬體配備就有點本末倒置了。Docker 這種輕量化的虛擬化技術，正好補足了這需求

講這麼多幹嘛? 因為 Docker 實在太熱門了，所以在 <a href="https://hub.docker.com/">Docker Hub</a> 上大概所有熱門的應用都有人包好了，煩惱的是同樣的東西太多人包了，有時還真不知該怎麼選 @@.. 我是有官方版的就盡量挑官方的來用。因為社群的差異太大了，因此從 Docker 上可以找到的選擇，遠比從 Synology Package Center 找到的又多又廣泛，我就開始一個一個替換的計畫...

計畫要安裝的有好幾個，包括 WordPress, Redmine, MYSQL, WebSVN, 還有為了方便發布這些服務，還想裝個 Reverse Proxy... 不過流水帳我就省了，這次的範例我就拿 WordPress 跟 Reverse Proxy 當案例，給有需要的人參考步驟就好。

<hr />

正文開始

這次打算把在 GoDaddy 流浪兩年多的 Blog Engine 搬回家，於是花了點時間把資料從 BlogEngine 匯出，轉到 WordPress, 這邊很多文章有教你一步一步處理，我就跳過了。

在 Docker 上安裝 WordPress + MySQL, 也是小事一件，最花時間的就是... 就是下載 image ... 這我也跳過。比較特別的是，不知是 Synology 搭配的 Docker 套件問題，還是別的的問題 @@，WordPress 官方版的 image 開 DSM Docker 管理員的 terminal 就很容易會整個 container crash .. @@，不過因禍得福，意外發現有人用 Nginx 這個新興的 web server 架設的 WP image.

<a href="http://nginx.org/en/" target="_blank">NGINX</a> 是啥? 是個俄國人寫的 web server, 世界上的佔有率大概 1x % 吧~ 它的特色就是又小又快..  Apache 走的是可以外掛很多 module 的模式，NGINX 則是走把你要的東西編譯進去的模式，跑起來又快又省記憶體，正適合我的需要。換了這個 image, 前面講的 crash 怪問題就不藥而癒.. 算是因禍得福 :D

做個筆記，我用的 image 分別是這兩個:

<a href="https://registry.hub.docker.com/u/amontaigu/wordpress/" target="_blank">wordpress image with php-fpm + nginx</a>

<a href="https://hub.docker.com/_/mysql/" target="_blank">mysql offical image</a>

架好後當然快樂的使用了。這時問題開始來了... 畢竟我用的是 NAS 內建的套件，我又不熟 Linux, 有很多東西就算我找到文章可以進去大改特改，我也不大敢動手，NAS 終究是拿來讓我日子過快樂一點的，不是要重回當黑手的日子... 因此太過古怪的技巧我就不想用了，我想盡量用正常一點的方式來設定，免得以後換個版本我就搞不定...

&nbsp;

<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png"><img class="wp-image-340 size-full aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png" alt="NETWORK" width="1459" height="628" /></a>

上圖是我現在家裡的網路架構，這時碰到的問題在於，PORT 80 早就被 NAS 內建的 apache 搶去用了。WordPress 若要用 80 PORT 就沒辦法了。DSM 也沒地方讓你把 PORT 80 放出來，二來就算放出來，我也沒辦法讓兩個以上的 container 都 mapping 到 80 PORT... 這樣要開放對外網站就顯得很棘手... 最終 WordPress 分配給他 8012 這個 port, 總不能叫所有的網友，以後要看我的文章要連這 PORT 吧? @@

一般業界最常處理這種問題的方式，就是用 <a href="https://en.wikipedia.org/wiki/Reverse_proxy">Reverse Proxy</a> 了。顧名思義，Reverse Proxy 就是反向的 Proxy, 他是替 "外面" 的 User 到你家裏面的網站抓資料後，再丟給外面的 User, 用這樣的技巧將內部的網站發布出去。其實他的機制跟一般的 Web Proxy 是一模一樣的，只不過他服務的是外面的 User 抓內部的網站，跟正常的應用情境相反，所以叫 Reverse Proxy.

Reverse Proxy 其實很多種應用，進階一點的 Load Balancer, Cache, HTTPS 發行 (在 Reverse Proxy 上加掛 SSL) 等等用途。在 Windows Server 上有 <a href="http://www.iis.net/downloads/microsoft/application-request-routing">ARR </a>(Application Request Routing) 這個 IIS 外掛可以用，也是另一種常用的 Reverse Proxy。回到我的狀況，由於唯一的 80 PORT 已經被 DSM 佔住了，所以沒得選擇，我開始尋找 DSM 內建的 Apache 上可以加掛的 proxy module... 結果得來完全不費工夫，內建就有 :D

架構跟方向都想好之後，就開始動手了... 各位現在看的到我翻新的 BLOG，可見是成功了! 以下是我的操作步驟:
<ol>
	<li>Synology DSM 的控制台，底下有 Web Station, 先用正常的介面，建立 virtual host, 綁到 columns.chicken-house.net 這個 hostname (80)
<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/01.png"><img class="size-full wp-image-341 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/01.png" alt="01" width="1025" height="320" />
</a>
當然，其他 DNS 的設定你要自己搞定。我自己家裡用的 ROUTER 有內建個小型 DNS，加個 static record 就可以把 columns.chicken-house.net 對應到 NAS 的內部 IP，我自己要看我的 BLOG 不用繞到外面出國比賽再繞回來... 外面的 DNS 也要改一改，對到 router 的對外 IP，有固定 IP 的可以設 A record, 有 DDNS 的可以用 cname record. 改完可以測看看，這時應該會看到 Synology 自己準備的 404 page:<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/02.png"><img class="size-full wp-image-345 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/02.png" alt="02" width="651" height="287" /></a></li>
	<li>接下來，就是要設定這個 virtual host 要扮演 reverse proxy, 轉向內部的 word press 網站了。其實整篇廢話這麼多，重點就這一段而已 @@用 SSH 登入 NAS，修改這個檔案: /etc/httpd/httpd-vhost.conf-user , 其中 line 15 ~ 25, 就是我加進去的指令，告訴 apache 在這個 virtual host 內，位於 / 以下的 http request, 都轉給 http://nas:8012 這個內部的 URL，也就是安裝 WordPress 的 container 的發行端點
<pre class="lang:sh decode:true">NameVirtualHost *:80
&lt;VirtualHost *:80&gt;
ServerName *
DocumentRoot /var/services/web
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;

ServerName columns.chicken-house.net
DocumentRoot "/var/services/web/columns"
ErrorDocument 403 "/webdefault/error.html"
ErrorDocument 404 "/webdefault/error.html"
ErrorDocument 500 "/webdefault/error.html"

  # start of (reverse proxy settings)
  ProxyPreserveHost On
  ProxyRequests     Off

  &lt;Location / &gt;
    ProxyPass http://nas:8012/
    ProxyPassReverse http://columns.chicken-house.net/
    Order allow,deny
    Allow from all
  &lt;/Location&gt;
  # end of (reverse proxy settings)

&lt;/VirtualHost&gt;</pre>
完成後，用這個指令 restart apache (httpd), 讓設定生效:
<pre class="lang:default decode:true">httpd -k restart</pre>
再用瀏覽器測試一下網址  http://columns.chicken-house.net, 應該就可以看到 wordpress 的內容了 !

拿手機測試一下，關掉 wifi, 用 4G 連看看我自己的網站... 果然可以用正常的 URL 看到內容:<img class="wp-image-346 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/wp_ss_20151012_0002.png" alt="wp_ss_20151012_0002" width="287" height="479" /></li>
	<li>其實到這邊就大功告成了。不過... 請務必備份這個檔案 !!  DSM 的介面設計得太簡單好用了，所以當你回到 (1) 重新調整後，或是有第二個 docker container 也要依樣畫葫蘆發布的話，DSM 會把這個設定擋蓋掉 T_T，我就是因為這樣全部重來一次...</li>
</ol>
OK，大功告成! 繞了一大圈，總算把我的 NAS 調教成可以擔負重要任務的 Personal Server 了，以前不覺得 NAS 跑的慢，現在開始覺得 RAM 好像值得加大一點了 :D，也許有人會問，這樣其實用 Synology 套件中心的 WordPress 好像也一樣不是嗎? 不不不，處女座的人是忍受不了這幾個問題的:
<ol>
	<li>套件中心的 WordPress, 網址會多一段... 像這樣...<em><span style="text-decoration: underline;">http://columns.chicken-house.net/<span style="color: #ff0000; text-decoration: underline;"><strong>wordpress</strong></span>/......</span></em>這我看了就很礙眼，更重要的是其他人透過 search engine 找到的連結，會點不進來... 身為點閱率破百萬的知名部落格 (並沒有) 怎麼能忍受這種現象...</li>
	<li>套件中心的 WordPress 只能裝 "一份"，我想架兩個 wordpress 就沒辦法分開管理了</li>
	<li>docker 將來要搬出去非常容易，匯出 container, 之後搬到別的地方，如 Azure / Amazon 都有提供 docker 執行環境了... synology 的套件就沒這優勢了...</li>
	<li>docker 的選擇多太多了，到 docker hub 裡找找，甚麼都有... 能選擇的數量遠遠高於 synology package center</li>
	<li>有統一的 container 管理工具，mount storage, port mapping, cpu / ram resource management 等等都有現成的, 套件中心提供的就沒這樣的管理彈性:
<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/03.png"><img class="alignnone size-full wp-image-349" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/03.png" alt="03" width="1178" height="734" /></a></li>
</ol>
&nbsp;

好，流水帳就記到這裡，當你還想再加上其他 container, 就依樣畫葫蘆就好。這篇其實沒甚麼重點，主要就是為了滿足 Synology NAS 用戶，能用 Docker 套件來做些正是用途的小技巧而已，歡迎分享 :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2015-10-13 02:11:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 18:11:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9aa7dc04743def7c24a61caa5de9f6eb]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f9806326bcbecd923009188dfef732b9]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[416]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>657</wp:comment_id>
			<wp:comment_author><![CDATA[HD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[q0821yeh@gamil.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-10-16 01:36:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-10-15 17:36:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[請問使用的NAS 是 snology 的 j 系列嗎？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>658</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Wu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/chicken.wu</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-10-16 01:58:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-10-15 17:58:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我用的是 Synology DS-412+, plus 系列的..
我同時有另一台 DS-215j, 不過這台 215j 就沒有 docker 可以用了..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>657</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>696</wp:comment_id>
			<wp:comment_author><![CDATA[sunny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sunnydreamspace@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-04 11:02:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-04 03:02:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好, 
请问可以详细说说关于Reverse Proxy 吗？我现在没有用Reverse Proxy . 用其它服务指向8080. 现在访问网站OK. 但是鼠标移到在页面的连接的地方. 会显示IP. 在想. 用Reverse Proxy 会不会解决这个问题?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>725</wp:comment_id>
			<wp:comment_author><![CDATA[Docker 初體驗 – Synology DSM 上面架設 WordPress / Redmine / Reverse Proxy – 安德魯的部落格 | 亞瑟的天空記事本]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://163.17.32.3/blog/?p=1575</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-05-26 11:04:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-05-26 03:04:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;]  [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>終於搞定 Ubuntu Server 15.10 @@</title>
		<link>http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/</link>
		<pubDate>Sat, 24 Oct 2015 11:27:17 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft wp-image-441 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635a1568329d.jpeg" alt="" width="225" height="225" />

原本只是想在 NAS 上簡單玩玩 Docker, 為了接下來的 ASP.NET 5 做準備.. 不過實在太好用，還沒開始做正事 (ASP.NET 5), 就先把原本的 BLOG 從 GoDaddy 的 hosting 搬回來放 NAS 了，順手也架了 reverse proxy ... 現在 NAS Docker 有正式用途了, 而 NAS 的運算能力又很有限 (我的是 DS-412+, CPU 只是 atom d2700, 雙核而已, 1GB RAM), 裝沒幾個就跑開始擔心了，於是就開始想另外搞一個可以隨便玩得 docker engine 環境..

其實 PC 上弄個 VM 是很容易啦，windows 10 內建的 hyper-v 根本就不用花甚麼功夫, 不過我想弄個像 NAS 這樣省電不大需要去管它, 24hr 開著隨時都可以用.. 就把腦筋動到古董要丟掉的筆電.. 我老姊正好有台筆電要丟掉，找我幫他先把硬碟資料清掉她才敢丟...一切都來的太巧了! 於是這台就被我拿來大整修一番...

&nbsp;

&nbsp;

&nbsp;

<strong>這台的規格是 Acer Aspire 5742Z:</strong>
<ul>
	<li>15.6" LCD (已經裂開沒辦法顯示了)</li>
	<li>320GB HDD</li>
	<li>4G RAM</li>
	<li>Intel Pentium P6200</li>
</ul>
&nbsp;

看來正和我需要 :D，螢幕我也不需要，直接拆掉可以放桌上當鍵盤，還不用擔心螢幕翻起來遮到我真正的螢幕... 用舊 NB 當 SERVER 好處還蠻多的，一來省電，二來快報廢的電池其實當成內建的 UPS 也不錯，夠撐幾分鐘關機就好了。

不過開始安裝 Ubuntu, 就是噩夢的開始... 平常我連使用 windows 都常常開 dos command prompt 下指令，命令列對我來說不是甚麼問題，不過 linux 從研究所畢業之後就很少在碰了，這次光安裝就踢到鐵板..

從一開始，抓錯 USB 開機工具，做出來的開機 USB 好像只支援 net install, 硬要我設定網路才能繼續... 無奈網路卡又抓不到, 查了一堆說明又說這步驟可以跳過, 後來才發現另一套 USB 開機工具就沒這問題..

再來，不知碰到啥問題，我抓了 12.04 LTS, 14.04 LTS, CentOS 都試過了，裝到一半跟我講 CDROM 內容不對，不過我重下載了幾次，也比對過 MD5 hash 都無誤.. 想說換 desktop 板好了，desktop 版應該會比較親民吧? 結果開到桌面就又不動了 @@

最後把 wireless lan 卡直接拔掉，換 15.10 版，終於裝起來 =_=

果然隔行如隔山，裝好後光是要設定 SSH server, 要改固定 IP, 設定 samba 開網路分享... 都花了一些時間, 這部分就還好, 只是花點時間查指令，照著打進去就搞定...

現在終於把基本環境搞定了，特此留念 :D
過程解決的問題對於熟 linux 的人來說應該都是小兒科吧? 我就不貼了，自己記載我私人的 onenote 就好.. 貼幾張照片作紀念:

&nbsp;

<img class="alignnone wp-image-377 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8271-Canon-PowerShot-S110-Medium-e1445685690586.jpg" alt="IMG_8271 (Canon PowerShot S110) (Medium)" width="768" height="1024" />

我用雙螢幕，旁邊的螢幕是轉成直的，方便看文件。因為有現成的 D-SUB，想說裝一裝就可以改用 SSH ，就懶得把他轉正了，結果搞了半天 =_=

&nbsp;

&nbsp;

&nbsp;

&nbsp;

<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg"><img class="alignnone size-full wp-image-376" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/IMG_8272-Canon-PowerShot-S110-Medium.jpg" alt="IMG_8272 (Canon PowerShot S110) (Medium)" width="1024" height="768" /></a>

這張照片可以看到，螢幕已經被我用暴力拆掉了 XD。
這次用 Microsoft 的隨身碟來裝 Linux ... 裝起來的 Linux 又要跑 Microsoft 的 ASP.NET 5 ... 你搞得我好亂啊..

&nbsp;

至於 ASP.NET 5 ... 哈哈，再過幾個禮拜再說 XD]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date><![CDATA[2015-10-24 19:27:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-24 11:27:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[442]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在 Docker 上面執行 .NET (CoreCLR) Console App</title>
		<link>http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/</link>
		<pubDate>Sat, 31 Oct 2015 15:41:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_411" align="alignleft" width="334"]<img class="wp-image-411 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5634e81ed3baf.png" alt="" width="334" height="159" /> from: blog.docker.com[/caption]

Microsoft 官方宣布能在 Linux 上面運行 .NET (v5) 應用程式.. 其實這已經不是什麼新聞了，去年 Microsoft TechEd 2014 North America 就正式的發布這個消息了，不過因為種種原因，去年看到這新聞的時候，只停留在 "看看" 的階段而已，直到現在時機成熟了才開始動手研究。一來是因為官方的開發工具 Visual Studio 2015 已經 RTM 了 (這麼大的軟體，實在不大想安裝 preview 版本).. 二來 Docker 用的很高興，NAS / Ubuntu Server 也都已經準備好，執行環境我也上手了.. 萬事俱備只欠東風，於是今天就趁周末，把 .NET Core 版的 "Hello World" 丟到 Docker 裡面執行的任務給搞定了 :D

Microsoft 自從新任 CEO Satya Nadella 上任後，宣布了一連串改變，我覺得對未來影響最大的就是 .NET Open Source + Support Linux 這件事了。我認為這決策帶來的影響，遠遠大於 ASP.NET5 本身開發技術及架構上的改變 (例如 MVC6.. 動態編譯.. Dependency Injection 等等)。因為前者影響的是整個 .NET 生態的改變，可能會影響到將來大型應用部屬的架構決策，而後者影響的只是開發團隊，完全是不同層級的問題..。如果你的職責是 system architect, 那千萬別忽略這個改變.. 以後 "混搭" 風格的架構一定會越來越盛行，不管是在 windows server 上面，或是在 Linux server 上都是。

在這兩年內，另一個很快竄起的技術: Docker, 也是另一個關鍵。Docker 這才出來兩年就紅翻天的 Container 技術，這種東西實在太對 architect 的胃口了。過去 VM 的技術沒甚麼不好，不過最大的問題就是: 充分虛擬化之後，帶來的副作用是多一堆 "虛擬" 的機器要管理... 每個 VM 裡面都要裝一套 OS，不論是 Linux or Windows，都要花力氣去維護，要執行這些 OS 也要花費運算資源... 舉個慘痛的經歷，我就碰過在同一台實體機器上，上面的 10 台 VM 都開始掃毒，那狀況真的只能用 Orz 來形容... 上面的 APP 都還沒認真在跑，系統就被 OS + AntiVirus 給拖垮了...

Docker 只虛擬化 Application 的執行環境，巧妙的避開了 VM 過度使用帶來的副作用... 舉例來說，如果你的應用規模不大，只要一台最低規格的 VM 就跑得動的話，你會為了架構考量把他分裝在三台 VM，實作三層式架構嗎? 應該沒人會這麼幹吧? 除非你要展示應用架構，或是可預見的將來會需要 scale out, 不然這樣搞只是自找麻煩而已。 但是現在用了 Docker 你就可以盡可能的採用你認為最理想的架構，分成幾個獨立的 container 可以維持架構上的正確性，同時也不必擔心架構帶來效能的折損。

因為這個原因，了解這種跨界的應用，對我來說遠比了解 ASP.NET5 本身 coding 帶來的改變還重要的多。裝了 Visual Studio 2015 之後，第一件事不是先寫看看 MVC6，而是先弄了個 Hello World, 試看看該怎樣丟到 Linux 上面跑.. 為了這件事，前置作業就花了快一個月... 有在 follow 我的 facebook 或是訂閱 blog 的就知道，之前我都在研究 Docker ，包括在 NAS 上用我理想的架構，來架設我自己的 blog.. 也<a href="http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/">弄了台差點要被扔掉的舊筆電，架了台研究用的 Ubuntu Server</a> .. 接下來主角要上場了，就是 .NET CoreCLR !

&nbsp;
<h1>進入主題: .NET Core CLR 體驗</h1>
終於進入主題了 =_= ，要是各位跟我一樣長期使用 Microsoft Solution 的話，應該會踢到很多塊鐵板吧? 分享一下我如何讓自己跨進來的步驟，既然目標都很清楚了 (以 docker 為主要的執行環境)，所以我自己計畫的步驟是:
<ol>
<ol>
	<li><strong><strong>先用最快的時間了解 Docker 是什麼? 可以怎麼應用? 如何實作?
</strong></strong>我挑了最無腦的作法，從 NAS 上的 Docker 套件.. 我自己有台 Synology DS-412+ , 正好支援 Docker, 於是我自己挑了個實作的目標，就是把我原本的 Blog 搬回家，打算用 Docker 架設 WordPress。部落格再怎麼少人看，至少也是我的門面吧 XD，因此有些事情是省不掉的。例如我上一篇文章就提到 reverse proxy 把對外的 port / url 歸位這件事，還有整個 application 的維護及備份等等，都是不能忽略的部分。如果你不拿一個實際的應用來練習，那你做的只會是 POC (Prove Of Concept) 層級的事情，很容易就淪為 "啊! 成功了，會跑了" 之後就告一段落，很多實繼運作要顧慮的部分就不見了。想參考這段過程的，可以看<a href="http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/">我這篇文章</a>。順利搬完部落格，至少讓我親身體驗 Docker 的應用方式。過去我是真的養了台 PC 架 windows server, 在裝個 VM 跑 windows server 來架站的，現在可以在 NAS 裡用同樣等級的架構作一樣的事，而運算資源只有以前的 1/4 不到 (NAS: atom 2cores, 1GB ram.. PC server Q9400 4cores, 8GB ram).. 我想優勢很明顯了.. 體驗過這一段，以後要如何把 Docker 應用在整體的系統架構內，心裡就有個譜了。</li>
	<li><strong><strong><strong>親手架設實際的運作環境
</strong></strong></strong>NAS 的 Docker 使用實在太無腦了，害我以為裝實體 server 也是滑鼠按兩下就結束，結果真的是動手就吃鱉了 @@，過程我也不多說了，<a href="http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/">上一篇文章</a>有紀載 :D自己動手架設的好處是，你會親自走過安裝過程的所有細節，將來要 upgrade 或是 change configuration 就不會不知如何下手了。做到這步我才發現，NAS 廠商其實還蠻強的 XD，我自己用指令來管理 Docker 就已經一個頭兩個大了，找了一些 Docker Web UI 來用 (docker-ui), 發現也很難用 @@，但是 Synology / Qnap 自己的 Docker 管理介面就做得不錯...實際走過這段 setup ubuntu, configuration docker environment 之後，以後實際佈署時會碰到什麼問題，一樣心裡大概就有個譜了。</li>
	<li><strong>進入主題，熟悉 .NET CoreCLR 的運用 (DNVM, DNU, DNX) 方式
</strong>這是這次的目的，我想先解決我最不熟悉的部分，往後的 Coding 我反而不擔心，好歹我有 2x 年的 coding 經驗，這應該難不倒我的... 所以我直接跳過 Coding, 拿了最基本的 Console Application, 寫了 Hello World, 以成功在 Docker 環境內執行為主要目標。這步驟搞定的話，後面的路就順了，就可以正式進入研究 ASP.NET5 的階段了這段就沒有連結可以看了 XD，對，沒錯，就是這篇文章。請繼續看下去!</li>
</ol>
</ol>
&nbsp;
<h1>.NET Core CLR 的名詞定義</h1>
開始之前，先惡補一下，這次 .NET CoreCLR 的底層改變幅度很大, 如果只打算裝起來玩一玩按一按就搞懂的話，應該沒那麼簡單。幾個一定要知道的 keyword 我先筆記一下。推薦兩篇寫得不錯的介紹:

&nbsp;

<a href="http://www.codeproject.com/Articles/1005145/DNVM-DNX-and-DNU-Understanding-the-ASP-NET-Runtime" target="_blank"><img class="alignleft" src="http://typecastexception.com/image.axd?picture=give-my-regards-to-mr-escher-240.jpg" alt="" width="200" height="160" /><strong>DNVM, DNX, and DNU - Understanding the ASP.NET 5 Runtime Options
</strong></a>Understanding the relationship between the .NET Version Manager (DNVM), the .NET Execution Environment (DNX) and .NET Development Utilities (DNU) is fundamental to developing with ASP.NET 5. In this post we will look at installing and using DNVM, DNX, and DNU on to work with ASP.NET from the command

&nbsp;

<img class="alignleft" src="http://www.dnnsoftware.com/portals/0/Images/DNN/communityDLSeal.png" alt="" width="195" height="195" />DNN: <strong><a href="http://www.dnnsoftware.com/community-blog/cid/155264/what-are-dnx-dnvm-dnu-and-other-aspnet-5-components" target="_blank">What are DNX, DNVM, DNU and other ASP.NET 5 components?
</a></strong>

In a previous post on the upcoming ASP.NET ‘vNext’ release, I covered all of the terminology around ‘Project K’ – which is what it was known as in early betas.   Things have moved along a lot since then, and with that has come a change in terminology as the release gets closer.  The trend of calling everything ‘K’ is no more – sadly in my opinion as I liked the quirkiness of it.

This post will cover the new terminology, relate it back to the Project K era terminology and relate that back to existing ASP.NET (1-4) concepts where possible.  Again, this is intended as a primer for the existing ASP.NET developer to learn what is coming next and get themselves familiar with the changes.

&nbsp;

底下就我自己整理的內容了。幾個名詞還是要先定義一下，否則看來看去腦袋會打結:

&nbsp;

<strong>Core CLR ( .NET Core  Common Language Runtime )</strong>

CLR 就是 Common Language Runtime, 套用 Java 的說法其實就是 VM，也就是能執行 .NET IL 的環境。包含 VM，JIT，還有 BCL (Base Class Library) 都算在內。而過去常講的 .NET Framework 就是所謂的 CLR，在 windows 平台上有完整的功能。Core CLR 則是重新包裝的可跨平台版本，包括 Linux / MacOS. Core CLR 有其他特性，向是 CLR 可以個別佈署，同時裡面的 BCL 都只需要佈署你用的到的部分即可。

&nbsp;

<strong>DNX ( .NET Execution Environment )</strong>

.NET 的執行環境，可以執行及啟動 .NET app / ASP.NET 的命令列指令。一樣套用 Java 的說法，就像是對應到 java.exe 的東西，
<p id="eUhpmdx"><img class="alignnone size-full wp-image-393 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc50c552f.png" alt="" /></p>
&nbsp;

<strong>DNVM ( .NET Version Manager )</strong>

.NET 的版本維護工具，類似 APT-GET 這樣的命令列指令，用來維護及更新 DNX. DNX 各種版本的維護工具就叫做 DNVM，可別看到 VM 就以為是 Virtual Machine, 他是各種 DNX 的 Version Manager.
<p id="bEtbXps"><img class="alignnone size-full wp-image-392 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc306b7c5.png" alt="" /></p>
&nbsp;

<strong>DNU ( .NET Utilities )</strong>

.NET 開發人員維護工具，有點像是 Java 的 Javac.exe, 可以進行 build, 下載或是更新相依的 NuGet 套件。
<p id="lXQnYMo"><img class="alignnone size-full wp-image-394 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634cc6325694.png" alt="" /></p>
這幾個指令的關係搞清楚之後，今天的主角終於... 終於可以上場了。

&nbsp;
<h1>將 .NET Core APP 放進 Docker 執行</h1>
<a href="https://www.docker.com/docker-toolbox"><img class="alignleft" src="https://www.docker.com/sites/default/files/products/tbox.jpg" alt="" width="195" height="152" /></a>第一步，首先你要有個 Docker 執行環境可以用.. 其實這是小事，你有 NAS 的話，規格別太差又剛好有支援 Docker 那你就賺到了，直接用就好。不然可以像我一樣自己裝一台 Linux, 或是用 VM 都可以。如果你甚麼都沒有，可以考慮看看用 Docker Toolbox (windows 版), 他包含了 windows 上的 docker client, 也包含了 VirtualBox 虛擬環境，還有一個包裝好的 Boot2Docker, 專為執行 Docker 而生的 Linux 開機 image.

我畢竟不是用 Linux 長大的那群人，對我而言能越簡單解決環境問題越好。因此我並不打算直接在 Linux 上安裝 DNX .. 我只想搞定 Docker 後，找 Microsoft 官方提供的 Container Image 來用。我用的是這個: <a href="https://hub.docker.com/r/microsoft/aspnet/">ASP.NET 5 Preview Docker Image</a> ，抓下來後就有現成的執行環境.. 其他動作通通都省了，真的是適合我用的懶人包 XD

不過看了幾篇怎麼使用這 container image 的文章 (官方: <a href="http://blogs.msdn.com/b/webdev/archive/2015/01/14/running-asp-net-5-applications-in-linux-containers-with-docker.aspx">Running ASP.NET 5 Applications in Linux Containers with Docker</a>)，發現跟我要的不大一樣。官方都是教你要寫 DockerFile, 把自己的 application 包裝成一個新的 image, 然後丟進去 docker 執行.. 這樣是沒錯啦，不過我只想把我的 app 丟進某個現成的環境來測試，還不想搞到自己包 image ..

於是，花了點時間，總算找到切入點。多虧這個念頭，讓我沒有一步一步照著官方文件來走，也意外地讓我多了解了 Docker 的運作機制。Docker 提供一個跟外界隔離的應用程式的執行環境，但是裡面能執行的不一定只有我的 application 啊，也不一定只能執行一個。我可以多執行一個 shell, 對我來說就好像開了一個 VM 然後 ssh 連進去一樣，這就是我現階段想要的，將來有正式的佈署需求再來照官方文件進行就好。

環境搞定後，確定可以正確操作 DNVM, DNU, DNX 等指令後, 就幾乎達成我的目標了。方向想通了，剩下的舊是查察指令文件，找出正確的操作步驟就可以了。我最後整理下來的執行步驟是:

在 Docker Host:
<ol>
	<li>下載官方 image
sudo docker pull microsoft/aspnet:1.0.0-beta8-coreclr</li>
	<li>啟動 container (daemon mode, 加上 -d)
sudo docker run -d --restart always microsoft/aspnet</li>
	<li>查詢 container id:
sudo docker ps -a
<p id="Gfetxye"><img class="alignnone size-full wp-image-395 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634db571dd81.png" alt="" /></p>
</li>
	<li>在 container 內執行 bash, 同時進入互動模式直到 bash 結束為止:
sudo docker exec -t -i 93462d92e941 /bin/bash
<p id="LkFAVhY"><img class="alignnone size-full wp-image-396 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dbc969491.png" alt="" />
這時 command prompt 已經變了，由原本的 chicken@localhost:~$ 變成 root@93462d92e941:/# , 代表 shell 已經啟動成功，且順利進去 conainer 內了，接下來我就可以把它當作 VM 開始大玩特玩..</p>
</li>
	<li>打開 visual studio 2015, 開 console app project, 寫一段不入流的 code, 印出 "Hello! .Net Core! " ..
<p id="rVhKkXt"><img class="alignnone size-full wp-image-398 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dcb340830.png" alt="" /></p>
</li>
	<li>完成後，想辦法把檔案丟到 container 裡面... docker 提供 cp 這個指令，可以跨過 docker host / container 的界線 copy 檔案。細節我就跳過，總之 (5) 編譯出來的檔案，我放在 container 內的 /home/ConsoleApp1/ 目錄下:
<p id="zZMjXGl"><img class="alignnone size-full wp-image-400 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dd872b08f.png" alt="" /></p>
</li>
	<li>接下來就是主要步驟了，先用 dnvm list 確認你能用的 dnx 版本，有需要可以用 dnvm install 來安裝，或是用 dnvm upgrade 來升級.. 我這次要用的是 coreclr x64 的版本:
<p id="dlCMJcI"><img class="alignnone size-full wp-image-401 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634dde846dc0.png" alt="" /></p>
</li>
	<li>進入 dnxcore50 的目錄，用 dnu restore 指令，確認所有相依的 package 都已存在 (若沒有的話會自動到 NuGet 去抓回來)
<p id="PyxPjIB"><img class="alignnone size-full wp-image-402 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634de4cad27c.png" alt="" /></p>
</li>
	<li>噹噹! 萬事俱備，最後就是執行了! 用 dnx 來跑我的 console application:
為了避免有人誤會，我是用 windows command prompt 充數，順手把 OS information 印出來以資證明..<img class="alignnone size-full wp-image-404 " src="http://columns.chicken-house.net/wp-content/uploads/2015/10/img_5634ded3b054b.png" alt="" /></li>
</ol>
&nbsp;

哇哈哈，終於成功了。看到我寫的 C# code 的控制範圍能擴大到 Ubuntu Server 上，那個成就感實在是不可言喻 :D  這次碰到最大的困難，是查到的指令都是講 ASP.NET 如何在 docker 上執行，可是我只是要 run console app 啊，沒找到文章把這整傳邏輯跟做法整理再一起，只好自己摸索...。好在當年學生時代有好好的學 unix (當年用 solaris ... 自己有用過一陣子的 linux.. ), 基本觀念跟 shell script 都還有，硬是闖出一條路。

就為了這行 "Hello .Net Core!", 花了我一個上午... 不過至少達到我的目標，把最基本的命令列執行成功了!  能夠親手在 Linux 上操作 dnvm, dnu, dnx 這幾個核心指令把程式跑起來，也算值回票價了 :D 這些步驟整理起來就當作我的筆記。應該有不少人跟我一樣，不熟 Linux 又想跨入這個領域的吧? 有需要的盡管取用，也歡迎分享這篇文章~

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 23:41:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 15:41:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[coreclr-helloworld-consoleapp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f52bc69d38f07d1f421dd1e5041b8d8a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_dffa42efd46bbab794f9a626fbc2a567]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9854d0f4f640b17db262bad3dedb7df3]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_47ae8591771b91cca6f3d1d787d95c75]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3529436dc2c37c1c9cd8bd7710a8099b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_06ad012b5df8f1a082e7f22d678f05f6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[410]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>664</wp:comment_id>
			<wp:comment_author><![CDATA[sugarwu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sugarwu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://nginx.tw</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-04 13:17:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-04 05:17:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[用了 Microsoft 十幾年 , 在去年全都都放棄了 . windows 改用 centos ,  iis 改用 nginx , .net  上的技術改用 php , java , jquery , angular  等取代 , 只因為一件事 . MS 不利於 StartUP 啊 .  .NET 可以移到 unix like 平台上真是不錯的決定 .
但我想應該回不去了.    ( sudo docker run --name msclr -d –restart always microsoft/aspnet ) 為每個 container 加上名字會比較好看 .]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>665</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Wu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/chicken.wu</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.168.100.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-06 15:39:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-06 07:39:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這倒是沒錯，我也用了 Microsoft 十幾年了，的確有越來越多的機會不得不碰 LAMP 體系的東西..
不過繼續留再 Microsoft 陣營，最主要的原因之一還是 Visual Studio + C# 啊.. 比起 Java 的語言本身都沒什麼進展，C# 語法本身好寫的多，講究語意跟架構的我還是留了下來 @@

對我來說 .NET 正式支援 Linux 是個大加分，未來 Open Source 社群買不買單，就看往後幾年的表現了..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>同場加映: 用 Synology NAS 的 Docker 環境，執行 .NET Core CLR Console App</title>
		<link>http://columns.chicken-house.net/2015/11/01/synology-nas-docker-run-net-core-clr-console-app/</link>
		<pubDate>Sun, 01 Nov 2015 04:45:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=415</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft" src="https://global.download.synology.com/download/pkg_img/Docker/1.6.2-0036/thumb_256.png" alt="Docker" width="172" height="172" />繼<a href="http://columns.chicken-house.net/2015/10/31/coreclr-helloworld-consoleapp/">上一篇</a>講完我落落長的研究過程後，這篇補上昨天想寫最後卻沒加進去的內容，就是一樣的動作改用我自己的 NAS 所提供的 Docker 環境來做 (<a href="https://www.synology.com/zh-tw/dsm/app_packages/Docker" target="_blank">官網</a>)。試過之後只有一個感想... 果然買現成的實在輕鬆太多了 XD，如果不是很在意效能，只是想有個環境驗證看看，想避開整套 Linux 從無到有的 setup 過程的人可以試看看!
廢話上一篇都講過了，直接進入主題.. 這步驟跟昨天的比起來，實在是簡單太多了，這篇改一改就變成葉佩雯了，以後寫 ASPNET5 的人應該都去買台 NAS 才對... 不知以後會不會有 Visual Studio + NAS 同捆包? XD

以下是 step by step 的步驟:
<h1>開發環境準備: Core CLR 版 "Hello World !"</h1>
<ol>
	<li>開啟 Visual Studio 2015, 新增專案。這邊要留意的是專案類型，不知 RTM 後會不會改.. 我是找 Visual C# / Web / Console Application (Package) 才找到的, Console 歸類在 Web 下是有點怪.. 這邊的專案才是支援 Core CLR 的版本。建立名稱為 "HelloCoreCLR" 的新專案
<p id="ECBuzHX"><img class="alignnone size-full wp-image-417 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563589e050a00.png" alt="" /></p>
</li>
	<li>左上角 runtime 切到 DNX Core 5.0，補上一行印出訊息的 Code，按下 Ctrl-F5 執行
<p id="nuBTAMU"><img class="alignnone size-full wp-image-418 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358bc0803ca.png" alt="" /></p>
</li>
	<li>專案的設定頁面，記得勾選 "Produce outputs on build", 才看的到編譯好的輸出檔案.. 設定完之後存檔，BUILD，到 solution / artifacts / bin / 下可以看到編譯好的檔案
<img class="alignnone size-full wp-image-419 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358c3594fc3.png" alt="" />編譯後的輸出，目錄結構跟過去不大一樣:
<img class="alignnone size-full wp-image-420 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d04538dd.png" alt="" /></li>
</ol>
&nbsp;

&nbsp;
<h1>事前準備: NAS + Docker</h1>
<ol>
	<li>NAS 安裝 Docker 套件。我只有 Synology 的，Q 牌的用戶就抱歉了~
裝這個套件:
<p id="tNcJbrT"><img class="alignnone size-full wp-image-421 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358d6119b15.png" alt="" /></p>
</li>
	<li>到 Docker / Registry 搜尋 image, keyword: microsoft/aspnet, 我是指定 tag: 1.0.0-beta8-coreclr
<img class="alignnone size-full wp-image-423 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358df03680e.png" alt="" /></li>
	<li>image大小約 350mb, 完成後 DSM 會通知，到這邊準備動作就完成了
<p id="gVepXdg"><img class="alignnone size-full wp-image-424 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358eedbc0ef.png" alt="" /></p>
</li>
</ol>
&nbsp;

&nbsp;
<h1>佈署與執行</h1>
<ol>
	<li>Launch Container, 這動作等同於 docker run 這個指令。選取剛才下載的 image, 上方的 "launch" 按下去之後就有精靈引導你設定。</li>
	<li>Step 1. Container Name: NetCoreCLR
<p id="hfoocdy"><img class="alignnone size-full wp-image-425 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56358ffb04358.png" alt="" /></p>
</li>
	<li>Step 2, 資源限制跳過
<p id="oLbOPit"><img class="alignnone size-full wp-image-426 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635903eddfbb.png" alt="" /></p>
</li>
	<li>按下 "Advanced Settings", 加掛目錄到 container 內，等等可以簡化把檔案丟進去的過程。把 NAS 的 /docker/netcore 目錄，掛載到 container 內的 /home 目錄下，取消 ReadOnly 的選項。
<p id="MxVykfA"><img class="alignnone size-full wp-image-428 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563590c6f1c1e.png" alt="" /></p>
完成後按下 Apply 完成設定
<p id="hOmIxbq"><img class="alignnone size-full wp-image-427 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635906e36809.png" alt="" /></p>
最後記得，把剛才 Visual Studio 2015 編譯出來的檔案，COPY 到 NAS 的 /docker/netcore 目錄下。</li>
	<li>完成之後，Docker Container 清單應該就會多一項 NetCoreCLR, 右邊開關打開就可以啟動這個 container 了。
<p id="CUqXMyl"><img class="alignnone size-full wp-image-429 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635921d6ac0d.png" alt="" /></p>
</li>
	<li>選取這個 container, 按上方的 "details", 可以看到這個 container 的運作情況，切到最後一個 tab, create new termainal, 進入終端機模式
<p id="MInyRIB"><img class="alignnone size-full wp-image-430 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_56359288a4dad.png" alt="" /></p>
</li>
	<li>好，到這邊之後，剩下的就跟昨天那篇講得一模一樣了，先切換工作目錄到 /home/dnxcore50:
確認一下 .NET Core 版本:
<p id="dwoEDZm"><img class="alignnone size-full wp-image-431 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635964f0eb57.png" alt="" /></p>
</li>
	<li>第一次執行，用 dnu restore 確認是否還有相依的 package 需要下載:
<p id="rXxKtdl"><img class="alignnone size-full wp-image-432 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5635968ced9be.png" alt="" /></p>
</li>
	<li>準備就緒，可以執行了! dnx HelloCoreCLR.dll
<p id="jXSYvyk"><img class="alignnone size-full wp-image-433 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563596bc4c7a3.png" alt="" /></p>
</li>
</ol>
&nbsp;

&nbsp;

果然 NAS 包裝過的 Docker 簡單好用的多，省了很多腦細胞... 最後補張圖，大家猜猜這樣的 .NET Core CLR 環境需要吃多少記憶體? 很省啦，整個 container 才 6M ..
<p id="ypXookb"><img class="alignnone size-full wp-image-434 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563597c80e76a.png" alt="" /></p>
看完別太興奮，馬上衝去買 NAS ...，如果真的是為了 Docker 想採購的話，務必先看一下支援清單.. 以 Synology 的來說，只有部分機種 (都是 intel cpu 為主) 才支援。詳細清單可以參考這裡:

&nbsp;

https://www.synology.com/zh-tw/dsm/app_packages/Docker
<h4>適用機種</h4>
<table class="catalog">
<tbody>
<tr>
<th width="70"><b>16-系列 :</b></th>
<td><b>RS2416RP+,</b> <b>RS2416+,</b> <b>RS18016xs+</b></td>
</tr>
<tr>
<th width="70"><b>15-系列 :</b></th>
<td><b>RC18015xs+,</b> <b>DS3615xs,</b> <b>DS2415+,</b> <b>DS1815+,</b> <b>DS1515+,</b> <b>RS815RP+,</b> <b>RS815+,</b> <b>DS415+</b></td>
</tr>
<tr>
<th width="70"><b>14-系列 :</b></th>
<td><b>RS3614xs+,</b> <b>RS3614xs,</b> <b>RS3614RPxs,</b> <b>RS2414RP+,</b> <b>RS2414+,</b> <b>RS814RP+,</b> <b>RS814+</b></td>
</tr>
<tr>
<th width="70"><b>13-系列 :</b></th>
<td><b>DS2413+,</b> <b>RS3413xs+,</b> <b>RS10613xs+,</b> <b>DS1813+,</b> <b>DS1513+,</b> <b>DS713+</b></td>
</tr>
<tr>
<th width="70"><b>12-系列 :</b></th>
<td><b>DS3612xs,</b> <b>RS3412xs,</b> <b>RS3412RPxs,</b> <b>RS2212RP+,</b> <b>RS2212+,</b> <b>DS1812+,</b> <b>DS1512+,</b> <b>RS812RP+,</b> <b>RS812+,</b> <b>DS412+,</b> <b>DS712+</b></td>
</tr>
<tr>
<th width="70"><b>11-系列 :</b></th>
<td><b>DS3611xs,</b> <b>DS2411+,</b> <b>RS3411xs,</b> <b>RS3411RPxs,</b> <b>RS2211RP+,</b> <b>RS2211+,</b> <b>DS1511+,</b> <b>DS411+II,</b> <b>DS411+</b></td>
</tr>
<tr>
<th width="70"><b>10-系列 :</b></th>
<td><b>DS1010+,</b> <b>RS810RP+,</b> <b>RS810+,</b> <b>DS710+</b></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date><![CDATA[2015-11-01 12:45:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-01 04:45:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[synology-nas-docker-run-net-core-clr-console-app]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f9806326bcbecd923009188dfef732b9]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%90%8c%e5%a0%b4%e5%8a%a0%e6%98%a0-%e7%94%a8-synology-nas-%e7%9a%84-docker-%e7%92%b0%e5%a2%83%ef%bc%8c%e5%9f%b7%e8%a1%8c-net-core-clr-console-app]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bde553e8c882a5e46ff94ed84b8680dc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_da2b368e0ab4ab9e0cc3a37dbe974a41]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_799f6568cfa5390c2612133c780ef483]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1a19f1b7d165ee32c93b8a0e8cad59d1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c7a5d7a8e25ddd2d3ff22edba418e666]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Case Study: BlogEngine -&gt; WordPress 大量(舊)網址轉址問題處理</title>
		<link>http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/</link>
		<pubDate>Fri, 06 Nov 2015 14:18:46 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=507</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前情提要:</h1>
起因很簡單，<a href="http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/" target="_blank">上個月</a>才把我的 BLOG 從 BlogEngine 轉移到 WordPress... 這種轉換系統一定會碰到的問題，就是新舊系統的 URL 格式一定不一樣的，不過好不容易累積起一些文章連結 (別人連到我的文章) 不處理的話，這些連結就失效了。算算文章數量，約 400 篇.. 統計一下每篇文章可能連到的格式，有 6 種，若不放掉每個連結，則有 400 x 6 = 2400 個連結要轉換..

究竟，在 Apache 做這麼多網址轉換的動作，怎樣才是最理想的方法? 這就是這篇文章想探討的... 讓我們繼續看下去 :D

&nbsp;

&nbsp;
<h1>到底有多少舊網址要轉換?</h1>
人家說做事要講究事實，開始動工前，先來了解一下到底有哪些情況需要轉址? 我之前用的 Blog 系統是 ASP.NET 寫的 BlogEngine 1.6, 算是老字號的 .NET 部落格了，先從我知道的開始:
<h2><strong>預設的格式:</strong></h2>
最基本的格式，按照日期 (年/月/日) 後面加上編碼過的文章標題。用我最常被引用的<a href="http://columns.chicken-house.net/2008/09/27/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f/">這篇</a>當例子，像這樣:

http://columns.chicken-house.net/post/2008/07/10/GoodProgrammer1.aspx  (這是第一類)

不過，不知哪個版本開始，多了 multi-tenancy 的概念，所以系統允許多個部落格同時存在，有些網址就多了這層路徑:

http://columns.chicken-house.net/columns/post/2008/07/10/GoodProgrammer1.aspx  (這是第二類)

&nbsp;
<h2><strong>從 Google Search Console:</strong></h2>
本以為這樣就結束了，順手開啟 Google Search Console 看看新上線的 WordPress 被檢索的狀態... Ouch! 狀況還真不少...
<p id="vSMDUtn"><img class="alignnone size-full wp-image-515 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563ca54e8f511.png" alt="" /></p>
Google WebMaster Tools 還真的是好工具，幫我挖出了很多想都沒想到的連結。這是列出來 Google 認為應該存在的網址，卻檢索不到的清單及統計。從統計圖看的到，10/10 換完系統之後檢索錯誤的狀況就暴增，很明顯地這些都是轉換系統後產生的問題... Google 提供下載 .CSV 清單，要確認就方便多了..

用肉眼逐條歸納，發現了好幾種我連想都沒想過的連結格式 @@，包括這種不包含日期的格式:

http://columns.chicken-house.net/post/GoodProgrammer1.aspx  (這是第三類)

http://columns.chicken-house.net/columns/post/GoodProgrammer1.aspx  (這是第四類)

&nbsp;

再挖下去，竟然還有... @@，這是直接用 post id (GUID) 當參數的格式:

http://columns.chicken-house.net/post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e (這是第五類)

http://columns.chicken-house.net/columns/post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e (這是第六類)

&nbsp;

更扯的是，最基本含日期格式的 (第一類)，竟然還找的到日期錯誤的 @@，這我就真的不知道怎麼來的了... Orz 這種無法預測的先當例外處理，晚點再說... 我算了一下，我總共有近 400 篇文章，如果不放過任何一類連結格式的話，共有這六種 URL format 得搞定:
<pre class="lang:c# decode:true">http://columns.chicken-house.net/post/GoodProgrammer1.aspx
http://columns.chicken-house.net/columns/post/GoodProgrammer1.aspx
http://columns.chicken-house.net/post/2008/07/10/GoodProgrammer1.aspx
http://columns.chicken-house.net/columns/post/2008/07/10/GoodProgrammer1.aspx
http://columns.chicken-house.net/post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e
http://columns.chicken-house.net/columns/post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e</pre>
&nbsp;

&nbsp;
<h1>開始動手，設定 Apache 啟用 Redirect 轉址</h1>
在<a href="http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/">之前的文章</a>就已經提到，我的架構是在 NAS 用 Docker 架設 WordPress, 前端用 NAS 內建的 Apache 擔任 Reverse Proxy 來負責前端。既然都有前端擋著了，轉址這件事也理所當然地讓 Apache 負責。由於實在對 Apache 不熟 @@，我就找了最簡單的方法，其他就... 勤能補拙，靠寫 code 產生正確的設定擋來搞定他，於是第一版就上線了!

<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png"><img class="alignnone size-full wp-image-340" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png" alt="NETWORK" width="1459" height="628" /></a>
圖: NAS 架設 WordPress + Reverse Proxy 架購說明

找到 apache 最簡單的轉址方式，就是寫 Redirect 指令，Apache 會用 http status code 301 來轉，於是.. 如果要搞定全部的6種格式，得寫 2400 條 rules... 這種時候就很慶幸我自己會寫 code，搬出 Visual Studio 2012, 自動替這 400 篇文章產生這樣的 redirect 指令:
<pre class="lang:apache decode:true">    Redirect 301 /post/2008/07/10/GoodProgrammer1.aspx /?p=65
    Redirect 301 /columns/post/2008/07/10/GoodProgrammer1.aspx /?p=65
    Redirect 301 /post/GoodProgrammer1.aspx /?p=65
    Redirect 301 /columns/post/GoodProgrammer1.aspx /?p=65
    Redirect 301 /post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e /?p=65
    Redirect 301 /columns/post.aspx?id=52e998ee-ee02-4a66-bb27-af3f4b16c22e /?p=65

    # 以下略過</pre>
這方法 "暫時" 解決我的燃眉之急了，的確可以把大部分的文章轉到正確的內容，不過連我自己都看不下去了，這樣做的缺點還真不少:
<ol>
	<li><strong>不好維護</strong>: 沒錯，這根本沒辦法手動調整了，要異動就得重跑一次 config generator 後再貼上... 不過，舊文章也不會變多，再怎麼樣就是那400篇，除了麻煩一點也還好</li>
	<li><strong>無法處理例外狀況</strong>: (對，就是上面提到竟然有日期錯誤的文章連結) .. 只要錯一個字就連不到了，但是若 BlogEngine 還在線上的話，是看的到文章內容的...</li>
	<li><strong>效能問題</strong>: <a href="http://columns.chicken-house.net/2008/10/01/%e8%a9%b2%e5%a6%82%e4%bd%95%e5%ad%b8%e5%a5%bd-%e5%af%ab%e7%a8%8b%e5%bc%8f-2-%e7%82%ba%e4%bb%80%e9%ba%bc-programmer-%e8%a9%b2%e5%ad%b8%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b/">我一向最講究演算法跟時間複雜度了</a> XD，這 2400 條 rules, 我試著猜想看看 apache 會怎麼執行?  一定是每個 request 進來，就逐條判斷... 若第一條就 match 那還算簡單，要是每條都不 match 不就做了 2400 次白工? 何況沒 match 的一定是大多數..</li>
</ol>
有了這些想法，才有這篇文章的後續... 因此開始想其他解決辦法了 XD

&nbsp;
<h1>改用 RewriteMap，用 RegExp 來判定格式, 解決例外狀況</h1>
Apache 有進階一點的轉址語法，是 <a href="https://httpd.apache.org/docs/2.4/rewrite/flags.html">RewriteRule</a> .. 跟上一段 Redirect 不同的是，他可以靠 RegExp 來 Match, 之後可以替換出正確的網址... 比 Redirect 有彈性的多，於是上述 1 ~ 4 類格式，我可以用一條 regular expression 來 match:

^/?(columns\/)?(post\/)?(.+\/)?(.+\/)?(.+\/)(.*)\.aspx

看不懂嗎? 對，我也看不懂... Regular Expression 號稱 <a href="https://en.wikipedia.org/wiki/Write-only_language">Write Only</a> 的語言實在不為過.. 這條正規運算式，可以檢測出上述第一 ~ 第四類的格式，還可以把編碼的標題 (slug) 給抓出來... 因此我只要寫這條 rules ，就可以取代上個例子的四條 redirect 指令:

RedirectMatch 301 ^/?(columns\/)?(post\/)?(.+\/)?(.+\/)?(.+\/)GoodProgramer1\.aspx /?p=65

不過，這樣改下來一樣有 400 條啊，三個問題裡，第一個維護問題沒解決，第二個例外處理有解決，第三個效能問題... 雖沒實測，但是我直覺告訴我，應該不會好到那裡去吧?

&nbsp;
<h1>大量使用轉址指令的效能問題探討</h1>
於是我就開始 google 大量轉址的效能問題.. 效能應該都花在大量比對 rules 上，屬於 CPU 密集的運算，這種吃 CPU 效能的運算，我在 NAS 上貧弱的 CPU 跑起來，執行時的影響更大啊... 不解決不行，查了幾篇有關這種大量 redirect 的效能問題，<a href="https://wiki.mozilla.org/Mozilla.com/2011-Rebranding-Project/Benchmarks" target="_blank">這篇</a>是我覺得最有說服力的一篇，直接貼一張圖來看就知道差別:

<img src="https://wiki.mozilla.org/images/3/33/Graph2.png" alt="Graph2.png" />

先解釋一下這張圖怎麼看。測試案例裡面，用了 benchmark 不斷的去點擊大量的網頁。被測試的 apache 設定了 1500 條轉址，而不同顏色的線則是用了不同的方法來寫這些 rules.

圖表的 Y 軸代表點擊網頁的回應時間 (越短越好)，X 軸則代表有多少比例的點擊數回應時間最大值落在哪裡..  簡單的講，曲線越低的做法越好啦!

我用的第一招，就是 Apache Redirect, 慘不忍睹... RewriteRule 基本上也屬於同一層級的，也沒好到哪裡.. 看到還有另一招 RewriteMap ! 效能出奇的好，大約只花了 1/10 的回應時間... 這是甚麼? :D

&nbsp;
<h1>改用 RewriteMap 來實作 Apache 轉址機制</h1>
終於看到一道曙光了! 研究了一下，果然這才是適合我用的好物! 先看看官方文件: <a href="https://httpd.apache.org/docs/2.4/rewrite/rewritemap.html" target="_blank">Using RewriteMap</a> !

RewriteMap 就像是 C# 裡的 Dictionary&lt;string, string&gt; 一樣，提供你一個快速有效的 Hash Table 去查表。Hash Table 的時間複雜度是 O(1), 不受你的資料筆數影響，是很理想的做法。單純的 regular expression 就是沒辦法做這點，我才需要寫 400 條 rules 啊! 找到這做法之後，改寫果然簡單多了，改寫後變這樣:

&nbsp;
<pre class="lang:c# decode:true">  RewriteEngine ON
  
  RewriteMap slugmap "txt:/volume/slugmap.txt"
  RewriteRule "^(/columns)?/post(/\d+)?(/\d+)?(/\d+)?/(.*).aspx" "?p=${slugmap:$5}" [R=301,L]
</pre>
&nbsp;

真正的 match 比對，一行就搞定了。當然，要搭配他提供另一個文字檔當作對照表，像這樣把全部 400 篇的 slug-id v.s. wp post id 對照表列出來:
<pre class="lang:c# decode:true"># blogengine post slug ==&gt; wp post id
RUNPC-2008-11 52
VCR-e5b08fe79aaee887aae5b7b1e8b2b7e5a49ae5a49a 225
e6b0b4e99bbbe5b7a5e697a5e8aa8c-5-e9858de68ea5-cable-e7b79a 142
e58d87e7b49ae5a4b1e69597-Orz 201
e6adb8e6aa94e5b7a5e585b7e69bb4e696b0-CR2-Supported 197
e6adb8e6aa94e5b7a5e585b7e69bb4e696b0---CR2-Supported 197
Community-Server 281
x86-x64-e582bbe582bbe58886e4b88de6b885e6a59a 85
e58e9fe4be86-XmlWellFormedWriter-e4b99fe69c89-Bug- 48
e5808be4babae6aa94e6a188-2b-e78988e69cace68ea7e588b6 40
video-e5b08fe79aaee887aae5b7b1e59083e69db1e8a5bf-II 244</pre>
&nbsp;

改用這個做法，原本的效能問題，就分兩個部份解決掉了。一來需不需要進行轉址，只需要進行一次 regular expression 計算就能知道。每一個 http reques 不會浪費太多時間去重複 400 次的運算。如果 match 成功需要轉址，用 hash table 查表也很快，完全不會受到 400 筆的影響..

繼續查下去，文字檔的效能還是稍差，所幸 apache 有提供工具，可以把它編譯為二進為 dbm 檔案，效能更好.. 細節我就不多說了，官方文件都有寫..

&nbsp;

&nbsp;
<h1>成效評估</h1>
<p id="KGWKaaQ"><img class="alignnone size-full wp-image-516 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563cb0e81195b.png" alt="" /></p>
其實效能到底有沒有改善很多，我是不曉得啦，但是光是衝著好維護這點就值得做了。我一樣從 google webmaster tools 抓了檢索的回應時間統計來看，我標上三個時間點，由左到右，依序是:

<strong>10/11:</strong> 將部落格從 GoDaddy Web Hosting (BlogEngine) 搬回家，用 HiNet 光世代 (PPPoE 取得的固定IP)，架在 Synology DS-412+ 上面架設的 WordPress. 這時間點之後很明顯地看到效能掉下來了，回應時間暴增，可能跟網路 &amp; NAS 的效能較差有關。

<strong>10/28:</strong> 由於一直覺得搬回來之後 BLOG 跑很慢，於是下載了 <a href="https://www.w3-edge.com/products/w3-total-cache" target="_blank">W3 Total Cache</a> 這個 WordPress 的 Cache 套件來用。啟用 Cache 之後效能就快速提升了

<strong>11/01</strong>: 進一步啟用這篇文章說明的 RewriteRules 改善及最佳化工程，回應時間繼續下降，到目前為止，已經降到跟 10/11 之前一樣的水準 :D

從結果來看，很明顯地搬回來後被 NAS 的效能給拖下來了，回應時間從原本的 1 秒左右飆到 4 秒.. Cache 啟用後看來大幅改善 NAS 效能問題，而改善 Apache Rules 寫法理論上又更進一步的改善效能.. 也讓 rules 好維護的多。更重要的是回應時間回復到之前放 GoDaddy 代管的水準... 其實能做到這樣，BLOG 搬回家其實也不錯啊... :D

這次改善計畫，唯一的缺憾就是，觀察的不夠久就開始改用 RewriteMap ，還沒有足夠的數據來看看改用 RewriteMap 實際上到底有多少改善... 我也無從判斷起11/01厚的效能改善，是 cache 還是 rewritemap... 不過這樣其實也夠了，光是能用更少的 rules, *理論上* 更好的效能，可以達到更好的舊網址相容性，降低檢索錯誤的數量，其實我也該滿足了 XD

看來這次的研究沒有白費，寫篇文章紀念一下，下個禮拜再來看看改善的狀況 :D

&nbsp;
<h1>成效評估 (2015/11/09 更新):</h1>
&nbsp;

補上 2015/11/09 從 google search console 看到的狀態，在轉移系統前 (2015/10/10 前)，Not Found 的網址穩定的維持在 25 筆，轉移後一直沒有好好的處理這個問題，直到處理完之後 (11/5) 才寫了這篇文章，將 google 回報的一千多筆 404 Not Found 網址全標記為 "已解決" 之後讓 google 重新檢索，目前只回報了仍然有 6 個網址檢索後仍是 404 ... 不過看了看網址內容，加上看了來源是哪裡來的，就決定不理她了 XD
<p id="oDMwvfg"><img class="alignnone size-full wp-image-523 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f897aa394e.png" alt="" /></p>
&nbsp;

另外，再看看透過 google 檢索我的網站的回應時間。看來經過調整改善後，回應時間的水準也穩定下來，這水準已經跟當初 Hosting 在 GoDaddy 那邊的水準不相上下了，老實說我本來預期會慢上一截的，現在有這種表現，其實還不錯啦，可以接受 :D
<p id="xktcSll"><img class="alignnone size-full wp-image-524 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_563f8aa579587.png" alt="" /></p>
&nbsp;
<h1>成效評估 (2015/11/13 更新):</h1>
Google Search Console 總算提供到 11/11 的統計資料了，離 RewriteMap 機制上線的時間 (11/06) 已經五天過去了，可以來檢視成果了 :D
<p id="DtszktM"><img class="alignnone size-full wp-image-526 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644cdd2c7b64.png" alt="" /></p>
一樣，先來看看 404 not found 的數量。跟 11/09 的統計差不多，略增加了幾筆，不過增加的就真的是應該回應 404 的錯誤連結了，看來這部分沒有問題，可以收工了。
<p id="TDtuJpu"><img class="alignnone size-full wp-image-528 " src="http://columns.chicken-house.net/wp-content/uploads/2015/11/img_5644ce9385107.png" alt="" /></p>
接下來來看看回應時間的改善。由於之前才剛啟用過 WP cache plugins, 因此大部分的效能改善是來自 cache 的關係。多了五天的 LOG，其實是可以多看出一些端倪的。上圖我標了兩個紅點，由左至右，第一個是 11/6，就是改用 RewriteMap 機制的時間點。在那之前可以看到因為 cache 帶來的效能改善已經穩定下來了，開始持平。 11/6 ~ 11/11 還有些微的改善 (平均回應時間從 1130ms 下降到 907ms)，這部分除了 RewriteMap 之外就沒有任何其他異動了。看來 2400 條 rules 改寫之後，在 NAS 這種運算能力不高的系統上，改善還算明顯，約有 15% ~ 20% 的改善，算是超出預期的收穫了

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 22:18:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 14:18:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apache-rewritemap-urlmapping-case-study]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bcf4b36a270ca05ab102b6baaa8acd49]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0946d7559ffcf95f03d718bcd3bd9884]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_02b1f456501d92fedcf5ad76b9e6af97]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_928b4642b70e77de1a486999da8f7298]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f06044b6ca4d64ccdb33d28fbeecad50]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_48d1e3c9242822b201b83b61ed01ae9d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bc58a12a1d392fc25535eb365294f74b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e0b6535e92c173e06217b1c58ac818df]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4cf5af4c45618a644333741e5fd143bb]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[521]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CaseStudy: 網站重構, NGINX (REVERSE PROXY) + 文章連結轉址 (Map)</title>
		<link>http://columns.chicken-house.net/2015/12/03/casestudy-nginx-as-reverseproxy/</link>
		<pubDate>Thu, 03 Dec 2015 17:59:06 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[網站架構調整後有感: 要學習另一個陣營的技術，還真是條不歸路，越挖越覺得要摸索的東西越多 @@

照例前面先來點碎碎念，正題後面再來。這年頭，大型的佈署是少不了 Linux + OpenSource Solution 的，再加上我吃飯的傢伙 ASP.NET 的下一版 (vNext, .NET Core) 也要正式跨各種平台了，不熟悉一下 Linux 以後怎麼會有能力把寫出來的 code 搬到 Linux 上面執行? 不過，要跨到完全另一個生態體系的環境，還真要下點決心才跨得過去... 所幸，我挑對了切入點 (把自己的 BLOG 從 BlogEngine 轉移到 WordPress, 架設在 NAS + DOCKER 環境)，這幾個月下來，也算累積了不少的心得 :D

要在 Linux 的世界裡打滾，最痛苦的就是安裝各種軟體了，只能說那真是地獄... @@，尤其是對於不熟 Linux 的人來說更是如此。現在有各種套件安裝的工具，向是 APT-GET 之類的，其實已經簡化很多了，但是難的在後頭，各種的 configuration 都要自己編 conf 檔，而每套系統用的語法都不一樣...

我不論是在 Coding 或是 System Admin 時，都很講究系統架構。因此往往預設的安裝我都不滿意，我都會想盡辦法用最基礎的模組，搭建出我認為最理想最適合的架構。很多組態都必須自己研究摸索，都需要碰到進階的安裝設定，這也是要開始認真用 Linux 的我最大的障礙... 然而我的目的不是要熟悉這些 configuration 啊，我目的是架設出期望的系統，來解決後續的問題，這些繁瑣的安裝設定機制 (除非必要，像是這篇要講的 Rewrite ) 就能省則省...

所幸 Docker 的出現，正好給了我這種人一個機會，我只要搞定最基本的 Docker 執行環境，其他安裝就簡單了，找到正確的 container image 就一切搞定。加上我用的 NAS 內建 Docker 的支援，連 Linux + Docker 架設都免了...

至於為何要這麼大費周章的熟悉 Linux ? 轉貼一則最近看到的新聞... 連 Microsoft CEO Satya Nadella 都公開表示 "Linux is Best for Cloud" 了，多年的 Microsoft 信徒軟絲當然要花時間去研究一下.. XD
<h1 class="entry-title"><img class="alignleft" src="http://technochords.com/wp-content/uploads/2015/11/Microsoft_LOVES_Linux-300x199.jpg" alt="" width="300" height="199" /><a href="http://technochords.com/microsoft-agrees-linux-is-best-for-cloud/" target="_blank">Microsoft Agrees Linux is Best for Cloud</a></h1>
Ever since the new CEO, Satya Nadella, has taken the place of the Linux-hater Steve Balmer, the change in Microsoft’s rhetoric regarding Linux has been clear.<span id="more-833"></span> Now, Microsoft is officially recommending Linux on Twitter.

<hr />

&nbsp;

好，看到分隔線，就代表正題開始! 前面幾篇有跟到的讀者們，應該都知道我之前在研究甚麼.. 為了在我能力範圍內用最快的方式搭建能夠執行 .NET Core 的 Linux 環境，我選用了<a href="http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/"> Synology NAS + Docker</a> 來踏出第一步. 為了快速熟悉各種實作技巧，我把自己的 BLOG 從原本的 BlogEngine ( ASP.NET ) 轉移到 WordPress (現在還是 PHP, 以後要變成 Node.js 了)。前兩篇說明了用 Apache 做前端的 Reverse Proxy, 同時也為了<a href="http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/">新舊系統的文章轉址，用 Apache 的 RewriteMap 解決 400 篇文章 x 6 種網址格式，多達 2400 種組合的新舊網址轉址</a>。

就當越用越熟練之際，我擔心的問題來了! NAS 再好用，他終究不是正規的 SERVER ... NAS 的硬體都不怎麼樣，我的 Synology 412+ (Atom 2701D + 2GB RAM) 很快地就碰到瓶頸了，多開兩個 container 就明顯的感覺的到回應變慢了... 於是我決定開始把我的 BLOG 系統轉移到 Ubuntu Server 上，用專屬的硬體來架設 (NB)。架設的硬體其實也很巧，是我老姊請我幫她處理掉的舊 NB。拿舊的 NB 其實很適合，一來省電，二來 Linux 省資源，跑 Windows 跑不動，換成裝 Linux 跑個人 BLOG 其實還綽綽有餘，三來 NB 內建的電池正好當成 UPS，也省了一筆開銷... 。接手的 NB 硬體只是貧弱的 Intel Pentium P6100 + 4GB RAM，不過不管在運算能力或是 RAM 都遠比我現在的 NAS 強... 於是架好<a href="http://columns.chicken-house.net/2015/10/24/%e7%b5%82%e6%96%bc%e6%90%9e%e5%ae%9a-ubuntu-server-15-10/"> Ubuntu Server + Docker 後</a>就開始動手了
<p id="eQNKzOI"><img class="alignnone size-full wp-image-544 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5660723bd1e09.png" alt="" /></p>
先來看看這次我想調整的架構圖。第一張圖是現有的架構，就是<a href="http://columns.chicken-house.net/2015/10/13/docker-%e5%88%9d%e9%ab%94%e9%a9%97-synology-dsm-%e4%b8%8a%e9%9d%a2%e6%9e%b6%e8%a8%ad-wordpress-redmine-reverse-proxy/">兩個月前剛轉移 BLOG </a>用的架構:

<a href="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png"><img class="alignnone size-full wp-image-340" src="http://columns.chicken-house.net/wp-content/uploads/2015/10/NETWORK.png" alt="NETWORK" width="1459" height="628" /></a>

第二張是我想調整的新架構，也就是這次要做的:
<p id="WWIBxPd"><img class="alignnone size-full wp-image-553 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56608a1da440e.png" alt="" /></p>
這次的調整，我決定沿用之前的架構，就是前端用 Reverse Proxy 來發布藏在後面的 WEB application, 因為後面有好幾個 Docker Container 需要同時用一個 IP + 80 port 發布，這層是跑不掉的。加上大量舊網址轉址的需求，我不想把這個複雜度加在 WordPress 上面，所以這需求就落在 Reverse Proxy 身上。原先的架構中，Reverse Proxy 是用 Apache Httpd 來負責 (因為 NAS 內建 apache httpd, 而且已經把 port 80 佔住了，沒辦法換掉)，現在自己架設 Ubuntu Server 就沒有這些限制，我當然就改用現在當紅的 NGINX 來代替。

既然都用 Docker 了，其實找到正確的套件，設定一下就搞定，單純系統安裝的部分我就跳過去了。架構上調整的兩個較大的工程我補充一下:
<ol>
	<li>前端 Reverse Proxy 的部分，改用 Nginx 。這邊面臨的是上一篇文章說明的轉址技巧，還有對照表的部分必須重新來過，改用 nginx 的 conf 重新設定一次。</li>
	<li>原本架構只用了兩個 container, 分別負責 WEB 及 DB，資料檔案是直接掛上 local server 的目錄。這次則按照 Docker 官方建議，建立了專門管理資料用的 <a href="https://docs.docker.com/engine/userguide/dockervolumes/" target="_blank">VOLUME-CONTAINER</a>。</li>
</ol>
調整後的架構跟效能，應該都會遠比原本的好。直到現在用了 Docker, 才開始對當年學 <a href="https://en.wikipedia.org/wiki/Deployment_diagram" target="_blank">UML 的 deployemnt diagram</a> 有感覺... 後來 Visual Studio Team Suite 也出現過這個功能，可以繪製 deploy diagram (強的是還能跟你實際的 code 雙向同步)。但是當年的實作上，總覺得實際要處理的問題遠比 diagram 要複雜得多，系統架設跟UML表達的架構，中間距離還很遠，往往高階架構都只在架構師腦袋裡，真正執行的工程師則被一堆設定的細節給淹沒了，直到現在有了 container 技術，才開始覺得佈署系統就真的跟 deployment diagram 上講的是同一件事，真的就是把元件拉出來，按照設計圖一個一個擺到定位，線接一接就完成了。

Volume-Container 的應用，有機會再另外寫一篇吧，先來看看 NGINX Reverse Proxy 的部分:

在<a href="http://columns.chicken-house.net/2015/11/06/apache-rewritemap-urlmapping-case-study/" target="_blank">上一篇</a>在解決新舊系統網址對應最主要的技巧，就是如何簡潔又有效率地做好 2400 條轉址的需求。主要就是用 Apache 的 RewriteMap 來兼顧 Rule 的撰寫及對照表的維護。而同樣的機制，在 nginx 上也有，不過語法不大一樣，我先貼一段 example:
<pre class="lang:default decode:true "># map blogengine with slug (encodded title) format
if ($uri ~* "^(/columns)?/post(/\d+)?(/\d+)?(/\d+)?/(.*).aspx$") {
    set $slug $5;
    return 301 /?p=$slugwpid;
}</pre>
Nginx 的 Map 簡潔到不能再簡潔了，加上他用的 C Like 設定擋語法，老是讓我有個錯覺，覺得我在寫得是 script 而不是在寫設定擋... 然而簡潔到極致的 Map 用法，我看了半天才看出他的端倪...

&nbsp;

上面這幾行，背後有條看不見的線，把 $slug 跟 $slugwpid 這兩個變數串起來... 當我把某個數值 assign 給 $slug 時，Map 的機制就會偷偷的啟動，用 $slug 的值去查表，把查到的結果放到 $slugwpid, 然後接著 run 後面的 script / config.

上面這幾行，意思就是每個 request, 會把他的 URI 部分 (不含 hostname) 抓出來，用後面的 regular express 比對，抓出第五個 match ($5) 的內容，指定到 $slug 這個變數內。接著透過 MAP 的機制，下一段指令 return 301 /?p=$slugwpid; 就是用 HTTP 301 的方式轉址，轉到 /?p=xxxx 這樣的網址。

這看不到的機制，靠的就是整個 nginx 設定擋的另一個部分定義 MAP 的效果:
<pre class="lang:default decode:true ">    map $slug $slugwpid {
        include maps/slugmap.txt;
        * 0;
    }</pre>
Map 這精巧的機制想通後就很簡單了，Map 的宣告後面直接接兩個變數，一個是原變數 ($slug), 另一個是查表後對照的結果變數 ($slugwpid)。你在任何地方把數值指定給 $slug 的話，同時間另一個變數 $slugwpid 的值就會被替換掉。

說穿了不值錢，這些可是我研究了好一陣子才搞懂的。研究的過程中我也去找了 NGINX for Win32, 這樣測是起來比較方便，有需要快速體驗或測試 nginx 的朋友可以參考。用這個來研究設定擋的寫法，可以省掉很多時間 (畢竟我還是 windows 操作比較熟悉...)

最後就是對照表的定義了。NGINX 的設定蠻有彈性的，如果你的對照表不多，可以直接寫再 CONF 裡面就好。不過我的狀況有四百多篇文章，我選擇放到外部檔案再引用。我貼片段的對照表內容出來:
<pre class="lang:default decode:true">GoodProgrammer1 65; # 2008/09/27, 該如何學好 "寫程式" ??
IBM-ThinkPad-X111- 252; # 2005/06/28, IBM ThinkPad X111 ...
e6b0b4e99bbbe5b7a5e697a5e8aa8c-1-Cable-TV-e99da2e69dbf 146; # 2007/09/12, 水電工日誌 1. Cable TV 面板
e5a682e4bd95e59ca8e59fb7e8a18ce6aa94-(NET)-e8a3a1e99984e58aa0e9a18de5a496e79a84e8b387e69699 180; # 2007/02/28, 如何在執行檔 (.NET) 裡附加額外的資料?
X31-2b-e99b99e89ea2e5b995e79a84e68c91e688b0-_ 273; # 2005/03/06, X31 + 雙螢幕的挑戰 @_@
e588a9e794a8-NUnitLite2c-e59ca8-App_Code-e4b88be5afabe596aee58583e6b8ace8a9a6 215; # 2006/10/29, 利用 NUnitLite, 在 App_Code 下寫單元測試
</pre>
格是很簡單，就是新舊對照的值，一筆一行。兩個字串用空格隔開，最後用 ; 結尾。如果有需要的話， # 之後的字串會被當成註解忽略掉，就像上面這樣。還好這格式跟之前 Apache 用的 RewriteMap TXT 格是很類似，我用文字編輯器簡單替換一下其實就搞定了

看了 NGINX 官網的說明，他的 MAP 彈性大很多，除了靜態的字串對應 ( key / value pair ) 之外，可以包含萬用字元，也可以包含 Regular Express, 也就是說他也包含某些運算能力在 Map 裡。我擔心的是這麼一來 MAP 也許就無法像 Apache 一樣，把 Map 編譯成二進位的 Hash table 格式，大量查表的效能也許會受影響... 這邊我就沒有像上次一樣查 benchmark 了，不過新環境運算能力本來就強很多了，同時 nginx 本身效能也比 apache 強的多，加上我的舊文章數量又是固定的 (400)，數量還不算太大，也不會再繼續成長下去，測試過沒有明顯的影響，我就暫時不理它了 XD

好! 寫到這邊，其實搬家動作大概就告一段落。雖然如此，也是花掉我幾個下班休息時間才搞定的... 我想應該很多人跟我一樣，想從熟 Microsoft 領域，跨越到 Linux / Open Source 的領域而不得其門而入的困境吧? 我這系列文章都會用實際的案例，說明我 "為什麼" 會這樣做，而不是只有單純的 step by step. 畢竟比我熟這些操作的人太多了，人外有人.. 這應該輪步道我來寫。而我真正想分享的，是這些架構規劃面的經驗。希望我這些實作的案例 &amp; 紀錄，可以幫到跟我一樣從 Microsoft Solution 要跨越到 Linux 這邊的人  :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date><![CDATA[2015-12-03 17:59:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-03 17:59:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casestudy-nginx-as-reverseproxy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="benet"><![CDATA[BlogEngine.NET]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1edc98c3a2df77e147ec57a69fbadd30]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[550]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[casestudy-%e6%8e%a1%e7%94%a8-nginx-%e4%bd%9c%e7%82%ba%e5%89%8d%e7%ab%af-web-reverse-proxy-%e6%96%87%e7%ab%a0%e9%80%a3%e7%b5%90%e8%bd%89%e5%9d%80]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_webdados_fb_open_graph_specific_image]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[.NET Core] Running .NET Core RC1 on Docker - DOTNET CLI</title>
		<link>http://columns.chicken-house.net/2015/12/06/net-core-running-net-core-rc1-on-docker/</link>
		<pubDate>Sun, 06 Dec 2015 06:55:38 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=560</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://columns.chicken-house.net/wp-content/uploads/2015/12/connect14-e1449308872383.jpg"><img class="wp-image-563 size-medium alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2015/12/connect14-300x170.jpg" alt="Microsoft Connect 2015" width="300" height="170" /></a>在半個月前，Microsoft Connect 2015 大會上正式宣布 .NET Core / ASP.NET 5 正式推出 RC1. RC 代表開發已經到了準備 release 的階段 (RC: release candidate), 功能都已完備 (FF: feature freeze), 品質也到一定的階段，RC 推出後若沒碰到重大問題，那接下來應該就是 RTM 了。

若你擔心 Beta 跟最終的版本落差太大，而不願意太早投入了解 .NET Core 的話，那現在是個適合的時間點了! 這次除了版本進展到 RC1 之外，Microsoft 除了在 Docker Hub 釋出了新版的 image 之外，也推出了另一個新的命令列工具集: DOTNET CLI, 同樣也提供 Docker Container 的 Image 可以使用。

原本開始研究 Docker, 目的是為了有個簡易上手的 .NET Core / ASP.NET 5 在 Linux 上面執行的環境而已，我真正的目標是了解 .NET Core 跨平台的轉移過程，以及跨平台帶來的效益 (單純的在 Linux 上執行並不是重點，而是在 Linux 上面執行後可以帶來其他的資源跟優勢，以及對企業大型佈署可以獲得的效益) ...  不過這陣子越玩越大，研究 &amp; 體驗的範圍也擴大到正式佈署上會用到的幾個重要服務 (apache, nginx, docker, mysql ... etc)，加上拿了我自己的部落格當白老鼠實際體驗，弄到現在才回到正題 =_=，正好趁那些偏離主題的研究告一段落，現在正好回頭來試試! 接著下去之前，先看看官方發布的消息:
<h1 style="padding-left: 30px;"><em><a href="http://blogs.msdn.com/b/dotnet/archive/2015/11/18/announcing-net-core-and-asp-net-5-rc.aspx" target="_blank">Announcing .NET Core and ASP.NET 5 RC1</a></em></h1>
<p style="padding-left: 30px;"><a href="http://blogs.msdn.com/b/dotnet/archive/2015/11/18/announcing-net-core-and-asp-net-5-rc.aspx" target="_blank"><img src="http://columns.chicken-house.net/wp-content/uploads/2015/12/image_3.png" alt="image_3" /></a></p>
<p style="padding-left: 30px;"><em>Today, we are announcing .NET Core and ASP.NET 5 Release Candidate, supported on Windows, OS X and Linux. This release is "Go Live", meaning you can deploy apps into production and call Microsoft Support if you need help. Please check out the<a href="http://blogs.msdn.com/b/webdev/archive/2015/11/18/announcing-asp-net-5-release-candidate-1.aspx">Announcing ASP.NET 5 RC blog post</a> to learn more about the updates to ASP.NET 5.</em></p>
&nbsp;

&nbsp;

這篇我分幾個角度來探討 .NET Core. 如果你是想看 Step by step 的教學，或是想看看新版本有甚麼功能，或是哪裡下載等等，那請直接 Google 新聞或是官網就可以了。我的重點會擺在我的研究過程發現的心得，一些官方文件上沒寫的資訊，以及我研究過程得到的結論跟想法等等。接下來這系列我會談到這幾個主題，一篇寫不完的話就請各位等待續集了~ Progrmming / Coding 相關的探討，我本來就會定期分享，因此這系列文章我會著重在跨平台以及 .NET Core 本身的改進，還有原本就用 Microsoft Solution 的企業，導入 .NET Core + Linux 後帶來的效益。主題包括:
<ol>
	<li>DOTNET CLI, 跟 BETA 時期的 DNX / DNVM / DNU 的關係</li>
	<li>DOTNET CLI 搭配 Docker 的使用技巧</li>
	<li>CODING 實際上機: Hello World (Console)</li>
	<li>(下回分曉) Inside .NET Core Runtime, Windows / Linux 的差異 #1, Compute PI (performance)</li>
	<li>(下回分曉) Inside .NET Core Runtime, Windows / Linux 的差異 #2, Memory Fragment Test (memory management)</li>
	<li>(下回分曉) (還在想...)</li>
</ol>
這次不碎碎念了，直接從第一個主題開始!

&nbsp;
<h1>新玩意: DOTNET CLI, 整合 DNVM / DNX / DNU 的命令列工具</h1>
隨著這次的 RC1 Announcing, 原本 Beta 時代的那些命令列工具, 也開始有新版本了。原本的工具分別負責 RUNTIME 的管理 (DNVM)，執行 (DNX)，維護 (DNU).. 現在被集中在同一個指令 dotnet 底下了，也就是這次新發布的 DOTNET CLI。

不過這個 CLI (Command Line Interface) 版本還很前期，看她的編號才 0.01 alpha , 離正式版本還很久，因此這次是分成兩個 container image 發行:
<ul>
	<li><a href="https://hub.docker.com/r/microsoft/aspnet/" target="_blank">microsoft/aspnet</a>: 這個 image 還是跟<a href="http://columns.chicken-house.net/?p=384" target="_blank">上次介紹文章</a>寫的一樣，用的是 DNVM / DNX / DNU 這組指令，指示相關的版本已經升級到 RC1，使用方式跟前幾篇文章介紹的都一樣，這次就略過，後面應用測試時有需要再拿他出來..</li>
	<li><a href="https://hub.docker.com/r/microsoft/dotnet/" target="_blank">microsoft/dotnet</a>: 這個則是另一個新的 image, 裡面放的就是 .NET Core 新版的命令列工具 (v0.0.1-alpha preview). 功能差不多，不過比之前有組織的多。DNVM / DNX / DNU 這些指令第一次看到還真的會搞混，從名字完全看不出是幹嘛用的，新版工具的命名就清楚的多，同時也追加了一些新功能，像是編譯成 Nativa Code 等等，這些是之前 Beta 版時期還沒有的機制</li>
</ul>
&nbsp;
<h1>DOTNET CLI Container 的使用技巧</h1>
開始介紹我的使用方式錢，先把幾個關鍵的參考資訊貼一下... 現在的參考資料還不是很多，除了官方少少的幾份資料之外，碰到問題根本還 Google 不到甚麼東西，只能自己憑經驗摸索 @@
<ol>
	<li>來自 Microsoft GitHub 的 Readme:
<a href="https://github.com/dotnet/dotnet-docker" target="_blank">.NET CLI Preview Docker Image</a></li>
	<li>來自 Microsoft GitHub 的 Quick-Start 說明:
<a href="https://dotnet.github.io/getting-started/" target="_blank">It is very easy to get started with .NET Core on your platform of choice.</a></li>
</ol>
其他我參考過的相關資料還有這幾篇:
<ol>
	<li><a href="http://www.hanselman.com/blog/ASPNET5AndNETCoreRC1InContextPlusAllTheConnect2015News.aspx" target="_blank">ASP.NET 5 and .NET Core RC1 in context (Plus all the Connect 2015 News)</a></li>
	<li><a href="http://blogs.msdn.com/b/dotnet/archive/2015/11/18/announcing-net-core-and-asp-net-5-rc.aspx" target="_blank">.NET Blog / Announcing .NET Core and ASP.NET 5 RC</a></li>
	<li><a href="http://blogs.msdn.com/b/webdev/archive/2015/11/18/announcing-asp-net-5-release-candidate-1.aspx" target="_blank">.NET Web Dev and Tools Blog / Announcing ASP.NET 5 Release Candidate 1</a></li>
	<li><a href="http://weblogs.asp.net/scottgu/" target="_blank">ScottGu's Blog</a> / <a href="http://weblogs.asp.net/scottgu/introducing-asp-net-5" target="_blank">Introducing ASP.NET 5</a></li>
	<li><a href="http://www.hanselman.com/blog/" target="_blank">Scott Hanselman</a> / <a href="http://www.hanselman.com/blog/VisualStudio2015ReleasedPlusASPNET5Roadmap.aspx" target="_blank">Visual Studio 2015 Released plus ASP.NET 5 Roadmap</a></li>
</ol>
OK, 參考資訊交代完，來看 Hands-On Lab 吧. 在過去幾篇文章哩，我都只把 Container 當成像 VM 一樣使用，把 SERVER 裝在裡面開起來用。然而 Container 實際上可以不用像 VM 隔離的這麼遠，他是能退化成單一應用程式來使用的.. DOTNET CLI 在 GitHub 的 README 也教你這樣用:
<h2 style="padding-left: 30px;"><em><a href="https://github.com/dotnet/dotnet-docker" target="_blank">Compile your app inside the Docker container</a></em></h2>
<p style="padding-left: 30px;"><em>There may be occasions where it is not appropriate to run your app inside a container. To compile, but not run your app inside the Docker instance, you can write something like:</em></p>

<div class="highlight highlight-text-shell-session" style="padding-left: 30px;">
<pre class="whitespace-before:1 whitespace-after:1 lang:default decode:true">$ docker run --rm -v "$PWD":/myapp -w /myapp microsoft/dotnet:0.0.1-alpha dotnet compile

</pre>
<em>This will add your current directory as a volume to the container, set the working directory to the volume, and run the command <code>dotnet compile</code> which will tell dotnet to compile the project in the working directory.</em>

</div>
其實關鍵就在中間 Docker 用的指令: "--rm" 會在這個 Container 執行完畢之後立即刪除它的狀態，等於你這個 Container 變成可拋棄式的 Container 了，以這個範例來說，用 Docker Run 啟動 Container, 透過 -v 掛載目錄，用 Container 內的編譯工具編譯你的 APP，結束之後就直接把這個 Container 狀態給刪掉，就跟 docker rm 一樣的作用..

這招挺好用的，不過我在開發測試階段，要不斷的執行，老是進進出出 Container 也是不方便，因此我用的指令稍微修改一下，啟動的不是編譯器，而是啟動 shell, 結束這個 shell 之後才是刪除整個 Container.

以下來看看我的步驟，我打算從無到有，寫一段 Hello World 的 C#, 並且執行它，在畫面上印出 "Hello World!"，過程中要經過 create project (init), download dependency packages (restore), build (compile) 以及 launch (run) 幾個步驟.. 直接來看做法:

首先，先準備好 Docker 環境，取得 Microsoft 釋出的 .NET Core CLI image:
<pre class="whitespace-before:1 whitespace-after:1 lang:zsh mark:1 decode:true">chicken@localhost:~$ sudo docker pull microsoft/dotnet

</pre>
<p id="viJMctz"><img class="alignnone size-full wp-image-576 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc4cc3f35.png" alt="" /></p>
完成後，用下列指令啟動 Container 內的 shell, 並且進入這個 shell:
<pre class="whitespace-before:1 whitespace-after:1 lang:zsh decode:true">chicken@localhost:~$ sudo docker run --name dotnet --rm -t -i microsoft/dotnet /bin/bash
root@6b021f6be610:/#

</pre>
第一行的 prompt 提示訊息還是 Linux Host OS, 執行成功之後，第二行的 prompt 就換成 Container 內的 shell ，代表執行成功!

如果你有現成的 code 想丟進去 Container 編輯使用，可以用 -v 加掛 volume 進去，不過我這邊的範例還不需要，我就略過了。接下來就進入這套新的 CLI: dotnet. 先來看看 dotnet cli 到底支援幾種命令?
<pre class="whitespace-before:1 whitespace-after:1 lang:default decode:true">root@6b021f6be610:/# dotnet -h

</pre>
<p id="KFPCFrq"><img class="alignnone size-full wp-image-577 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dc8742088.png" alt="" /></p>
就 compile | publish | run 三個，不過查了 Microsoft 的官方文件及範例，才發現原來還有好幾個指令列出來 @@, 第一個就是 dotnet init, 它可以幫你 init project, 有點類似 Visual Studio 在你 Create New Project 的時候做的事情一樣，指不過這個比較陽春。直接來試試:
<pre class="lang:default decode:true">root@6b021f6be610:/tmp/HelloWorld# dotnet init

</pre>
<p id="adopIhP"><img class="alignnone size-full wp-image-578 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dcdf06f93.png" alt="" /></p>
<p id="mrSUSxh"><img class="alignnone size-full wp-image-579 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd38b9c82.png" alt="" /></p>
執行過 dotnet init 後，就會在目前目錄下建立 Program.cs 及 project.json 兩個檔案。預設的內容我就直接列給大家看了。若你另外有搭配開發工具，例如 visual studio 2015 等等，其實這個步驟就可以省掉了，整個資料夾直接搬過來就好。

這次我 create project 後，先不改任何 code, 直接進行下一步。下一步是把這個 project 所有需要的相關套件，從 NuGet 下載下來，作用就跟之前的 DNU restore 一樣，只是現在改了個名字重新包裝，變成 dotnet restore。第一次執行可能會下載一堆 depency packages, 放著讓他跑完就 OK 了:
<pre class="whitespace-before:1 whitespace-after:1 lang:default decode:true">root@6b021f6be610:/tmp/HelloWorld# dotnet restore

</pre>
<p id="cSwgmjz"><img class="alignnone size-full wp-image-580 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd60820d4.png" alt="" /></p>
中間還一堆... 我就不貼了，直接跳到最後面:
<p id="aookgrG"><img class="alignnone size-full wp-image-581 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663dd8af0c94.png" alt="" /></p>
沒想到一個 Hello World 就這麼多相依的套件要處理... 完成後就可以進行下一步，編譯你的程式! 我特地把 --help 顯示出來，其實看的到這個版本開始支援 compiles source to native machine code 了。看看後面的文章有沒有機會寫到這部分 :D
<pre class="whitespace-before:1 whitespace-after:1 lang:default decode:true">root@6b021f6be610:/tmp/HelloWorld# dotnet compile -h

</pre>
<p id="uWEvWBk"><img class="alignnone size-full wp-image-582 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663ddd168151.png" alt="" /></p>
直接開始編譯，碰上兩個警告訊息，應該是相依的 assemblies 版本衝突，這問題暫時略過，下次再回頭探討:
<pre class="lang:default decode:true">root@6b021f6be610:/tmp/HelloWorld# dotnet compile

</pre>
<p id="oXFWcZN"><img class="alignnone size-full wp-image-583 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de26333f3.png" alt="" /></p>
編譯完成之後不執行它的話，不然要幹嘛? 接下來可以用 dotnet run 來啟動:
<pre class="whitespace-before:1 whitespace-after:1 lang:default mark:5 decode:true ">root@6b021f6be610:/tmp/HelloWorld# dotnet run

</pre>
<p id="FbrxUlB"><img class="alignnone size-full wp-image-584 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5663de78d60d9.png" alt="" /></p>
走到這邊，總算大功告成! 各位的 .net code 若想 porting 到 linux 上面，就這麼簡單.. 當然這邊指的是操作程序的部分而已，我想 porting 最大的門檻應該是在那些只有 windows 版的 .net framework 才支援的 BCL (basic class library) 以及尚未支援 .net core 而無法在 linux 上執行的 3rd party 套件吧，那部分的 code 改寫才是最痛苦的.. 這種問題好像隔幾年就會來一次，當年轉移到 win32 api, 轉移到 x64, COM 轉移到 .NET, ... etc..

其實我在嘗試的過程中，也碰到不少其他困難，懊惱的是 google 也還查不到太多前輩的經驗可供參考... 我覺得主要問題應該是 beta / rc 之間的差異造成的.. 我原本在 windows 10 上面用 visual studio 2015 (asp.net 5 beta 8) 開出來的 .net core project, 直接搬過來 microsoft/dotnet 這個 container 執行時卻困難重重，包含 runtime 不支援 (預設跑到 .net frmework 4.6.1)，相關的 assemblies 找不到，或是 nuget 無法找到正確版本等等，甚至也有編譯等等都成功，執行也成功，但是 console output 卻沒有顯示出來等等怪異問題。

這些問題的排除，等我先把我的環境全面升級到 RC1 之後再來驗證一次，我相信現在開始接觸 .net core 的朋友們應該也會碰到類似問題吧，我的經驗給大家參考~

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date><![CDATA[2015-12-06 06:55:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-06 06:55:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[net-core-running-net-core-rc1-on-docker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[563]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0c2f8552a212bcc9255f7ae0a1fa1563]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a48c6c5ded4e5fdcd28b900465fa029e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_webdados_fb_open_graph_specific_image]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://columns.chicken-house.net/wp-content/uploads/2015/12/image_3.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET Core 跨平台 #1, 我真的需要在 Linux 上跑 .NET 嗎?</title>
		<link>http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/</link>
		<pubDate>Sat, 26 Dec 2015 14:42:42 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=608</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="padding-left: 30px;"></p>
<img class="wp-image-616 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567e9b3cb3f8f.png" alt="" width="335" height="294" />

最近這幾篇 .NET Core / Docker 相關的文章貼出來之後，最常聽到有人問我的問題就是:

<span style="color: #339966;"><em>"要跑 .NET 就在 windows 上面跑就好了，要在 Linux 上跑 .NET 有甚麼意義嗎?"</em></span>

其實還蠻有意義的 XD，這兩個月每天下班花一點時間研究之後的心得，.NET Core 的確還在起步的階段 (現在才第一版 RC)，跟已經進展到 4.6 的 .NET Framework 完整成熟的生態來說真的差太遠，現階段來看還完全沒有什麼誘因值得立刻轉移到 .NET Core + Linux 上面執行。不過眼光放長遠一點，這我認為到是個蠻值得的投資。怎麼說? 以下是我的觀點，跟大家分享:

&nbsp;

&nbsp;

&nbsp;

&nbsp;

<!--more-->

<hr />
<p style="padding-left: 30px;"><em>文長，分成幾篇張貼，Happy Reading! :D</em></p>
<p style="padding-left: 30px;"><em>#1. 我真的需要在 Linux 上跑 .NET 嗎?</em>
<em>#2. <a href="http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/">記憶體管理大考驗 – setup environment
</a>#3. <a href="http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/">記憶體管理大考驗 – Windows Container (2016 TP)</a></em>
<em>#4. <a href="http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/">記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</a></em>
<em>#5. <a href="http://columns.chicken-house.net/?p=739&amp;preview=true">多工運算效能大考驗 – 計算圓周率測試</a></em></p>


<hr />
<p style="padding-left: 30px;"></p>
&nbsp;

&nbsp;
<h1>投資在 .NET Core + Linux 眼前的好處:</h1>
<ol>
	<li>可以沿用所有的 .NET 開發資源 (.NET BCL, Visual Studio, 其他既有 C# source code 的程式碼)</li>
	<li>.NET Core 可以充分利用 open source 的社群資源</li>
	<li>.NET Core 可以在 windows 以外的平台執行的官方支援與保證</li>
</ol>
這些優點都是非常顯而易見的，以 (2) 來說，光是有 Bug 被找到時，有 source code 的話就會有很多魔人直接修正了。這讓我想到<a href="/?p=169">當年我找到 .NET Framework 裡面的一個 SMTP 編碼的 BUG</a>，我當時很辛苦的只能用反組譯的方式來追問題，找到問題回報後，等到官方解決 &amp; 釋出修正檔，已經是半年多以後的事了。我相信有這種經驗的人一定不只我一個... ，對於 software engineer 來說，給他再好的工具或是文件，都比不上直接看 code 來的有用，而 open source 就是最大的幫助!

再來看 (3), 換個角度想，.NET Core 支援 Linux 之後，以後 .NET 程式終於可以名正言順，有官方支持的方式，大大方方的在 Linux 上面執行了。最大的效益在於，可以跟很多其他 open source project 更緊密的配合。很多情況下，最終服務要佈署的方式，就已經決定你的開發平台了。有的狀況是特定 solution 只支援 Linux, 這時架構師為了簡化系統的維護，可能會因為這樣遷就統一整體的環境都用 Linux，另外常見的例子是非營利單位，大型佈署時其實沒甚麼選擇，也是用 0 授權成本的 Linux，這些情境在過去都是會對 .NET 造成排擠效應的族群。

另外再舉個例子，我碰過很多 open source 的套件，雖然有 windows 版本，不過由於 windows / linux 很多地方先天上就有差異，這些套件就算 porting 到 win32 用起來就是水土不服，最後這樣的組合，只有在不得不用的情況下會被端出來，正常的狀況或是新案子根本不可能挑選這樣的組合。我就曾經碰過只是個小型專案，但是最後竟然得在一台 Windows Server 上同時跑 IIS + Apache 的窘境... 這些都是造成 Windows / Linux 兩大陣營格格不入的原因，為了長遠考量，往往都只能做出 2 選 1 的決定。

融入 open source 的生態，不只有表面上的效益，除了讓你摸的到 source code 之外，更深層的意義是你的解決方案也要符合這個社群的使用習慣。舉例來說，Linux 上面可不會有 IIS，就算 Microsoft 願意把 IIS 也 open source, 我想在 Linux 的世界裡，不會有人想用 IIS 吧 XD... 所以，Microsoft 除了把 .NET Core 開源之外，架構上也得替 ASP.NET 5 做一些調整，讓他能夠在 Apache 或是 Nginx 上面跑才有意義... 所以就催生了 OWIN (參考 <a href="http://blog.darkthread.net/post-2013-12-01-about-owin.aspx" target="_blank">darkthread: 開發筆記: OWIN</a> ) 這東西出來。OWIN 的優點我就不多說了，Google 可以找到很多。我舉個反例，有在寫 ASP.NET 的人應該都知道，Microsoft 光是要執行你的 web project  就有好幾種環境可以使用，包括: 各個版本的 IIS、IIS express、Visual Studio 內建的 Dev Web Server、還有社群版本的 <a href="https://cassinidev.codeplex.com/" target="_blank">Cassini</a> .. 令人想哭的是，除了 IIS / IIS express 之外，其他每個環境之間的差異都不小，常常在 A 是正常，但是拿到 B 就掛掉的狀況... 到最後整個開發團隊只好退回都用最終的環境 (IIS) 來測試，直到 IIS express 出現後才有所改善..

這些改變，也讓 .NET Core 相關 solution 能在架構上可以更直接地跟其他 open source solutions 搭配，像我最近在弄得 .NET Core + NGINX + Reverse Proxy 等等混搭的做法就很容易實現，這是好處。如果是在過去，首先要用 .NET 就是得用 Windows，OS 沒有其他選擇 (先別提非官方的 Mono)。接著我得先想半天，WEB 到底要用 IIS 還是用 Apache / Nginx ?  Reverse Proxy 到底是要設在 Apache / Nginx 裡，還是在 IIS 上面安裝 <a href="http://www.iis.net/downloads/microsoft/application-request-routing" target="_blank">ARR</a> (Application Request Routing) ?

&nbsp;
<h1>投資在 .NET Core + Linux 長遠的好處:</h1>
再來看長遠一點的趨勢變化，Microsoft 這麼做的目的，我認為合理的有:
<ol>
	<li>.NET 在 open source 社群的地位
cloud 都是以 linux 為大宗，open source 可以讓 .NET 族群維持一定的市佔率，可以留住這些 .NET 的生態圈 (include me)。最接近的對手，大概就是 Java 了吧，.NET / C# 想要擠下 Java 的地位的話是一定要 open source 的，只是現在做還來不來的及的問題而已 XD</li>
	<li>Azure
Azure 是 Microsoft 的雲端平台，Linux 在 Cloud Solution 裡是大宗，客戶有需要 Linux, Microsoft 沒道理不提供。有人在用 Azure 的服務，Microsoft 就會有營收，即使你用的是 Linux 而不是 Windows。不過這樣長遠來看實在是很尷尬，既然你用了 Linux, 那 Microsoft 就必須有更強烈的誘因來留住客戶。直接對這個生態有大量的貢獻，在這個生態內提供比對手更好整合更緊密的服務是必要的。以這角度來看，.NET open source 就是不可或缺的第一步，而 Microsoft 已經跨出去了。</li>
</ol>
目前 .NET 仍然有很大的優勢，那就是 C# 語言的優越，跟大幅領先全世界其他開發工具的 Visual Studio。 C# 對於程式碼很講究的我來說，是我的首選。我很喜歡 <a href="https://www.microsoft.com/about/technicalrecognition/anders-hejlsberg.aspx" target="_blank">Anders</a> 大神 (Delphi, C#, TypeScript 的創造者) 的風格.. 搭配沒有對手的 Visual Studio 之後，這組合是在是太無敵了，只可惜過去這是要錢的，不管是開發工具，或是要佈署的環境都是。很多非營利單位沒辦法大規模採用。這現象也許在 .NET Core open source 之後會有改善，不過要造成影響，恐怕還要等上幾年才會成氣候吧..

雖然這些趨勢，短期內都對我還沒有影響，公司還是照樣用 Windows Server / IIS / SQL server, 還是照樣用 C#, 用 Visual Studio 開發系統，但是身為十幾年的 Microsoft 陣營的 developer, 我是還蠻看好這樣的改變的，所以最近才認真研究起 .NET Core / Docker 這樣的組合。Microsoft 新任 CEO 果然還是比較抓得住 developer 心裡在想甚麼，過去 Bill Gates 在位時，這部分都做得不錯，中間換了 Steve Ballmer, 對 developer 的感官就差了點 (我自己的感受)，就是少了點 fu, 直到 Satya Nadella 上任，這感覺又回來了 XD

&nbsp;
<h1>回到主題，了解 .NET Core 在不同平台上的表現</h1>
因為有上述這些考量，這也才是我想要深入研究 .NET Core / Docker / Linux 的動機。為的不是接下來一兩年，而是為了下個 10 年做準備...

跨平台最討厭的就是各種平台上的細節行為的差異，尤其是 OS 掌管的資源 (CPU, Memory ... etc) 更是如此。想要快速的掌握這些差異，最快的方法就是親手做一次，因此我把以前的 Code 挖了出來，打算寫兩篇探討:
<ol>
	<li>記憶體管理的差異 (use: memory fragment test)</li>
	<li>運算速度及效能的差異 (use: multi-thread + compute PI )</li>
</ol>
記憶體管理這個主題，這個我把之前的舊文探討的主題拿出來用。當年學生時代，在 BBS 上看到個很有意思的論點 (應該有 20 年了吧)，就是 virtual memory 的管理機制下，virtual address space 還會不會有 fragment 的問題? 當年也為了這個主題寫了三篇文章 (如下)，結果在不同的 OS，不同的架構 (x86 / x64), 甚至是不同的 GC 方式 (garbage collection) 下都有不同的行為表現。當時這結果大出我意料之外，也令我印象深刻，因此這次 .NET Core 對我而言，我是把它當作新的平台來看待，因此這測試也被我重新拿出來用了。
<ul>
	<li><a href="http://columns.chicken-house.net/2008/02/26/memory-management-i-fragment/" target="_blank">Memory Management - I, Fragment ?</a></li>
	<li><a href="http://columns.chicken-house.net/2008/03/03/memory-management-ii-test-result/" target="_blank">Memory Management II - Test Result</a> ?</li>
	<li><a href="http://columns.chicken-house.net/2008/03/03/memory-management-iii-net-clr/" target="_blank">Memory Management III - .NET CLR ?</a></li>
</ul>
另一個運算速度的測試，就比較單純了，我只是想知道同樣 .NET Core 的 Code, 在不同平台執行起來的效能到底有沒有差別? 大家普遍認為 Linux 省資源，跑得快，但是 .NET 在 Windows 卻又比 Linux 上來的成熟，誰勝誰負還很難講，目前也還 Google 不到太多相關資訊，我就找了段計算小數點以下50000位數圓周率的 CODE 來當作基礎，搭配我的老本行 multi-thread 來測看看。我用了同樣規格的 Hyper-V VM, 分別在 Linux + Docker, Windows 2016 + Windows Container, Windows 2012R2 (這個沒 container 可以用，只好讓他作弊直接在 host os 上跑了) 來比較。

這篇評論就當作引言，充當第一篇吧 XD，接下來兩篇就是這兩個比較了，請待下期分曉~

#2. <a href="http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/">記憶體管理大考驗 – setup environment</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>608</wp:post_id>
		<wp:post_date><![CDATA[2015-12-26 22:42:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-26 14:42:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dnxcore50_01_should_i_run_dotnet_on_linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[616]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET Core 跨平台 #2, 記憶體管理大考驗 - setup environment</title>
		<link>http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/</link>
		<pubDate>Sun, 27 Dec 2015 14:48:06 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=620</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="padding-left: 30px;"></p>
<img class=" wp-image-621 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_567f9c9e811a9.png" alt="" width="199" height="207" />

記憶體管理，是跟底層平台高度相關的議題。對於 developer 來說，能掌控的部分很有限，developer 能做的動作，不外乎是 allocate / free memory, 頂多對於 GC (garbage collection) 的機制更明確的掌握而已。超出這個範圍以外的部分，就真的只剩下好好處理 exception 的份了...

這次 .NET Core 開源 + 支援 Linux / MacOS, 正好開創了一個新的平台支援，實際測測看，是掌握差異最快的方式。我挖出了當年的老文章探討的記憶體管理問題，在新的平台上驗證。不同平台的差異，遠比我想像的精彩，就順手把它寫成文章整理起來，給需要的人參考。

&nbsp;

&nbsp;

&nbsp;

<!--more-->

<hr />

<em>文長，分成幾篇張貼，Happy Reading! :D</em>

<em>#1. <a href="http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/">我真的需要在 Linux 上跑 .NET 嗎?</a></em>
<em> #2. 記憶體管理大考驗 – setup environment</em>
<em> #3. <a href="http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/">記憶體管理大考驗 – Windows Container (2016 TP)</a></em>
<em> #4. <a href="http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/">記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</a></em>
<em> #5. <a href="http://columns.chicken-house.net/?p=739&amp;preview=true">多工運算效能大考驗 – 計算圓周率測試</a></em>

<hr />

&nbsp;

&nbsp;
<h1>測試的方法</h1>
驗證的方式很簡單，就是測試 .NET 的記憶體管理能力。測試方式會分三個步驟:
<ol>
	<li>連續配置 64mb 區塊的記憶體，直到 OOM (Out Of Memory) 為止，記錄能配置的區塊數量。</li>
	<li>按順序，保留奇數的區塊，把偶數的區塊 free 掉。理論上這樣會讓記憶體空間碎片化，剩餘的空間不會有超過連續 64mb 以上的可用空間。</li>
	<li>接著試著配置 72mb 區塊的記憶體，直到 OOM 為止，記錄能配置的區塊數量。</li>
</ol>
過去對這個議題詳細的探討，可以參考這三篇 (<a href="/?p=120" target="_blank">#1</a>, <a href="/?p=118" target="_blank">#2</a>, <a href="/?p=117" target="_blank">#3</a>)。

&nbsp;

為了完全控制測試環境，我用我自己的 PC 開了幾個相同規格的 VM，分別用不同的平台 (windows, windows container, linux container) 來驗證，一次只開一個 VM，確保不會互相干擾。雲端版本的測試，我也會在 Windows Auzre 上進行一次，Azure 的部分會等下一篇計算圓周率的測試也做完之後，一起搬上 Azure 再來綜合比較。有忍不住想偷跑的網友，<a href="http://www.apertus.com.tw/" target="_blank">這邊(www.apertus.com.tw, coding in cloud)</a> 有很多相關的文章，可以到上面看看~

為什麼要做這樣的測試? 主要是先製造 memory fragment 的情況，然後看看 garbage collection 的機制能否應付這種狀況? 同時也看看底層的 .net core runtime 在記憶體不足的狀況下，能否有效的保護好上面的應用程式? 處理的效能及效果是否理想等等議題。測試的過程中，老實說發現了好幾個我意料之外的狀況，因此答案也不是 YES 或 NO 那麼簡單... 想知道測試的過程及結果，請繼續看下去~

這次的測試，由於扯到很多環境設定的步驟，我想親自體驗.. 因此沒有在第一時間就採用 Azure .. 而是自己從無到有建立起來，後面的整體評比再改到 Azure 上面進行。我自己的 PC 規格及環境如下:
<ul>
	<li style="padding-left: 30px;"><strong>CPU</strong>: Intel Core i7-2600K ( @ 3.40GHz )</li>
	<li style="padding-left: 30px;"><strong>RAM</strong>: 24GB (DDR3-1600, 4 + 4 + 8 + 8)</li>
	<li style="padding-left: 30px;"><strong>HDD</strong>: Intel SSD 730 (240GB) + Seagate Enterprise Capacity 5TB (ST5000NM0024), 7200 rpm 企業級硬碟</li>
	<li style="padding-left: 30px;"><strong>OS</strong>: Microsoft Windows 10 Enterprise</li>
</ul>
為了這次測試，我直接用了 windows 10 內建的 Hyper-V 當作虛擬化的環境，情況允許的話我會建立 Docker Host 的作業環境，在 Container 內執行 .NET Core 的程式。VM 的規格統一如下:
<ul>
	<li style="padding-left: 30px;"><strong>CPU</strong>: 1 Processor</li>
	<li style="padding-left: 30px;"><strong>RAM</strong>: 1024 MB (dynamic memory was disabled)</li>
	<li style="padding-left: 30px;"><strong>SWAP</strong>: 4096 MB</li>
	<li style="padding-left: 30px;"><strong>HDD</strong>: 32GB (VHDX, attached on IDE controller 0, HDD #1)</li>
	<li style="padding-left: 30px;"><strong>DISPLAY</strong>: 1366 x 768</li>
</ul>
執行的環境，我準備了這四套 (如下)，比較特別的是 windows server 2016 也支援了 windows container, 當然要拿出來用用看 XD，不過現在還在 tech preview, 結果僅供參考，等到正式 release 後再來補測試結果:
<ol>
	<li style="padding-left: 30px;"><strong>Boot2Docker</strong>, 使用 Docker Toolbox 提供的 boot2docker.iso, 版本 1.9.1</li>
	<li style="padding-left: 30px;"><strong>Ubuntu 15.10</strong>, 預設安裝 + SSH, 安裝 docker 1.9.1</li>
	<li style="padding-left: 30px;"><strong>Windows 2012R2 Server Core</strong> (直接在上面跑 .NET Core)</li>
	<li style="padding-left: 30px;"><strong>Windows 2016 Tech Preview 4 (Nano)</strong>, 在上面建立 windowsservercore container, 在裡面安裝 .NET Core 的 CoreCLR runtime</li>
</ol>
OK，準備動作大功告成，開始測試~

&nbsp;
<h1>#0. 準備測試程式</h1>
我特地挑選了一個最沒有問題的平台當作對照組。這組其實沒什麼好講的，這是最典型的 .NET application 執行環境啊，從最早的 .NET 1.0 開始算，已經有十幾年了.. 就趁這個段落來看一下測試用的 CODE:
<pre class="lang:c# decode:true " title="memory fragment test">using System;
using System.Collections.Generic;

namespace dotnetcore.MemFrag
{
    class Program
    {
        static Random rnd = new Random();

        static byte[] AllocateBuffer(int size)
        {
            byte[] buffer = new byte[size];
            //InitBuffer(buffer);
            return buffer;
        }

        static void InitBuffer(byte[] buffer)
        {
            rnd.NextBytes(buffer);
        }

        static void Main(string[] args)
        {
            DateTime start;

            List&lt;byte[]&gt; buffer1 = new List&lt;byte[]&gt;();
            List&lt;byte[]&gt; buffer2 = new List&lt;byte[]&gt;();
            List&lt;byte[]&gt; buffer3 = new List&lt;byte[]&gt;();

            //            
            //    allocate             
            //            
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("1. Allocate 64mb block(s) as more as possible...");
            start = DateTime.Now;
            try
            {
                while (true)
                {
                    buffer1.Add(AllocateBuffer(64 * 1024 * 1024));
                    Console.Write("#");
                    buffer2.Add(AllocateBuffer(64 * 1024 * 1024));
                    Console.Write("#");
                }
            }
            catch (OutOfMemoryException)
            {
            }
            Console.WriteLine();
            Console.WriteLine("   Complete.");
            Console.WriteLine("   - total {0} x 64mb blocks = {1} MB were allocated.", (buffer1.Count + buffer2.Count), (buffer1.Count + buffer2.Count) * 64);
            Console.WriteLine("   - total execute time: {0} sec", (DateTime.Now - start).TotalSeconds);

            //        
            //    free  
            //        
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("2. Free Blocks...");
            start = DateTime.Now;
            {
                //        
                //  de-reference and GC  
                //            
                buffer2.Clear();
                GC.Collect(GC.MaxGeneration);
            }
            Console.WriteLine("   Complete.");
            Console.WriteLine("   - total {0} x 64mb blocks = {1} MB were allocated.", buffer1.Count, buffer1.Count * 64);
            Console.WriteLine("   - total execute time: {0} sec", (DateTime.Now - start).TotalSeconds);


            //           
            //    allocate  
            //          
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("3. Allocate 72mb block(s) as more as possible...");
            start = DateTime.Now;
            try
            {
                while (true)
                {
                    buffer3.Add(AllocateBuffer(72 * 1024 * 1024));
                    Console.Write("#");
                }
            }
            catch (OutOfMemoryException)
            {
            }
            Console.WriteLine();
            Console.WriteLine("   Complete.");
            Console.WriteLine("   - total: 64mb x {0} + 72mb x {1} = {2} MB were allocated.", buffer1.Count, buffer3.Count, buffer1.Count * 64 + buffer3.Count * 72);
            Console.WriteLine("   - total execute time: {0} sec", (DateTime.Now - start).TotalSeconds);


            Console.WriteLine("[Enter] to exit...");
            Console.ReadLine();
        }
    }
}
</pre>
程式很簡單，主要就分三大部分，以 64mb 為單位連續配置，然後跳著釋放空間 + 呼叫 GC，最後試著連續配置 72mb 空間。每個步驟結束後統計 64 / 72 mb 的配置數量，以及計算花費的時間。

唯一特別要注意的是 static void InitBuffer(byte[] buf) 這個 method, 這個動作在之前的文章沒有出現，是這次特地加上去的。它的功能很單純，就是 buffer 配置好了之後，用亂數填滿這整個 buffer 的空間。為何要做這動作? 後面測試時再說明...

(未完待續)

#3. <a href="http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/">記憶體管理大考驗 – Windows Container (2016 TP)</a>
<h1></h1>
<h1></h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date><![CDATA[2015-12-27 22:48:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 14:48:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dnxcore50_02_memfrag_test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[621]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5d8fa8932b6029f8b26efedfb4b43233]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET Core 跨平台 #3, 記憶體管理大考驗 - Windows Container (2016 TP)</title>
		<link>http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/</link>
		<pubDate>Sun, 27 Dec 2015 17:34:03 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=630</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<hr />

<img class="aligncenter" src="http://dirteam.com/sander/wp-content/uploads/sites/2/2015/11/tp4-1024x512.jpg" alt="" width="589" height="295" />這次 .NET Core 的實驗做完，我看相關的 How To 可以寫一堆了 @@，整個過程中都在挑戰過去很少做的事情，包括 Linux, .NET Core, Docker, 現在連 Windows Container 都出動了.. 不過試完之後一整個充實啊，最後能把預期的結果弄出來，幾個晚上睡不飽是值得的...

接續上篇文章，這篇就把 windows 的兩個平台測試給搞定吧! 先快速交代一下打算當作對照組的 Windows 2012 R2~

<!--more-->

<hr />

&nbsp;
<p style="padding-left: 30px;"><em>文長，分成幾篇張貼，Happy Reading! :D</em></p>
<p style="padding-left: 30px;"><em>#1. <a href="http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/">我真的需要在 Linux 上跑 .NET 嗎?</a></em>
<em> #2. <a href="http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/">記憶體管理大考驗 – setup environment</a></em>
<em> #3. 記憶體管理大考驗 – Windows Container (2016 TP)</em>
<em> #4. <a href="http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/">記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</a></em>
<em> #5. <a href="http://columns.chicken-house.net/?p=739&amp;preview=true">多工運算效能大考驗 – 計算圓周率測試</a></em></p>


<hr />

&nbsp;

&nbsp;
<h1>#1. Windows 2012R2 Server Core (對照組)</h1>
這一組應該不用多說了吧? 已經是很成熟的組合了，除了 .NET Core CLR 還是新的之外... 為了讓各組的組態都接近一點，2012R2 我特地選用最輕量的 Server Core, 沒有 GUI 介面可以用，所有動作都要靠下指令來完成。這個正合我意，多了 GUI 也會拖慢速度... 反正 Linux 那麼多指令都已經搞定了...

直接來看結果吧，裝完該裝的之後，主角上場。所有的測試，我都是拿 source code 直接到受測平台，就地編譯就地測試。測試步驟我一律是:
<ol>
	<li>VM 重新啟動</li>
	<li>下載相關的 package</li>
	<li>編譯</li>
	<li>連續執行兩次，以第二次的數據為準 (避免第一次啟動有額外的最佳化等等動作)</li>
</ol>
<p id="niLqAmO"><img class="alignnone size-full wp-image-633 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568017243c37f.png" alt="" /></p>
執行的結果中規中矩，記憶體回收的效果不算特別突出。我沒有特別指定虛擬記憶體的大小，系統預設是給 4GB pagafile, 加上本身 1GB 的 RAM，看來程式能在第一階段要到 4416MB memory 是很合理的.. 經過故意讓記憶體碎片化的動作後，重新要記憶體來用，最後只能要到共 2888MB 的大小... 我就訂一個指標 (記憶體利用率 %) 吧，用 phase 1 可取得的大小當分母，phase 3 可取得的大小當分子，算出 2012R2 的結果是: 65.40%

實際上程式其他的 overhead 其實不大，跟測試結果差不多。雖然 server core 沒有 GUI，不過平常常在下指令，有些 tips 還是派得上用場的，在 dos pormpt 下輸入 taskmgr.exe 可以叫出工作管理員 XD，趁機看一下:
<p id="FaLHjkU"><img class="alignnone size-full wp-image-635 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568018e727ab4.png" alt="" /></p>
看來執行 .NET Core 的 runtime dnx.exe 本身吃掉 4548MB, 而實際的 RAM 1G 被吃掉了 800MB，其實在意料之中，沒有太大的落差。工作管理員切換到效能頁看看:
<p id="oZKqemr"><img class="alignnone size-full wp-image-636 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568019519b820.png" alt="" /></p>
右半突然飆高的那段，就是程式剛開始啟動的時候，看來實體記憶體一開始就用光了，剩下後面都在用虛擬記憶體，從記憶體使用率來看也是一樣的結果。

&nbsp;
<h1>#2. Windows Server 2016 Nano (Tech Preview 4)</h1>
雖然這也是 windows, 不過有很大的不同喔，這是 Microsoft 第一個支援 container 容器技術的 OS。Microsoft 跟 Docker 密切的合作，計畫在 2016 這個版本正式推出 windows container. 體驗了之後感覺好奇妙，提供了完全相容 docker 的管理工具 (也有提供 powershell 版本)，讓你可以在 windows server 裡面建立屬於 windows 的 container .. 當然，能跟 docker 共用的是架構，管理工具這些東西，然而 container 是必須依賴 host 的 kernel 啊，所以不可能用到那堆 linux 的 container image ... 這邊就只能辛苦一點，直接拿 windows server core 的 image 當起點，自己一步一步把環境建立起來 T_T

也許是還在 Preview 階段的關係，操作上回應速度有點慢，尤其是我用 interactive mode 把終端機接到 container 內更明顯... 到時等到更接近 release 的版本再來看看吧，Microsoft 的效能調教很強的，之前 windows 10 insider 體驗時有見識到了 :D...  這邊的建置過程我就先跳過了，有朋友有興趣可以在私下問我。直接貼一下測試結果:
<p id="lprJDRa"><img class="alignnone wp-image-697 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56840f8bb211b-e1451495326913.png" alt="" width="520" height="325" /></p>
第一階段最多可以要到 4032MB 記憶體空間，第三階段則可以用到 2696MB，整體的利用率達到: 66.87%

第一次體驗 windows container, 其實還蠻奇妙的，用起來就像是個 VM，只是他限定 Guest OS 跟 Host OS 必須是同一個的感覺... 我試著去工作管理員找證據，也證明了他真的是用 container 技術在執行。如下圖，我開的是 Host OS 本身的工作管理員，可以看的到在 Container 內執行的指令。證明它們適用同一個 kernel, 而不是像 VM 依樣是完全隔離的兩套系統，可想見的，這種模式下對於資源的應用一定是更有效率，可以看的到在效能上跟原生的其實沒有太大的差別。
<p id="EiyrAVE"><img class="alignnone size-full wp-image-638 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56801dd7cd650.png" alt="" /></p>
不過，如果你只把他想成 windows 版的 docker,  那又太小看 Microsoft 了，在 Host OS 與 container 之間，Microsoft 又增加了一層隔離，讓 user 能夠對 OS kernel 有選擇性的決定要步要隔離它? 這個技術在 TP4 首次現身，它就叫做 Hyper-V Container. 簡單的說，若你需要 Kernel 層級的隔離支援，底層的 Hyper-V 會自動替你用預先做好的 image 來建立 VM，然後在把你的 container 見在這個 VM 裡面。讓你在必要時有 VM 層級的隔離與保護，同時又能享有 container 技術的優點。

這次我是沒機會體驗到這個部分，先留個筆記，下次有機會再回頭研究。有興趣的朋友可以參考這篇: <a href="http://windowsitpro.com/windows-server-2016/differences-between-windows-containers-and-hyper-v-containers-windows-server-201" target="_blank">The differences between Windows Containers and Hyper-V Containers in Windows Server 2016</a>

<img class="alignnone" src="http://windowsitpro.com/site-files/windowsitpro.com/files/uploads/2015/08/container2.jpg" alt="" width="800" height="398" />

&nbsp;

&nbsp;

#4. <a href="http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/">記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>630</wp:post_id>
		<wp:post_date><![CDATA[2015-12-28 01:34:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 17:34:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dnxcore50_03_windows_server_2016]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_14d15c9e403beb2af852640c2a1ca278]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6c48aa9c5b889bc26cfbe4d089090f0f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5bc819b06350ea2c3582dd31bf66e2be]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[net-core-%e8%b7%a8%e5%b9%b3%e5%8f%b0-3-%e8%a8%98%e6%86%b6%e9%ab%94%e7%ae%a1%e7%90%86%e5%a4%a7%e8%80%83%e9%a9%97-windows-container-2016-tp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET Core 跨平台 #4, 記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</title>
		<link>http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/</link>
		<pubDate>Mon, 28 Dec 2015 16:47:11 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=640</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<hr />

<img class="alignleft" src="http://images.boomsbeat.com/data/images/full/1046/23-jpg.jpg" alt="" />

測試完 windows 家族的 .NET Core CLR 之後，接下來就是 Linux 家族了。我挑了兩個環境，一個是標準安裝的 Ubuntu 15.10 server。另一個則是採用大家常用的 Boot2Docker, 它是附在 Docker Toolbox 內的一個元件，有人預先準備好的精簡型 Linux, 預先安裝了 Docker 在裡面。

為什麼要把 Linux 的部分獨立成一篇來說明? 因為 Linux 的環境是這整個測試中，意外狀況最多的一個環境了.. 有興趣的朋友請繼續看下去..<!--more-->

<hr />

&nbsp;
<p style="padding-left: 30px;"><em>文長，分成幾篇張貼，Happy Reading! :D</em></p>
<p style="padding-left: 30px;"><em>#1. <a href="http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/">我真的需要在 Linux 上跑 .NET 嗎?</a></em>
<em> #2. <a href="http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/">記憶體管理大考驗 – setup environment</a></em>
<em> #3. <a href="http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/">記憶體管理大考驗 – Windows Container (2016 TP)</a></em>
<em> #4. 記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</em>
<em> #5. <a href="http://columns.chicken-house.net/?p=739&amp;preview=true">多工運算效能大考驗 – 計算圓周率測試</a></em></p>


<hr />

&nbsp;
<h1></h1>
<h1>#3. Ubuntu Server 15.10 + Microsoft .NET Core CLI Container</h1>
Ubuntu Server 的部分，就是標準的安裝而已。所有選用套件，我只裝了 SSH 方便我用終端機操作，另外就是必要的 Docker Engine 而已，其他就是抓 Microsoft 準備好的 dotnet cli 這個 image 回來用.. 操作過程前幾篇都介紹過了，直接跳到測試結果:

<img class="alignnone size-full wp-image-641 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815077450fc.png" alt="" />

第一次測試我還真的有點傻眼，有沒有搞錯? 小小一個 1GB RAM 的 Linux, 可以 allocate 到 712GB RAM ? 掛上去的 32GB HDD 都給她當作 swap 也沒這麼大啊.. 這想都不用想，一定有陷阱在裡面..

突然慶幸當年在交大除了電機的本科之外，有跑去修資工系的課，而且還挑那種特別硬的學分來修.. 包含作業系統 (Operating Systems 恐龍版), 系統程式 (System Programming 海螺版)，其他記得還有演算法跟編譯器.. 學這些基礎，這時就派上用場了。記得在講 file system 時教授提過一個關鍵字 "<a href="https://en.wikipedia.org/wiki/Sparse_file" target="_blank">SPARSE FILE</a>"，意思就是當你 allocate 一個很大的檔案時 (比如 1GB)，但是內容都還沒 initialize, 這時檔案的內容對你是完全沒有意義的，因此 OS 實際上可以把這些空間給省下來，等你真正有寫入需求時，才真正去配置硬碟空間給你用。

現在測到的情況，不就跟 sparse file 一模一樣嗎? 只不過發生的對象是 memory, 因此找了一下，才發現 linux kernel 還真的支援一種叫 SPARSEMEM 的模式，還查不大道詳細的說明，但是大致上 google 看了一下，我猜是指記憶體管理的策略有多種模式的樣子，其中一種就是 SPARSEMEM。不過我沒花時間真的去驗證是不是這個機制搞鬼，但是要避開它很簡單，我只要真的去 initialization 我取得的記憶體就可以了.. 為了確認這個問題，我改了測試的 source code, 每個平台都重新跑了一次... 改的 code 只有一小段:
<pre class="lang:c# decode:true">        static byte[] AllocateBuffer(int size)
        {
            byte[] buffer = new byte[size];
            //InitBuffer(buffer);
            return buffer;
        }
 
        static void InitBuffer(byte[] buffer)
        {
            rnd.NextBytes(buffer);
        }
</pre>
就是被我註解掉的那行 InitBuffer( ), 我原本想全部填 0x00，不過想說該不會又被我碰上啥記憶體壓縮等等最佳化的技巧，我就改填亂數了。沒想到這樣 code 寫起來還更精簡，一行就搞定了 (雖然沒有比較快)。

<del>調整過的 code 就正常多了，第一階段總共要到了 1792MB memory, 釋放之後重新配置記憶體，第三階段則要到了 1760MB. 配置後回收使用的效率高達 98.21%</del>

<del>不過 windows 都能配置到 4GB 以上的記憶體，Ubuntu 才 2GB 不到... 不知是 OS 的因素? 還是 Microsoft 在 Linux 上面實作 CLR 用了不同的做法? 還是是 Docker Container 的限制，這就不確定了，先記錄下這現象，之後再查證原因...</del>
<p id="OGCzlmO">(環境設定錯誤，測試結果請看下方修訂內容)</p>
不過，意外的部分還不只這一個。有十多是幾次，會隨機發生這種狀況:
<p id="XfYtXKf"><img class="alignnone size-full wp-image-644 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_5681597f933de.png" alt="" /></p>
第三階段時，莫名其妙就被 OS 給終結了，畫面上直接顯示 Killed, 連 OOM (Out Of Memory Exception ) 都沒有丟出來就結束了。這種情況，看來是連 Exception 都來不及丟出來，整個 CLR 就被 OS 強制終止的結果。以這點來看，Windows 版本的實作就成熟的多，我用了那麼多年都還沒碰到這種 CLR 無法搞定的狀況，再怎麼樣都還拿的到 CLR 丟給我的 Exception..

&nbsp;

------------------------------------------------------------------------

2015/12/29 01:23 修訂:

我太豬頭了，忽略掉一個關鍵的因素，就是 ubuntu 的 swapfile 設定 @@，之前都用預設值按的太高興，沒留意到不同 OS 對於虛擬記憶體預設值的不同... windows server 預設會配置 4GB c:\pagefile.sys 檔案，而 ubuntu 安裝程式預設只替我準備 1GB /swapfile ...

想到之後去求證一下，果然:
<p id="jZCNmok"><img class="alignnone size-full wp-image-661 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170a978f0b.png" alt="" /></p>
立馬調整成一樣的配置，一樣給 4GB swapfile，然後重新執行一次測試:
<p id="vudnSJP"><img class="alignnone size-full wp-image-662 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568170eb4fb85.png" alt="" /></p>
讚，Ubuntu Server 版回一城，測試結果是 4864MB / 4808MB, 98.85%

&nbsp;
<h1>#4. Boot2Docker + Microsoft .NET Core CLI Container</h1>
這是準備起來最輕鬆的環境了! boot2docker 它是以光碟 .iso 的映象檔方式發布，<a href="https://github.com/boot2docker/boot2docker" target="_blank">官方的 github 網址在這裡</a>，需要的可以自行下載。使用很簡單，只要開個 VM，掛上這個 .iso 開機就可以了。不過為了讓他有足夠的空間 pull docker image, 我還是按照一樣的規格，掛了個 32GB VHD 上去給 Docker Engine 支配使用。
<p id="diKreyb"><img class="alignnone size-full wp-image-645 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815ac57b4d8.png" alt="" /></p>
這個環境算是最快就搞定的，VM + .iso 根本不花費什麼功夫就開機成功了，加上連 docker engine 都早就預先安裝好，如上圖，光碟開機後馬上就可以開始 docker pull ... 把環境準備好，實在是很無腦 :D。原本預期結果差不多，貼個圖就可以收工了，沒想到... 也是有意外狀況發生:
<p id="OmkBaAj"><img class="alignnone size-full wp-image-646 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815b172e548.png" alt="" /></p>
boot2docker 一樣，也會有 SPARSEMEM 的狀況，沒有 init 的記憶體實際上部會占太多空間，於是就出現這種很誇張的數據: 配置 330GB memory ... 當然改 code 配置後 init 就解決了。不過即使都是 linux, 看來也是存在差異，Ubuntu server 可以配置到 700G，boot2docker 只有 330GB ...

改用會正確 INIT 的版本後，再 run 一次:
<p id="LMznFMQ"><img class="alignnone size-full wp-image-647 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815bf493500.png" alt="" /></p>
這次比 Ubuntu 的狀況更慘，第一階段沒跑完就掛了... 這時旁邊沒關掉的 virtual console 1 跳了一堆錯誤訊息出來:
<p id="wPsgdhC"><img class="alignnone size-full wp-image-648 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815c3522859.png" alt="" /></p>
不是很確定實際的原因是什麼，不過很明顯的這是寫入 swap memory 時的錯誤訊息.. 很頭痛的，這狀況也是隨機的，我多跑了幾次，各種狀況都有 @@，總算抓到一次成功結束的畫面:
<p id="xfuHlRa"><img class="alignnone size-full wp-image-649 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56815d5d03a5d.png" alt="" /></p>
看來 boot2docker 的配置保守的多，我相信是很多資源沒被充分利用拉，Linux Kernel 沒有這麼不耐.. 應該是 boot2docker 設計本來就是方便測試為主，才會有這些差異。這個測試的結果，第一階段可以配置到 832 mb, 第三階段則可配置到 736 mb, 88.46%

&nbsp;
<h1>#5. 綜合比較 &amp; 結論</h1>
來看圖說故事了。我隱藏一些不必要的數據，只列出四個測試平台中，三個階段配置的記憶體總數，以及經過破碎化之後，還能重新配置的記憶體比例 (%) 表:
<p id="sEqlawz"><img class="alignnone size-full wp-image-663 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_56817158e722c.png" alt="" /></p>
 這年頭應該沒人想看一堆密密麻麻的字了吧? XD  畫成圖表看看點閱率會不會高一點:
<p id="jMhEetP"><img class="alignnone size-full wp-image-664 " src="http://columns.chicken-house.net/wp-content/uploads/2015/12/img_568171618a821.png" alt="" /></p>
灰色部分是第一階段可配置的記憶體數量，深藍色則是碎片化之後的配置量，淺藍色的曲線，則是可回收重新配置的比率 (%)。

&nbsp;

結論很有趣，我歸納成幾個結論給大家參考:
<ol>
	<li>Ubuntu Server, 是記憶體管理表現最好的平台。無論是可配置的記憶體，以及記憶體破碎後的表現，都幾乎到完美的表現了。不過 Linux 上的 CLR 在測試過程中碰到好幾次 Killed 的狀況，階段要使用仍然是以 Windows Server 2012R2 為最佳選擇。</li>
	<li><del>Windows Server 家族的表現明顯較好，都能配置到 4GB 以上。相較於 Linux 不知為何，無法配置到這麼多記憶體。</del> (後來證實為烏龍一場，請略過這條結論)</li>
	<li>Linux 的記憶體使用效率 (%) 明顯優於 Windows, 還不確定是 CLR 的實作差異所致，還是是 OS 本身的差異造成的。Linux 大都能達到 90% 以上的使用率，較不受記憶體破碎的狀況所影響。</li>
	<li>boot2docker 的表現... 就... 就拿它來測試就好了。它的特性級組態，不適合用於正式環境。</li>
</ol>
補充一下 boot2docker, 可千萬別誤會了，它是個好物，只是它的組態就是為了方便使用而設計，而不是為了高負載的前題設計的，看它包裝的方式就知道了。30mb 不到的檔案大小、採用 .iso 的方式，而不是要讓你安裝到 HDD、可以完全不依靠 HDD 就能執行 (所以自然也不會有任何 swapfile 的配置)，一切都只依靠 RAM 來運作... 因此會有這樣的測試結果，是理所當然的。這篇<a href="http://www.henning.ms/2015/05/11/running-docker-on-hyper-v/" target="_blank">教學</a>裡面有一小段，對於 boot2docker 的定位寫的蠻貼切的:
<p style="padding-left: 30px;"><em>boot2docker is a lightweight Linux distribution based on Tiny Core Linux made specifically to run Docker containers. It runs completely from RAM, weighs ~27MB and boots in ~5s (YMMV)</em></p>
另外文章內提到幾個還沒解開的懸案，我就整理在下方了。Linux 跟 Docker 我實在是新手，也許背後只是很簡單的因素造成的也說不定，有網友知道原因請笑小聲一點，你願意留言分享的話我會很感謝的 :D

&nbsp;

待確認問題:
<ol>
	<li>(?) Linux 配置為初始化的記憶體 (疑似會採用 SPARSEMEM 模式?)只占用很小的記憶體空間。</li>
	<li>(?) 記憶體不足的狀況下，Linux 版本的 CLR 可能無法全身而退，有時連 Exception 都還來不及丟出來，就被砍掉了</li>
	<li>Windows Server GC 表現不佳的問題，其實<a href="http://columns.chicken-house.net/2008/03/03/memory-management-iii-net-clr/" target="_blank">在過去的文章</a>有探討，在過去 .NET Framework 有個參數: gcServer, 可以啟動 compact collection, 能進一步解決破碎的記憶體問題。不過這次我都採用預設值，後續有機會再繼續研究看看這參數是否有影響。</li>
</ol>
&nbsp;

下一篇:
#5. <a href="http://columns.chicken-house.net/?p=739&amp;preview=true">多工運算效能大考驗 – 計算圓周率測試</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date><![CDATA[2015-12-29 00:47:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-28 16:47:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dnxcore50_04_linux_and_summary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[658]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4a02cfe4f15732090c0cb8e34ae732f1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>689</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenny2061@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-30 13:54:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-30 05:54:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我有個問題！
那就是這幾篇看下來，在上一篇的Windows 2016的截圖，三階段的秒數都不到1秒就可以完成，看到那張圖之後我就特別注意之後的截圖，就連表現優異的Ubuntu+Container也要花個一分多鐘在第一階段，不知道Windows 2016的部份是不是有什麼地方影響到它能這麼「神速」？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>691</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Wu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chicken@chicken-house.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/chicken.wu</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-31 01:22:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-30 17:22:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kenny:

感謝勘誤 XD

查了一下才發現，原來那張圖我貼成沒有進行初始化的版本，所以配置速度很快 XD
我更新了正確的圖了，2016 也是要花上一分多鐘 (更慢) 的時間來配置 + 初始化記憶體...

其實觀察不同平台的配置時間，還有不同的結論... Linux 第一階段很快，但是第三階段反而速度最慢..
看來最佳的記憶體使用率是要用時間來換的.. 這邊還沒查到相關證據或是說明，後面的文章有機會再補充說明]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>689</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>.NET Core 跨平台 #5, 多工運算效能大考驗 – 計算圓周率測試</title>
		<link>http://columns.chicken-house.net/2016/01/15/dnxcore50_05_compute_pi_test/</link>
		<pubDate>Thu, 14 Jan 2016 17:22:03 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=739</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<img src="http://26.media.tumblr.com/tumblr_lstbslOSFm1qd5bcwo1_500.gif" alt="external image tumblr_lstbslOSFm1qd5bcwo1_500.gif" />

前面幾篇，研究完記憶體管理的部分之後，接著就是來看看運算的效能了。這部分的測試方式，我想了很久，最後決定拿出老本行: 平行處理的部分來當作 .NET core 跨平台第二回合的主題!

如果單純只是要將各種平台的 .NET Core 比出個高下，那感覺有點像是拿 benchmark 在賽豬公而已，這樣的話找現成的 C# benchmark 應該比較快。因此，我把測試的目的定義清楚，我想藉由這些測試的進行，一方面了解不同平台的差異，我也想透過測試更熟悉這些環境，還有試圖從測試的結果挖出背後運作原理的不同。所以，上一個記憶體管理的主題，已經達到目的了，不這樣測試我還真的不曉得 Linux 預設會壓縮(?) 為初始化的記憶體... 算是值回票價。

<!--more-->

<hr />
<p style="padding-left: 30px;"><em>文長，分成幾篇張貼，Happy Reading! :D</em></p>
<p style="padding-left: 30px;"><em>#1. <a href="http://columns.chicken-house.net/2015/12/26/dnxcore50_01_should_i_run_dotnet_on_linux/">我真的需要在 Linux 上跑 .NET 嗎?</a></em>
<em> #2. <a href="http://columns.chicken-house.net/2015/12/27/dnxcore50_02_memfrag_test/">記憶體管理大考驗 – setup environment</a></em>
<em> #3. <a href="http://columns.chicken-house.net/2015/12/28/dnxcore50_03_windows_server_2016/">記憶體管理大考驗 – Windows Container (2016 TP)</a></em>
<em> #4. <a href="http://columns.chicken-house.net/2015/12/29/dnxcore50_04_linux_and_summary/">記憶體管理大考驗 – Docker @ Ubuntu / Boot2Docker</a></em>
<em> #5. 多工運算效能大考驗 – 計算圓周率測試</em></p>
<p style="padding-left: 30px;"><em>#source code (github): <a href="https://github.com/andrew0928/blog-netcore-cross-platform-test" target="_blank">https://github.com/andrew0928/blog-netcore-cross-platform-test</a></em></p>


<hr />

&nbsp;

第二回合既然要探討 CPU 運算效能，那就來考驗看看 .NET Core 在各種平台下的 CPU Bound 運算的優劣吧。首先我找了段 cpu bound 的代表: 計算指定位數的圓周率程式碼 (計算 10000 位數)。這計算會耗費大量的 CPU 資源，但是不會耗用大量 I/O 及 Memory。透過 <a href="https://msdn.microsoft.com/en-us/library/system.threading.tasks.task(v=vs.110).aspx">System.Threading.Tasks</a> 同時計算 1 / 2 / 4 / 8 / 16 / 32 / 64 次 10000 位的圓周率，並紀錄執行所花費的時間。同樣的測試，則會在不同的平台，在不同的硬體組態下，用 1 core / 2 core / 4 core / 8 core 的硬體配備，分別執行一次。
<p id="oHRhkpl"><img class="alignnone size-full wp-image-742 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56967d2029838.png" alt="" /></p>
先用一張簡單的時序圖，解釋一下這次測試的指標。上圖的 X 軸代表時間，由左至右。丟了 5 個 task 給 .NET Core, 讓他自己去排程處理。排程有很多種策略，這邊我就不另外控制，完全按照 Task 預設的模式來排程。

看過我過去幾年文章的網友，大概都知道我花了很多時間在 "多執行緒" 這個主題上，不同的執行策略其實落差很大。我介紹過的包括 multi-threading, thread pool, 生產者/消費者模式, 生產線模式等等。這次我跳過這些控制機制，直接用 .NET 內建的 Task (可以把它想像成更好用的 thread pool)，他會視你的資源使用狀況，將你的 Task(s) 分配給可用的 thread 來執行。

為了能具體評估這次測試的結果，我採用了這幾個指標:

<strong>Total Execute Time</strong>:
如上圖，整個測試開始執行到全部結束的時間。這指標可以評估整體的執行效能，時間越短越好。

<strong>Average Execute Time</strong>:
每個 Task 個別完成時間的平均值。這個指標，可以用來評估個別 Task 的執行效率，時間越短代表個別 Task 的效能越好。

<strong>Efficiency Rate (%)</strong>:
平行處理帶來的效益提升率 (%)。計算方式是拿 1 cpu 只執行 1 task 的 total execute time 為基準 ( total execute time - base ), 沒有平行處理加持的狀態下，要把所有的 task 跑完，要花的時間是 {total execute time - base} x {total task count}，而實際的時間則是 {total execute time}, 因此 Efficiency Rate = {total execute time - base} x {total task count} / {total execute time} x 100%, 可用來評估該環境多工帶來的整體效率提升率。

指標要怎麼看? 我會從幾個角度來看實驗結果:

如果我想看單線 CODE 執行的速度，比如我想評估 JIT 的效能，或是 -native 參數編譯的差異，那我會看 Total Execute Time 來比較 (越小越好)。如果想排除掉多工排程的影響，那可以看 1 core 的硬體環境的測試結果。

如果我想看多工執行針對多 CPU 最佳化的效果，那我會看 Efficiency Rate。他代表透過平行處理機制，整體效能能提升的百分比(%)。這個指標也是我想做這次測試的原因，我想知道不同 OS 的執行緒管理機制是否有所不同? 因為上一次記憶體管理的測試，讓我有意料之外的結果，即使都是 .NET Core CLR, 記憶體管理的機制竟然會因為底層的 OS 有這麼大的差別... 多工 / 執行緒的管理，一樣是很依賴 OS 的機制，會不會也出現很大的落差?

測試方式先介紹到這裡，接下來就看看實際測試結果了。這次一樣用 VM 來控制執行環境的硬體資源，不同平台通通都用一樣的 PC，開一樣規格的 VM 來比較。測試平台一樣是:
<ol>
	<li>Windows 2012 R2 (server core)</li>
	<li>Windows 2016 TP4 nano server + windows container</li>
	<li>Ubuntu 15.10 + docker</li>
	<li>Boot2Docker 1.9 + docker</li>
	<li>(對照組) 我的 PC，用原生的環境 windows 10 enterprise</li>
</ol>
<ol>
	<li><strong>Boot2Docker</strong>, 使用 Docker Toolbox 提供的 boot2docker.iso, 版本 1.9.1</li>
	<li><strong>Ubuntu 15.10</strong>, 預設安裝 + SSH, 安裝 docker 1.9.1</li>
	<li><strong>Windows 2012R2 Server Core</strong> (直接在上面跑 .NET Core)</li>
	<li><strong>Windows 2016 Tech Preview 4 (Nano)</strong>, 在上面建立 windowsservercore container, 在裡面安裝 .NET Core 的 CoreCLR runtime</li>
	<li><strong>(對照組) 我的 PC, </strong>直接採用 windows 10 enterprise, 沒有經過虛擬化的機制, 執行 x64 版本的 coreclr</li>
</ol>
我自己 PC 的規格 (跟上次一樣):
<ul>
	<li><strong>CPU</strong>: Intel Core i7-2600K ( @ 3.40GHz )</li>
	<li><strong>RAM</strong>: 24GB (DDR3-1600, 4 + 4 + 8 + 8)</li>
	<li><strong>HDD</strong>: Intel SSD 730 (240GB) + Seagate Enterprise Capacity 5TB (ST5000NM0024), 7200 rpm 企業級硬碟</li>
	<li><strong>OS</strong>: Microsoft Windows 10 Enterprise</li>
</ul>
VM 的規格跟上次一樣 (如下)， 不過核心數則會分別用 1 / 2 / 4 / 8 core 分別執行一次測試:
<ul>
	<li><strong>CPU</strong>: 1 / 2 / 4 / 8 core</li>
	<li><strong>RAM</strong>: 1024 MB (dynamic memory was disabled)</li>
	<li><strong>SWAP</strong>: 4096 MB</li>
	<li><strong>HDD</strong>: 32GB (VHDX, attached on IDE controller 0, HDD #1)</li>
	<li><strong>DISPLAY</strong>: 1366 x 768</li>
</ul>
每個平台測試完，會產出一份這樣的數據結果出來 (時間的單位是 ms):
<p id="WhqSVjO"><img class="alignnone size-full wp-image-744 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968d3f83288.png" alt="" /></p>
測試的程式碼如下，我把這次跟上次的 <a href="https://github.com/andrew0928/blog-netcore-cross-platform-test" target="_blank">source code</a> 都放上 github 了，有興趣的朋友可以自己拉一份下來玩玩.. 主程式如下:
<pre class="lang:c# decode:true" title="計算圓周率 測試程式 (CalcPI)" data-url="https://raw.githubusercontent.com/andrew0928/blog-netcore-cross-platform-test/master/CalcPI/Program.cs">// please find the source code at:
// https://github.com/andrew0928/blog-netcore-cross-platform-test/blob/master/CalcPI/Program.cs</pre>
&nbsp;

OK，該說明的都說明完了，來看測試結果:

&nbsp;

&nbsp;
<h1>#1 Windows Server 2012R2 (server core)</h1>
<p id="cmZUGGC"><img class="alignnone size-full wp-image-747 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968ead5dbc6.png" alt="" /></p>
密密麻麻的數字，應該沒啥人想看吧 XD，我直接貼圖表好了。不過圖表好幾個，有些沒代表性的我用 2012R2 當代表貼一次就好。第一張圖是看看平行處理在多核心的狀況下有沒有發揮效果?

&nbsp;
<p id="nPUdsdm"><img class="alignnone size-full wp-image-757 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697bf0537be2.png" alt="" /></p>
這圖表的 Y 軸代表執行時間，X 軸分為四區，分別代表 1 2 4 8 個核心的執行狀況。而每區的每種顏色，則代表執行 1 2 4 8 次計算。我先掠過 16 32 64 次的數據，這樣關係看得比較清楚。可以看到 1 core 的狀況下，計算次數加倍，時間就會加倍，但是隨著 core 數量的增加，total execute time 在 core 數還沒用盡時的測試結果，幾乎是一樣的..。

&nbsp;
<p id="XyTOYQS"><img class="alignnone size-full wp-image-760 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c15611c7e.png" alt="" /></p>
這圖代表 average execute time 的變化關係。跟 total execute time 的關係類似，隨著 core 數量的增加，average execute time 的增加幅度就趨緩了，代表 thread pool 其實是有效的在控制 threads 總數，沒有讓過多的 threads 在系統內執行，避免沒有提升整體效能，還造成額外的負擔的狀況。
<p id="qXMpkom"><img class="alignnone size-full wp-image-758 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c01884e41.png" alt="" /></p>
接著看看 efficiency-rate, 一樣如預期，隨著 core 數量的增加，效率提升大體上也跟 core 數量呈正比。我的設備是 i7-2600k, 是個 4core / 8 thread 架構的 CPU，可以看到在 4 core 時的效率提升還成比例，但是增加到 8 core 時的進步就沒有那麼明顯了，可見 cpu core 跟 cpu thread 的作用還是有差別的。intel 的 <a href="http://www.intel.com/content/www/us/en/architecture-and-technology/hyper-threading/hyper-threading-technology.html" target="_blank">hyper-threading 技術</a>，有興趣的就看官方說明吧.. 這邊跳過。

每個平台的這幾張圖表，模式都類似，我就貼數據就好，圖表略過。最後綜合比較時再拿出來交叉比對..

&nbsp;

&nbsp;
<h1>#2 Windows Server 2016 Tech Preview 4 (nano server)</h1>
<p id="iVNSJze"><img class="alignnone size-full wp-image-748 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968eee469c0.png" alt="" /></p>
&nbsp;

&nbsp;
<h1>#3 Ubuntu Server 15.10 + Docker (image: microsoft/dotnet)</h1>
<p id="bhkLZQJ"><img class="alignnone size-full wp-image-753 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56969885d1767.png" alt="" /></p>
&nbsp;

&nbsp;
<h1>#4 Boot2Docker 1.9 + Docker (image: microsoft/dotnet)</h1>
<p id="JNKbdDF"><img class="alignnone size-full wp-image-750 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968f4a5c0ba.png" alt="" /></p>
&nbsp;

&nbsp;
<h1>#5 (對照組, 純參考用) 我的PC, Windows 10 Enterprise</h1>
<p id="MGSUyNl"><img class="alignnone size-full wp-image-751 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_56968fad5bee3.png" alt="" /></p>
附帶一提，單純當作對照組。因為是實體機器，我沒辦法關掉其中幾個 core XD, 因此這組數據只有 8 core 這區 (嚴格的來說是 4 core 8 thread .. XD)

&nbsp;

&nbsp;
<h1>綜合比較 - Total Execute Time</h1>
我本來還期望不同平台，除了看到效能差距之外，會看到有不同的 patterns 出現，看來這邊沒有意外發生 XD，不過效能的差距還是有的，這次我把四個平台數據擺在一起看。
<p id="bvKjqEa"><img class="alignnone size-full wp-image-762 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c39e4b005.png" alt="" /></p>
數據繁多，我就挑關鍵的部分來看了。我針對 64 次計算的數據，把每個平台跟核心的組合列在一起看:
<p id="hXmxmCQ"><img class="alignnone size-full wp-image-763 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c3e869f9c.png" alt="" /></p>
有點意思的結果，跟之前 memory test 的結果有點出入，.NET core 在 windows 平台上的最佳化果然還是有優勢的，除了 1 core 環境下，最輕量的 boot2docker 速度最快之外，其他環境下都是 windows 家族領先。

原本我最不看好的 windows server 2016 tech preview 4, 想說他還在 TP 而已，應該都還沒最佳化... 結果沒想到 1 / 2 core 時效能還排最後，但是到 4 / 8 core 時，效能馬上竄到第一名... 看來 Microsoft 不知在甚麼細節上的最佳化下了功夫，表現亮眼，正式版值得期待~ 想要跑得快的話，挑 windows server 2016 是比較好的選擇!

&nbsp;

&nbsp;
<h1>綜合比較 - Average Execute Time</h1>
<p id="XLNjfbo"><img class="alignnone size-full wp-image-764 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c57aa738a.png" alt="" /></p>
<p id="LYuwtbE"><img class="alignnone size-full wp-image-765 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c596917c0.png" alt="" /></p>
接著是 average execute time 的比較，一樣，圖表我只留下 64 次計算的結果。結果跟 total execute time 類似，運算速度還是 windows server 家族維持領先。很意外的是，Ubuntu 在這部分的表現敬陪末座，原本想說 linux 極度輕量化的環境，跑起來應該會比 windows server 輕快許多，結果不是如此。一方面 .NET core 在自家的 windows server 最佳化做的最好之外，我想 2016 nano server 極度的輕量化之後，在這邊也看到效果了，不但拚過 ubuntu 預設安裝，連 boot2docker 這種 boot cd 只有 20mb 的 linux 都拚贏了，真是不簡單 (Y)

&nbsp;

&nbsp;
<h1>綜合比較 - Efficiency Rate</h1>
<p id="IXbzUsL"><img class="alignnone size-full wp-image-766 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c755b02c8.png" alt="" /></p>
<p id="XJWAcwe"><img class="alignnone size-full wp-image-767 " src="http://columns.chicken-house.net/wp-content/uploads/2016/01/img_5697c76a62687.png" alt="" /></p>
最後一張，其實也沒什麼好比的了 XD，一樣是 windows 2016 獲勝。531% 的效率改善，遙遙領先第二名的 windows 2012 470% ! 不過，我想這個除了最佳化做的好之外，跟 windows 2016 在 1 core 環境下的表現最糟，一增一減下來，進步的比例就放大了，應該也有關係吧!

&nbsp;

&nbsp;
<h1>結論</h1>
既然評比的結果一面倒，那也沒啥好講了。如果你很講究運算的效能，又很愛用 C# 開發程式的話，那挑選 windows server 家族準沒錯。由實驗結果看來，.NET core 還是在 windows 平台上表現較佳。我想這是 microsoft 對 windows binary 掌握程度遠高於 linux 的關係吧? 畢竟這測試完全取決於 JIT / native compiler 的效果。而對 threads 的管理，我相信也同樣的 windows 會戰有更大的優勢，這些都可以從 execute time, 還有 efficiency rate 的數據得到證明

不過雖說如此，平台的決定不是只看效能一件事，其他管理跟維護的成本也別忽略了，畢竟表現最好的 2016 跟 ubuntu 的差距，也只有 10.4% 而已，說大不大，一班情況下的差異也不容易感覺得出來.. 其他工具、系統相容性、以及系統維護成本才是主要考量的地方。

&nbsp;

兩類我想做的測試，都完成了。下一篇就最後一篇了，我會整理一下這次研究過程中，其他瑣碎的心得~ 其實這次這樣研究下來很累人的，要不是測試要控制環境，我一定是選擇在 Azure 上面部屬這些環境，省事多了... 下一篇產出的速度，看看 1/16 開票的結果吧! 要是心情好的話，這週就會生出下一篇了 XD]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>739</wp:post_id>
		<wp:post_date><![CDATA[2016-01-15 01:22:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-14 17:22:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dnxcore50_05_compute_pi_test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[740]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[敗家] 對岸的迷你 PC (i5-5250U), 當自用 server 的好選擇</title>
		<link>http://columns.chicken-house.net/2016/02/07/buy_minipc_server/</link>
		<pubDate>Sun, 07 Feb 2016 06:06:40 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=790</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<a href="http://reader.roodo.com/farfang/archives/7965199.html"><img class="alignleft" src="http://blog.roodo.com/farfang/9a14d796.jpg" alt="圖片來源: 敗家鬼附身~~" width="188" height="188" /></a>

說到個人用的 server, 我是相當有經驗的 XD，從當年念大學開始，就開始把 PC 開著放宿舍連回去或是給同學用，這習慣一直到現在都有，只是設備從自己用的 PC，換到<a href="/2008/05/12/next-ten-years/" target="_blank">準備專用的 PC SERVER</a>，再到 NAS .. 不過自從開始認真研究 docker, 加上想用 docker 認真的執行一些服務後 (例如這個 BLOG 用的 wordpress), NAS 貧弱的效能問題就被凸顯出來，所以前幾個月才<a href="/2015/10/24/終於搞定-ubuntu-server-15-10/" target="_blank">弄了台要被報廢的 NoteBook 當作 Linux Server</a>.. NB 當 server 有很多好處，但是畢竟不是長久之計，而這台 NB 的 CPU 也不怎麼樣，將來也是個瓶頸，於是就一直有在物色其他適合的替代方案，反正沒有立即的需求，就騎驢找馬有空就看看，直到....

&nbsp;

<!--more-->

我基本的需求很簡單，基本上已經不考慮過去 PC 的路線了，大台 PC 太佔空間，加上我已經沒有裝很多顆 HDD 的需求 (已經有 NAS)，只要一台體積小、夠省電、安靜、運算能力跟擴充能力夠水準 (當然要便宜) 的機器就可以了。自從 Intel 推出 <a href="http://www.intel.com/content/www/us/en/nuc/overview.html" target="_blank">NUC</a> 這玩意之後，國內各 PC 廠也都有對應的產品，不過一來 $$ 我覺得還不夠便宜，二來規格也都還沒到我期望的水準 (大部分都是 atom / celeron / i3 等級, 1 slot memory, 1 LAN 或是只有 WiFi), 就一直沒有動作..

&nbsp;
<h2>需求規格:</h2>
<a href="http://columns.chicken-house.net/wp-content/uploads/2016/02/DC3217IYE-21.jpg" rel="attachment wp-att-799"><img class="wp-image-799 alignright" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/DC3217IYE-21.jpg" alt="DC3217IYE-2[1]" width="339" height="339" /></a>在規格上，因為我的目的是當 server, 因此對於 GPU 或是 USB 的數量並不是很在意，WiFi 的規格也是可有可無。這部分頂多加一點分數，要是我後悔還可以拿來當桌機用而已。我在意的規格有這幾個:
<ul>
	<li>省電: 電費很貴 T_T，同時塞在機櫃裡太耗電也很麻煩，能用 NB 或平板等級的零件最理想</li>
	<li>CPU: 最好是 i5 的等級就好。 Mobile 級別的 i7 跟 i5 一樣，只有 2 core / 4 thread, 好像沒什麼必要</li>
	<li>RAM: 最好是能擴充到 CPU 支援上限，能用雙通道最好.. Server 用的 RAM 永遠不嫌多</li>
	<li>HDD: 這個能支援 2.5" HDD 就夠了，Server 不大在意重開機速度，也不大在意 APP 啟動速度.. msata / m2 介面不是很重要</li>
	<li>LAN: 必要，而且一定要支援 Giga LAN, 如果能有 2 ports 就更好了</li>
</ul>
&nbsp;

其他就當作加分，如果用的滿意可以再加購一台當 Desktop PC, 或是將來退下來當作 HTPC 用的話，那這些次要規格也是我考量的:
<ul>
	<li>HDD: 要能支援 HDD + SSD, 有兩個 SATA port, 或是 1 SATA port + mSATA / M2 介面都可以</li>
	<li>USB 3.0 / port 數目越多越好 (至少前後各 2 個以上)</li>
	<li>WiFi / Bluetooth</li>
	<li>HDMI x 2, 或是其他介面的 "DIGITAL" video output</li>
</ul>
&nbsp;

&nbsp;
<h2>鎖定敗家目標</h2>
無奈，這些規格撒下去，NUC 等級的全部被排除了 T_T，一台符合的都沒有。我開始把條件放寬到 mini PC, 訪間很多 mini ITX 的組合。不過這種大都是 Case + 主機板要自己挑選，體積 / 耗電量 / 價格壓不大下來，整組大概都要超過一萬以上.. 直到無意間看到 <a href="http://www.mobile01.com/topicdetail.php?f=513&amp;t=4554011&amp;p=17" target="_blank">mobile01 上面有人再討論對岸的迷你 PC</a> ...

Bingo, 這就是我要的規格啊... 不過我不是很想替這產品代言，只是單純分享心得，加上實際購物的體驗不是很好，我就不附連結了，用貼圖代替。老實說對岸對於 cost down 這件事真的很猛，真的是極盡所能的壓低價格... 大概就只有這台能在我期望的價格帶內符合我的需求了

<img class="wp-image-809 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c863756d6.png" alt="" width="319" height="244" />以下是我買的這台 mini PC 內部規格:
<ul>
	<li>CPU: i5-5250U</li>
	<li>RAM: 2 slots (DDR3 低電壓)</li>
	<li>SATA x 1</li>
	<li>mSATA x 2</li>
	<li>mini-pcie x 2 (半高 x 1, 全高 x 1)</li>
	<li>無風扇，超靜音。整個外殼是全鋁製成的 (蠻厚重的，約 5 mm)，整個外殼就是 CPU 的散熱器</li>
	<li>WIFI 天線 x 2</li>
	<li>包含一張 DELL 1703 (wifi + bluetooth) mini-pcie 卡</li>
</ul>
&nbsp;

&nbsp;

&nbsp;

<img class=" wp-image-808 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c83098513.png" alt="" width="319" height="458" />

&nbsp;

外部的接頭也很豐富，真的是你想的到的都有了:
<ul>
	<li>USB 3.0 x 4 (前)</li>
	<li>USB 2.0 x 4 (後)</li>
	<li>1GB LAN x 2 (後)</li>
	<li>HDMI x 2 (後)</li>
	<li>SD Reader (前)</li>
	<li>SPDIF (前)</li>
	<li>MIC / SPK (前)</li>
</ul>
而這整套，連同寄到台灣的運費，還有匯款的手續費等等，我總共花了 NTD $6100 左右，東西就到我手上了... 我買的是空機，HDD 跟 RAM 我自己準備就好了，這些台灣沒有比較貴，而且保固跟品質比較有保障，對岸買的東西什麼都要小心有地雷... (事實證明果然有地雷 =_=，後面會提到)

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2>使用心得:</h2>
其實用起來跟一般 PC / NB 沒什麼不同，因為... 他骨子裡用的零件根本就一樣啊，只是最關鍵的主機板，看不到廠牌，沒有官方 BIOS 更新，沒有技術支援，沒有官方 DRIVER 下載，沒有說明，一切都得靠自己.. 買這種白牌的大陸 3C 產品一定要有這種認知...

首先要大推一下 "無風扇" 這項設計。電子的東西其實不大會壞掉，會壞的大概都是有機械會動的部分。例如會轉的硬碟機、光碟機，還有風扇用了一兩年可能會卡住或是沒油了。另外風扇也像個吸塵器，會把灰塵都吸進機器卡在散熱片上，不定期清理的話大概就會過熱當機。這時無風扇的機種就很有用了，如果你也用 SSD 的話，那就整台 PC 真的完全沒有馬達了，不但超靜音，也不用擔心灰塵問題... 對我這種想要丟進櫃子開機後就再也不管他的懶人來說，再適合不過了。

BIOS 是 AMI 的系統，跟一般常看到的沒啥不同。不過跟 ASUS 等這種大廠比起來，UX 的優化是完全沒有必要的 =_=，我本來還擔心 BIOS 都沒得設定那怎麼辦? 事實證明我想太多，BIOS 大概有幾百項設定給你選，我看 AMI 所有提供的公版 options 都被開出來了，等於主機板廠商沒做任何調教最佳化就出貨了.. 好處是你要改啥都可以改，缺點是這堆選項都看不懂，大概只有從事相關產業的工程師才搞得懂每一項的內容吧.. 看評價還有人改到開不了機，也沒辦法改回來，Clear CMOS 也沒用，只好退貨，Orz..

之後安裝 OS 就沒啥大問題了，做個 WIN10 的 USB 開機隨身碟就搞定了，開機 BIOS 的快速鍵則是自己爬文找來的 (進 BIOS 要按 &lt;DEL&gt;，選擇 Boot Device 要按 &lt;F11&gt;)，留意一下 USB 3.0 開機安裝有點問題，換成 USB 2.0 就過了。另外裝 Win10 的過程有點挑 USB 隨身碟，我拿兩支研討會的贈品，一個 8GB 一個 16GB，最後測試一個可以開機，一個不行...

裝好後一切正常，至於驅動程式就各憑本事了... (到現在我還是不知道這板子用哪一個晶片組? @@)，這部分我就直接跳過，我相信我這篇有耐性看到這裡的讀者們，應該都搞的定 driver 問題才對 XD

[caption id="attachment_814" align="aligncenter" width="644"]<img class="wp-image-814 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6cb8da6695.png" alt="" width="644" height="438" /> <em>裝置管理員的資訊，主機的關鍵元件應該都列在上面了吧~</em>[/caption]

&nbsp;

比較特別的是，這機器用的是中階的 i5-5250U CPU, 而設計上則是完全無風扇的設計，只靠全鋁的機殼散熱，因此我就特別測試了一下... 我找了現成的工具 (CPU-Z Stress CPU 功能) 讓 CPU 長時間 (2hr) 維持 100% 滿載, CPU 溫度則是維持在 58 度左右就不會在上升了。看對岸網友的評語，有人竟然可以用到 85 度然後強迫斷電 @@，大概是我只操到 CPU 沒操到 GPU 的關係吧? 這狀況當 SERVER 用大概碰不到，大概只有當桌機拿去玩 3D Game 才有機會.. 有人自己土炮 DIY，在全鋁的機殼外掛一個 USB 的風扇，據說效果非常好... 這個參考就好..

&nbsp;

[caption id="attachment_810" align="aligncenter" width="544"]<img class="wp-image-810 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9a525243.png" alt="" width="544" height="690" /> <em>剛開機的運作溫度</em>[/caption]

&nbsp;

[caption id="attachment_811" align="aligncenter" width="559"]<img class="wp-image-811 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b6c9ee79426.png" alt="" width="559" height="637" /> <em>CPU-Z 壓測 2 小時候的運作狀況</em>[/caption]

&nbsp;

其他也沒什麼好測的，HDMI 輸出正常，不過兩個 HDMI 只有一個會輸出聲音，另一個沒有。LAN 是螃蟹卡 (Realtek) ，雖然不是我期望的 Intel LAN, 不過這價格的東西就不挑剔了。網卡在 OS 裝完就可以驅動了，省了不少麻煩。隨機搭售的 WIFI / BT 也是一樣，OS 本身就可以驅動... 其他的使用上中規中矩，我只是裝個 windows 10 enterprise 來測看看，畢竟 desktop OS 的 driver 支援是最齊全的，我的目的也只在這裡而已，測完後就可以砍了。

跑分軟體賽豬公我想就可以免了，這年頭用一樣的 CPU / Chipset, 跑出來的落差都不會差很多，對我來說穩定度跟組態還比較重要，對效能有疑慮的讀者們，直接查查這顆 CPU 的 Benchmark 就可以了..

&nbsp;

&nbsp;
<h2>敗家過程:</h2>
接下來就是過去這兩週的血淚史了，如果看了我的文章有被勸敗到，這段一定要先看完再決定... (對，dark****** 就是寫給你看的 XD)。首先，這個價格，整台大約合 USD $200 左右，可是光是<a href="http://ark.intel.com/zh-tw/products/84984/Intel-Core-i5-5250U-Processor-3M-Cache-up-to-2_70-GHz" target="_blank"> Intel i5-5250U 官方資料</a>，建議售價一顆就要 USD $315, 晶片組我實在看不出來，假設<a href="http://ark.intel.com/zh-tw/products/75525/Intel-DH82QM87-PCH" target="_blank">是 QM87 好了，官方網站的建議售價</a>也要 USD $48，兩個加起來就 315 + 48 = 363，台幣就已經破萬元了。這也差太多.. 果然羊毛出在羊身上，價格會壓這麼低是有原因的，其中有好幾個地雷要閃過。<a href="http://www.mobile01.com/topicdetail.php?f=513&amp;t=4648833&amp;p=8#59063625" target="_blank">在 mobile01 上也有人分享類似經驗</a>，以下是我自己的親身體驗:

&nbsp;

<span style="text-decoration: underline;"><strong>地雷 #1. 主機板 QC 問題:</strong></span>

主機板上有內建一個 SATA port, 想當然爾，當然是拿來接 2.5" HDD，不過怎麼測都偵測不到.. 我想的到的方法都測了，就是沒用... 爬了文發現有網友也碰到一樣問題，賣家是附了張 msata &gt; sata 的轉卡給他才解決... Orz, 我最後是自己花了 NTD $100 買了張轉卡回來，解決這問題.... 在 mobile01 上爬文，發現有這種狀況的網友還真不少，這命中率已經高到看來像是通例，而不是特例了。還好我挑的是擴充性高的板子，還有剩下兩個 mSATA 都能正常使用，將來還夠我用 HDD + SSD 的組合...

&nbsp;

[caption id="attachment_819" align="aligncenter" width="835"]<img class=" wp-image-819" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b75082a9db7.png" alt="" width="835" height="388" /> <em>另外花了 NTD $100 買來的 mSATA 轉 SATA 轉卡</em>[/caption]

&nbsp;

[caption id="attachment_822" align="alignnone" width="875"]<img class="wp-image-822 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b751361543d.png" alt="" width="875" height="490" /> <em>完成圖... 自己土炮的 SATA Power, 加上 mSATA &gt; SATA 轉卡, 終於搞定把 2.5" HDD 接上線啟動的任務..</em>[/caption]

&nbsp;

合理推斷這應該是生產線 QC 不過，被打下來的料件，便宜出清才能壓到這麼低的價格吧! 一來這是新品，不是拆機用過的二手零件，能累積這麼多 QC 不過的產品也不是件容易的事 XD，CPU 都焊在板子上，也不能拆下來更換了，看來除了便宜出清也沒別的選擇了...

&nbsp;

<span style="text-decoration: underline;"><strong>地雷 #2. CPU 會用 Engineer Sample 充數</strong></span>

這是爬文就發現到的問題，很多人都反映買來拿到的 CPU 是工程樣板 (Engineer Sample) 版本的 CPU... ES CPU 就跟 Beta 版軟體一樣，是給硬體廠商先期的測試版本。通常 ES 版的 CPU 比較便宜，也不鎖頻，所以有些玩家反而愛用。但是我是不玩這套的，給我正規的 CPU 比較重要。Mobile 版的 CPU 封裝是要直接焊在主機板上，也沒機會替換了，所以這我事先就跟賣家溝通過，他也願意配合說會挑一台非 ES 版的給我.. 介意的朋友請記得.. 據說有的賣家如果出 ES 版本，會主動幫你升高一級的 CPU，值不值得就各位自行判斷了..

&nbsp;

<span style="text-decoration: underline;"><strong>地雷 #3. 無線網卡規格偷料</strong></span>

一樣是爬文看到的，我自己也碰到了 @@，賣家官方宣稱送的無線網卡是 300M, 不含藍芽... 對應的技術應該是 802.11n 2T2R 才有這種速度.. 我問了賣家能不能升級為 WiFi + BT 的? 還真的有耶，說只要加 RMB $10 就可以了，花個銅板可以省下將來的問題當然划算，於是最後我拿到的是 Dell 1703.802 這張網卡...

看了一下，是 <a href="https://wikidevi.com/wiki/Atheros" target="_blank">Atheros 的晶片 (AR9004WB-1NG)</a>，規格是 802.11b/g/n, 1T1R, 看來我也被唬了, 這是 150Mbps 的規格.. XD, 不過我對無線的網路速度本來就沒有很要求，除了買到的東西跟賣家宣稱規格有落差，心裡有點 OOXX 之外，實質上倒是沒有什麼影響.. <a href="/2007/09/14/%E6%B0%B4%E9%9B%BB%E5%B7%A5%E6%97%A5%E8%AA%8C-2-%E8%B3%87%E8%A8%8A%E6%8F%92%E5%BA%A7-%E9%9D%A2%E6%9D%BF/" target="_blank">我家到處都有 LAN port 啊</a>，我用 LAN 還比較高興 XD, 真的需要用無線的話，建議各位上網買張 <a href="http://ark.intel.com/zh-tw/products/75439/Intel-Dual-Band-Wireless-AC-7260" target="_blank">intel dual band wireless-ac 7260</a> 的無線網卡吧，支援 ac, 也支援 bluetooth 4.0, 一次到位省得麻煩...

&nbsp;

<span style="text-decoration: underline;"><strong>地雷 #4. 服務品質及店家保固</strong></span>

主機板上有提供一個 SATA 電源接頭，讓你接 2.5" HDD 用的。不過這接頭規格挺特殊的，主機板上的接頭用的規格是類似顯卡用的風扇電源那種小接頭，而另一頭則是標準的 SATA 硬碟電源。但是，賣家忘了附給我了 =_=，搞半天我收到機器沒得用... 後來賣家說他會寄給另一位台灣的買家 (耶? 你有在看我的部落格嗎? XD)，再請他寄掛號給我... 結果我等了一個禮拜還沒收到, Orz.. 還好我早就沒打算等, 自己去光華買了零件，十幾塊錢就解決這問題，土炮了一條電源線來用，解決這個問題

&nbsp;

以上是我踩到的地雷，經過這番折騰，我現在終於可以正常的使用這台 mini-PC 了，撇開這些問題不談，CP 值真的是蠻高的，算是超值的選擇。不過因為有這些問題存在，我還真的不推薦大家去買來用，除非你有跟我一樣的耐性去解決這些 issues ...

不過, 以上這些其實是店家跟商品本身的問題。這次同時也是我第一次用淘寶購物的初體驗，以跨國網路購物來說，淘寶這部分做的真不錯，要推一下.. 不過同時我也為台灣的電子商務擔心啊..

&nbsp;

<span style="text-decoration: underline;"><strong>好雷 #1. 付款方便</strong></span>

我終究還是對對岸存在不信任感，要我先把 $$ 存到支付寶，或是輸入信用卡卡號，那是不可能的.. 所以付款方式我用支付寶 + 玉山銀行提供的方案，購買後玉山銀行會給我一次性的轉帳帳號，我直接轉台幣到這個帳號內 (+ NTD $60 的手續費) 就可以了，剩下的就是正常淘寶付費流程..

&nbsp;

<span style="text-decoration: underline;"><strong>好雷 #2. 物流快速，追蹤精準</strong></span>

這次用順豐，由於超過 1KG，因此運費往上跳一級，要 RMB $60.. 不過淘寶跟物流的追蹤系統整合的真不錯， PCHOME / RUTEN 這點就被比下去了.. 跨國購物的物流追蹤做的很清楚，而且只花了兩天半就送到我手上.. 運費其實也沒比台灣本島貴多少，台灣本島陸運就會到，這個則是要搭飛機才會到..

&nbsp;

<span style="text-decoration: underline;"><strong>好雷 #3. APP 支援冷門的 windows phone ~~</strong></span>

這純粹是個人喜好問題 XD，淘寶整個購物流程，從逛商城，到訂購後的物流追蹤，及跟賣家的 Instance Messenger 等等，都有 APP 可以用，而且還支援我冷門的 Windows Phone 8.1 ... 連同 windows 10 的 UWP 也有..

[caption id="attachment_824" align="alignnone" width="1022"]<img class="wp-image-824 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7550d10cbe.png" alt="" width="1022" height="983" /> <em>淘寶 Windows Phone / Windows 10 APP ~</em>[/caption]

&nbsp;

最後，這篇就是勸敗文 + 敗家心得而已，沒什麼技術探討 XD，特此紀錄我的經驗給大家參考~

&nbsp;

&nbsp;

&nbsp;

<hr />

&nbsp;

後記:

另外意外發現一款比較特別的 mini-pc, 有內建 Intel 82583v LAN x 4, 適合拿來跑 router / nat 之類的應用:
<p id="LmuOEgW"><a href="http://tw.taobao.com/item/525443552349.htm?spm=a1z3o.7406521.101.31.wTCcoi&amp;abtest=_AB-LR492-LR501-LR517-LR895-PR492-PR501-PV517_2373-PV895_2462&amp;tracelog=sns_share_urlshare"><img class="alignnone wp-image-827 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56b7ec0d66a42.png" alt="" width="999" height="659" /></a></p>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>790</wp:post_id>
		<wp:post_date><![CDATA[2016-02-07 14:06:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-07 06:06:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[buy_minipc_server]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="buy"><![CDATA[敗家]]></category>
		<category domain="category" nicename="543"><![CDATA[有的沒的]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d0ca6d64ca6561303f06eb4fcccdb3d6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[800]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c6f710043731f685baa886da48b9effc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] &quot;授權碼&quot; 如何實作? #1, 需求與問題</title>
		<link>http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/</link>
		<pubDate>Tue, 16 Feb 2016 17:45:04 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=833</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_852" align="aligncenter" width="720"]<a href="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c431d4ac75a-e1455698460913.png" rel="attachment wp-att-852"><img class="wp-image-852 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c431d4ac75a-e1455698460913.png" alt="img_56c431d4ac75a" width="720" height="320" /></a> <em>- The Architect, The Source (電影: The Matrix 3)</em>[/caption]

&nbsp;

好久沒寫 [設計案例] 這系列的文章了。其實我一直注意到台灣的部落格 &amp; 社群分享，講 "How To" 的遠多過講 "Why" ，過於注重 coding 的技巧，卻忽略了問題的思考。能挑選正確的技術與架構來解決 business 上碰到的問題，這才是 software / system architect 的核心能力啊... 這次我碰到適合的案例，就來補給篇文章吧，我想從我如何思考這問題的 solution, 到如何實作出解決方案的過程，從頭到尾交待一次，讓有興趣在軟體業走進 system architect 這角色的讀者們，有個可以參考的案例!

<!--more-->

這次的主題我想探討 "網站授權" 及 "API KEY" 這東西的實作。授權機制需要單靠一段字串或是號碼，就能讓軟體能判斷客戶或是使用者被授權使用那些功能? 這些機制不影響功能，但是會影響你的服務夠不夠安全。往往大家的注意焦點都會在 "你用了什麼加密技術? 夠不夠安全? 會不會被破解?" 這些技術規格的問題上，但是卻很少看到這類問題的架構及實作。我實際上碰到的狀況是，往往很多工程師對於 security 的領域知識不夠了解，因此在架構上沒處理好，但是因為正常狀況下這些 security 相關的機制也不會影響功能的正常使用，往往在真的爆出資安事件時才會被拿出來檢討...。然而 security 這類的問題處理起來就是很煩人，若不花點心思在程式碼的結構上，很容易就寫出義大利麵條式的程式碼出來...。我想把自己實作的經驗拿出來，讓各位讀者們參考一下，我認為理想的架構如何解決這類問題? 於是就有了想寫這系列文章的念頭。

&nbsp;

<hr />

本文開始前，先替我的就文章打個廣告，對這系列文章有興趣的，過去也有幾篇類似主題的文章可以參考:

<a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank"><span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. </a><a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">#2. </a><a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
#3. </a><a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章
</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">#3. </a><a href="http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/" target="_blank">(補) - 金鑰的保護</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>

<span style="text-decoration: underline;"><strong>[設計案例] 清除Cache物件, 2009/12
</strong></span>#1. <a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">問題與作法
</a>#2. <a href="/2009/12/19/設計案例-清除cache物件-2-create-custom-cachedependency/" target="_blank">Create Custom CacheDependency</a>

<span style="text-decoration: underline;"><strong>[設計案例] 生命遊戲, 2009/09</strong></span>
#1, <a href="/2009/09/12/設計案例-生命遊戲1-前言/" target="_blank">前言
</a>#2,<a href="/2009/09/12/設計案例-生命遊戲1-前言/" target="_blank"> OOP版的範例程式
</a>#3,<a href="/2009/09/12/設計案例-生命遊戲1-前言/" target="_blank"> 時序的控制
</a>#4,<a href="/2009/09/12/設計案例-生命遊戲1-前言/" target="_blank"> 有效率的使用執行緒
</a>#5, <a href="http://columns.chicken-house.net/2009/09/24/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-5-%e4%b8%ad%e5%a0%b4%e4%bc%91%e6%81%af/" target="_blank">中場休息
</a>#6,<a href="http://columns.chicken-house.net/2009/09/24/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-5-%e4%b8%ad%e5%a0%b4%e4%bc%91%e6%81%af/" target="_blank"> 抽像化 (Abstraction)
</a>#7, <a href="http://columns.chicken-house.net/2009/10/06/%e8%a8%ad%e8%a8%88%e6%a1%88%e4%be%8b-%e7%94%9f%e5%91%bd%e9%81%8a%e6%88%b2-7-%e5%a4%9a%e5%9e%8b-polymorphism/" target="_blank">多型 (Polymorphism)</a>

<hr />

&nbsp;
<h2>[本文開始]</h2>
<p id="wGsNwqN"><img class=" wp-image-845 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c350dc74e6a.png" alt="" width="836" height="470" /></p>
我直接舉一個具體的情境，來描述要解決的問題。這個案例裡我把 "授權碼" 運用到網站的安裝上。我在公司開發的是商用系統，提供客戶 Install Based 的佈署模式，把系統安裝在客戶的 Data Center 內。以上圖為例，Service #B 及 Service #C 分別裝在不同客戶的 Data Center 內，而我們自行維護的 Cloud Service 則分別授權不同的功能給 Service #B 及 Service #C 呼叫 API 使用。這架構下碰到的問題是，無法保證能隨時連上 Internet，當然無法連上 Internet 就無法呼叫 Service #A 這些 Cloud Service，但是即使如此，授權的功能仍然要能發揮功效，無法被客戶的 IT 或是系統整合廠商的夥伴，未經過 Service Administrator 的許可就啟用。

&nbsp;

如果把這些需求列成 Story, 那麼看起來會像這樣:
<ol>
	<li><strong>網站授權的需求</strong>:
Server #B 或是 Server #C 上的功能及授權的使用期限，必須取得 Service Administrator (就是我們公司啦) 的授權才能啟用。然而 Service #B 及 Service #C 使用的是同一套系統，同一套程式碼，因此授權的啟用必須仰賴設定檔。然而除了原廠 (我們) 與客戶之外，中間還有系統整合廠商，會協助做整合或是客製化等等任務，他們必須熟悉這些設定的調整方式，因此必須找個能夠阻擋技術人員 (懂得 configuration 及 coding) 未經授權就能啟用功能的方法。</li>
	<li><strong>API KEY 機制的需求</strong>:
同樣的，Service #B 若要呼叫 Service #A 的 API，呼叫及傳輸過程必須有 API KEY 的機制保護，同時也一樣要取得原廠的授權才能啟用。Service #A 必須只檢查 API KEY 就要決定開放那些功能給 Service #B 呼叫。</li>
	<li><strong>授權期限的需求</strong>:
這一切都必須在封閉網路內能夠實現。某些組態下，甚至連 Service #A 也會搬到 Intranet 內，因此也無法在第一時間連回原廠的 server 做各種授權的驗證。這時授權的機制仍然必須正常運作，同時每次原廠發給授權必須配合服務合約，合約到期後授權必須中止，簽訂新的服務合約之後重新更換新的授權，才能恢復運作。</li>
	<li><strong>安全強度的需求</strong>:
以上的安全機制，必須有一定水準的強度。防護的對象，可能包含熟悉架構的工程師，因此最好能用可靠的演算法或是加密的保護，即使是技術人員，沒有取得金鑰的情況下是沒有辦法突破這些防護的。</li>
	<li><strong>擴充機制的需求</strong>:
這個機制必須容易擴充授權的功能，將來新增新的授權項目，或是新的服務，要能讓系統開發人員 (developer) 能輕易的沿用同樣的基礎架構，保護新的服務授權機制。</li>
</ol>
&nbsp;

這些問題在技術上其實都不難解決，難的地方在於如何正確的使用業界的標準技術。其實要是你搞得懂對稱及非對稱加解密的運作原理，還有加密及數位簽章各是要解決什麼問題，這篇文章碰到的問題就解決一半了。剩下的另一半是什麼? 就是你的實作及封裝，是否符合開發人員 (developer) 的期待? 這邊提一下一個新名詞: DX (developer experience)，開發者體驗。什麼是 DX ? 可以看看<a href="http://nordicapis.com/why-api-developer-experience-matters-more-than-ever/" target="_blank">這篇文章</a>的說明，我節錄其中一段:

<hr />

&nbsp;

<img class="alignleft" src="http://nordicapis.com/wp-content/uploads/Why-API-Developer-Experience-Matters-web.jpg" alt="" width="174" height="179" />
<h2 id="whatisdeveloperexperience"><em>What Is Developer Experience?</em></h2>
<em>First, let’s look at <strong>user experience</strong> (UX) in general. UX considers the overall experience a person has with a mobile app or website. This attitude can be positive or negative given the value and ease of human-computer interactions.</em>

<em>Developer experience is an extension of UX that focuses on the developer, who can either be the intermediary or, as is the case <a href="http://nordicapis.com/designing-apis-humans/">with many APIs, the end user</a>. Whether or not you focus on DX design, your developers are always experiencing your API, and that experience may either be positive or negative.</em>

&nbsp;

<hr />

&nbsp;

DX 就跟 UX 一樣，為了讓使用者有更好的體驗。只是 DX 的 "使用者" 特別針對 Developer, 而非一般的使用者而已。API 能不能 Work, 跟 API 用的開不開心，是完全不同的兩回事，如何善用 OOP 的觀念，把這些問題寫成 CODE，如何善用 C# 的語法特性，能漂亮的實作這個架構，則是我另外一個想探討的主題。單純探討技術或語法感覺會像打高空一樣不切實際，所以就挑了個我最近碰到的實作案例來探討。

&nbsp;

下回預告: #2, 序列化

<span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. <a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>#2. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a>
#3. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章</a>

&nbsp;

參考文章:

<a href="https://uxmag.com/articles/effective-developer-experience" target="_blank">Effective Developer Experience (DX)
</a><a href="http://blog.hellosign.com/the-rise-of-developer-experience/" target="_blank">APIs for Humans: The Rise of Developer Experience (DX)
</a><a href="http://nordicapis.com/why-api-developer-experience-matters-more-than-ever/" target="_blank">Why API Developer Experience Matters More Than Ever</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>833</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 01:45:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 17:45:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casestudy_license_01_requirement]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[837]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_76a2b65b7533c0b203c0e34dbb16891e]]></wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote data-secret="GPbGePcLGB" class="wp-embedded-content"><a href="http://nordicapis.com/why-api-developer-experience-matters-more-than-ever/">Why API Developer Experience Matters More Than Ever</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="display:none;" src="http://nordicapis.com/why-api-developer-experience-matters-more-than-ever/embed/#?secret=GPbGePcLGB" data-secret="GPbGePcLGB" width="600" height="338" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_76a2b65b7533c0b203c0e34dbb16891e]]></wp:meta_key>
			<wp:meta_value><![CDATA[1455642198]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c6835fceed65a0c0592e9fbaa513eed4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[casestudy_site_license_01_requirement]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] &quot;授權碼&quot; 如何實作?  #2, 序列化</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/</link>
		<pubDate>Tue, 23 Feb 2016 17:05:30 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=855</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="IPFdWMY"><img class="size-full wp-image-893 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56cc8c9caafc8.png" alt="" /></p>
這次直接跳到主題: 網站安裝授權開始吧。這東西的用途，就跟過去安裝軟體要輸入序號一樣的目的，輸入序號之後，軟體不用上網就要能知道你購買的是什麼版本，有哪些功能要被啟用? 在不連到 internet 的情況下，要單靠一段授權資料就達到這目的，最好是能簡單明瞭，資料結構清楚容易擴充維護，同時安全強度還要夠強 (防止偽造)，這就是這次要解決的問題。

我的目的，不但要顧及功能性(安全強度)，同時也要顧及程式碼及系統架構的層面，因此我拆成兩個部份來探討，一個就是最關鍵的資料安全問題，另一個就是如何用程式碼來表達及封裝這些功能?

<!--more-->

<hr />

&nbsp;
<p style="padding-left: 30px;"><span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. <a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>#2. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a>
#3. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章
</a>#3. <a href="http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/" target="_blank">(補) - 金鑰的保護</a></p>


<hr />

&nbsp;

&nbsp;

&nbsp;
<h2></h2>
<h2>資料的封裝: 序列化</h2>
先從簡單的開始吧! 我這次的想法是，先由原廠提供授權碼 (一段編碼過的外星文)，裡面包含兩大部分，分別是設定的資訊 (存放原廠讓你啟用那些功能)，另一段則是數位簽章 (確認這份資訊是原廠提供的)。我想要讓這樣的授權碼很容易的被產生、驗證、及讀取資訊。授權的內容對我而言並不是機密，可以公開沒有問題，然而真正的問題是我希望我能夠驗證這段授權是不是真的由原廠 (我們公司) 發出來的? 我需要驗證的是它的來源。為了能同時解決這兩個問題 (容易編碼解碼、驗證來源) 因此我設計了兩個類別，彼此搭配來完成這個任務:

[caption id="attachment_859" align="aligncenter" width="704"]<img class="wp-image-859 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c4a40001a60.png" alt="" width="704" height="543" /> <em>- Class Diagram</em>[/caption]

兩大主角分別是 TokenData, 以及 TokenHelper。 TokenData 代表授權的設定，任何自訂的授權資料，都應該繼承這個類別，擴充設定資訊，同時定義 (override) 你自己的驗證邏輯，例如授權是否過期等等。跟他搭配的，則是 TokenHelper，專門負責產生、編碼、解碼 TokenData 用的靜態類別 (static class)。公開的介面只有 Init, Create / Encode / Decode Token 這組 static method. 這樣的設計，其實是參考了 Factory 這個 Design Pattern, 可以有效的把 TokenData 的生成方是從本身的 constructor 獨立出來，集中在 TokenHelper 一起控制。待會會講到的數位簽章的部分，也會在那邊介紹。

TokenData 本身就只定義了設定資料，以及 bool IsValidate() 這個驗證授權設定本身是否正確的 method. 然而物件 (object) 終究還是需要被轉換成資料 (data)，才能儲存及簽章。這邊當然也不再重新發明輪子了，直接採用紅翻天的 JSON 來當成序列化的格式。
<pre class="lang:c# decode:true">/// &lt;summary&gt;
/// 如何自訂 TokenData ?
/// 
/// 1. 繼承自 TokenData
/// 2. 加上你的自訂項目，標上 [JsonProperty]
/// 3. 覆寫 (override) bool IsValidate( ), 自訂你的授權驗證邏輯
/// 
/// 完成
/// &lt;/summary&gt;
[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public abstract class TokenData
{
    internal TokenData() { }

    /// &lt;summary&gt;
    /// 產生該 Token 的 Site ID
    /// &lt;/summary&gt;
    [JsonProperty]
    public string SiteID { get; internal set; }

    /// &lt;summary&gt;
    /// 對應 TokenData 衍生類別的 Type Name
    /// &lt;/summary&gt;
    [JsonProperty]
    public string TypeName { get; internal set; }

    /// &lt;summary&gt;
    /// (可覆寫) 驗證 Token Data 資料是否合法
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public virtual bool IsValidate()
    {
        if (this.GetType().FullName != this.TypeName) return false;
        return true;
    }
        
}</pre>
&nbsp;
<h2>自訂 TokenData: SiteLicenseToken</h2>
這個設計應該簡單到不能再簡單了吧? 我直接使用 NuGet 上面的 <a href="https://www.nuget.org/packages/Newtonsoft.Json/" target="_blank">NewtonSoft.Json</a> 這個套件，來進行序列化，為了別把一堆亂七八糟的東西也一起轉成資料，我採用明確的宣告方式，只有被標上 [JsonProperty] 的部分，才會被序列化處理。如果你想要自訂一個你專用的 TokenData, 那也很簡單，繼承下來就可以了。上圖的 class diagram 有個 SiteLicenseToken 就是一個例子:

&nbsp;
<pre class="lang:c# decode:true">public class SiteLicenseToken : TokenData
{
    /// &lt;summary&gt;
    /// 該網站的註冊 TITLE
    /// &lt;/summary&gt;
    [JsonProperty]
    public string SiteTitle;

    /// &lt;summary&gt;
    /// 是否啟用該網站的 API access
    /// &lt;/summary&gt;
    [JsonProperty]
    public bool EnableAPI;

    /// &lt;summary&gt;
    /// 網站授權: 啟用時間
    /// &lt;/summary&gt;
    [JsonProperty]
    public DateTime LicenseStartDate;

    /// &lt;summary&gt;
    /// 網站授權: 停用時間
    /// &lt;/summary&gt;
    [JsonProperty]
    public DateTime LicenseEndDate;

    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public override bool IsValidate()
    {
        if (this.LicenseStartDate &gt; DateTime.Now) return false;
        if (this.LicenseEndDate &lt; DateTime.Now) return false;
        return base.IsValidate();
    }
}</pre>
&nbsp;

真的是沒有藏甚麼特別的機關在裏頭，只要這幾個步驟就完成:
<ol>
	<li>繼承自 TokenData</li>
	<li>加上你的自訂項目，標上 [JsonProperty] 序列化的標註</li>
	<li>覆寫 (override) bool IsValidate( ), 自訂你的授權驗證邏輯</li>
</ol>
沒錯，這樣就結束了... 看起來好像沒什麼，接下來就換 TokenHelper 上場，來看看他是怎麼跟 TokenData 搭配的?

&nbsp;
<h2>驗證授權碼 (解碼 + 驗證)</h2>
先來看看使用頻率最高的: 如何驗證授權碼，並且取得授權的資訊?
<pre class="lang:c# decode:true" title="驗證設定檔是否正確及安全，同時取出設定值">// 初始化存放所有金鑰的 KEYSTORE，同時設定這個網站本身的 SITEID
TokenHelper.Init(
    "GLOBAL", 
    @"D:\KEYDIR\_PRIVATE\GLOBAL.xml", 
    @"D:\KEYDIR");

// 本文 + 簽章
plaintext = @"nwAAAAJTaXRlVGl0bGUACAAAAFNJVEUgIzEACEVuYWJsZUFQSQABCUxpY2Vuc2VTdGFydERhdGUAADgYadwAAAAJTGljZW5zZUVuZERhdGUAAAjmJbsDAAACU2l0ZUlEAAcAAABHTE9CQUwAAlR5cGVOYW1lACQAAABBbmRyZXcuQXBpRGVtby5TREsuU2l0ZUxpY2Vuc2VUb2tlbgAA|0ofhHMSEHQGZMOafFQxF6zfQchnThv+iPc7PrFZMrL89dkxvYvkYjHhUYLgHNOVz3RGXMxAMQVnwZjrHRNz5GLkaLs19wl1HWCt9kOdWQI/zkvS129IZntdoM4hnN9F/aeVnsDtSS82lx+ESTIh2Wcp5wVwowkzI3l82D3dZwCo=";

try
{
    // 驗證簽章。若驗證失敗則會丟出 TokenException
    SiteLicenseToken token = TokenHelper.DecodeToken&lt;SiteLicenseToken&gt;(plaintext);

    // 成功通過驗證，直接取出設定值
    Console.WriteLine("SiteID:        {0}", token.SiteID);
    Console.WriteLine("Site Title:    {0}", token.SiteTitle);
    Console.WriteLine("Enable API:    {0}", token.EnableAPI);
    Console.WriteLine("License Since: {0}", token.LicenseStartDate);
    Console.WriteLine("License Until: {0}", token.LicenseEndDate);
}
catch(TokenException)
{
    // 驗證失敗
}</pre>
初始化的部分，包含到金鑰的存放設定，稍後再說明，只要在第一次使用 TokenHelper 前有正確的初始化就可以了。不論我們是從甚麼方式取得授權碼，把這字串內容，丟進 TokenHelper.DecodeToken( ) 就可以進行各種驗證。若成功通過所有的驗證，那麼你就能將這堆授權碼還原成當初產生的 TokenData 了。看起來沒有一行是多餘的，就是 decode, and use it, 就這樣而已。

來挖開這個 Decode 是怎麼做的吧，先看看 code:
<pre class="lang:c# decode:true">/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
/// &lt;param name="tokenText"&gt;&lt;/param&gt;
/// &lt;param name="isSecure"&gt;&lt;/param&gt;
/// &lt;param name="isValidate"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static T TryDecodeToken&lt;T&gt;(string tokenText, out bool isSecure, out bool isValidate) where T : TokenData, new()
{
    string[] parts = tokenText.Split(_SplitChar);

    if (parts == null || parts.Length != 2) throw new TokenFormatException();

    byte[] data_buffer = Convert.FromBase64String(parts[0]);
    byte[] sign_buffer = Convert.FromBase64String(parts[1]);

    // 還原 token 物件，將資料反序列化還原為 object, 同時驗證 token 的授權是否合法
    T token = null;
    //string siteID = null;
    {
        MemoryStream ms = new MemoryStream(data_buffer, false);
        using (BsonReader br = new BsonReader(ms))
        {
            JsonSerializer js = new JsonSerializer();
            token = js.Deserialize&lt;T&gt;(br);

            if (token == null) throw new TokenFormatException();
        }
        isValidate = token.IsValidate();
    }

    // 檢查 signature, 確認 token 的安全性，確保資料沒有被偽造
    if (_PublicKeyStoreDict.ContainsKey(token.SiteID) == false) throw new TokenSiteNotExistException();

    isSecure = _PublicKeyStoreDict[token.SiteID].VerifyData(
        data_buffer,
        _HALG,
        sign_buffer);

    return token;
}</pre>
前面的驗證 hash / signature 後面再說明，先看看 token 被反序列化還原成物件之後的行為。這邊是套用到物件導向的 "多形" (Polymorphism) 的機制，不論你是如何自定 TokenData, 這邊還原後，會主動呼叫你定義的 IsValidate( ) method, 來驗證目前的設定是否合法。因此當你在設計自訂 TokenData 時，可以填上你想要的自訂驗證方式，比如驗證授權是否過期，檢查帳號數量是否超過上限等等就可以了。在每次 TokenData 被驗證及解碼還原時，都會自動執行一次驗證。

&nbsp;
<h2>產生授權碼 (編碼 + 簽章)</h2>
剩下最後一段了，就是如何從無到有產生 TokenData。先來看看產生 TokenData 的 code:
<pre class="lang:c# decode:true">// 初始化存放所有金鑰的 KEYSTORE，同時設定這個網站本身的 SITEID
TokenHelper.Init(
    "GLOBAL", 
    @"D:\KEYDIR\_PRIVATE\GLOBAL.xml", 
    @"D:\KEYDIR");

// 建立空的 SiteLicenseToken 物件
SiteLicenseToken slt = TokenHelper.CreateToken&lt;SiteLicenseToken&gt;();

string plaintext = null;

// 填入設定值
slt.SiteTitle = "SITE #1";
slt.EnableAPI = true;
slt.LicenseStartDate = new DateTime(2000, 1, 1);
slt.LicenseEndDate = new DateTime(2099, 12, 31);

// 編碼，將原始資料及數位簽章，打包成單一字串。可以用任何形式發佈出去
plaintext = TokenHelper.EncodeToken(slt);
</pre>
接著看一下，在 TokenHelper 內的 CreateToken 是怎麼實作的:
<pre class="lang:c# decode:true">/// &lt;summary&gt;
/// 建立新的 TokenData 物件
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;TokenData 型別，必須是 TokenData 的衍生類別&lt;/typeparam&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static T CreateToken&lt;T&gt;() where T : TokenData, new()
{
    T token = new T();

    token.SiteID = _CurrentSiteID;
    token.TypeName = typeof(T).FullName;

    return token;
}</pre>
最後，TokenData 準備好之後，會透過 TokenHelper.EncodeToken( ) 的協助，產生最終的授權碼字串:
<pre class="lang:c# decode:true ">/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;param name="token"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string EncodeToken(TokenData token)
{
    // TokenData 經過序列化之後的 binary data (使用 BSON format)
    byte[] data_buffer = null;
    {
        MemoryStream dataMS = new MemoryStream();
        using (BsonWriter bw = new BsonWriter(dataMS))
        {
            JsonSerializer js = new JsonSerializer();
            token.TypeName = token.GetType().FullName;
            js.Serialize(bw, token);
        }
        data_buffer = dataMS.ToArray();
    }
            
    // data_buffer 的簽章
    byte[] sign_buffer = null;
    {
        //sign_buffer = _PublicKeyStoreDict[_CurrentSiteID].SignData(
        sign_buffer = _CurrentRSACSP.SignData(
            data_buffer,
            _HALG);
    }

    // 打包 data_buffer, sign_buffer
    return string.Format(
        @"{1}{0}{2}",
        _SplitChar,
        Convert.ToBase64String(data_buffer),
        Convert.ToBase64String(sign_buffer));
}</pre>
最後這三段我一起說明，產生的程序有三個步驟:
<ol>
	<li>呼叫 TokenHelper.CreateToken&lt;T&gt;( ), 產生一個未初始化的 TokenData 物件。</li>
	<li>取得 token 的物件後，完成他的初始化 (設定必要欄位資訊)。</li>
	<li>透過 TokenHelper.EncodeToken( ) 的處理，將 token 轉成包含簽章的設定資料字串。</li>
</ol>
(1) 建立的步驟，除了用 CreateToken&lt;T&gt;() 來取代物件本身的 new 之外，就沒有特別的地方了。為何要這樣使用，有興趣的讀者可以參考一下 "工廠模式" (Factory Pattern)。整個過程的重點在 (3) 的轉換過程，正好跟前面的 DecodeToken( ) 是相反的。先將 TokenData 序列化，之後計算簽章，最後打包合併在一起就完成了。

打包的部分，因為格式很簡單很固定，我就沒特別去處理了。<a href="https://en.wikipedia.org/wiki/Base64" target="_blank">研究了一下 BASE64 的編碼</a>，他會把 3 bytes 的資料，編成 4 characters, 因此每個 char 只要負責 64 種不同的變化就夠了。BASE64 編碼的規範，只會用到這 65 個字元，不會有其他字元出現:
<ol>
	<li>英文字母 (a ~ z, A ~ Z): 26 + 26 = 52</li>
	<li>數字 ( 0 ~ 9 ): 10</li>
	<li>另外補上兩個符號字元 ( + / ): 2</li>
	<li>不足 4 的倍數，空白部分用 = 填補: 1</li>
</ol>
所以我的格式就從簡，挑了 | 這個不在 65 個字元內的符號，當作分隔字元，分別把 data 跟 signature 的 BASE64 編碼自串串起來，就是我的授權碼了。EncodeToken( ) / DecodeToken( ) 就都按照這個規格來進行編碼及解碼。

這邊要特別注意的是，如果靠這段程式就能產生一個可用的授權碼，那別的工程師拿我的 class library 依樣畫葫蘆不就能偽造資料，任意產生他想要的授權碼了嗎? 當然沒有這麼好的事。關鍵在於產生的 code 之前，必須先 init key store 的部分。要能產生簽章，你必須先拿到 private key 才行，而這段 code 的前提是你的 KEY STORE 內，必須要包含原廠的 private key ，否則這段 code 根本無法執行。這部分的細節，留到下一段 [數位簽章] 的說明再來探討。

&nbsp;

完整程式碼下載: <a href="https://github.com/andrew0928/ApiDemo" target="_blank">https://github.com/andrew0928/ApiDemo</a>

下回預告: #3 數位簽章

<span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. <a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>#2. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a>
#3. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章</a>

&nbsp;
<h2></h2>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>855</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 01:05:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 17:05:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casestudy_license_02_serialization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e6d3cf6c93f3c705732e1374f7ff33a5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0a1cee839b001d90d9ae84fa4f55a9f4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_525bb95c771a6755022805c90bb27171]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[892]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] &quot;授權碼&quot; 如何實作?  #3, 數位簽章</title>
		<link>http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/</link>
		<pubDate>Tue, 23 Feb 2016 17:05:32 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=871</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="aligncenter" src="http://www.karprice.com/home/wp-content/uploads/2014/04/shutterstock_160680575-Certified-Stamp-Small1.jpg" alt="" /></h2>
<h2>資料的封條: 數位簽章 原理說明</h2>
這裡最關鍵的就是軟體該如何確認 "這份資料是否是原廠提供，而非第三者偽造的假資料?" 這個問題。這類安全問題，最忌諱的就是讓一些搞不清楚狀況的工程師自己土炮一堆怪怪的 "加密" 方式，試圖混淆內容讓別人認不出來。這是很危險的，因為你靠的是 "演算法" 來保護資料，而不是靠 "金鑰" 來保護。如果你靠的是別人不知道你怎麼加密的，那麼將來這份程式碼你敢 Open Source 嗎? 你能不讓你的團隊其他成員 REVIEW 你的 CODE 嗎? 既然 CODE 不是絕對保密的，那麼你如何能證明你的資料是絕對安全的? 所以，比較可靠的方式，還是要靠那麼多人對密碼學的研究，用公開的演算法 + 只有你才擁有的金鑰，來保護你的資料才是上策。也因為這樣，請盡可能的採用廣為流通的加密方式及涵式庫。

<!--more-->

<hr />

&nbsp;
<p style="padding-left: 30px;"><span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. <a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>#2. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a>
#3. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章
</a>#3. <a href="http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/" target="_blank">(補) - 金鑰的保護</a></p>


<hr />

&nbsp;

講到這裡，要保護授權碼這類的資訊，熟悉資訊安全技術的人一定會聯想到 "數位簽章"。數位簽章就像真正的簽章一樣，每個人的簽名都被視為獨一無二，無法仿造的。只要看到我簽過名的文件，就代表是我同意的內容，而且還具有法律效力，同樣的數位簽章也有一樣的目的。

數位簽章的原理我就不在這邊班門弄斧了，我也只是略知一二而已 XD，我貼 wiki 的 [<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0" target="_blank">數位簽章</a>] 說明片段:
<p style="padding-left: 30px;"><em><b>數位簽章</b>（又稱<b>公鑰數位簽章</b>）是一種類似寫在<a title="紙" href="https://zh.wikipedia.org/wiki/%E7%BA%B8">紙</a>上的普通的物理<a title="簽名" href="https://zh.wikipedia.org/wiki/%E7%AD%BE%E5%90%8D">簽名</a>，但是使用了<a class="mw-redirect" title="公鑰加密" href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86">公鑰加密</a>領域的技術實現，用於鑑別數位信息的方法。一套數位簽章通常定義兩種互補的運算，一個用於簽名，另一個用於驗證，但法條中的電子簽章與數位簽章，代表之意義並不相同，電子簽章用以辨識及確認電子文件簽署人身分、資格及電子文件真偽者。而數位簽章則是以數學演算法或其他方式運算對其加密，才形成電子簽章，意即使用數位簽章才創造出電子簽章。</em></p>
這裡我順帶說明一下，加密技術通常是先有專家研究出夠安全的演算法 (演算法及程式碼都是公開的)，搭配只有自己才知道的金鑰 (key) 作為參數，就可以將原始資料 (明文, plaintext) 計算出一段加密過的結果 (密文, ciphertext)，只有持有正確的金鑰才能解讀。沒有正確的金鑰想破解，那只能用暴力法去計算。只要你的金鑰強度夠強，個人的力量要靠暴力法破解，那幾乎是不可能的。

加密技術大概分兩大類，對稱式及非對稱式加密。簡單的說，加密用的金鑰, 跟解密用的金鑰是同一個，就是對稱式的演算法，不一樣的就是非對稱式。這次我用的是 <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank">RSA 加密演算法</a>，典型的非對稱式加密技術。他的金鑰是一對的，一個只能你自己留著私鑰 (private key)，另一個你可以任意公開給別人的公鑰 (public key)。當你用私鑰加密過的資料，別人只能拿你的公鑰才能成功解開。

別小看這個技術，他能應用的地方可多了，我舉幾種情境:
<ol>
	<li>

[caption id="" align="alignright" width="181"]<img class="" src="https://upload.wikimedia.org/wikipedia/zh/a/a1/The_Imitation_Game.jpg" alt="" width="181" height="269" /> <em>電影: 模仿遊戲</em>[/caption]

<strong>在不安全的管道，從事一對多的安全通訊:</strong>
電影 "模仿遊戲" 裡演的德軍密碼機 "ENIGMA"，其實就可以算是對稱式加密了。德軍的密碼官都有本 code book, 每天換密碼，只要你有正確的組態，加上一台 ENGIMA，你就可以把軍令打進去，會自動被轉成密文透過不安全的無線電傳送。在戰場的另一頭，友軍就可以從廣播接收到訊息，並且用有同樣設定的 ENIGMA 解碼。電影情節我想看過的人都知道了，沒有正確的組態情況下，圖靈的團隊可是吃盡苦頭才掌握到破解的關鍵。</li>
	<li><strong>在不安全的管道，從事一對一的安全通訊:</strong>
如果你要通訊的對象只有一個 (A -&gt; B)，用非對稱式加密就可以輕鬆辦到。A 拿自己的 private key + B 的 public key，把資料加密，傳送給 B。B 接到後再用 A 的 public key + B 的 private key，就可以順利的解開密文。整個過程中，暴露在外的只有三個部分: 加密過的密文、A 的 public key、B 的 public key。這些都是可以放心在外傳遞的，沒有 A 的 private key, 是沒有辦法仿造 A 的身分發文的，沒有 B 的 private key，是沒有辦法解開這密文的。</li>
	<li><strong>證明資料的來源是我本人，且未經破壞或修改:</strong>
這就是數位簽章。先取得整份資料的 Hash (雜湊值)，再用我的 private key 來加密 Hash，加密後的密文就是所謂的數位簽章 (digital signature)。我只要把這簽章跟原始的資料打包放在一起，供人任意取用，收到這份資料的人若想確認資料是不是我送出來的，只要同樣拿原始資料 (明文) 計算一次 Hash, 同時用我的 public key 把 signature 解密，可以拿到另一份被還原的 Hash, 這兩份 Hash 逐一比對，如果結果一模一樣，那就證明資料是出自我手中，可以放心閱讀。</li>
</ol>
&nbsp;
<h2>實作說明: 數位簽章 + 授權碼 實作</h2>
這次我就是拿 RSA 的數位簽章技術，來做網站的授權機制。主要是靠數位簽章的技術來驗證授權碼是不是由原廠發出來的? 如果確認無誤，剩下的就是授權碼決定要開給客戶用那些功能就開。

我只要先編輯好一份設定檔 (不論格式是 XML、JSON、或是其他自訂格式都可)，把設定檔附上數位簽章，放到網站的 configuration 裡。網站在啟動執行時，先驗證一次簽章是否正確，通過驗證網站就可以放心按照授權碼的指示啟用網站! 這樣的做法簡單又有效，不用像以前一樣擔心序號被盜用或是破解。整個程式運作的流程，我簡單畫下來，大概像這樣:
<p id="xLodlHu"><img class="alignnone wp-image-858 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c49acfd56e7.png" alt="" width="575" height="261" /></p>
實作的部分，其實前面都貼過了。其實這種加解密的演算法，金鑰的管理是很重要的基礎。正規的方式是透過 OS 提供的<a href="https://blogs.msdn.microsoft.com/alejacma/2007/12/13/key-containers-basics/" target="_blank"> Key Container </a>來管理，KEY 的產生及散布就透過 CA 來進行。金鑰放在 Key Container 有各種防護機制，我這邊的 Sample Code 為了便於 DEMO，沒有把這段列入考慮，暫時用指定的目錄，或是自行匯入 RSACryptoService XML 來替代。切記! 實際環境下這樣是很不安全的作法，金鑰沒保護好，別人也不用破解了，看完這篇文章就知道怎麼破解了，連駭客都不用找...

這邊回頭來補充說明一下，TokenHelper.Init( ) 到底做了什麼事，這部分是整個安全系統的起點。再來看一次 Init 的部分。這邊提供兩種 Init 的作法，你可以指定存放金鑰的目錄，或是自己將金鑰的 XML 逐一指定:
<pre class="lang:c# decode:true">private static string _CurrentSiteID = null;
private static RSACryptoServiceProvider _CurrentRSACSP = null;
private static Dictionary&lt;string, RSACryptoServiceProvider&gt; _PublicKeyStoreDict = null;
private static HashAlgorithm _HALG = new SHA256CryptoServiceProvider();

/// &lt;summary&gt;
/// 初始化，呼叫其他 static method 前必須先正確的執行初始化動作。
/// siteID 的 KeyXML 必須包含 private info
/// &lt;/summary&gt;
/// &lt;param name="siteID"&gt;目前環境的 Site ID&lt;/param&gt;
/// &lt;param name="keyDIR"&gt;存放 KEY xml 的磁碟目錄&lt;/param&gt;
public static void Init(string siteID, string siteKeyFile, string keyDIR)
{
    // ToDo: 改成使用 key container
    if (string.IsNullOrEmpty(keyDIR) == true || Directory.Exists(keyDIR) == false)
    {
        keyDIR = @"D:\KEYDIR";
        if (Directory.Exists(keyDIR) == false) Directory.CreateDirectory(keyDIR);
    }

    Dictionary&lt;string, string&gt; _xmldict = new Dictionary&lt;string, string&gt;();
    foreach (string file in Directory.GetFiles(keyDIR, "*.xml", SearchOption.TopDirectoryOnly))
    {
        _xmldict.Add(
            Path.GetFileNameWithoutExtension(file),
            File.ReadAllText(file));
    }

    Init(
        siteID, 
        (File.Exists(siteKeyFile))?(File.ReadAllText(siteKeyFile)):(null),
        _xmldict);
}

/// &lt;summary&gt;
/// 初始化，呼叫其他 static method 前必須先正確的執行初始化動作。
/// siteID 的 KeyXML 必須包含 private info
/// &lt;/summary&gt;
/// &lt;param name="siteID"&gt;目前環境的 Site ID&lt;/param&gt;
/// &lt;param name="keyXmlDict"&gt;包含所有 site 的 key xml dictionary&lt;/param&gt;
public static void Init(string siteID, string siteKeyXml, Dictionary&lt;string, string&gt; keyXmlDict)
{
    Dictionary&lt;string, RSACryptoServiceProvider&gt; _tempKeyStoreDict = new Dictionary&lt;string, RSACryptoServiceProvider&gt;();
    foreach(string site in keyXmlDict.Keys)
    {
        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
        rsa.FromXmlString(keyXmlDict[site]);
        _tempKeyStoreDict.Add(site, rsa);
    }

    //if (_tempKeyStoreDict.ContainsKey(siteID) == false) throw new ArgumentException("siteID(" + siteID + ") not found");
    //if (_tempKeyStoreDict[siteID].PublicOnly == true) throw new ArgumentException("must include private key");

    _CurrentSiteID = siteID;
    if (string.IsNullOrEmpty(siteKeyXml) == false)
    {
        _CurrentRSACSP = new RSACryptoServiceProvider();
        _CurrentRSACSP.FromXmlString(siteKeyXml);
    }
    _PublicKeyStoreDict = _tempKeyStoreDict;
}</pre>
我把相關的 static field 也一起列出來了。我用了 Dictionary&lt;string, RSACryptoServiceProvider&gt; 當作簡易的 KEY store cache, 目的有兩個，一個是儲存自己 SITE 本身的 private key, 另一個是儲存其他友站 (可能會 access 到的其他站台) 的 public key。自身的 private key 沒甚麼問題，其他人的 public key，若可以的話也可以從 CA 取得，不一定要每一台都放一份，這樣將來也會造成維護的困難。因為後續的 DEMO 會處理到好幾台不同 server 之間的溝通，因此我先把 KEY STORE 用這方式抽象化方便說明。再次強調，實際運作時這部分最好要替換成 KEY container 為佳。

RSACryptoServiceProvider 是 .NET 內建的 class library, 可以透過 .FromXmlString( ) 將存在 XML 的 KEY 匯入之後，這個 RSACryptoServiceProvider 的 instance 就具備了加解密、簽屬或是驗證數位簽章的能力了。

XML 的格式，也是 Microsoft 是先定義好的，其實他只是把 Parameters 用 XML 描述而已，關鍵的是其中幾個關鍵數值而已。這格式可以區分 Public / Private 屬性，也就是我門口中常聽到的 Public Key / Private Key。我把同一組 Key Pair 分別匯出包含與不包含 Private Key 的版本內容，給各位參考。這不是真正運作中的 KEY，我也不怕各位看，這是這範例程式真正在使用的 KEY，貼到 CODE 內是可以使用的:

包含 Public / Private Info 的 XML:
<pre class="lang:xhtml decode:true">&lt;RSAKeyValue&gt;
  &lt;Modulus&gt;tkh6g17prMpaRC+p7Q4FQHuTti5ekcjWNqQC9Qh3tsrkyq4pp+lytagR6y6q9zSA57UQy3cURJt/0km2W0v31yC9YFmhZ6fbmCfUCBmxbvb1CzgkFP3fx6cipRzScCpIMmUXcvtpvKR+fWbt1i9ohoT8Sk2zTGd4dqyFTselNGc=&lt;/Modulus&gt;
  &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
  &lt;P&gt;7ZU2GJKEJTSIr648g/2m2GgBggTVTY6uehkGSH/pnyuc1517Jy2BBThMK7Sa1vvcmcnJYYKd9KhnpdcYgJXVJQ==&lt;/P&gt;
  &lt;Q&gt;xGnan823m0OB9r7fltqMVE1MOILqmLDldN6gRB0fWnihFSMQoxQJBqdfvbqdnwRKPygMMXjOoxf13noP67Vbmw==&lt;/Q&gt;
  &lt;DP&gt;6LbZMCSD7/WPVZXzjM4uWZc2suaNENULrmlIsEcqzVBo5wJImU2HLVfBtKXJbX9yy+jNqwfINNen/te8FmetSQ==&lt;/DP&gt;
  &lt;DQ&gt;lm8IzoqOTPHokabhszXScyL89O94ZNhf9iIpF+JCSFXJ8ll3/Z9zxk/daYCMBuYPQ84VgLKpeYr5ept8pCi0bw==&lt;/DQ&gt;
  &lt;InverseQ&gt;5Wn1A4VEJAI0F/3sMvzEm5CL2dLb5/Xo6yYg9HH6WuVnMr9p7DMcHce7FjCqKNIcC9QsFiuS/NpEMQ0QvUsgjA==&lt;/InverseQ&gt;
  &lt;D&gt;E7GL7vKLq3vnObOul6pqnddcE5Q56mU444lfumpySKDuDAm5/Wam2oJwgSi3FuMoxB/XUywn1+u26RjGp2FzQq9mx0KkQGKM6mZfIMMVZDTLIyVVhQn66GuO1Zbt9hqWtBxmQy8X6TN9ASQeUFsOMDvtm0PrBrax7KHf1H8NIBU=&lt;/D&gt;
&lt;/RSAKeyValue&gt;</pre>
&nbsp;

只包含 Public Info 的 XML:
<pre class="lang:xhtml decode:true ">&lt;RSAKeyValue&gt;
  &lt;Modulus&gt;tkh6g17prMpaRC+p7Q4FQHuTti5ekcjWNqQC9Qh3tsrkyq4pp+lytagR6y6q9zSA57UQy3cURJt/0km2W0v31yC9YFmhZ6fbmCfUCBmxbvb1CzgkFP3fx6cipRzScCpIMmUXcvtpvKR+fWbt1i9ohoT8Sk2zTGd4dqyFTselNGc=&lt;/Modulus&gt;
  &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
&lt;/RSAKeyValue&gt;</pre>
看到了嗎? 差異的部分就是你需要自己好好保管的機密，一旦外流了，你所有加密或是簽章的東西都不安全了。因為別人將會有辦法用你的身分發出任何資訊。而其他人完全沒辦法驗證真偽。這幾個參數的意義，有興趣的讀者可以<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank">看看WiKi 的介紹</a>，跟我一樣看不懂也懶得看的，只要記得那些是 Private Info, 哪些是 Public Info 就夠了。

只要你匯入的 XML 包含 Private Info, 那麼這個 RSACryptoServiceProvider 就可以執行簽章 SignData( )的動作，反之你則只能進行驗證簽章 VerifyData( ) 的動作而已。

解釋了這些機制之後，再回頭來看看 EncodeToken( ) 的做法就更容易懂了，關鍵就在按照 SiteID 取出對應的 RSACryptoServiceProvider 之後，進行 SignData( ) 的動作那一行:
<pre class="lang:c# decode:true" title="TokenHelper.EncodeToken( )">/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;param name="token"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string EncodeToken(TokenData token)
{
    // TokenData 經過序列化之後的 binary data (使用 BSON format)
    byte[] data_buffer = null;
    {
        MemoryStream dataMS = new MemoryStream();
        using (BsonWriter bw = new BsonWriter(dataMS))
        {
            JsonSerializer js = new JsonSerializer();
            token.TypeName = token.GetType().FullName;
            js.Serialize(bw, token);
        }
        data_buffer = dataMS.ToArray();
    }
            
    // data_buffer 的簽章
    byte[] sign_buffer = null;
    {
        //sign_buffer = _PublicKeyStoreDict[_CurrentSiteID].SignData(
        sign_buffer = _CurrentRSACSP.SignData(
            data_buffer,
            _HALG);
    }

    // 打包 data_buffer, sign_buffer
    return string.Format(
        @"{1}{0}{2}",
        _SplitChar,
        Convert.ToBase64String(data_buffer),
        Convert.ToBase64String(sign_buffer));
}</pre>
&nbsp;

接下來看 DecodeToken( ) 也是一樣，看看關鍵的 RSACryptoServiceProvider.VerifyData( ) 那段:
<pre class="lang:c# decode:true">/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
/// &lt;param name="tokenText"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static T DecodeToken&lt;T&gt;(string tokenText) where T : TokenData, new()
{
    bool isSecure;
    bool isValidate;
    T token = TryDecodeToken&lt;T&gt;(tokenText, out isSecure, out isValidate);

    if (isSecure == false) throw new TokenNotSecureException();

    if (isValidate == false) throw new TokenNotValidateException();

    return token;
}


/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
/// &lt;param name="tokenText"&gt;&lt;/param&gt;
/// &lt;param name="isSecure"&gt;&lt;/param&gt;
/// &lt;param name="isValidate"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static T TryDecodeToken&lt;T&gt;(string tokenText, out bool isSecure, out bool isValidate) where T : TokenData, new()
{
    string[] parts = tokenText.Split(_SplitChar);

    if (parts == null || parts.Length != 2) throw new TokenFormatException();

    byte[] data_buffer = Convert.FromBase64String(parts[0]);
    byte[] sign_buffer = Convert.FromBase64String(parts[1]);

    // 還原 token 物件，將資料反序列化還原為 object, 同時驗證 token 的授權是否合法
    T token = null;
    //string siteID = null;
    {
        MemoryStream ms = new MemoryStream(data_buffer, false);
        using (BsonReader br = new BsonReader(ms))
        {
            JsonSerializer js = new JsonSerializer();
            token = js.Deserialize&lt;T&gt;(br);

            if (token == null) throw new TokenFormatException();
        }
        isValidate = token.IsValidate();
    }

    // 檢查 signature, 確認 token 的安全性，確保資料沒有被偽造
    if (_PublicKeyStoreDict.ContainsKey(token.SiteID) == false) throw new TokenSiteNotExistException();

    isSecure = _PublicKeyStoreDict[token.SiteID].VerifyData(
        data_buffer,
        _HALG,
        sign_buffer);

    return token;
}</pre>
&nbsp;

&nbsp;
<h2>實際應用: ASP.NET MVC5 啟動時檢查授權碼</h2>
OK，經過這麼大費周章的說明 (只是說明的部分很多而已，CODE 其實沒多少)，我們終於可以大大方方地應用在網站上了。這部分老實說沒啥好 DEMO 的，不過為了讓這主題告一段落，還是補一下好了...  如果要參考授權資訊，讓 ASP.NET MVC 取得合法的授權才能啟動網站的話，只要按照下列步驟即可。我已 Visual Studio 2015 預設的 ASPNET MVC5 空白專案為起點，按照下列步驟 Step By Step:

將下列 Token 相關設定資訊，放到 ~/appsettings.json 內，加入 "License" 的區段，原本就有的 Data / Logging 的內容，為了省篇幅我就刪掉了::
<pre class="lang:js decode:true">{
  "Data": {},
  "Logging": {},
  "License": {
    "TokenData": "nwAAAAJTaXRlVGl0bGUACAAAAFNJVEUgIzEACEVuYWJsZUFQSQABCUxpY2Vuc2VTdGFydERhdGUAADgYadwAAAAJTGljZW5zZUVuZERhdGUAAAjmJbsDAAACU2l0ZUlEAAcAAABHTE9CQUwAAlR5cGVOYW1lACQAAABBbmRyZXcuQXBpRGVtby5TREsuU2l0ZUxpY2Vuc2VUb2tlbgAA|0ofhHMSEHQGZMOafFQxF6zfQchnThv+iPc7PrFZMrL89dkxvYvkYjHhUYLgHNOVz3RGXMxAMQVnwZjrHRNz5GLkaLs19wl1HWCt9kOdWQI/zkvS129IZntdoM4hnN9F/aeVnsDtSS82lx+ESTIh2Wcp5wVwowkzI3l82D3dZwCoa",
    "SiteID": "ORCA",
    "SitePrivateKey": "&lt;RSAKeyValue&gt;&lt;Modulus&gt;tkh6g17prMpaRC+p7Q4FQHuTti5ekcjWNqQC9Qh3tsrkyq4pp+lytagR6y6q9zSA57UQy3cURJt/0km2W0v31yC9YFmhZ6fbmCfUCBmxbvb1CzgkFP3fx6cipRzScCpIMmUXcvtpvKR+fWbt1i9ohoT8Sk2zTGd4dqyFTselNGc=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;7ZU2GJKEJTSIr648g/2m2GgBggTVTY6uehkGSH/pnyuc1517Jy2BBThMK7Sa1vvcmcnJYYKd9KhnpdcYgJXVJQ==&lt;/P&gt;&lt;Q&gt;xGnan823m0OB9r7fltqMVE1MOILqmLDldN6gRB0fWnihFSMQoxQJBqdfvbqdnwRKPygMMXjOoxf13noP67Vbmw==&lt;/Q&gt;&lt;DP&gt;6LbZMCSD7/WPVZXzjM4uWZc2suaNENULrmlIsEcqzVBo5wJImU2HLVfBtKXJbX9yy+jNqwfINNen/te8FmetSQ==&lt;/DP&gt;&lt;DQ&gt;lm8IzoqOTPHokabhszXScyL89O94ZNhf9iIpF+JCSFXJ8ll3/Z9zxk/daYCMBuYPQ84VgLKpeYr5ept8pCi0bw==&lt;/DQ&gt;&lt;InverseQ&gt;5Wn1A4VEJAI0F/3sMvzEm5CL2dLb5/Xo6yYg9HH6WuVnMr9p7DMcHce7FjCqKNIcC9QsFiuS/NpEMQ0QvUsgjA==&lt;/InverseQ&gt;&lt;D&gt;E7GL7vKLq3vnObOul6pqnddcE5Q56mU444lfumpySKDuDAm5/Wam2oJwgSi3FuMoxB/XUywn1+u26RjGp2FzQq9mx0KkQGKM6mZfIMMVZDTLIyVVhQn66GuO1Zbt9hqWtBxmQy8X6TN9ASQeUFsOMDvtm0PrBrax7KHf1H8NIBU=&lt;/D&gt;&lt;/RSAKeyValue&gt;",
    "PublicKeyStore": [
      {
        "SiteID": "GLOBAL",
        "KeyXML": "&lt;RSAKeyValue&gt;&lt;Modulus&gt;23cuijAaHiumnoRM+VV1dqAGrYeYUt11OK4H5rcmXZeix2dxK9Oh2928A9RHwqpAU+u/HY1nrHo1nEUnduiIai+1JShg4flewwUnXAIrP3hxUtPly/5/9vHtalEABxPzVtRhwN2rtpVpxkR8j0U2r98TGrvr62xhg3KYDG6Qax8=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"
      },
      {
        "SiteID": "ORCA",
        "KeyXML": "&lt;RSAKeyValue&gt;&lt;Modulus&gt;tkh6g17prMpaRC+p7Q4FQHuTti5ekcjWNqQC9Qh3tsrkyq4pp+lytagR6y6q9zSA57UQy3cURJt/0km2W0v31yC9YFmhZ6fbmCfUCBmxbvb1CzgkFP3fx6cipRzScCpIMmUXcvtpvKR+fWbt1i9ohoT8Sk2zTGd4dqyFTselNGc=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"
      }
    ]
  }
}
</pre>
這邊除了加上授權相關資訊之外，也加上了 TokenHelper Init 所需要的相關資訊 (後面的案例會需要)

&nbsp;

接下來，在 ~/Startup.cs 加入對應的判斷，若授權沒有通過驗證，則丟出 Exception, 中斷後面的動作。由於這個動作安排在定應 Routing 之前，沒有通過的話整個網站是無法正常啟用的。這段在 Startup.cs 的 public void Configure(...) 內:
<pre class="lang:c# decode:true ">// init token
{
    IConfigurationSection licconf = Configuration.GetSection("License");

    Dictionary&lt;string, string&gt; dict = new Dictionary&lt;string, string&gt;();
    foreach (Dictionary&lt;string, string&gt; keyitem in licconf.Get&lt;Dictionary&lt;string, string&gt;[]&gt;("PublicKeyStore"))
    {
        dict.Add(
            keyitem["SiteID"],
            keyitem["KeyXML"]);
    }

    TokenHelper.Init(
        licconf.Get&lt;string&gt;("SiteID"),
        licconf.Get&lt;string&gt;("SitePrivateKey"),
        dict);

    SiteLicenseToken lictoken = TokenHelper.DecodeToken&lt;SiteLicenseToken&gt;(licconf.Get&lt;string&gt;("TokenData"));
}
</pre>
除了 Init 所需的資訊，改成從 appsettings.json 取得之外，其他沒有太大的不同。各位可以自行編譯試看看。若授權正常的話，會順利執行 MVC 預設的示範網站。若失敗的話，會顯示 MVC ERROR 畫面，同時會列出出問題的 Exception 內容:

&nbsp;

[caption id="attachment_883" align="alignnone" width="1241"]<img class="wp-image-883 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9629bc2f62.png" alt="" width="1241" height="774" /> 授權一切正常時，可以正確地進入 MVC Web[/caption]

&nbsp;

[caption id="attachment_882" align="alignnone" width="1085"]<img class="wp-image-882 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9625fc4d28.png" alt="" width="1085" height="567" /> 已經超出授權的日期，會引發 TokenNotValidateException，超過正常使用期限，則無法正常啟動網站。[/caption]

&nbsp;

&nbsp;

[caption id="attachment_884" align="alignnone" width="1049"]<img class="wp-image-884 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56c9630d7d101.png" alt="" width="1049" height="592" /> 如果 TokenData 遭到損毀或是竄改偽造，則會辨識出這個 TokenData 的來源有問題，系統會發出 TokenNotSecureException[/caption]

&nbsp;

完整的 Code 我就不貼了，整個完整的 Solution 有興趣的讀者們可以到我的 GitHub 上面 Clone 所有的 Source Code 下來慢慢研究~

完整程式碼下載: <a href="https://github.com/andrew0928/ApiDemo">https://github.com/andrew0928/ApiDemo</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>871</wp:post_id>
		<wp:post_date><![CDATA[2016-02-24 01:05:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 17:05:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casestudy_license_03_digital_signature]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<category domain="category" nicename="oo"><![CDATA[物件導向]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[969]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[設計案例] “授權碼” 如何實作? #3 (補) - 金鑰的保護</title>
		<link>http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/</link>
		<pubDate>Sat, 19 Mar 2016 09:08:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter" src="http://traka.fr/img/headers/gestion-des-clefs-traka.jpg" alt="" />

前一篇 #3 介紹了<a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/">如何利用 "數位簽章" 簡單又可靠的做好 "授權碼" 的驗證</a>，主要都在說明程式架構的實作，沒有對實際運作的情況做太多補充，這篇就來補足這些遺漏的部分。運用這些公開的加密演算法，既安全又可靠，不過這些東西大家都拿的到啊，因此安全與否，完全取決於你的金鑰是否有妥善的被管理。

<!--more-->

&nbsp;

<span style="text-decoration: underline;"><strong>[設計案例] "授權碼" 如何實作? 2016/02 (本篇系列文章)
</strong></span>#1. <a href="http://columns.chicken-house.net/2016/02/17/casestudy_license_01_requirement/" target="_blank">需求與問題</a><a href="/2009/12/19/%E8%A8%AD%E8%A8%88%E6%A1%88%E4%BE%8B-%E6%B8%85%E9%99%A4cache%E7%89%A9%E4%BB%B6-1-%E5%95%8F%E9%A1%8C%E8%88%87%E4%BD%9C%E6%B3%95/" target="_blank">
</a>#2. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_02_serialization/" target="_blank">授權碼序列化</a>
#3. <a href="http://columns.chicken-house.net/2016/02/24/casestudy_license_03_digital_signature/" target="_blank">數位簽章
</a>#3. <a href="http://columns.chicken-house.net/2016/03/19/casestudy_license_03_appendix_key_management/" target="_blank">(補) - 金鑰的保護</a>

&nbsp;

我就針對 "授權碼" 的產生及驗證，畫一張簡單的關係圖，然後再來說明:
<p id="IhUPaoy"><img class="alignnone size-full wp-image-918 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d335959b5d9.png" alt="" /></p>
實際的運作架構，原廠 (我) 應該在內部，有我自己的授權碼產生器，可以產生出我需要的組態，發放給我的客戶使用。有幾個重點是維運時必須注意的:
<ol>
	<li><span style="text-decoration: underline;"><strong>PRIVATE KEY 妥善保管</strong></span>:
產生正確的授權碼，需要有我自己的 PRIVATE KEY。只要有外人能拿到我的 PRIVATE KEY，技術上來說，他就能用我的身分產生任意組態的授權碼。因此我必須好好保管好我自己的 PRIVATE KEY。</li>
	<li><span style="text-decoration: underline;"><strong>發放 PUBLIC KEY:</strong></span>
讓所有客戶能驗證授權碼，這將會需要把我的 PUBLIC KEY 發放給所有的客戶。客戶端只要拿到我的 PUBLIC KEY，就能驗證授權碼是否可被信賴。</li>
</ol>
&nbsp;

經過上一篇的討論，各位可能已經覺得這樣安全無慮了，我假設性的提出一個狀況，看看這情境發生時是否對安全會造成威脅? 假設我有個很熟悉系統的合作對象，因為她要代替我維護客戶的系統，因此知道一切技術細節，但是由於上述原因，她無法取得我自己的 PRIVATE KEY。如果她想要自己偷偷賺一筆授權費，她只要這樣做:
<ol>
	<li>自己產生一組 PRIVATE KEY (當然這組金鑰一定跟我的不一樣...)</li>
	<li>用這組 PRIVATE KEY 產生假的授權碼 (當然這組授權碼，在 SERVER 上會被驗證出問題)</li>
	<li><span style="color: #ff0000;">用這組自己產生的金鑰，把 PUBLIC KEY 替換掉，發給客戶使用</span>..</li>
</ol>
關鍵在第三點，如果你無法確保客戶拿到的是正確的 PUBLIC KEY，那麼一切的努力就都白費了不是嗎? 意圖不軌的合作廠商，根本不需要去偷到我的 PRIVATE KEY，她只要把我給客戶的 PUBLIC KEY 掉包就夠了...。莫非定律就是: 設想再週到的系統，往往會在你最意想不到的地方被攻破.. 難怪 StarWars 每一次的死星，都會被反抗軍用莫名其妙的方式炸掉 XD

&nbsp;
<h3>預先在系統內埋好你的 PUBLIC KEY:</h3>
這問題怎麼解? 如果你能保證你的環境都是能掌控的，那麼你可以把你的 PUBLIC KEY 內建在系統內，就沒有被替換的風險了。最常見的例子就是 Game Console, 電視遊樂器對於原版片的保護機制了。遊戲主機如何能分辨原版光碟? 靠的就是一模一樣的數位簽章機制。遊戲主機內部的 OS，早就內建原廠的 PUBLIC KEY，而且這些 KEY 早已被 OS 及硬體妥善的保護起來 (參考: <a href="https://en.wikipedia.org/wiki/Trusted_Platform_Module" target="_blank">TPM, Trusted Platform Module</a>)，即使沒有連上 internet, 你放入盜版片仍然會被檢測出來，就是這個原理。遊戲主機只要在載入任何遊戲之前，是先確認數位簽章是否正確即可。那些改機的人，都是運用各種平台本身的 BUG，想辦法繞過或是停用這個檢查機制，才能讓你的遊戲主機能執行沒有正確簽章過的程式或遊戲。

&nbsp;
<h3>透過 CA 發行 PUBLIC KEY:</h3>
但是... 如果我只是個小型的軟體開發商，沒本錢像 Microsoft / XBox, Sony / PS, 任天堂 / Wii 這樣搭建整個完整的體系，那怎麼辦? 這時，如果你的 KEY 是由公正的第三者來發放及提供其他人來調閱你的 PUBLIC KEY，這也是從另一個角度解決問題。這公正的第三者，也就是常聽到的 CA (certificate authority)，詳細的介紹可以參考 <a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank">wiki (CA)</a> 的說明。架構上就類似 DNS 一樣，你想要有自己的 domain name, 你就必須去跟營運商註冊。同時全世界的使用者想連到你的網站，就要去 DNS 查詢。除非駭客能控制全世界的 DNS，否則他是無法透過非正式管道把你的網址搶過來占為己有的。

同樣的，憑證也有類似的架構。發給你的憑證，裡面就包含了你的 PUBLIC / PRIVATE KEY, 除此之外也還包含了你的基本資訊，如註冊名稱，公司，等等... PRIVATE KEY 仍然一樣只有你自己手上才有，但是其他客戶要驗證時，會到 CA 調出你的 PUBLIC KEY 來驗證。改進過的架構如下:
<p id="sKNryYx"><img class="alignnone size-full wp-image-919 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d339b7403b6.png" alt="" /></p>
雖然這樣更安全可靠了，不過把 CA 納進來之後，系統的建置就更複雜了。採用公正的第三方 CA，通常憑證都是需要費用的 (年費)。你自己架設 CA 的話，要確保所有會用到的客戶都在你管轄範圍內，否則也是沒用。另外 CA 的建制也是個大工程，系統要正常運作，這也是個額外的管理及營運成本。

&nbsp;
<h3>透過其他手段，強制客戶必須連回原廠驗證</h3>
如果你不想用 CA 的這條路，也沒有本錢去做到像 Game Console 這整套完整的架構，那麼還是有些折衷的方案可以考慮。基本上你只要想辦法綁一些關鍵的資訊，一定要由原廠直接提供，藉這些手段，逼出沒有被設定正確的 PUBLIC KEY 的客戶:
<ol>
	<li>直接由原廠提供力行升級的更新包。若沒有正確的 PUBLIC KEY 則無法升級。</li>
	<li>定期強迫系統需要連回原廠的網站檢測</li>
	<li>透過實體的手段 (例如維護合約等等) 來發行 KEY</li>
</ol>
其實大公司也有類似的問題，只要有心，仔細想想，你會發現到處都是案例!! 我舉個例子: 安裝過 Windows 的人都知道，裝完要線上啟用，你的 Windows 右下角才不會有討厭的字樣一直提醒你這是盜版 XD。這個啟用的動作，就是一定要上網進行的。對於大量授權版或是企業版，你不用一台一台去啟用，Windows 會自動連上 <a href="https://technet.microsoft.com/zh-tw/library/ff793434.aspx" target="_blank">KMS</a> 去驗證。那些校園免啟動版，都會要求你的 PC / NB 每隔一段時間，一定要連回學校的網路。企業如果有架設自己的 KMS，則 PC 就不需要連回 internet 跟 microsoft 驗證。但是那台 KMS 則還是要定期跟 Microsoft 回報。

因此，回到主題，這也是為何我前面的文章都先暫時跳過 KEY STORE 這部分的原因。扯到 KEY 的管理，就有太多技術手段以外的故事可以講了，實在是防不勝防，有時你還是得考慮用正規的做法比較可靠。若營運的支出許可，去申請個公司用的憑證，花一點費用，用 CA 發的憑證來做這些動作是最安全可靠的。你的系統多安全，不是取決於你的程式碼，而是你的 KEY 如何管理。各位可以自行評估合適的方案。

數位簽章的部分就先補充到這裡。這系列文章還沒結束喔，後面還有 API 等其他的應用~]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date><![CDATA[2016-03-19 17:08:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-19 09:08:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casestudy_license_03_appendix_key_management]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[862]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[實戰] 十分鐘搞定! 在 Azure 上面佈署 Docker Container! - Docker Cloud 託管服務體驗</title>
		<link>http://columns.chicken-house.net/2016/02/29/labs_docker_cloud_with_azure/</link>
		<pubDate>Mon, 29 Feb 2016 09:29:16 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=923</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="fdcJXgX"><img class="size-full wp-image-961 aligncenter" src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40b3783dce.png" alt="" /></p>
之前一直預告要在 Azure 上面快速佈署 Docker Engine / Container, 現在終於做到這一個步驟了。由於之前一直都是 Linux 的門外漢，所以講了一口好架構，但是真的要實作驗證時，總是碰到不少難關，現在一一克服了，就把這些過程整理一下~

<!--more-->

前面幾篇跟 Docker 相關的文章，都著重在單機的佈署跟管理上面。為了加速對基礎架構的了解，我都選擇自己動手下 docker 的指令來完成。不過實際上大規模管理時，應該要有更有效率的方式。有效率不代表不用指令，而是只靠單機的 docker engine 指令是不夠的。相關的幾套工具可以大幅簡化這個挑戰:

&nbsp;
<h3>Docker Machine</h3>
大規模的佈署，第一個挑戰就是你要快速的建立好幾個 Docker Host, 也就是建立已經安裝好 Docker Engine 的 Linux Server (實體 / 虛擬機器)。你要佈建 Docker Host 的地方，可能是你自己的 Data Center, 或是其他 Public Cloud Provider 都有可能。Docker Machine 的目的就是解決這個需求產生出來的管理工具，同時他的架構下也支援外掛各種不同的 Cloud Provider，因此你可以用一樣的指令，在 Azure、Amazon Web Service、Hyper-V、VMWare 等等 IaaS 或是虛擬化環境內，快速幫你建立大量 Docker Host 的管理工具。有興趣的讀者可以參考官方網站的說明: <a href="https://docs.docker.com/machine/overview/" target="_blank">Docker Machine Overview</a>

&nbsp;
<h3>Docker Compose</h3>
如果你在意的是你的 Service 如何快速佈署在既有的基礎上，你需要的是 Docker Compose。已我自己的例子來說，最基本的 WordPress, 我會選擇分成四個 Container 來佈署我的服務:
<ol>
	<li><span style="text-decoration: underline;"><strong>Reverse Proxy</strong></span> - 用 NGINX 當作前端，用來處理新舊系統的轉址、網站發佈、Cache、Load Balance 等等任務</li>
	<li><span style="text-decoration: underline;"><strong>Web</strong></span> - 實際執行 WordPress 的 container</li>
	<li><span style="text-decoration: underline;"><strong>DB</strong></span> - 實際執行 MYSQL 的 container</li>
	<li><span style="text-decoration: underline;"><strong>DATA</strong></span> - 單純簡化管理 volumes 的 container, 選用的架構。實際上不需要啟動 (RUN)</li>
</ol>
單一一個服務就要建立四個 container, 還要指定彼此之間的連結，單靠 docker engine 的指令來做實在太辛苦了。Docker Compose 就是解決這類問題的好工具。你只要先把上述的架構寫成一個設定檔，接著一道指令下下去，就幫你把整組服務建立好了。

詳細的介紹，可以參考官方網站的說明: <a href="https://docs.docker.com/compose/overview/" target="_blank">Docker Compose Overview</a>

&nbsp;
<h3>Docker Swarm</h3>
如果我佈署了好幾台 Docker Machine, 我也把我的服務都用 Docker Compose 規畫好了，下個問題就是 High Availability 了。舉例來說，我想提高 WordPress 的可用性，想把 WordPress 的 container 分別佈署在兩台 Docker Machine 上執行，一台掛掉或維護，另一台可以接手? 或是自動擴充，尖峰時刻兩台跑不動時，自動擴充第三台來分散流量?

這些問題，牽扯到 Docker Hosts 之間的溝通，也牽捨道 Container 的佈署調度，細節甚至包含多個 Docker Hosts 之間的資源調度 (RAM、CPU、DISK)，以及多個 Docker Hosts 間的網路通訊，這就是 Docker Swarm 想要解決的問題。一樣，詳細的介紹可以參考官網: <a href="https://docs.docker.com/swarm/overview/" target="_blank">Docker Swarm Overview</a>

看起來架構是很漂亮沒錯，不過... 全部要自己實作實在是有難度啊，於是這幾個月我一直在嘗試各種能解決我這些困擾的工具 &amp; 服務，過程我就略過不提了，最終我採用的是 Docker 官方的 Docker Cloud!

&nbsp;
<h3>Docker (官方) 的託管服務: Docker Cloud</h3>
<img src="http://static4.ithome.com.tw/sites/default/files/styles/picture_size_large/public/field/image/docker_cloud.jpg?itok=4E_uQGFh" alt="" />

<a href="http://cloud.docker.com" target="_blank">Docker Cloud</a> 是 Docker 旗下的服務之一，跟 Docker Hub 這公開的 Repository 都共用同一組帳號。Docker Cloud 前身是 Tutum，專注在提供良好的 Docker 託管服務。所謂的 "託管"，就是只幫你做管理而已，而 Hosting 這件事則是你自己處理，你可以用 Azure, Aws, 甚至自己準備機器都行，Docker Cloud 則提供了很好的整合介面及服務，幫你把這堆複雜的問題簡化成單一介面。

這邊我就不做太多介紹，我直接用這個案例，直接從頭到尾做一次，就知道有多簡單好用了。我挑的例子，就用前面說的 WordPress 好了，我想在 Azure 上面從無到有快速搭建我的 BLOG，那到底該怎麼做?

&nbsp;
<h3>#1, 事前準備 - 連結服務帳號</h3>
第一步，當然事先註冊帳號。如果你已經有 Docker Hub 帳號那可以直接沿用，沒有就註冊一個，過程我就跳過了。註冊成功後登入畫面會有介紹跟教學~
<p id="mFVLlvY"><img class="alignnone size-full wp-image-926 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec187fa12.png" alt="" /></p>
&nbsp;

連結你其他雲端 IaaS 服務的帳號。Docker Cloud 支援這幾種，今天要示範的是 Windows Azure:
<p id="BdJSFZf"><img class="alignnone size-full wp-image-927 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ec9c9a41f.png" alt="" /></p>
&nbsp;

點選 "Microsoft Azure" 這項的 "Add credentials", 會跳出設定視窗:
<p id="ZFTNadc"><img class="alignnone size-full wp-image-928 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ecf8a9fc9.png" alt="" /></p>
&nbsp;

這邊要設定 Docker Cloud 跟 Microsoft Azure 兩者間的授權連結。你要先從 Docker Cloud 下載管理憑證，然後稍後把這個憑證上傳到 Microsoft Azure, 最後回填 Microsoft Azure 的 Subscription ID, 就完成整個授權的動作。完成之後 Docker Cloud 就能代表你去 Microsoft Azure 建立 VM 等等細節。
<p id="jqgelrz"><img class="alignnone size-full wp-image-929 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ede830a79.png" alt="" /></p>
&nbsp;

在就版的 Microsoft Azure Management Portal 內，左方的 [設定]，切到 [管理憑證] 頁籤，上傳前一個步驟從 Docker Cloud 下載的憑證。完成後把你的 Subscription ID 填到 Docker Cloud 的畫面就大功告成!
<p id="xysLiLy"><img class="alignnone size-full wp-image-930 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3eecb7485b.png" alt="" /></p>
&nbsp;

整個截圖塗得很難看 =_=，各位將就一點 XD。看到這個畫面有認證成功的綠色小勾勾，就代表大功告成! 可以繼續往下一步邁進了!
<p id="LsqEopH"><img class="alignnone size-full wp-image-931 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3ef3149f4f.png" alt="" /></p>
做到這邊要小心喔，之後 Docker Cloud 會代表你的身分，按照你的操作，替你在 Azure 上面建立需要的資源，像是 VM 或是 DISK 等等。這些都會產生額外的 Azure 費用。如果你不確定你做的動作會有甚麼影響，切記要隨時回到 Azure 的管理介面查看!

&nbsp;
<h3></h3>
<h3>#2, 開始佈署 - 在 Azure 上面建立 Docker Cloud Nodes</h3>
兩個服務的連結完成之後，接著就要開始準備 VM 了。雖然 Docker Cloud 支援連結你自己既有的 Linux Server, 不過我親自試過了，過程有點小麻煩，不但要自己設定防火牆，安裝 Docker Cloud Agent，同時 Docker Cloud Agent 還會自帶 Docker Engine (<a href="https://docs.docker.com/docker-trusted-registry/cse-release-notes/" target="_blank">商業化版本的 Docker Engine Commercially Supported</a>), ，如果你的 Server 已經裝了 Docker, 則服務會被停掉並且移除。Microsoft 在 Azure 上預先為你準備的 Ubuntu + Docker VM, 在這邊派不上用場。我建議就全部從 Docker Cloud 上面，直接由她替你新增 VM，這是最簡單的步驟。以下我就這樣示範:

&nbsp;
<p id="HocyrDi"><img class="alignnone size-full wp-image-932 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f08476c87.png" alt="" /></p>
先說明一下 Docker Cloud 管理的架構，後面都會用的到。整個管理介面分幾個部分:

<span style="text-decoration: underline;"><strong>Welcome</strong></span>:
資訊首頁，有教學、相關資訊等內容。

<span style="text-decoration: underline;"><strong>Stacks:</strong>
</span>定義你的應用程式堆疊。你可以把她想像成管理 Docker Compose 設定的地方。每一項 Stack 都是由好幾個 Service 組成的。

<span style="text-decoration: underline;"><strong>Service:</strong>
</span>定義你的服務，你可以把她想像成管理 Docker Container 的地方。這邊的 Service 是邏輯上的服務，實際上可以是由一個或多個 Container 組成。舉前面 WEB 的例子，WEB 是個 Service，但是為了做到 HA，可能由兩個 Container 組成。

<span style="text-decoration: underline;"><strong>Nodes:</strong>
</span>就是 Docker Host, 實際連結能管理的 Docker Host 列表。你可以把這邊當成對等 Docker Machine 的功能。設定好的 Nodes, 將來你可以手動或自動的決定那些 Service or Container 要放在那些 Nodes 上。

&nbsp;

OK，因此我們現在要建立第一個 Node，從 Docker Cloud 的 Nodes &gt; Launch your first node，可以看到下列畫面:

&nbsp;
<p id="FbSjFPO"><img class="alignnone size-full wp-image-933 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f2084c3f1.png" alt="" /></p>
這邊你可以選擇你要在哪個供應商的服務上面建立 Node。這邊當然是選 Microsoft Azure, 你可以同時指定 Azure 的機房地點、VM 的規格、你要一次建立幾台、還有你的 Disk size 要配置多大。完成後按下確定，接下來等幾分鐘等她佈署完成就可以了。這邊我選擇的是 Basic A1 等級的 VM (1 CPU, 1.75GB RAM) + 額外的 60GB HDD

這邊提醒一下，很多進階的應用都需要一個以上的 Nodes, 不過 Docker Cloud 免費帳號只支援一個 Node, 因此這邊我就不做進階的示範了。多一個節點一個月要 USD $15 的費用，相當於每小時 USD $0.02 (對應到台幣 0.6 元/小時，或是 450元/月)。這只是託管的費用喔，VM 本身的費用 Azure 會另外跟你收... 需要多少就看個人需求了。

&nbsp;
<p id="OYzRqLa"><img class="alignnone size-full wp-image-934 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f378625ea.png" alt="" /></p>
&nbsp;

這個畫面大概會停個 5 ~ 10 分鐘左右。等待的過程中，我同時連到 Azure 的管理介面，看看他幫我採購了什麼資源?
<p id="lbVnqIm"><img class="alignnone size-full wp-image-935 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f3e2ab525.png" alt="" /></p>
&nbsp;

果然，對應規格的 VM 被建立起來了...
<p id="ayilmNf"><img class="alignnone size-full wp-image-936 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f41c2ef84.png" alt="" /></p>
對應的雲端服務 (管理需要，沒有額外費用) 也被建立起來了

&nbsp;
<p id="xlBsgwT"><img class="alignnone size-full wp-image-937 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f471ce466.png" alt="" /></p>
如果你用的是新板的管理介面，那要在 "虛擬機器(傳統)" 這邊才看的到..

&nbsp;
<p id="aZMgiIX"><img class="alignnone size-full wp-image-938 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f4da11d1b.png" alt="" /></p>
整個 VM 的運作狀況，都可以在這邊觀察的到

&nbsp;
<p id="mLArvFg"><img class="alignnone size-full wp-image-939 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f501f1a68.png" alt="" /></p>
其實什麼都不用作，只要等就可以了。等到完成後，你就可以開始佈署你的服務了! 到這邊這個階段也大功告成!

&nbsp;
<h3>#3, 開始佈署你的應用程式 (Stacks)</h3>
接下來就是跟你的服務相關的配置了。我先假定你知道 Docker Compose 是幹嘛用的，這邊就是用 Docker Compose 的觀念來設定你的服務。Docker Cloud 把它稱作 Stacks, 基本上是跟 Compose 相容的服務，但是有它額外延伸擴充的標記。這邊我就不額外說明，有興趣可以看它上方的 Docs ，會連結到他的官網，有詳細的說明。

&nbsp;
<p id="nVJUthY"><img class="alignnone size-full wp-image-940 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f5d4b39b5.png" alt="" /></p>
&nbsp;

從 Stacks &gt; Create your first stack, 就可以建立你第一個應用了。點選後會出現下列畫面:
<p id="PqWoAqI"><img class="alignnone size-full wp-image-941 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f61ec1c0e.png" alt="" /></p>
&nbsp;

這邊只有兩個設定，一個是你的 Stack name, 放的是整個服務的名字，我這邊填 "My Blog" 。Stackfile 則是放你的組態檔，你可以點下方 "try ours" 他會幫你填個範本進來.. 我這邊自己寫了一組:
<pre class="lang:ini decode:true ">db:
  image: 'mysql:latest'
  environment:
    - MYSQL_ROOT_PASSWORD=YES
  restart: always

web:
  image: 'amontaigu/wordpress:latest'
  links:
    - 'db:mysql'
  ports:
    - "80:80"
  restart: always</pre>
看的懂 Docker Compose 的設定檔的人大概就不用我多做解釋了。基本上就是標是我需要建立兩個服務: web / db. 標記每個服務用的 image file, 預設會到 http://hub.docker.com 去取得。啟用 container 的必要參數也都列在上面了，web 會連結到 db 這個容器，web 也宣告了要將 host 的 80 port 對應到 container 的 80 port...

&nbsp;
<p id="uufckJM"><img class="alignnone size-full wp-image-942 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f76672a62.png" alt="" /></p>
按下 "Save and Deploy" 後，Docker Cloud 就會接著替你把後續的動作搞定了。從 Stacks 畫面可以看到，按照設定，兩個對應的服務 (db &amp; web) 就按順序被建立起來了。一樣等 3 ~ 5 分鐘就好了。

&nbsp;
<p id="SDbfYfP"><img class="alignnone size-full wp-image-943 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f7e2a6ca2.png" alt="" /></p>
服務都已經佈署完成，也都變成 Running 狀態了。其實到現在就已經全部完成了。但是... 我該怎麼連到我的部落格?

&nbsp;
<p id="pplxiTt"><img class="alignnone size-full wp-image-944 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f82f4f94a.png" alt="" /></p>
把 Stacks 的頁籤，從 Services 切到 Endpoints, 就可以看到這些服務所用到的 Endpoints 列表。Docker Cloud 替你整合了 DNS，直接幫你只定了你專屬服務的 FQDN，你可以省去自己搞 DDNS 的麻煩。如果不介意網址醜一點，其實這樣就可以用了。如果你想改成你自己的網址、在你自己的 DNS 加上一筆別名 (CNAME) 就可以了，比起過去我自己搞了 DDNS 等等，還裝 DDNS Client 定期自動更新 IP address 一堆東西弄半天，真是簡單太多 @@。

&nbsp;

接著點選看看 URL:
<p id="JBQqCWR"><img class="alignnone size-full wp-image-962 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40dede7117.png" alt="" /></p>
&nbsp;

果然，看到了 WordPress 第一次啟動的設定畫面...
<p id="lOkpJEc"><img class="alignnone size-full wp-image-946 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f915456de.png" alt="" /></p>
&nbsp;

資料填完了，果然就可以登入管理畫面，開始寫 BLOG ..
<p id="xeqWejw"><img class="alignnone size-full wp-image-947 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3f93be6559.png" alt="" /></p>
&nbsp;

當然首頁也看的到了。到此為止，整個任務全部結束，你已經有一個穩定可靠的服務，在 Microsoft Azure 上面成功的運作，而且你也可以用 Docker Cloud 的管理介面輕鬆的維護他們。很簡單吧?

&nbsp;
<h3>調整服務架構 - 重新佈署</h3>
接下來補充一些前面沒提到的細節。用過 Docker 的大概都知道，Docker Container 一旦建立之後，很多參數是沒辦法修改的，例如 Ports / Volumns 的對應，想修改只有砍掉重建一途。重建其實很簡單，但是如果當初建立的指令沒有留下來，要重打一次是很惱人的.. 有管理介面的好處就是讓你可以省掉這些功夫...

舉例來說，所有設定的源頭都是在 Stackfile.. 如果我調整了 stackfile 的內容:

&nbsp;
<p id="gKqaVxi"><img class="alignnone size-full wp-image-948 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3faf11839a.png" alt="" /></p>
修改的功能: Stacks &gt; MyBlog &gt; Edit, 修改內容後 Save

&nbsp;
<p id="lSIkScD"><img class="alignnone size-full wp-image-949 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fb1e773ca.png" alt="" /></p>
Docker Cloud 會自動偵測有哪些服務需要重新佈署。在 Running 的狀態旁邊會有明顯的 ! 警告，你必須重新佈署 (Redeploy) 才會生效。你可以按上方的 Redeploy 按鈕，重新佈署整個 stack, 或是針對特定的 service / container, 只重新佈署特定的部分即可。重新佈署就是剛才提到，砍掉 container 重新建立一次而已，有是先做好規劃的話資料跟服務都不會中斷。

&nbsp;

前面提到的 HA (High Availability)，在這邊就派上用場了。你可以點進去，把提供 web 服務的 containers 數量增加:
<p id="fpcJlWo"><img class="alignnone size-full wp-image-951 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3fc58e48b4.png" alt="" /></p>
&nbsp;

不過，因為我已經指名要對應 80 port, 你必須有第二個 node 才能佈署第二個 container, 因此跳出這個警告... 要避開這個限制，你可以指定動態的 Ports mapping。這麼一來，每個 container 不會占用同一個 port, 就不會有這個問題。不過這麼一來，你就必須再前端多架設一個 reverse proxy, 替 user 做 port 的轉址。各位可以自行想像一下.. 如果你成功的用兩個以上的 container 提供你的 service, 那麼在重新 redeploy 時，你只要一次 redeploy 一個，完成後再 redeploy 第二個，你的服務就完全不會中斷。

&nbsp;
<h3 id="sYVFwpq">其他介紹補充</h3>
這篇是我另外準備的 demo, 實際上各位看到的 BLOG，我已經用同樣的方法，搬移到上個月敗家的 Mini-PC 上了，讓我快速搬移完成的，靠的就是之前準備好的 Docker Container, 以及 Docker Cloud 服務。給各位參考一下實際的案例:

&nbsp;

<img class="alignnone size-full wp-image-952 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d3feb916696.png" alt="" />

這是我的 SERVER 上提供的所有服務 (stacks)，columns 就是這個部落格服務，裡面有 web / db, 而我還有其他服務都要共用 80 port, 因此我把 proxy 獨立成第二個 stack. 其他 issues 是 redmine, git 是 gitlab-ce 的服務，都是用一樣的方式建立的。會很麻煩嗎? 其實不會，從開始研究 Docker Cloud 開始，到建立完成，才花了一天不到的時間...

&nbsp;
<p id="GRbfuLg"><img class="alignnone size-full wp-image-955 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d400b6d128b.png" alt="" /></p>
換個管理的角度，看看我的 node 上總共跑了那些 container? 當然也可以看所有的 endpoints, 或是用流水帳 (timeline) 顯示過去的操作歷程.. 我個人用的情況，機器是我自己的 (就是<a href="http://columns.chicken-house.net/2016/02/07/buy_minipc_server/" target="_blank">上次的敗家文，對岸淘寶買的 MINI-PC</a>)，加上只有一個 node, 因此 Docker Cloud 上的服務也是免費的。完全免費的情況下，能得到過去要用雲端大廠才擁有的 IaaS / PaaS 才有的服務，真的是太划算了。強烈推薦各位，有需要的話絕對值得試一試~ 如果實際工作上有需要，我想花一點費用來託管，省下一個專職的管理人力，也是很划算的。

&nbsp;

補充一下前面都沒機會提到，就是 Docker Cloud 跟 Repository 的整合。Docker Cloud 提供每個免費帳號一個 Private Repository, 這個下次有機會再探討。今天先探討跟 Public Repository 整合的部分。你要單獨新增一個 Service 是很簡單的:
<p id="FXtGnDT"><img class="alignnone size-full wp-image-956 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d40770622c5.png" alt="" /></p>
&nbsp;

只要到 Services &gt; Create service, 就可以跳到這畫面。我打了 keyword: wordpress, 就列出所有我可以用的 images:
<p id="csmhQJB"><img class="alignnone size-full wp-image-957 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407bda230e.png" alt="" /></p>
&nbsp;

接著下一步，就是補上你的設定，按下 SAVE 就完成設定與佈署... 你的服務就可以上線了
<p id="SdxfFpi"><img class="alignnone size-full wp-image-958 " src="http://columns.chicken-house.net/wp-content/uploads/2016/02/img_56d407ffa638c.png" alt="" /></p>
這樣的整合，遠遠比 NAS 廠商提供的介面更加優秀好用。反正只用一套都是免費，NAS 買了也就包含硬體部分的費用了。NAS 廠商以後是否有考慮內建跟 Docker Cloud 整合? 比如 NAS 保固期間，把 NAS 加入 Docker Cloud Nodes 則免費之類的 XD，這樣的話我會捧場!

&nbsp;

&nbsp;
<h3>後記</h3>
操作到這邊，是不是很簡單? 原本我只是想找個像 Synology Docker 一樣的管理介面來用，後來發現 Docker Cloud 已經遠遠超過我的想像了! 做這些 Hands On Labs, 總讓我有個感想，當年透過 Azure Cloud Service, 很簡單就得到這樣佈署管理的能力，讓我感動了很久。沒想到發展到現在，同樣層級的管理能力已經可以做到跨越不同的雲端服務了，甚至是我這種 Linux 新手自己自建的服務都可以做到這種層級的服務水準... 時代的進步果然是快到無法想像..

這篇就我自己留個紀錄，同時也提供給有需要參考的讀者們使用~

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>923</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 17:29:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 09:29:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[labs_docker_cloud_with_azure]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7a1f13b24d4b027860f84589c6a70780]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[960]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[樂CODE] Microsoft 面試考題: 用 CPU utilization 畫出正弦波</title>
		<link>http://columns.chicken-house.net/2016/03/12/cpu_sinewave/</link>
		<pubDate>Fri, 11 Mar 2016 17:25:19 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=973</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter" src="http://i0.wp.com/image.thenewslens.com/wp-content/uploads/2014/04/9203944653_c988ab58f5_z.jpg?zoom=1.5&amp;resize=640%2C466" alt="9203944653_c988ab58f5_z" width="386" height="281" />

故事的開頭很簡單，起因就只是某個上了年紀的大叔，逛到別人的面試題目，發現答不出來就一頭鑽進去，輸不起的故事而已 XD

<!--more-->

每次看到 "<strong>這是XXX(大公司)的面試題目</strong>" 這種聳動的標題，我都覺得那只是噱頭而已...  直到某日亂逛靠北工程師，看到這則留言:
<p id="zxHuaiG"><img class="alignnone size-full wp-image-974 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee24543173.png" alt="" /></p>
&nbsp;
<h3><em><strong>"什麼!!! Microsoft 面試考這個?"</strong></em></h3>
長年都抱著 Microsoft Solution 在研究的我，怎麼能錯過這個考驗? 想想這題目還蠻有趣的，於是一時手癢，就開了 Visual Studio 2015 動起手來... 中間的過程就省略了，其實程式沒幾行，控制 CPU 使用率的原理，還有三角函數搞得清楚就沒問題了。結果不到十分鐘，第一版就出來了，直接看結果:
<p id="Zxcqwjx"><img class="alignnone size-full wp-image-975 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee4e3127bd.png" alt="" /></p>
這是 sin wave? @@, 用點想像力的話，結果是沒有錯啦，不過這也太難看了一點 T_T

好像做失敗的蛋糕，外在內在都沒有 @@，形狀勉強算是 sin 的波形啦，不過那個雜訊干擾也太多了吧.. 實在太糟糕，這版 source code 我就不貼出來了...

&nbsp;

稍做一點改變，原本程式是在本機執行，為了避免其他背景程式的影響，也先暫時避開 8 core 不大好控制的因素，改開 1 core 的 VM 在裡面執行。OS 安裝 Windows 2012R2 server core, 用最精簡的安裝，最少的背景程序，將影響 CPU utilization 的因素降到最低。

改善過後的波形...:

<img src="https://scontent-tpe1-1.xx.fbcdn.net/hphotos-xal1/v/t1.0-9/12512448_10204274956434167_8308402654463171370_n.jpg?oh=fca0f967e5ff733a600d0f5fb37cfa4b&amp;oe=5754FFC1" alt="" />

Orz, 這什麼鬼? 勉強比上一個好一些，還看的出來是個 sine wave 啦 =_=

&nbsp;

於是仔細想下去，才發現... 這題目雖然不難，但是你要做得漂亮也不是那麼簡單... 好像當年在念訊號處理一樣，最難搞的就是類比訊號。要處理訊號並不難，難的是類比訊號要有完美的波形可不是件容易的事! 就跟這個題目一模一樣，寫得出來不稀奇，你的波形要漂亮才叫了不起。不服輸的脾氣來了，就一鼓作氣的改下去...

&nbsp;

繼續下去前，先來說明一下基本的運作原理。其實程式的運作方式很簡單，就像微積分一樣，把圖形切成很系的不同時段，我只要控制在那個時段內的 CPU 使用率，在我想要的數值內就夠了。剩下只要隨著時間的變化，讓 CPU 的使用率隨著 sin(time) 來變化就夠了。先把正弦波調整一下，調整一下震幅大小，同時也把波形位移一下...，如下圖:
<p id="qrTyLQx"><img class="alignnone size-full wp-image-988 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2e918afcd9.png" alt="" /></p>
Orz, 好久沒算數學了, 不過這種題目就是要計算啊...sin(x) 的值是從 1 ~ -1 之間變化，所以我做了位移 + 縮放，最後我真正要的函數是 f(x) = (sin x + 1) / 2。我只要把時間按照指定的單位切割成小段 (我用的是 100ms), 然後把每一段的時間當作 x 帶入計算，就可以知道這段時間內我要把 CPU 使用率控制在多少 % ...

下一個問題就是 CPU 使用率控制的問題了。我的假設是 <a href="https://zh.wikipedia.org/wiki/%E5%BF%99%E7%A2%8C%E7%AD%89%E5%BE%85" target="_blank">busy waiting</a> 的程式碼，會造成 CPU utilization 達到 100%, 剩下我只要控制 CPU utilization 達到 100% 的時間要維持多久就行了。舉例來說，若我讓 busy waiting loop 每 100ms 執行 50ms，那麼當下我就會得到 CPU utilization 為 50% 的圖形.. 如上圖，如果我控制每一區段時間長度是 100 ms, 那麼 (sin x + 1) / 2 若等於 70%, 那麼代表 busy 的部分需要執行 100ms x 70% = 70ms, 而剩下的 100ms x 30% = 30ms 則是進入 idle 的狀態。

&nbsp;

這樣其實是沒錯啦，不過問題開始出現了:
<ol>
	<li>busy waiting 只對1 cpu core 起作用，我的 PC 有 4core / 8threads..., busy waiting 只能到達 12.5% 的負載</li>
	<li>讓 CPU 忙碌的部份解決了，但是怎麼讓 CPU "<strong>很精確的</strong>" 空閒? 空閒的部分做任何事情，也都會影響到 CPU utilization..</li>
</ol>
&nbsp;

突然發現，這些技巧其實都是過去研究<a href="http://columns.chicken-house.net/category/thread/" target="_blank">多執行緒</a>還有<a href="http://columns.chicken-house.net/category/os/" target="_blank">作業系統</a>碰到的問題啊，哈哈哈... 還好過去累積了不少這些知識，現在可以拿來現寶了 XD，第一個很簡單，我只要用 multi-threading 或是開個只配置 1 core 的 VM 就搞定了，跳過!

&nbsp;

第二個問題就有趣了，事實上我有一堆方法讓 "程式" 休息一段時間。然而過去的知識告訴我，Thread.Sleep( ) 精確度低，而且呼叫他會讓目前的執行緒進入 IDLE 狀態，等到下次 OS 喚醒他，對於時間有精確控制的需求時是不適用的。相對的應該用 SpinWait 這類別，他會搭配 HLT 的指令，進行忙碌等待 (busy waiting)，同時又能讓 CPU 的使用率保持很低的狀態...。怎麼看都應該選用 SpinWait 啊...

不過我還是爬了文，也做了點實驗，發現很多東西都有變化了 XD，首先，爬到 darkthread 的這篇 (<a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2007/03/24/657.aspx" target="_blank">KB-測試Thread.Sleep的精確度</a>)，提到 Sleep( ) 的精確度很糟糕，糟到連 15ms 的精確度都達不到...

但是真的寫一段 CODE 來確認，反倒讓我跌破眼鏡... Sleep( ) 的精確度已經不是吳下阿蒙了，也許我的主機板比較威一點... 看來是很精確的。但是 Sleep( ) 的結果的卻是飄移的比較厲害，容易受到 OS 的影響而有變化。反觀 SpinWait.SpinUntil( ), 飄移的幅度較小，但是精確度也沒好到哪裡去，就是省掉 context switch 的不確定性而已... 附上執行結果及測試用的程式:

&nbsp;

[caption id="attachment_996" align="alignnone" width="270"]<img class="wp-image-996 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e385cf5a90e.png" alt="" width="270" height="415" /> <em>沒有背景的干擾情況下，分別用 Sleep( ) 及 SpinUntil( ) 分別 IDLE 10 ms 的結果</em>[/caption]

&nbsp;

[caption id="attachment_989" align="alignnone" width="288"]<img class="wp-image-989 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e2ecf83bddb.png" alt="" width="288" height="437" /> <em>開了 10 threads 當作背景的干擾，分別用 Sleep( ) 及 SpinUntil( ) 分別 IDLE 10 ms 的結果</em>[/caption]

&nbsp;

<span style="text-decoration: underline;"><strong>測試精確度用的程式碼:</strong></span>
<pre class="lang:c# decode:true">class Program
{
    static bool stop = false;

    static void Main(string[] args)
    {
        // noise: background threads
        {
            for (int i = 0; i &lt; 10; i++)
            {
                Thread t = new Thread(Foo);
                t.Start();
            }
        }

        Stopwatch timer = new Stopwatch();
        TimeSpan idle = TimeSpan.FromMilliseconds(10);

        // test Thread.Sleep()
        for(int i = 0; i &lt; 10; i++)
        {
            timer.Restart();
            Thread.Sleep(idle);
            Console.WriteLine("Sleep(10): take {0} ms", timer.ElapsedMilliseconds);
        }

        // test SpinWait.SpinUntil()
        for(int i = 0; i&lt;10; i++)
        {
            timer.Restart();
            SpinWait.SpinUntil(() =&gt; { return false; }, idle);
            Console.WriteLine("SpinUntil(10): take {0} ms", timer.ElapsedMilliseconds);
        }

        stop = true;
    }

    static Random _rnd = new Random();
    static void Foo()
    {
        while (stop == false) ;
    }
}</pre>
&nbsp;

從結果來看，在有背景程式 (noise) 的干擾下，在 10ms 這樣的 scale 下，兩者的精確度都沒有好到哪裡去。雖然 Sleep( ) 的誤差比較小，但是飄移的範圍較大，從 10ms ~ 31ms 都有。相較之下 SpinUntil( ) 就穩定的多，少掉 context switch 的不確定性，表現平均的多，大致落在 23ms ~ 26ms 之間。不過誤差比較大，我指定的時間是 10 ms 啊...

只能這樣推測了，不過還想不到什麼方法證實... SpinUntil( ) 主要是用 delegate 讓使用者傳入判斷式，.NET framework 不斷的執行這個 delegate, 來判定是否要跳出? 而 time out 的設定只是這 "Busy Waiting" 機制的執行上限而已。簡單算了一下，10ms timeout 時間的設定下，delegate 其實已經被執行了 130 ~ 150 次不等。這應該是延遲的主因吧? 相較之下 Sleep( ) 應該單純的多，只要 OS 跟主機板的 timer 精確一點就能提高精確度了。

&nbsp;

測到這邊，我只能說... 理論跟實際還是有差距的啊啊啊... 我不確定 .net framework 的內部實作有甚麼特別的考量，不過實驗出來的結果的卻跟我預期有點出入。我花了點時間，查了 Spin 的機制是怎麼設計的:

&nbsp;

<span style="text-decoration: underline;"><strong>Spin Wait:</strong></span>
<p style="padding-left: 30px;"><em>多執行續的控制手段中，常常會拿 SpinWait 來實作 busy waiting 的技巧。SpinWait 能夠達到 Busy waiting 的要求，同時又不會讓 CPU utilization 飆高。</em></p>
<p style="padding-left: 30px;"><em>先來看看系統底層怎麼實作 SpinWait( ) 吧.. 關鍵在於 infinite loop 內插入一段 HLT 指令。看一下 wikipedia 的說明:</em></p>
<p style="padding-left: 30px;"><em><strong>HLT [<a href="https://en.wikipedia.org/wiki/HLT" target="_blank">https://en.wikipedia.org/wiki/HLT</a>]</strong></em></p>
<p style="padding-left: 30px;"><em>Almost every reasonably modern processor <a title="Instruction set" href="https://en.wikipedia.org/wiki/Instruction_set">instruction set</a> includes an instruction or sleep mode which halts the processor until more work needs to be done. In interrupt-driven processors, this instruction halts the CPU until an external interrupt is received. On most architectures, executing such an instruction allows the processor to significantly reduce its power usage and heat output, which is why it is commonly used instead of <a title="Busy waiting" href="https://en.wikipedia.org/wiki/Busy_waiting">busy waiting</a> for sleeping and idling.</em></p>
<p style="padding-left: 30px;"><em>不過，搞到插入組語也太累了吧，.NET Framework 已經幫我們包裝好這個需求了，只要直接用 SpinWait 這個 class 就夠了:</em></p>
<p style="padding-left: 30px;"><em><a href="https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&amp;l=EN-US&amp;k=k(System.Threading.SpinWait);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.6.1);k(DevLang-csharp)&amp;rd=true" target="_blank">SpinWait Structure</a></em></p>
<p style="padding-left: 30px;"><em><span class="selflink">SpinWait</span> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.</em></p>
&nbsp;

研究到這裡，我決定做個規模大一點的實驗... 除了基本的 Sleep( ) 及 SpinUntil( ) 兩種做法之外，我另外弄了兩種改良的作法，嘗試修正原作法的弱點:

Advanced Sleep( ): 改用 busy waiting 的做法，用 while( !isTimeout ) Thread.Sleep(0); 的做法折衷處理。
<pre class="lang:c# decode:true">// test advanced Thread.Sleep()
stat.Reset();
for (int i = 0; i &lt; testrun_count; i++)
{
    timer.Restart();
    while (timer.Elapsed &lt; idle) Thread.Sleep(0);
    temp = timer.Elapsed;
    Console.WriteLine("- Advanced Sleep(): take {0} ms", temp.TotalMilliseconds);
}
</pre>
&nbsp;

Advanced SpinUntil( ): 不用原本內建的 Timeout 機制，改用 callback 的機制同時控制 Timeout: SpinWait.SpinUntil(()=&gt;{return isTimeout;}) 替代。
<pre class="lang:c# decode:true">// test advanced SpinWait.SpinUntil()
stat.Reset();
for (int i = 0; i &lt; testrun_count; i++)
{
    timer.Restart();
    SpinWait.SpinUntil(() =&gt; { return timer.Elapsed &gt; idle; });
    temp = timer.Elapsed;
    Console.WriteLine("- Advanced SpinUntil(): take {0} ms", temp.TotalMilliseconds);
}
</pre>
&nbsp;

完整程式碼就不多貼了，文章最底下有附上 GitHub 連結，請自行採用。我直接跑了 noise thread 0 ~ 10 的結果出來。我分別針對不同方法的 "精密度" 及 "準確度" 來探討。這兩者有啥不同? 可以參考 Wiki 的<a href="https://zh.wikipedia.org/wiki/%E6%BA%96%E7%A2%BA%E8%88%87%E7%B2%BE%E5%AF%86" target="_blank">說明</a>。

<img class="wp-image-1002 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e82e4177266.png" alt="" width="944" height="362" />

先來看準確度吧! 我拿平均值跟理想值來比較，用這個來當作準確度的指標。下圖的 X 軸代表背景的干擾，就是我測試程式內 noise thread 的數量。Y軸代表每種方法各執行 50 次，測到的平均值。圖中Y軸 100 的那條虛線，就是我預期的結果，也是完美方法應該得到的曲線位置。越接近虛線代表越完美。

<img class="alignnone size-full wp-image-997 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39ce8bab6d.png" alt="" />

我的 CPU 是 4 core / 8 threads, 所以可以看到 thread 在 7 的時候，準確度就明顯的開始受影響了。系統預設的 SpinUntil( ) 明顯的有誤差，但是在後面高負載的情況下反而表現最好，看來理論的基礎還是有用的，只不過在我需要的範圍內不見得是最佳的選擇...

我的情況下就是到 8 threads, 在這前提下我修正過的 Adv_SpinUntil 方法看來最理想，比起其他做法來說，有最佳的準確度表現。其他方法誤差太大，準確度的問題會影響最後跑出來的正弦波漂不漂亮... 這四種方法，在 8 noise threads 的情況下，表現依序是:
<ol>
	<li>Adv_Spin</li>
	<li>Adv_Sleep</li>
	<li>Spin</li>
	<li>Sleep</li>
</ol>
&nbsp;

另外一個 "精密度" 又要怎麼看? 我拿 50 次測試結果的標準差，來當作 "精密度" 的指標，越低代表結果越穩定可靠，不會有暴衝的問題。直接來看圖:
<p id="TAOfiin"><img class="alignnone size-full wp-image-998 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56e39f73d83e3.png" alt="" /></p>
<p id="AxvVJyx"> 這張圖的結果也類似，在我期望的範圍內，也是 Advanced SpinUntil( ) 的表現最好，依序是:</p>

<ol>
	<li>Adv_Spin</li>
	<li>Spin</li>
	<li>Adv_Sleep</li>
	<li>Sleep</li>
</ol>
&nbsp;

經過綜合考慮之後，最終我還是選用 Advanced SpinUntil 的機制來控制時間。一來行為表現比較可靠可預測，飄移的狀況較低。二來就架構上他是較合適的，有理論基礎。加上看到 <a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2007/03/24/657.aspx" target="_blank">Darkthread 的文章</a>，Sleep( ) 的精確度會跟硬體有高度相關，很依賴硬體(主機板) 的設計，因此我還是選用架構上較可靠的方案優先，後續的程式碼都改用 Spin 的機制來設計。

&nbsp;

最後，就是盡可能的降低程式本身的誤差造成的干擾，因此我必須盡可能的排除這些因素。這些考量都是一班寫 CODE 時不會留意到的...。CPU 除了 IDLE 之外，其他任何動作都會造成 LOADING，你的程式做了越多額外的動作，越有可能影響 CPU utiization，這就是這個題目考驗的重點之一。感覺好像以前物理學的 "<a href="http://wiki.mbalib.com/zh-tw/%E6%B5%B7%E6%A3%AE%E5%A0%A1%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E5%8E%9F%E7%90%86" target="_blank">測不準原理</a>" 一樣 XD，你沒有辦法在不影響粒子的位置前提下，精確測量到粒子的速度，反之亦然。因此你沒辦法同時精準的測到速度與位置這兩個資訊... 現在也是依樣啊，我為了產生正弦波寫了越多部必要的 CODE，波形受到的干擾就越多...

為了盡一切可能的排除所有來自自身程式碼的干擾，因此我要先確保 IDLE 的部分能執行足夠的時間。所以我調整了程式的執行順序，以求達到最高的精確度:
<ol>
	<li>盡可能地把所有的運算，在初始化的階段就處理掉。複雜的數學運算 (如 sin), 我先抽出來在 init 階段先算好，後面只要用速度最快的查表法 (time complexity: O(1))</li>
	<li>確保 IDLE 的部分能空出足夠的時間，其餘任何額外的運算，都把它歸在 BUSY 的那部分</li>
	<li>BUSY 的部分扣除其他的運算用掉的時間，剩餘部分繼續用 Busy Waiting ( while(true); ) 來填滿。</li>
</ol>
&nbsp;

OK，講了這麼多廢話，開始來看看修正過的結果吧。果然努力是看的到結果的，這次的波形就漂亮多了:

<img class="alignnone size-full wp-image-977 " src="http://columns.chicken-house.net/wp-content/uploads/2016/03/img_56dee7228dd76.png" alt="" />

&nbsp;

來看看經過多次調教後的 source code:
<pre class="lang:c# decode:true">/// &lt;summary&gt;
/// 產生對照表，每個時段對應的附載數值。
/// &lt;/summary&gt;
/// &lt;param name="period"&gt;週期，圖形多久循環一次 (ms)?&lt;/param&gt;
/// &lt;param name="unit"&gt;每個時段的單位長度 (ms)&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static long[] GetDataFromSineWave(long period, long unit)
{
    long steps = period / unit;
    long[] data = new long[steps];

    for (int s = 0; s &lt; steps; s++)
    {
        //long degree = s * 360 / steps
        data[s] = (long)(unit - (Math.Sin(Math.PI * s * 360 / steps / 180.0) / 2 + 0.5) * unit);
    }

    return data;
}

/// &lt;summary&gt;
/// 按照對照表的數據，將圖形用 CPU utilization 繪製出來
/// &lt;/summary&gt;
public static void DrawBitmap()
{
    long unit = 100; // ms
    long period = 60 * 1000; // msec, full image time period

    // get drawing data
    long[] data = GetDataFromBitmap(period, unit);
    //long[] data = GetDataFromSineWave(period, unit);

    Stopwatch timer = new Stopwatch();
    timer.Restart();
    while (true)
    {
        long step = (timer.ElapsedMilliseconds / unit) % (period / unit);
        long offset = (long)(timer.ElapsedMilliseconds % unit);
        long v = data[step];
        long idle_until = timer.ElapsedMilliseconds - offset + v;
        long busy_until = timer.ElapsedMilliseconds - offset + unit;

        // idle part
        SpinWait.SpinUntil(() =&gt; { return (timer.ElapsedMilliseconds &gt; idle_until); });

        // busy part
        while (timer.ElapsedMilliseconds &lt; busy_until) ;
    }
}</pre>
&nbsp;

其實這個程式改過好幾版了，原本是沒有用查表法來加速 sin x 的計算的... 既然花了一番功夫，改成查表法之後，那代表... 我只要改變對照表的內容，就可以畫出任意圖形了不是嗎? 果然人是不會滿足的，基本需求完成後就開始想搞怪了...

程式改一改，產生對照表的來源不再是三角函數，改成由 ascii art 產生的 char map 當作來源。我用字串的陣列，在 source code 裡畫了一些設計圖，想不到啥好點子，就拿快要上映的 batman + superman 當例子吧，來個 batman:

&nbsp;
<pre class="lang:c# decode:true ">public static string[] bitmap = new string[]
{
    @"              XXXX          X      X          XXXX              ",
    @"             X   X          XX    XX          X   X             ",
    @"            X    X         X  XXXX  X         X    X            ",
    @"           X      XXXX     X        X     XXXX      X           ",
    @"          X           XXXXX          XXXXX           X          ",
    @"         X                                            X         ",
    @"        X                                              X        ",
    @"       X                                                X       ",
    @"      X                                                  X      ",
    @"     X                                                    X     "
};

public static long[] GetDataFromBitmap(long period, long unit)
{
    int max_x = bitmap[0].Length;
    int max_y = bitmap.Length;
    long steps = period / unit;

    long[] data = new long[steps];

    for (int s = 0; s &lt; steps; s++)
    {
        int x = (int)(s * max_x / steps);
        int value = 0;
        for (int y = 0; y &lt; bitmap.Length; y++)
        {
            value = y;
            if (bitmap[y][x] == 'X') break;
        }
        data[s] = value * unit / max_y;
    }

    return data;
}
</pre>
&nbsp;

除了用字串陣列，在程式碼裡面畫圖之外，另外也改寫產生對照表的 method, 用同樣的規格傳回對照表，丟到一樣的主程式，執行後的效果變成這樣:

&nbsp;

<img src="https://scontent-tpe1-1.xx.fbcdn.net/hphotos-xfp1/v/t1.0-9/12705619_10204279832556067_6262664502740275173_n.jpg?oh=8733a7a1782fefa2fa32b7f360ec04ca&amp;oe=5797B66F" alt="" />

&nbsp;

來跟正規的 Batman Logo 對比一下...

&nbsp;

<img src="http://www.clipartbest.com/cliparts/LiK/zRp/LiKzRpaia.jpeg" alt="" />

&nbsp;

哈哈哈，還挺有 Fu 的...

好，夠了，我知道我很宅，一大篇寫到這裡，為了個面試題目我竟然還可以搞到一整篇 =_= ....

最後，我只想問...

&nbsp;
<h2>"我這樣算通過 Microsoft 面試了嗎? XDDDD"</h2>
&nbsp;

相關 source code, 有需要的可以到我的 GitHub clone 回去玩玩~

GitHub Project: <a href="https://github.com/andrew0928/Andrew.CPUDraw" target="_blank">Andrew.CPUDraw</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>973</wp:post_id>
		<wp:post_date><![CDATA[2016-03-12 01:25:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-11 17:25:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cpu_sinewave]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="thread"><![CDATA[多執行緒]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d98c811615b7dd1d05c1779cf0bac691]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b9c4f31f075e64671858131b9e001226]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_17466acdf1a9da230f6ed454da758c9a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[992]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何在 VM 裡面使用 Docker Toolbox ?</title>
		<link>http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/</link>
		<pubDate>Sat, 02 Apr 2016 19:38:28 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1015</guid>
		<description></description>
		<content:encoded><![CDATA[這篇一樣是意料之外的文章，不在原本的寫作計畫內 XD

上個禮拜是 Docker 三周年的生日，很難想像一個才剛滿三歲的技術，就已經在整個資訊業界掀起一陣風潮了.. 這次剛好無意間在 FB 的 Docker 社團，看到<a href="https://www.facebook.com/groups/docker.taipei/permalink/1739265086308847/" target="_blank">保哥問了個問題</a> (借保哥的圖用一下):

<hr />

&nbsp;
<p style="padding-left: 30px;"><em>請問有人知道如何在 Hyper-V 下執行 Docker Toolbox 嗎？</em></p>
<p style="padding-left: 30px;"><img src="https://scontent-tpe1-1.xx.fbcdn.net/hphotos-xla1/v/t1.0-9/12924582_10209340119290278_6988112908761034670_n.jpg?oh=12f6109c1681c030a6a1b0ecb700d1c5&amp;oe=57777022" alt="" /></p>
一時手又癢了起來，於是就多了這篇意料之外的文章 XD

<!--more-->

&nbsp;
<h3>關鍵問題: 無法在 VM 裡面建立 VM!</h3>
這次不碎唸了，直接開始正題。Docker Toolbox 是個 Docker 的常用工具箱，讓你可以一次解決在 Windows 下使用 Docker 的所有必要套件。裡面包含 Oracle VirtualBox, 幫你準備好執行 Docker 用的 Linux VM。

其實這次的問題的根源很簡單。由於已經是被模擬出來的 Virtual Machine 了，模擬出來的 CPU 就不再支援<a href="https://en.wikipedia.org/wiki/X86_virtualization" target="_blank"> VT-X / AMD-V 這些硬體輔助的虛擬化能力了</a>。然而 Docker 是需要 Linux 的 Kernel 來運行的，在 Windows 環境下至少要先準備個 Linux VM (Docker Toolbox 預設使用 Virtual Box), 才有能力執行任一個 Docker Container..

因此，想在 VM 裡使用 Docker Toolbox, 第一個問題就是: 如何在 VM 裡再建立一個 VM ?

&nbsp;
<h3>Nested Virtualization Support</h3>
"養兵千日，用在一時"，就是這道理... 要不是之前曾經研究過 windows container，曾經花了些時間看一下 windows server 2016 有啥突破的話，這次也不會馬上就聯想到解決問題的方向。Windows Server 2016 其中一個新功能，就是支援 <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/user_guide/nesting" target="_blank">nested virtualization</a> 的技術。

其實當時看到這功能，心裡覺得不大實用，感覺有點脫褲子放屁... VM 是很花費資源的技術，一層一層的 VM 包裝下去，只是慢上加慢而已，有人會這樣用嗎? 不過這次還真的碰到了!! Docker 帶來一股微服務架構 (<a href="https://en.wikipedia.org/wiki/Microservices" target="_blank">MicroServices</a>) 的風潮，老實說以系統架構的角度來看是個很實用的技術。不過要研究這些技術，如果不能在 VM 裡先玩看看，直接用到實體機總不是那麼方便...

終於找到 nested virtualization 技術應用的地方了，於是就動手開始研究如何解決這問題。我先參考了 Microsoft 放在 MSDN 的官方文件，節錄裡面的重點:
<p style="padding-left: 30px;"><em>Nested Virtualization (<a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/user_guide/nesting" target="_blank">https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/user_guide/nesting</a>)</em></p>
<p style="padding-left: 30px;"><em><img src="https://i-msdn.sec.s-msft.com/en-us/virtualization/hyperv_on_windows/user_guide/media/hvnesting.png" alt="" /></em></p>
<p style="padding-left: 30px;"><em>In this case, Hyper-V exposes the hardware virtualization extensions to its virtual machines. With nesting enabled, a guest virtual machine can install its own hypervisor and run its own guest VMs.</em></p>
&nbsp;

主要的改變，就是 Microsoft 調整了 Hyper-V Hypervisor 的實作方式，讓模擬出來的 vCPU 也具備 Hypervisor 的能力。至於這樣層層疊上去的做法是完全用模擬的? 還是只是把這指令 redir 到 Level 0 的實體 CPU 來處理? 這樣兩層的模擬會有多少效能折損? 這些細節文章就沒提到了。現在討論效能也還太早，其實這技術也還在 preview 階段而已...

&nbsp;

&nbsp;
<h3>替 VM 啟用 Nested Virtualization 的支援</h3>
看懂了原理，接下來就是實際操作。現階段要使用 Nested Virtualization 的功能，有幾個先決條件要符合:
<p style="padding-left: 30px;"><em>Before enabling nested virtualization, be aware this is a preview. Do not use nesting in production environments.</em></p>
<p style="padding-left: 30px;"><em>Requirements:</em></p>

<ul>
	<li style="padding-left: 30px;"><em>4 GB RAM available minimum. Nested virtualization requires a good amount of memory.</em></li>
	<li style="padding-left: 30px;"><em>Both hypervisors need to be the latest Windows Insider build (10565 or greater). Other hypervisors will not work.</em></li>
	<li style="padding-left: 30px;"><em>This feature is currently Intel-only. Intel VT-x is required.</em></li>
</ul>
&nbsp;

軟體的限制是你必須使用 Windows Build 10565 以上的版本，原來我現在用的 Windows 10 (10586) Enterprise 也在支援範圍內啊!! 我本來還一直以為我得裝 Windows Server 2016 才能玩這東西，沒想到得來全不費工夫...

硬體限制很明確，目前只支援 Intel 的 VT-X, 同時至少要有 4GB 以上的 RAM... 正好我的 Intel i7-2600k / 24GB RAM 全都符合.. 通過軟硬體需求。接下來就是啟用這個功能。

&nbsp;

詳細的步驟可參考 <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/user_guide/nesting" target="_blank">MSDN 這篇文章</a>，我只摘要關鍵的部分:
<p style="padding-left: 30px;"><em>Run <a href="https://github.com/Microsoft/Virtualization-Documentation/blob/master/hyperv-tools/Nested/Enable-NestedVm.ps1">this script</a> as administrator on the Hyper-V host.</em></p>
<p style="padding-left: 30px;"><em>In this early preview, nesting comes with a few configuration requirements. To make things easier, <a href="https://github.com/Microsoft/Virtualization-Documentation/blob/master/hyperv-tools/Nested/Enable-NestedVm.ps1">this PowerShell script</a>script will check your configuration, change anything which is incorrect, and enable nested virtualization for the specified virtual machine.</em></p>
&nbsp;

要執行的 script 在這裡，請開啟 powershell 來執行:
<pre class="lang:ps decode:true ">Invoke-WebRequest https://raw.githubusercontent.com/Microsoft/Virtualization-Documentation/master/hyperv-tools/Nested/Enable-NestedVm.ps1 -OutFile ~/Enable-NestedVm.ps1
~/Enable-NestedVm.ps1 -VmName "DemoVM"

</pre>
&nbsp;

他的邏輯是這樣，Nested Virtualization 是針對個別的 VM 開啟的，因此你先照正常的程序建立跟設定你要的 VM，然後執行這段 Powershell Script 替這個 VM 啟用 Nested Virtualization 的功能。其中 "DemoVM" 就是指定 VM 的名字...

&nbsp;

在我的範例裡面，我的 VM name 是: WIN10, 附上我的執行結果:
<p id="EJSiwOh"><img class="alignnone size-full wp-image-1020 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000bc9912e2.png" alt="" /></p>
Nested virtualization 有些地方要注意，VM memory 至少要 4GB, Mac Address Spoofing 必須啟用，還有一些 blah blah 的警告... 像是不支援 dynamic memory, 也不支援 checkpoints 等等。

&nbsp;

&nbsp;
<h3>安裝 Docker Toolbox, 準備 Docker Host VM</h3>
Script 執行完畢後，Host OS 這段的任務就結束了，接下來替這個 VM "開機"，在裡面開始安裝 Docker Toolbox:

&nbsp;
<p id="VzWevVh"><img class="alignnone size-full wp-image-1021 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000cba58b2c.png" alt="" /></p>
&nbsp;

安裝過程就不多說了，全部都照預設值安裝... (後面會說明要注意的地方)，一路下一步跑完就結束了。安裝好之後，直到我按下 Docker Quickstart Terminal 才發現不對勁...

前面的 initialization 還算順利，啟用 nested virtualization 後，建立 VM 不再像之前保哥碰到的狀況，無法支援 VT-x .. 看起來都順利的 init:
<p id="QHKKfdy"><img class="alignnone size-full wp-image-1026 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5700124ea57ca.png" alt="" /></p>
&nbsp;

不過跑到後面，看來 Virtual Box 還是不買帳，重新測試幾次後 (該不會被我玩壞了吧?) 連建立都有問題了 @@

在 VM 內就是無法成功的用 Virtual Box 啟用已建立 VM ...
<p id="eDzibFh"><img class="alignnone size-full wp-image-1023 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f4120a6a.png" alt="" /></p>
&nbsp;

直接開 Virtual Box 來看，也是碰到一樣的問題:
<p id="mQKpusR"><img class="alignnone size-full wp-image-1024 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57000f651308d.png" alt="" /></p>
&nbsp;

我就把他當作 Nested Virtualizalization 的 Known Issues 吧，preview 階段的技術，跟對手的技術不相容應該也算正常... 跟自家的 Hyper-V 總不會有問題了吧?

由於還是 preview 的技術，我決定不繼續跟他耗下去，先改用比較可靠的方案，用 Microsoft Hyper-V 代替 Oracle Virtual Box!

&nbsp;
<h3>Docker Machine</h3>
這邊就必須先介紹一下 <a href="https://docs.docker.com/machine/overview/" target="_blank">Docker Machine</a> 這東西了。這是包含在 Docker Toolbox 工具箱內的一個關鍵元件。Docker Container 再強，你終究還是需要台 "Machine" 來跑 Linux + Docker Host 啊... 不論你用的是實體機器還是虛擬機器... 然而建立虛擬機器的方法千百種，於是 Docker 就提供了 Docker Machine 這個好東西，讓你用一致的介面，在不同環境下建立你要的 VM (用 <a href="http://boot2docker.io/" target="_blank">boot2docker</a>)。

&nbsp;

其中，Docker Machine 支援了十幾種 <a href="https://docs.docker.com/machine/drivers/" target="_blank">Docker Machine Driver</a>，可以在這些主流的虛擬化環境下幫你建立 VM，包括:
<ul>
	<li>雲端服務廠商: Amazon Web Services, Microsoft Azure ... etc</li>
	<li>虛擬化軟體: Microsoft Hyper-V, Oracle VirtualBox, VMWare vSphere ... etc</li>
</ul>
&nbsp;

&nbsp;

既然 Docker Toolbox 預設支援的 Virtual Box 碰到釘子了，我跳過 Quickstart Terminal, 手動下指令，改用 Hyper-V 試看看...

我的準備步驟簡單紀錄一下，我就不一一詳細說明了 (sorry 我很懶 XD，原諒我只挑關鍵的部分說明)
<ol>
	<li>移除 Oracle VirtualBox, 安裝 Microsoft Hyper-V</li>
	<li>Reboot 後，去 Hyper-V 設定 Network Virtual Switch (不做這項的話，Docker Host VM 就沒網路用了)</li>
</ol>
&nbsp;

接下來，直接開個 DOS Prompt, 用 Docker Machine 建立 VM 試看看。我用的指令:
<pre class="lang:default decode:true ">docker-machine create -d hyperv boot2docker</pre>
&nbsp;

其中 -d hyperv 的意思，就是改用 hyper-v 的 driver 來執行 VM 準備動作。如果你不想在本機建立VM，換掉這個 options, 就可以改成在 Azure / AWS 上面玩了。讀者們有興趣可以自己試一試。

&nbsp;

這次建立過程就很順利，等了一兩分鐘就完成了。
<p id="HYyRGDE"><img class="alignnone size-full wp-image-1027 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570012eaeeb95.png" alt="" /></p>
看來除了建立 VM，連 VM 必要的設定也都準備好了。VM準備好後，直接用 boot2docker.iso 這光碟映像檔開機。Boot2Docker.iso 是個針對 Docker Host 設計的 Linux 開機光碟，目的是 Diskless 的環境下，只要用 CD BOOT 就可以使用 DOCKER 環境的特化版 Linux. 這邊可以看到，VM 開好 BOOT LINUX 後，連 SSH 憑證等等都幫你設定好了...

接下來，Docker Client 設定一下，你就可以直接用 Docker 指令來操作了。設定的方式最後一行有寫，照著做就可以:
<pre class="lang:default decode:true ">run: docker-machine env boot2docker</pre>
&nbsp;
<p id="uIZGaoy"><img class="alignnone size-full wp-image-1028 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014665a7e3.png" alt="" /></p>
設定好這幾個環境變數，我就可以直接在這台 windows vm 上面使用 docker 了。

拿 <a href="https://hub.docker.com/_/hello-world/" target="_blank">hello-world</a> 這個 docker container 測試看看:
<pre class="lang:default decode:true ">docker run hello-world</pre>
&nbsp;
<p id="JVQvlzT"><img class="alignnone size-full wp-image-1029 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570014b3b1c69.png" alt="" /></p>
用過 Docker 的人看了就懂了，我就不用多說... Docker Client 直接跟 Docker Host 溝通，去 Docker Hub Pull 這個 container image 回來執行... 印出來的那堆 message 就是執行的結果，代表你已經成功的執行這個 container

&nbsp;

剩下美中不足的，是 Docker Toolbox 還有另一個好用的 Docker GUI, 讓你使用豐富的 Docker Container Image, 就好像用手機逛 App Store 下載 APP 回來用一樣容易的工具: Kitematic

雖然我們把背後的 VirtualBox 換成 Hyper-V 就可以用了，但是當你打開 Kitematic 時，他還是去用 VirtualBox 啊... 想把它改成 Hyper-V 的話，可以參考這篇文章:

&nbsp;

<hr />

&nbsp;
<h3 style="padding-left: 30px;"><a href="http://agup.tech/2015/08/14/hacking-at-kitematic-with-hyper-v-on-windows-10/" target="_blank">MODIFYING KITEMATIC TO RUN ON WINDOWS 10 WITH HYPER-V</a></h3>
<em>Kitematic is a new player in the Docker arsenal, and fully featured with Docker's release of the new Toolbox. Kitematic has two basic principles</em>
<ol>
	<li><em>Give everyone a streamlined process to spin up and try Docker on their local machine</em></li>
	<li><em>Bring a delightful UI experience to the the container world</em></li>
</ol>
<em>As most enthusiasts, when I saw this announcements I rushed onto the release page and began my Windows download. After I ran the installer I was shot into a Virtual Box installer and was up and running in seconds - Awesome. Now when I updated to Windows 10, I started with a clean slate, and Kitematic was unfortunately lost in the fire.</em>

<em>When I installed Kitematic again on Windows 10, I and many other users found that Virtual Box did not work on Windows 10. Forced to fend for myself I turned to my holy hypervisor savior Hyper-V. I love Hyper-V; for one it's installed on my machine by default, all my friends run Hyper-V, even my mom runs Hyper-V.</em>

<em>Anyways, I found that docker-machine had a pleasant experience with Windows 10 Hyper-V, and that if Kitematic used that same logic for docker-machine on Virtual Box I could simply switch the underlying docker-machine command. This blog is about the foolish endeavor to turn the streamlined process of running Kitematic, into a process full of long and complicated twists and turns.</em>

<hr />

&nbsp;

&nbsp;

OK，到這邊就大功告成! 順利解決在 VM 裡使用 Docker Toolbox 的問題。感謝大家收看!

若你喜歡我分享的內容，也請支持我的粉絲團: <a href="https://www.facebook.com/andrew.blog.0928/" target="_blank">安德魯的部落格</a> XD
<div class="fb-page" data-href="https://www.facebook.com/andrew.blog.0928" data-width="380" data-hide-cover="false" data-show-facepile="false" data-show-posts="false"></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1015</wp:post_id>
		<wp:post_date><![CDATA[2016-04-03 03:38:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-02 19:38:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-toolbox-under-vm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1017]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a811ae988adc8b957862d4cb9338b4de]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3d3dee2b7db346168433c9f3ca2b1729]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7daac1ca10df3abad879809b9b60b2b6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>727</wp:comment_id>
			<wp:comment_author><![CDATA[專為 Windows 量身訂做的 Docker for Windows (Beta) ! &#8211; 安德魯的部落格]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.0.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-12 14:34:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-12 06:34:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 如何在 VM 裡面使用 Docker Toolbox ? [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>//build/2016 - The Future of C#</title>
		<link>http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/</link>
		<pubDate>Sat, 09 Apr 2016 06:04:05 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1041</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

&nbsp;

在寫這篇文章之前，一定要先秀一下我用了好幾年的桌布... :D

<img class="alignnone size-full wp-image-1042 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707dbccb3191.png" alt="" />

從開始學寫 code 的第一天起 (正規開始學 coding 是大一計概，學寫 Fortran &amp; C)，我就很講究 code 到底寫的漂不漂亮? 好不好懂? 好不好維護? 寫到後來，連 code 寫的夠不夠優雅都開始計較起來... 學了 OOP / Design Patterns 之後，就開始計較起 code 的結構到底正不正確? 是否跟真實要描述的事物有沒有正確的對應? 沒有的話就要改到滿意為止才罷休...

所以，當年在 MSDN 逛到這張桌布的時候 (現在找不到原始連結了) 就立刻拿來用了。我平常是不用桌布的，一裝好 windows 就把它改成黑色來用... 直到看到這張桌布為止...

<!--more-->

好吧，這其實不代表啥，只代表我對一行一行的 code 有潔癖而已 XD，常看我部落格的老讀者們，應該都對這幾篇有印象，我為何會一直用 .NET Framework, C# 的語法漂亮其實是主要原因... 在 <a href="https://github.com/ahejlsberg" target="_blank">Anders Hejlsberg</a><a href="https://github.com/ahejlsberg" target="_blank"> </a>大神的掌舵之下，C# 有很多著名的 syntactic sugar .. 舉幾篇我寫過的文章，都是探討 C# 語法 &amp; syntactic sugar 精妙的地方:

<hr />
<p style="padding-left: 30px;"><a href="http://columns.chicken-house.net/2008/09/18/c-yield-return-1-how-it-work/" target="_blank">[C#: yield return] #1. How It Work ?</a></p>
<p style="padding-left: 30px;"><a href="http://columns.chicken-house.net/2008/09/21/c-yield-return-2-%e5%8f%a6%e9%a1%9e%e7%9a%84%e6%87%89%e7%94%a8-thread-sync-%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88/" target="_blank">[C# yield return] #2. 另類的應用 – Thread Sync 替代方案</a></p>
<p style="padding-left: 30px;"><a href="http://columns.chicken-house.net/2013/04/14/%e8%99%95%e7%90%86%e5%a4%a7%e5%9e%8b%e8%b3%87%e6%96%99%e7%9a%84%e6%8a%80%e5%b7%a7-async-await/" target="_blank">處理大型資料的技巧 – Async / Await</a></p>
<p style="padding-left: 30px;"><a href="http://columns.chicken-house.net/2011/10/25/code-linq-to-object-%e6%9b%bf%e7%89%a9%e4%bb%b6%e5%8a%a0%e4%b8%8a%e7%b4%a2%e5%bc%95/" target="_blank">[CODE] LINQ to Object – 替物件加上索引!</a></p>
<p style="padding-left: 30px;"><a href="http://columns.chicken-house.net/2010/11/06/extension-methods-%e7%9a%84%e6%87%89%e7%94%a8-save-dataset-as-excel-file/" target="_blank">Extension Methods 的應用: Save DataSet as Excel file…</a></p>


<hr />

&nbsp;

好，懷舊結束了，前面寫這段只是先讓大家知道，講 C# 我有多專精倒還不敢，但是講到我對 C# 7 提供的這堆 syntactic sugar 到底好不好用，我想我應該還有足夠的經驗來做點評論... //Build/2016 發表的 <a href="https://channel9.msdn.com/Events/Build/2016/B889" target="_blank">The Future of C# (C# 7)</a>, 這段 video 我花了一個多小時，反覆看了幾次.. 決定寫篇文章記錄一下我的看法...

<iframe width="640" height="360" src="https://channel9.msdn.com/Events/Build/2016/B889/player" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

&nbsp;

直接切入主題了，底下的 sample code 除了 tuple 的部分還沒辦法測試之外，其他其實我都已經實際編譯及執行過了。想嘗鮮的讀者們可以跳到最後一段，看看如何準備執行環境實際測試。這次公布的 C# 7 幾個新語法，都算是 syntactic sugar, 都屬於編譯器就可以處理掉的層級，不需要新的 Runtime 來支援，因此不用擔心編譯出來的 Code 無法在舊的平台上面執行。

&nbsp;

這個 session 提到這幾個 C# 7 新的語法 (Visual Studio 15 Preview 尚不支援 Tuples &amp; Records，其餘都已可體驗使用)
<p id="NFnDHrk"><img class="alignnone size-full wp-image-1046 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707e232050f3.png" alt="" /></p>
&nbsp;

我比較囉嗦，對我有興趣的幾個新功能會多花點口舌來介紹，所以幾個基本的語法我就跳過了... 我只介紹我比較有興趣的三個: Tuples, Records, Pattern matching

&nbsp;
<h1>Tuples Literal, 一次傳回多個回傳值</h1>
也許是受到古早數學函數 (function, f(x) = x + 1) 這種型態的影響，我學過的 programming language 清一色都只能 return 單一一個傳回值。若有多個值要傳回，那只有把它包裝成複雜的物件，或是集合物件再傳回來，否則就要用其他非 return value 的管道.. 例如 Global Variable, Ref / Out parameters, Exception 等等做法。要傳回兩個以上的傳回值，同時還保有強型別的特性跟簡潔，就這麼難嗎?

先來看看只能傳回單一值的限制，造就多少可笑的 API interface 了... 我舉個知名的古典例子: ANSI C 定義的 standard C library 的 function: <a href="https://msdn.microsoft.com/zh-tw/library/x198c66c(v=vs.80).aspx" target="_blank">int getchar()</a>,

&nbsp;

幫大家複習一下，這是 C 標準函式庫的一員，會從 stdin 讀取一個 char 後傳回來... 但是奇怪的地方是，明明是讀取 char, 為何傳回來的是 int ??? 來看看這段 sample code (這是錯誤的程式碼版本):

&nbsp;
<pre class="lang:c decode:true ">char ch;

ch = getchar();

if (ch == EOF)
{
  // ...
}
else
{
  // use ch to do something...
}</pre>
看出端倪了嗎? 當年的 C 還沒有這麼多先進的機制，這個 function 除了要能傳回正常的傳回值 (char) 之外，還需要額外傳回 EOF 這特殊值。問題來了，宣告傳回值是 char 型別的話，那所有可能的傳回值都是合法的，沒有任何機會告訴呼叫者拿到的值是 EOF，不要拿去用... 不得已的情況下，只好擴充 return type, 從 char 擴大為 int ...

於是為了這種限制，只好把 getchar( ) 的 API 定義改成很可笑的 int getchar( ) ... 來看看 "語法正確" 的用法:
<pre class="lang:c decode:true ">int ch;

ch = getchar();

if (ch == EOF)
{
  // ...
}
else
{
  // 啊啊啊啊，你搞得我好亂啊...
  char temp = (char)ch;
}</pre>
的確是搞得我好亂啊，getchar( ) 你到底是傳回 char 還是 int 啊? 為何 getchar( ) 要用 int 去接，然後再 casting 成 char ....

探究根本的原因，就是我們必須在 "只能傳回單一值" 的限制內，同時擠進正常的傳回值，也要擠進錯誤代碼或是例外狀況的訊息，所付出的代價...。於是，在多年後的今天，C# 7 總算正式的回應這樣的需求了，那就是 Tuples !

&nbsp;

我用傳回 Size 的 method 當作範例，Size 包括了 Height / Width 兩個數值。通常我們有這幾種方式可以處理:

&nbsp;

1. 宣告物件 Size 來封裝 Width 及 Height，缺點是你必須額外定義類別... 如果你只用一次也是得這樣做...
(實在是很不想只為了用這一次就弄髒了 namespace 啊...)
<pre class="lang:c# decode:true">Size GetSize()
{
    return new Size(800, 600);
}

void Demo()
{
  Size s = GetSize();
  Console.WriteLine($"Size = ({s.Width}, {s.Height})");
}

class Size 
{
  int Width,
  int Height
}</pre>
&nbsp;

2. 用 call by reference 的方式，透過參數來傳回多個數值，缺點是這看起來一點都不像 "return" value 啊...
只是當年 C++ 的 reference 技巧的 C# 版而已... 還得先準備 variables 丟過去，再回頭看看你塞了什麼值給我 @@
<pre class="lang:c# decode:true">void GetSize(out int width, out int height)
{
  width = 800;
  height = 600;
}


void Demo()
{
  int width;
  int height;

  GetSize(out width, out height);
  Console.WriteLine($"Size = ({width}, {height})");
}</pre>
&nbsp;

3. .NET BCL 預先幫你準備好一組泛型的 Tuple 類別，讓你不用額外宣告，就有現成的類別可以封裝多個傳回值。
雖然解決了 (1) (2) 的困擾，但是... Tuple 只有讓擬定義封裝的型別能力而已，他的名字已被限制為 Item1, Item2...
看到這種命名，就跟我看到 database table 有人宣告 field1 ~ field10 一樣令人抓狂... @@
<pre class="lang:c# decode:true ">Tuple&lt;int, int&gt; GetSize()
{
  return new Tuple&lt;int, int&gt;(800, 600);
}

void Demo()
{
  Tuple&lt;int, int&gt; s = GetSize();
  Console.WriteLine($"Size = ({s.Item1}, {s.Item2})");
}</pre>
&nbsp;

4. 最後的絕招，總算在 C# 終於出現了，C# 7 syntactic sugar 提供了這樣的語法，來表達同一件事:
<pre class="lang:c# decode:true">(int Width, int Height) GetSize()
{
  return (Width: 800, Height: 600);
}

void Demo()
{
  var s = GetSize();
  Console.WriteLine($"Size = ({s.Width}, {s.Height})");
}</pre>
&nbsp;

這樣看起來是不是舒服多了? 哈哈... 沒錯，至少滿足了我對程式碼的潔癖要求.. XD

不過，因為 Tuples 的 Sample Code 我還沒辦法實際執行，沒機會親眼瞧瞧他到底編譯了甚麼樣的 code 出來? 不過我猜八成跟 anonymous class 一樣，編譯器動態幫你 gen 一個給你專用的 class, 實際的結果應該跟 (2) 類似，唯一省掉的就是 coding 時可以少打幾個字，跟看起來清爽一點而已。實際的效能等等應該完全沒有差別吧?

最後，補充一下延伸的應用方式。其實這是 Tuples 的縮寫，也可以當作產生 Tuples 的 syntactic sugar .. 並非只能拿來用在一次傳回多個回傳值這情境。你也可以拿來直接產生 Tuple 物件作其他用途使用。例如:
<pre class="lang:c# decode:true ">// tuple literals demo
var size = (width: 800, height: 600);</pre>
&nbsp;

&nbsp;
<h1>Record Type, 只包含屬性的資料型別</h1>
雖然這個部分被歸在 Records ，但是我覺得他跟 Tuples 還蠻雷同的，我就改一下順序接在 Tuples 後面說明好了。前面介紹的 Tuples 的縮寫，可以直接用 (800, 600) 的方式，讓你打最少的字就可以產生一個 Tuple 物件。很多時候，尤其是從資料庫撈資料出來，往往我們為了強型別的各種好處，每個 table 我們都會宣告一個對應的 class... 討厭的是 SQL 我們不見得每次都會 select * from table ...那麼我們到底要宣告多少種 class ?

就定義上來說，Record Type 其實就是個特殊的 class, 它只包含 read only properties 的 data type, 它設計出來是為了要簡化這種 data type 的宣告過程。透過 Record Type 產生出來的 data type 都會自動實作 <a href="https://msdn.microsoft.com/zh-tw/library/ms131187(v=vs.110).aspx" target="_blank">IEquatable&lt;T&gt; </a>介面，意思是你可以直接比對兩個 Record Type 的物件是否相同? (value equal)

加上宣告這些 class 其實蠻囉嗦的，有一堆 code 要寫... 這我就直接撿現成的投影片:
<p id="clCyGWE"><img class="alignnone size-full wp-image-1047 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5707f180d508b.png" alt="" /></p>
我只是想要宣告一個物件 Person, 能包含他的 First Name, 及 Last Name 兩個 property 而已啊... 結果搞的落落長的宣告... 雖然可以靠 code generator 的方式解決，但是 code gen 的缺點就是 gen 出來之後要修改就很麻煩了。syntactic sugar 其實也是 code generator, 只不過他不是在你 coding time 產生 code, 而是在 compile time 才幫你產生，所以基本上你可以無視他，就當作有這種語法可以用就好... 底下那落落長的 code, 可以濃縮成一行就搞定:
<pre class="lang:c# decode:true ">class Person(string First, string Last);</pre>
&nbsp;

使用起來就跟一般類別無異，直接 new , 配合 <a href="https://msdn.microsoft.com/en-us/library/bb397680.aspx" target="_blank">object initializer</a> 就可以了。不過 Records 就跟字串一樣，物件一旦被產生了就是不可更改的 (沒看到上方 gen 出來的 code, 屬性都只有支援 get 嗎?)，因此你要改變屬性值的話，就跟字串一樣，會產生一個新的物件來替換。語法比較特別，要用 with 就可以 "替換" 特定的屬性，產生一個新的物件給你:
<pre class="lang:c# decode:true">var me = new Person { First = "Andrew", Last = "Wu" };

var myson = me with { First = "Peter" };</pre>
// 註: 這種一旦被產生之後就不能改變內容的物件，就叫做 <a href="https://en.wikipedia.org/wiki/Immutable_object" target="_blank">immutable objects</a> (又叫 unchangeable object)

&nbsp;

最後，介紹一下延伸的應用。既然 Record Type 其實是個標準的 class, 所以他當然也支援最基本的類別繼承機制。舉例來說，我想定義多種幾何物件的型別的話，我可以這樣宣告:
<pre class="lang:c# decode:true ">// 多邊形
class Geometry();

// 三角形
class Triangle(int Width, int Height, int Base) : Geometry;

// 矩形
class Rectangle(int Width, int Height) : Geometry;

// 正方形
class Square(int width) : Geometry;</pre>
&nbsp;

&nbsp;

&nbsp;
<h1>Pattern Matching, 物件的型別判定及比對語法</h1>
這是另一個重頭戲，Pattern Matching 想解決的問題，是當你有一堆各種型別的物件要處理時，通常會伴隨著 foreach loop, 以及一堆型別判定 ( <a href="https://msdn.microsoft.com/en-us/library/scekt9xw.aspx" target="_blank">is operator</a> )，轉型 (<a href="https://msdn.microsoft.com/en-us/library/ms173105.aspx" target="_blank">casting</a>)，還有判斷 (condition) 等等操作。這整串操作的 code 寫下來，除了多寫好幾行之外，也多了很多很煩人的暫存物件。這種 code 寫多了其實真的會很煩躁啊啊啊啊...

延續前面提到的 Records Type, 產生 record objects 變容易了，於是我會有更多機會要過濾及處理這些 records。若我有個存放各種多邊形的陣列，然而我想寫一段 code 去統計它的各數及總面積... 過去我會這樣寫:
<ol>
	<li>設計各種多邊形的 class, 同時宣告計算面積的 abstract method, 衍生類別各自定義自己計算面積的公式。</li>
	<li>用多型的作法，foreach 跑過每一個物件，呼叫它的計算面積公式</li>
	<li>沿途加總各數及面積</li>
</ol>
傳統的方式，寫出來的 code 會像這樣:
<pre class="lang:c# decode:true">    static void Demo1()
    {
        // 產生各種幾何形狀的物件
        List&lt;Geometry&gt; shapes = new List&lt;Geometry&gt;()
        {
            new Triangle() { Side1 = 3, Side2 = 4, Side3 = 5},
            new Square() {Width=10 },
            new Triangle() { Side1 = 3, Side2 = 4, Side3 = 5},
            new Square() {Width=10 },
            new Rectangle() {Width=4, Height = 6 },
            new Square() {Width=10 },
            new Rectangle() {Width=4, Height = 6 },
            new Triangle() { Side1 = 3, Side2 = 4, Side3 = 5},
            new Triangle() { Side1 = 3, Side2 = 4, Side3 = 5},
            new Square() {Width=10 },
            new Square() {Width=10 },
            new Rectangle() {Width=4, Height = 6 },
            new Rectangle() {Width=4, Height = 6 },
            new Triangle() { Side1 = 3, Side2 = 4, Side3 = 5}
        };

        int total_area = 0;

        foreach(Geometry s in shapes)
        {
            total_area += s.GetArea();
        }

        Console.WriteLine($"Total area: {total_area}.");
    }

        

    public abstract class Geometry
    {
        public abstract int GetArea();
    }

    public class Triangle:Geometry
    {
        public int Side1 { get; set; }
        public int Side2 { get; set; }
        public int Side3 { get; set; }

        public override int GetArea()
        {
            int s = (this.Side1 + this.Side2 + this.Side3) / 2;
            return (int)Math.Sqrt(s * (s - this.Side1) * (s - this.Side2) * (s - this.Side3));
        }
    }

    public class Rectangle : Geometry
    {
        public int Width { get; set; }
        public int Height { get; set; }
        public override int GetArea()
        {
            return this.Width * this.Height;
        }
    }

    public class Square : Geometry
    {
        public int Width { get; set; }

        public override int GetArea()
        {
            return this.Width * this.Width;
        }
    }</pre>
&nbsp;

來看看改用 C# 7 的新語法，來改寫看看。前題是我的目的只是單純的計算，沒有太多 code reuse 的考量，不需要建立太多沒機會被使用的 class 及 object，能夠最精簡最方便的 coding 為主。物件的部分就直接用前面提到的 Record Types 取代，而判定型別及計算的部分就讓 Pattern Matching 來發揮!

調整過的流程:
<ol>
	<li>直接用 records + 繼承，定義各種多邊形的 record types</li>
	<li>用 foreach 跑過每一個物件</li>
	<li>用 switch + pattern matching 區分各種物件，直接在 switch case 內引到到不同的程式碼去計算面積</li>
</ol>
<pre class="lang:c# decode:true">    static void Demo1()
    {
        // 產生各種幾何形狀的物件
        List&lt;Geometry&gt; shapes = new List&lt;Geometry&gt;()
        {
            new Triangle(3, 4, 5),
            new Square(10),
            new Triangle(3, 4, 5),
            new Square(10),
            new Rectangle(4, 6),
            new Square(10),
            new Rectangle(4, 6),
            new Triangle(3, 4, 5),
            new Triangle(3, 4, 5),
            new Square(10),
            new Square(10),
            new Rectangle(4, 6),
            new Rectangle(4, 6),
            new Triangle(3, 4, 5)
        };

        int total_area = 0;

        foreach(Geometry s in shapes)
        {
            switch (s)
            {
                case Triangle x:
                    int total_side = (x.Side1 + x.Side2 + x.Side3) / 2;
                    total_area += (int)Math.Sqrt(total_side * (total_side - x.Side1) * (total_side - x.Side2) * (total_side - x.Side3));
                    break;

                case Rectangle x:
                    total_area += x.Width * x.Height;
                    break;

                case Square x:
                    total_area += x.Width * x.Width;
                    break;
            }
        }

        Console.WriteLine($"Total area: {total_area}.");
    }

    public class Geometry();
    public class Triangle(int Side1, int Side2, int Side3) : Geometry;
    public class Rectangle(int Width, int Height) : Geometry;
    public class Square(int width) : Geometry;</pre>
Pattern Matching 的語法，很巧妙的把 is 跟 casting 合併成單一的指令。過去沒有這種 syntactic sugar 時，都得先用 is 判斷型別，之後再 casting。因為順序要是反了，就可能引發 InvalidCastException..

上面例子的 Pattern Matching 是搭配 switch case 使用的，我先改成 if else 的結構，再來對比看看新舊的用法:

&nbsp;

使用 pattern matching 的 switch case 用法:
<pre class="lang:c# decode:true ">switch (s)
{
    case Triangle x:
        int total_side = x.Side1 + x.Side2 + x.Side3;
        total_area += (int)Math.Sqrt(total_side * (total_side - x.Side1) * (total_side - x.Side2) * (total_side - x.Side3));
        break;

    case Rectangle x:
        total_area += x.Width * x.Height;
        break;

    case Square x:
        total_area += x.Width * x.Width;
        break;
}
</pre>
&nbsp;

使用 pattern match 的 if else 用法:
<pre class="lang:c# decode:true ">if (s is Triangle x)
{
    int total_side = (x.Side1 + x.Side2 + x.Side3) / 2;
    total_area += (int)Math.Sqrt(total_side * (total_side - x.Side1) * (total_side - x.Side2) * (total_side - x.Side3));
}
else if (s is Rectangle x)
{
    total_area += x.Width * x.Height;
}
else if (s is Square x)
{
    total_area += x.Width * x.Width;
}
</pre>
&nbsp;

不使用 pattern match 的 if else 對等的用法:
<pre class="lang:c# decode:true ">if (s is Triangle)
{
    Triangle x = (Triangle)s;
    int total_side = (x.Side1 + x.Side2 + x.Side3) / 2;
    total_area += (int)Math.Sqrt(total_side * (total_side - x.Side1) * (total_side - x.Side2) * (total_side - x.Side3));
}
else if (s is Rectangle)
{
    Rectangle x = (Rectangle)s;
    total_area += x.Width * x.Height;
}
else if (s is Square)
{
    Square x = (Square)s;
    total_area += x.Width * x.Width;
}
</pre>
&nbsp;

其實最大的差別，就是邏輯上單一的操作，硬要拆成兩段來處理而已。其實類似的狀況，在 .NET Framework 裡的 basic class library 裡也常看到，最常見的就是基本型別的 TryParse( ... ) 也是異曲同工之妙 (例如: <a href="https://msdn.microsoft.com/zh-tw/library/f02979c7(v=vs.110).aspx" target="_blank">int.TryParse()</a> )。Parse 需要先判斷格式，格式正確後才能解析字串內容傳回結果。TryParse( ... ) 就可以在單一一次呼叫內完成這兩個動作，在 code 的層面上，把它變成不可切割的行為 (atom operation)。

&nbsp;

Pattern Matching 當然不只如此，只是省一行也太小看它了。既然這語法的目標在於 "Pattern" matching, 那麼對於處理 Pattern 絕對不止處理型別而已。在這邊的 Pattern, 指的是對應物件的樣式，包含要挑出特定的型別，甚至是特定屬性包含特定的值，都在處理範圍內。

舉個實際的例子好了，延續上述的例子，同樣一堆多邊形的物件，如果我統計只想挑出高度大於 5 的物件出來計算的話 (三角形拿第一個邊長當作高度)，那麼 Pattern Matching 的 when 子句就可以派上用場:
<pre class="lang:c# decode:true ">switch (s)
{
    case Triangle x when x.Side1 &gt; 5:
        int total_side = (x.Side1 + x.Side2 + x.Side3) / 2;
        total_area += (int)Math.Sqrt(total_side * (total_side - x.Side1) * (total_side - x.Side2) * (total_side - x.Side3));
        break;

    case Rectangle x when x.Height &gt; 5:
        total_area += x.Width * x.Height;
        break;

    case Square x when x.Width &gt; 5:
        total_area += x.Width * x.Width;
        break;
}
</pre>
when 後面就接正常的判斷式即可，就跟 if ( ) 裡面的判斷式一樣。透過這些組合，pattern matching 能夠一次處理完物件的型別及屬性的判斷。我覺得它最大的意義，不只是替你省掉幾行 code 而已，而是在大幅提高程式碼的可讀性，讓你的 code 更直接的反應出你思考的邏輯。寫出來的 code 不必因為語法的限制，把單一的邏輯判斷，硬生生的拆成好幾個分開的語句。這種機械式的動作不需要花費寶貴的人力來做啊，編譯器來做這種事又快又好..

這段 code 正好可以用 Visual Studio 15 Preview 編譯，一時手癢，就把 switch case 的部分用 <a href="https://msdn.microsoft.com/zh-tw/library/f7dy01k1(v=vs.110).aspx">ILDASM</a> 反組譯來看看，編譯器替我們做了什麼事:
<p id="mKdLeOr"><img class="alignnone size-full wp-image-1051 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57088a511fe94.png" alt="" /></p>
註解的部分，是對應的 C# 原始碼，可以對照著看。CLR 的 IL 如果看不懂指令是什麼意思，可以參考 Wiki 的<a href="https://en.wikipedia.org/wiki/List_of_CIL_instructions" target="_blank">這篇文章: List of CIL instructions</a>。至於 IL 的語法... Orz, 這我沒辦法簡短的說明，有學過組合語言，加上對於 stack machine 有概念的話就看的懂了! 突然很感謝大三時跑去修資工的課 (系統程式)，這門課的作業是要寫 stack machine 的模擬器... 沒想到當年作業學到的知識現在還派的上用場 XD

&nbsp;
<pre class="lang:c# decode:true "> int total_area = 0;
    foreach (Geometry s in shapes)
    {
        Geometry geometry = s;
        Triangle x = geometry as Triangle;
        if ((x != null) &amp;&amp; (x.Side1 &gt; 5))
        {
            int total_side = ((x.Side1 + x.Side2) + x.Side3) / 2;
            total_area += (int) Math.Sqrt((double) (((total_side * (total_side - x.Side1)) * (total_side - x.Side2)) * (total_side - x.Side3)));
        }
        else
        {
            Rectangle x = geometry as Rectangle;
            if ((x != null) &amp;&amp; (x.Height &gt; 5))
            {
                total_area += x.Width * x.Height;
            }
            else
            {
                Square x = geometry as Square;
                if ((x != null) &amp;&amp; (x.Width &gt; 5))
                {
                    total_area += x.Width * x.Width;
                }
            }
        }
    }
    Console.WriteLine($"Total area: {total_area}.");
</pre>
看 IL 實在太辛苦了，我看的懂可是很難解釋啊... 於是我把編譯好的 .exe 拿去給 <a href="http://www.red-gate.com/products/dotnet-development/reflector/" target="_blank">.NET Refactor</a> 還原成 C# 6 的 code, 看得比較輕鬆一點。

還原後就可以很清楚的看到，C# 7 編譯器幫我們產生什麼樣的 code 了... 首先，switch case 就是翻成對等的 if else 而已。接下來 pattern matching 就真的如我預期，另外宣告變數，用 as 轉型後，產生一連串的 if (condition) 來達成 pattern match 的目的。其實這段 IL / 反組譯的結果可以證明，編譯器就真的是把一串動作拆成非 C# 7 的版本而已。所以如果你以為改用新語法會對效能有任何改善，就別肖想了... 他就真的只是讓你語法簡潔一點的改變而已。已經寫好的 code 除非你很在意 code 好不好看，不然不大需要刻意拿出來重改重新編譯..

&nbsp;

另外，在使用時機上，也不用因為有了新語法就一頭熱，全部拋棄原有的寫法。以這個例子來說，我的第一個範例 (多型的版本) 跟第二個範例 (Pattern Match 的版本) 其實各有優缺點。

如果你的物件邏輯比較複雜，需要高度的封裝 (大小、狀態資訊，及對應的運算)，同時類似的運算操作 (如此例的計算面積加總) 會出現在好幾個地方的話，那麼多型的寫法是比較適合的。你會看到多型的寫法，花了比較多的精神在封裝物件，封裝帶來的好處是主程式非常精簡，遠比 Pattern Match 的版本還要乾淨漂亮。
<pre class="lang:c# decode:true ">int total_area = 0;

        foreach(Geometry s in shapes)
        {
            total_area += s.GetArea();
        }</pre>
&nbsp;

但是如果你沒這些需求，或是物件的來源已經是從資料庫或是 JSON 之類轉移過來，已經沒有機會把運算的部分包進去的話，其實不用動用到那麼多物件導向的高級技巧... Pattern Match 比較直覺的語法是有優勢的。

&nbsp;

&nbsp;

其實，看完這個 session 之後，有個感想: C# 受到近幾年來很熱門的 JavaScript 影響很大。JavaScript 紅到什麼程度? 由於實在太熱門，熱門到程式語言的物件表示方式，都可以變成結構化資料的儲存格式，跟前後端資料傳輸的標準格式 (JSON)。感覺起來 Tuples, Records, 還有 Pattern Matching 也都逐步的朝向這方面在演進。前面兩個語法，讓你用程式碼產生大量複雜結構的物件變的更容易，而 Pattern Matching 則讓你做物件的搜尋與樣式比對變的更容易。雖然 C# 不會也不大可能取代 JSON 的地位，不過至少這樣的改變，讓我們在程式碼內處理大量資料的時候，可以寫出更簡潔的 code, 這也是件好事吧? :D

&nbsp;

&nbsp;

&nbsp;
<h1>Visual Studio 15 Preview 啟用 C# 7 新語法支援</h1>
&nbsp;

最後，補上怎麼體驗 C# 新語法的方法!

&nbsp;

第一件事，當然是先去下載 Visual Studio 15 Preview 回來安裝... 別把他跟 VS 2015 搞混了喔...VS 2015 如果照版本號碼來看應該是 14.0 版，而這次預覽的是 15.0 版本，將來正式推出應該是 VS 2016 或是 VS 2017 了..

受惠於 Roslyn 的架構，編譯器及 IDE 要支援這些語言的新機制更容易了。這次的 VS 15 就已經內建了 C# 7 的支援，只不過預設是停用的，要啟用它的話，需要在你的專案裡面條件式編譯，定義這兩個 symbols:  __DEMO__, __DEMO_EXPERIMENTAL__ 。

找不到在哪裡的，可以看截圖: 專案 &gt; 屬性 &gt; Build
<p id="omsSyAf"><img class="alignnone size-full wp-image-1053 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5708950c6a29a.png" alt="" /></p>
修改完成後，你就可以直接寫 code 了，可以正常編譯，IDE editor 也不會有語法錯誤的警告:
<p id="YnEshbT"><img class="alignnone size-full wp-image-1054 " src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_570895657bebe.png" alt="" /></p>
&nbsp;
<h1>後記</h1>
<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/csharp1.jpg" rel="attachment wp-att-1050"><img class=" wp-image-1050 alignleft" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/csharp1.jpg" alt="csharp[1]" width="165" height="143" /></a>中文的技術部落格，大多都是講 How To, 很少碰到跟我一樣對語法有高度潔癖的探討文章 @@，所以這次我就野人獻曝的整理這一篇，希望能幫助到有需要的人!

最後，不知看過這段 channel 9 video 的人有沒有發現? 兩位講者身上的 T 恤上有印著超人圖案，不過裡面寫的不是 S，而是 C# ... 哈哈! 這件衣服太讚了，不知有沒有機會買到? 真想去弄一件.. :D

結果在講師的部落格找到這張圖.. 就拿來當本篇文章的 LOGO 吧 XD

&nbsp;
<h3></h3>
&nbsp;

&nbsp;
<h3></h3>
<h1>References</h1>
<a href="https://channel9.msdn.com/Events/Build/2016/B889#formats" target="_blank">The Future of C#</a>

<a href="http://asizikov.github.io/2016/04/02/csharp-seven-preview/" target="_blank">C# 7 features preview</a>

<a href="https://www.kenneth-truyers.net/2016/01/20/new-features-in-c-sharp-7/" target="_blank">C# 7: New Features</a>

<a href="http://www.strathweb.com/2016/03/enabling-c-7-features-in-visual-studio-15-preview/" target="_blank">Enabling C# 7 Features in Visual Studio “15” Preview</a>

<a href="http://www.infoq.com/news/2015/04/CSharp-7-Tuples" target="_blank">C# Futures: Tuples and Anonymous Structs</a>

<a href="https://github.com/dotnet/roslyn/issues/347" target="_blank">Proposal: Language support for Tuples #347</a>

<a href="https://dotblogs.com.tw/wellwind/2016/04/05/the-future-of-csharp-7" target="_blank">C# 7新語法預覽</a>

<a href="https://github.com/dotnet/roslyn/issues/98" target="_blank">C# Design Notes for Jan 21, 2015 #98</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1041</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 14:04:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-09 06:04:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build2016_csharp7_preview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="csharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4abc8d18aec03badca51a930a601f34f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_head]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_summery]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_post_sidebar]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_sidebar_choice]]></wp:meta_key>
			<wp:meta_value><![CDATA[sidebar-primary]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_author]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_kad_blog_carousel_similar]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c62749851abcba517b381a0548c848e4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1050]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rancher - 管理內部及外部 (Azure) Docker Cluster 的好工具</title>
		<link>http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/</link>
		<pubDate>Fri, 29 Apr 2016 08:22:25 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1159</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<a href="https://d3fzhvprqmsab7.cloudfront.net/wp-content/uploads/2015/08/ecs-monitoring-ruxit.png"><img class="alignnone" src="https://d3fzhvprqmsab7.cloudfront.net/wp-content/uploads/2015/08/ecs-monitoring-ruxit.png" width="1024" height="512" /></a>

過去快20年的經驗裡，很少看到有哪個技術在短短的三年就可以發展成這個樣子的... 半年前剛開始研究 Docker 時，就想找個好用的 WEB / GUI 管理工具，結果都沒滿意的，沒想到現在就一堆選擇了...

這次要介紹的 <a href="http://rancher.com/" target="_blank">Rancher</a>, 除了是套完整的 Docker Engine 管理工具之外，也是個 Docker Cluster 管理工具及平台，讓你在佈署 Containers 的時候，不用去傷腦筋你要怎麼分配資源等等瑣碎的事情，你只管把你的 Container 組態設定好，丟上去就行了。這感覺跟當年 (2009) 初次接觸到 Winows Azure 的 Cloud Service 一樣令人感動。當年只要把你的 Application 打包成 Cloud Service Package，開發階段設定好組態，佈署階段可直接手動或自動的設定 Scale，具備 Production / Staging Environment 切換上線，可以不中斷服務的升級系統...，整個就是靠 Visual Studio Deploy 就足以取代過去要 OP team 搞半天的升級程序。

只可惜 Azure Cloud Service 的種種優異的管理及佈署能力，至今都還只限於 Azure Only，沒有下放到地面版本的 Platform ... 真的是 "此物只應天上有" 啊... 但是站在地上的凡人沒機會用啊...  現在看到 Docker Cluster + Management Tools 的發展，這種威力已經變成隨手可得了... 為了紀念一下當年 Microsoft 早在 Azure 就達成的成就 (而且早已商業化)，這次的實作案例就拿 Azure 示範位於公有雲的 Production Environment，如何做到服務的管理及升級程序吧!

<!--more-->

過去開始用 Docker 時，其實我就一直在找合用的 Web UI，來取代每次都要打一堆指令的管理方式。過去都還停在單機版的時代，按照我使用的順序，我嘗試過這幾套:
<ol>
 	<li><a href="https://www.synology.com/en-us/dsm/app_packages/Docker">Synology Docker Station</a> (內建在 NAS 內的 Docker 套件)</li>
 	<li>Docker UI (實在有點陽春... 已放棄)</li>
 	<li><a href="https://shipyard-project.com/">Shipyard </a>(一樣用不順手，連安裝都沒完全搞定就放棄了)</li>
</ol>
&nbsp;

其他連裝都沒裝起來用的就不列了.. 接下來只管理一台 Docker Engine 的 Solution, 漸漸的滿足不了我了，於是我開始尋找能一次管理多套 Docker Engine 的工具... 一找下去，不得了... 選擇一堆... @@:

處理 Docker Cluster 的平台 (orchestration) 就有好幾種平台可以選擇，這邊也是多到沒力氣一個一個研究 @@:
<ol>
 	<li><a href="https://docs.docker.com/swarm/">Docker Swarm</a> (Docker 官方內建的 solution)</li>
 	<li><a href="https://github.com/rancher/cattle">Cattle</a> (Rancher 內建的 infrastruction orchestration platform)</li>
 	<li><a href="http://mesos.apache.org/documentation/latest/docker-containerizer/">Apache Mesos</a></li>
 	<li><a href="http://kubernetes.io/">Kubernetes</a> (Google 的方案)</li>
 	<li><a href="http://cloud.docker.com">Docker Cloud</a> (前身: Tutum, 被 docker 併購的線上託管服務)</li>
</ol>
能使用的管理工具也不少 (Docker Swarm 我就略過了):
<ol>
 	<li><a href="http://rancher.com/">Rancher</a></li>
 	<li><a href="https://www.tutum.co/">Tutum</a>, 被 docker 收購後變成 <a href="http://cloud.docker.com">docker cloud</a></li>
 	<li><a href="https://azure.microsoft.com/zh-tw/services/container-service/">Azure Container Service</a> (using Mesos or Swarm)</li>
 	<li>...</li>
</ol>
這些都是這兩個月才 Release 的服務啊... 這個領域真是競爭，一個多月出來這麼多項重量級服務... 選擇多是件好事，不過我只想無腦的跟著主流用一套就好 XD，實在沒力氣每一套都去研究啊... 畢竟我的目的是用它來解決我的問題，而不是以搞懂這麼多 solution 為樂啊.. 所以之前才選用了 Docker Cloud (前面的心得文)。老實說用了很滿意，介面的複雜度恰到好處，我想要的東西都改的到，又不會過於複雜難懂。不過唯獨缺了兩點:
<ol>
 	<li>要錢! 免費版本只提供管理 1 node，每多一個 node 每個月就要 USD $15..</li>
 	<li>缺少資源使用的統計或是 dashboard，想知道 CPU / RAM / DISK 的使用狀況，得另外想辦法</li>
</ol>
&nbsp;

挑選評估爬文等等的過程就不說了，最後我看上了 Rancher 這套，就決定花點時間來研究看看。看上這套主要有幾個原因:
<ol>
 	<li>(大推) UI 介面合我的胃口.. 更重要的是提供詳細的硬體資源使用狀況，也提供每個 Container 的資源使用狀況</li>
 	<li>(大推) 支援 In-Service Upgrade</li>
 	<li>(大推) 內建 Load Balancer</li>
 	<li>安裝容易，同時也提供了專為執行 Docker 而發行的專用 Linux: Rancher OS</li>
 	<li>支援多種 Orchestration Platform, 包括 Docker Swarm / Mesos</li>
 	<li>支援 Windows Azure 及其他 Cloud 服務商</li>
 	<li>支援多個環境 (Environment) 的管理，可以切割幾個完全獨立的 Cluster 個別負責不同的任務，或是隔離測試環境等</li>
</ol>
&nbsp;

其他評論挪到後面再說，介紹先到這裡告一段落。接著就來看看我實作的過程，然後再來講心得...

&nbsp;
<h1>STEP #0, Planning</h1>
<p id="zNJakBB"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee43d57b5.png"><img class="alignnone wp-image-1163 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5720ee43d57b5.png" width="1378" height="596" /></a></p>
我這次 LAB 想架設的環境，就用典型的切割開發跟正式環境吧。我希望有兩組 Docker Cluster, 分別做為開發及正式使用。開發環境理所當然的要架設在 Intranet 內，這次案例我就用我自己的 PC 開 VM 來模擬。而正式環境就在 Azure 上面架設。然而這兩組環境，統一由一套 Rancher 來管理及佈署。

環境準備好之後，我會在上面模擬這個情境:
<ol>
 	<li>佈署 WordPress 服務，區分 WEB 及 DB 兩個 container, WEB 需要透過 Load Balance 達到 HA 的要求</li>
 	<li>Scale Out, 將 Web Nodes 從 2 個升級到 3 個</li>
 	<li>進行升級，在升級 WEB 的過程中必須持續提供服務 (In-Service Upgrade)</li>
</ol>
&nbsp;

其實這些都是過去我在 Azure Cloud Service 上用的很高興的管理功能，多年後容器技術的發展，我終於也有能力自己架設同樣等級的環境了 :D

接下來請看實際操作步驟~

&nbsp;
<h1>STEP #1, 架設 Rancher Server</h1>
這邊開始前，先說明一下 Rancher 的基本觀念 (可參考<a href="https://blog.hellosanta.com.tw/%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/%E4%BC%BA%E6%9C%8D%E5%99%A8/%E8%A6%96%E8%A6%BA%E5%8C%96%E7%AE%A1%E7%90%86%E7%9C%BE%E5%A4%9A-docker-%E5%AE%B9%E5%99%A8%E8%88%87%E9%83%A8%E7%BD%B2%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7%EF%BC%9Arancher">這篇</a>)。Rancher Server 本身是套 Docker Cluster 的管理介面，但是他本身也被包裝成 Container, 所以你為了執行它，你也是得找個 Docker Engine 來安置它。雞生蛋蛋生雞的問題來了，所以我還是得架設一台 Linux + Docker 嗎? Rancher Labs 提供了另一個好選擇，就是 Rancher OS。

簡單的說，Rancher OS 是個特別為了執行 Docker 所發行的 Linux, 它拿掉所有不必要的服務，也因此整個 image 非常小，只有 28mb. Docker Engine 在 Rancher OS 的地位很高，系統啟動後第一個執行的就是 Docker (PID : 1) .. 當然你可能需要些其他標準 Linux OS 有的功能，這些通通都可用 Container 的方式外掛上去，維持 OS 本身的簡潔...

因此，這次我的動作就是先用 Rancher OS 搞定我第一個 Docker Engine, 並且在上面跑 Rancher Server。這部分我就不多說，很多前輩 &amp; 官網都寫得比我還清楚，我直接貼參考連結就好 :D
<ul>
 	<li>如何將 Rancher OS 安裝到 HDD ?
&gt; <a href="http://docs.rancher.com/os/running-rancheros/server/install-to-disk/">Installing RancherOS to Disk</a></li>
 	<li>如何安裝 Rancher Server ?
&gt; <a href="https://blog.hellosanta.com.tw/%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/%E4%BC%BA%E6%9C%8D%E5%99%A8/%E8%A6%96%E8%A6%BA%E5%8C%96%E7%AE%A1%E7%90%86%E7%9C%BE%E5%A4%9A-docker-%E5%AE%B9%E5%99%A8%E8%88%87%E9%83%A8%E7%BD%B2%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7%EF%BC%9Arancher">視覺化管理眾多 Docker 容器與部署的好工具：Rancher</a></li>
</ul>
&nbsp;

過程很簡單，就是 Docker Engine 搞定後，docker run rancher/server 回來執行就完成了。裝好後預設的 PORT 是 8080，輸入 http://{your ip}:8080/ 就可以看到 Rancher Server 的管理介面了。預設不用密碼，我自己單機使用我就懶得去設定帳號權限，正式使用時請勿跳過這段!

&nbsp;

[caption id="attachment_1168" align="alignnone" width="1071"]<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57221f673affc.png"><img class="wp-image-1168 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57221f673affc.png" width="1071" height="720" /></a> 圖: Rancher Server 預設安裝的畫面[/caption]

&nbsp;

Rancher Server 跑起來不算輕快，Container Started 之後要等一兩分鐘才能完全啟動，請有耐心點等待，別以為你裝壞了。Rancher Server 用了不少 Java 開發的套件，啟動慢是正常的 @@，請別用太糟糕的規格給 Rancher Server, 官方建議是至少 1GB+ RAM, 我自己觀察，最後給了 2GB RAM 比較剛好，這個 VM 就只執行 Rancher OS + Rancher Server 這個 Container 而已，本身我並沒有讓他加入 Cluster，往後要佈署的服務也不會被放到這台 VM 上，單純當 Master 來使用。

這步驟完成之後，就可以開始建立你的 Docker Cluster 了，請繼續看下去!

&nbsp;
<h1>STEP #2, 架設 Local Environment</h1>
這邊有些準備動作要先做，我想建立一組 Docker Engine Cluster, 專供內部的 Development Team 使用，步驟是先準備好 Docker Engine 環境，然後按照 Rancher Server 的指示，執行 "Add Host" 的步驟，把這個 Docker Engine 納入 Cluster 的管控。這邊我比照前面的步驟，用 Rancher OS 建了三台 VM，分別是 Rancher Host #1 ~ #3。
<p id="GePzBaq"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222434871bf.png"><img class="alignnone wp-image-1169 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222434871bf.png" width="469" height="144" /></a></p>
&nbsp;

接著，進入 Rancher Server, 先建立 "Local Environment"

Environment &gt; Manage Environments &gt; Add Environment, Container Orchestration 選預設的 Cattle:
<p id="AssCDUs"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572224eb7eda3.png"><img class="alignnone wp-image-1170 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572224eb7eda3.png" width="1071" height="834" /></a></p>
&nbsp;

右上角切換到 Local Environment, 從 Infrastructure &gt; Hosts &gt; Add Host, 把建立好的三台 VM 都加進去: (手動增加 Host, 請選 Custom )
<p id="cOYDEwz"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722253db5c6e.png"><img class="alignnone wp-image-1171 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722253db5c6e.png" width="1210" height="984" /></a></p>
&nbsp;

複製 (5) 的指令，到 Host 上面執行，稍等 3 ~ 5 分鐘，Rancher Agent 啟動執行完畢，就可以在 Rancher Server 上面看到這個 Host 了 !
<p id="nPwgnBe"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572225fa8eeb3.png"><img class="alignnone wp-image-1172 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572225fa8eeb3.png" width="738" height="424" /></a></p>
&nbsp;

介面設計的很不錯，上面跑了那些 container, 還有目前整個 host 的資源使用狀況，或是每個 container 的使用狀況都一清二楚:
<p id="XzajebP"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722269a33cb6.png"><img class="alignnone wp-image-1173 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722269a33cb6.png" width="1210" height="894" /></a></p>
&nbsp;
<h1>STEP #3, 架設 Azure Environment</h1>
接下來要準備正式上線的環境了。正式環境當然不是自己在家亂搞一通就 OK。這部分我選擇把他配置在 Azure 的 Data Center 內，卻保有良好的服務品質。這部分的執行方式，其實跟 STEP #2 沒甚麼不同，只是 VM 環境改成 Azure 而已。

比較特別的是，Rancher 直接支援各大 IaaS 的環境，Microsoft Azure 也在支援之內。支援的意思是你不在需要自己手工從 VM 建立到加入 HOST 都一步一步慢慢來，可以在一個畫面內一次搞定所有的配置需求。在 Azure 上面佈署多台 HOST 的動作，整個過程都已經自動化，我只要把我的 certification 貼進去，告訴它我需要幾台 VM (之後等著付錢) 就搞定了!

一樣，先準備 Azure Environment，切換過去後，從 Infrastructure &gt; Hosts &gt; Add Host ，輸入你 Azure 上的資訊，還有你要開設的 VM 規格及數量後:
<p id="VxYSsge"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222755ed594.png"><img class="alignnone wp-image-1174 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222755ed594.png" width="1024" height="1280" /></a></p>
按下 [CREATE] ，等個幾分鐘就一切大功告成! 你下單的 Host 就都排排站在那邊等你差遣了 XD
<p style="text-align: center;"><em>"At your service! Sir!"</em></p>
--

這邊穿插一下，其實 Rancher Server 直接原生的支援 Docker Swarm, 只是目前版本還沒辦法 "匯入" 已經建立好的 Swarm Cluster. 也就是你必須透過 Ranhcer Server, 從頭建立 Host(s). 官網說正在努力這件事啦，完成後就可以匯入現有的 Docker Swarm Cluster. 為什麼我要補充這個? 因為同樣這個月才 GA (General Available) 的 Azure Container Service, 可以讓你 Click 幾下就把整個 Docker Swarm Cluster 搞定...  Orz, 怎麼四月份這麼熱鬧? @@

&nbsp;

步驟一樣很簡單... 就跟在 PCHome 上面買東西一樣... 從 Marketplace 挑選: Containers &gt; Azure Container Service..
<p id="HyaOJDX"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572227ef0fa06.png"><img class="alignnone wp-image-1175 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572227ef0fa06.png" width="1181" height="1030" /></a></p>
&nbsp;

填一下基本設定，登入帳號，還有 SSH 要用的 public key，挑選你要用的機房...
<p id="XvgkwQV"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722283f5022e.png"><img class="alignnone wp-image-1176 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722283f5022e.png" width="831" height="639" /></a></p>
&nbsp;

選擇你要用的 Orchestrator configuration, 這邊我就用最標準的 Swarm ...
<p id="bIFGqWP"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722285abac2c.png"><img class="alignnone wp-image-1177 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722285abac2c.png" width="683" height="608" /></a></p>
&nbsp;

選擇訂購數量，看看你要什麼規格的 VM 要幾台...
<p id="dVhQHFF"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722286ce0af1.png"><img class="alignnone wp-image-1178 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722286ce0af1.png" width="698" height="607" /></a></p>
&nbsp;

最後，付款前最終確認...
<p id="dzerFoS"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722287ce9238.png"><img class="alignnone wp-image-1179 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722287ce9238.png" width="926" height="596" /></a></p>
&nbsp;

完成，接下來你只要等就可以了...
<p id="fFUySRE"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222899d6dc6.png"><img class="alignnone wp-image-1180 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222899d6dc6.png" width="780" height="449" /></a></p>
&nbsp;

Orz, 真的是 OOXX ... 之前研究了半天，結果按幾下就可以用了... 這個速成的時代，你要會的 "操作" 跟 "基礎知識" 的落差實在是越來越大了。很難想像再晚十年才進入這行的年輕人，到時他們接受的資訊量，腦袋還能負荷嗎? 未來懂得操作又能理解背後的基礎知識的人，會不會越來越少?

雖然 Azure Container Services 很好用，不過這還不是這篇要介紹的重點啊啊啊啊，寫這篇的時候本來還以為 Create 好的 Swarm Cluster 可以直接掛上 Rancher 使用，後來才發現原來還不支援... 看來只好等後續版本再來測試...

官方這篇文章有說明:

http://rancher.com/rancher-support-for-docker-swarm-and-machine/

截錄一段:
<p style="padding-left: 30px;"><em>we are working with the Docker team to extend Swarm so that a cluster can be created outside of Rancher and automatically imported into Rancher for management.</em></p>
OK，官方都這樣說了... 只好等了~

&nbsp;
<h1>STEP #4, Deploy "Hello World" Service</h1>
其實，到這個步驟為止，環境就建立好了，接下來就可以真正的體驗一下，如何把你的 Application Deploy 上去。稍後我會用了大家用到爛的 WordPress 當範例，來示範整個過程。但是現在我想先展示內建的 Load Balance 功能，為了方便觀察，我先用 Tutum 提供的 Hello World 來熱身一下!

前面 STEP #2 #3 個別建立了 Local 及 Azure 兩個 Environment，這要做甚麼用? 兩個 Environment 各自獨立的兩組 infrastructure, 接下來的佈署動作你可以任意指定其中一個 environment 來執行。也就是本篇文章後面的操作你都可以任選一個地方來執行。

&nbsp;

怎麼切換? 很簡單，右上角的 Environment 選單選完就好了...
<p id="guPNVpD"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225073588ee.png"><img class="alignnone wp-image-1203 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57225073588ee.png" width="1025" height="251" /></a></p>
&nbsp;

這邊補充一下 Rancher 的用語。以我的例子，我佈署的是整套 WordPress 服務。這整組服務就稱作 Stack, 而每個角色 (如 WEB，DB) 則稱作 Service，每個 Service 可能是由一個或多個 Container 組合起來的，那這就叫 Node。因此，你可以從管理介面上看到這些服務組成的關係，跟細節的相關資訊。

&nbsp;
<p id="qEpXhWz"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222bf24eb00.png"><img class="alignnone wp-image-1182 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222bf24eb00.png" width="1046" height="631" /></a></p>
Applications &gt; Stacks &gt; Add Stack, 輸入你要建立的服務組態。這邊要是你用過 Docker Compose 的話，那麼這個介面一看就懂了，其實你就是把 docker-compose.yml 的內容傳上去或是直接貼上去就搞定了，你需要幾個 conainer, 彼此之間怎麼連結, 通通都是貼上後按 CREATE 就 OK~

這邊選用 tutum/hello-world 的用意是，它最簡單，而且會印出 container id, 稍後可以驗證 load balance 是否正常運作~

等 Rancher 佈署完成，連上對應的 IP / PORT 就可以使用了!
<p id="yTxdtxQ"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222ce1d6a74.png"><img class="alignnone wp-image-1183 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222ce1d6a74.png" width="1604" height="225" /></a></p>
<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png"><img class="alignnone wp-image-1186 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png" width="888" height="358" /></a>

&nbsp;

&nbsp;
<h1>STEP #5, Scale Out Your Service</h1>
如果你的服務要正式上線，通常 Scale Out, 設定 Load Balancer 提高服務能力，及提高可靠度都是必要的動作。到這個 Service 的頁面，Scale 的數值設定成你要的值，然後就靜靜地等 Rancher 幫你擴充 container 的數量就完成了 :D
<p id="ArIBSfA"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222d3b27ac3.png"><img class="alignnone wp-image-1184 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222d3b27ac3.png" width="1427" height="482" /></a></p>
&nbsp;

老實說這動作有點無腦... 不過要留意的是， Rancher 會替你把 container 分散在不同的 host 上面。如果你想挑選... 我還找不到很明確的方法來做這件事 XD

等它跑完後，當然可以執行。Rancher 會替你把每個 container 分配在不同的 host。由於還沒有啟用 Load Balancer, 因此要個別用不同的 IP 連到這三個 instance:
<p id="WhGedVt"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png"><img class="alignnone wp-image-1186 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dbf32386.png" width="888" height="358" /></a><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222da8cce29.png"><img class="alignnone wp-image-1185 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222da8cce29.png" width="887" height="365" /></a></p>
<p id="YBJHeXl"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dd6387ea.png"><img class="alignnone wp-image-1187 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222dd6387ea.png" width="895" height="365" /></a></p>
仔細看，這三個分別是 Host #1, #2, #3 的 IP address, 連到這三個不同的 container 也得到不一樣的 hostname ..

來試看看 Rancher 內建的 Load Balancer 怎麼用吧~ 回到 Stack, 在這組 Application 內新增 [Load Balancer] 這個服務:
<p id="BlzYzly"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e40753c8.png"><img class="alignnone wp-image-1188 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e40753c8.png" width="1181" height="314" /></a></p>
<p id="GBaRxNB"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e6614ecf.png"><img class="alignnone wp-image-1189 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222e6614ecf.png" width="1203" height="784" /></a></p>
&nbsp;

Load Balancer 的設定，你可以直接綁訂它要處理的 Target Services. 這邊可以跨越 Stack 連結 Services, 意思是你可以替好幾個不同的應用 (Stacks), 透過同一個 Load Balancer 服務來發佈它。設定完成後，改用 Load Balancer 的網址重新來看看這個 Tutum 的 Hello-World:

<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222efa89b05.png"><img class="alignnone wp-image-1190 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222efa89b05.png" width="896" height="367" /></a>
<p id="HkZMDnb"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f0e3fe62.png"><img class="alignnone wp-image-1191 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f0e3fe62.png" width="896" height="358" /></a></p>
<p id="hvNwVIQ"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f1f04992.png"><img class="alignnone wp-image-1192 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57222f1f04992.png" width="885" height="356" /></a></p>
我可是重新整理按了好幾次，才湊滿這三張畫面的... 這證明了 Load Balancer 發揮作用了! 看它的官方文件，得知 Rancher Load Balancer 服務其實用的就是 HA-Proxy, 因此很多進階的設定檔也都可以直接使用 HA Proxy 的語法來進行。這邊就不多做說明，各位有需要研究可以參考官方網站的說明:  <a href="http://docs.rancher.com/rancher/rancher-ui/applications/stacks/adding-balancers">Adding Load Balancers</a>
<h2 id="adding-load-balancers"></h2>
<h1>STEP #6, In-Service Upgrade</h1>
服務上線之後，升級開始是個頭痛的問題了。這些線上服務，大概都沒辦法等你停個幾個小時升級後重新上線... 因此升級系統的程序也是件很頭痛的問題。Rancher 在這邊提供了一個不錯的功能: In-Service Upgrade (不知怎麼翻譯? 就地更新?)。

先來看看怎麼做吧，回頭再來說背後的原理... 這邊假定你的服務都是透過 Stack 的方式佈署，也就是背後都會有對應的 docker compose 設定檔。所以如何指派你的更新內容? 當然就是異動你的 docker compose 設定了。透過新的 docker compose 設定，Rancher 會替你把更新的 container 拉回來，替代你現在正在運作的服務。

&nbsp;
<p id="zxpGibV"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572245251ccec.png"><img class="alignnone wp-image-1193 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572245251ccec.png" width="1574" height="569" /></a></p>
首先，Rancher 很貼心的直接把 Upgrade 獨立成一個選項...

&nbsp;
<p id="goUcPJJ"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722456271099.png"><img class="alignnone wp-image-1194 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722456271099.png" width="1524" height="959" /></a></p>
之後就可以看到整個 Service 的設定畫面了，包含你的 container image 來源，container 環境設定，包含 port mapping, start up 參數，volumes .... 等等設定都可以在這邊調整。

不過重點不在有多少設定可以更改，重點在最上面那行... Batch Size, Batch Interval, 還有 Start Behavior... 這三個參數的作用各位先記著，後面再說明..

&nbsp;
<p id="LKLfaME"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224612a9f8f.png"><img class="alignnone wp-image-1195 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224612a9f8f.png" width="1561" height="596" /></a></p>
線上服務的升級，優先以不中斷服務為主要目的，因此前面不論你改了甚麼設定，Rancher 不會去更動任何 "既有" 的 containers. 畫面上可以看到 Rancher 開始用新的設定值，替你按照需求，建立新的 container。圖中 TutumHelloWorld 這個 Service 的 Scale 設定為 3，不過 Rancher 卻幫你建立第四個了... 這就是將要替代舊服務的 container.

&nbsp;
<p id="fYxjeEo"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572246be623eb.png"><img class="alignnone wp-image-1196 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572246be623eb.png" width="1558" height="570" /></a></p>
再繼續等下去，會發現三個 containers 都已經被建立好，同時也自動啟動了 (畫面中還有一個的狀態是 Starting 啟動中)。

&nbsp;
<p id="LbZdNgR"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572247110c81d.png"><img class="alignnone wp-image-1197 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572247110c81d.png" width="1564" height="568" /></a></p>
要替換的服務都準備好，也成功啟動後... 原有的 containers 就可以退役了，於是 Rancher 就自動替你停掉他們... 畫面中可以看到原有的 containers 開始一個一個進到 Stopping 狀態...

&nbsp;
<p id="jlLKTqN"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224769ae0e1.png"><img class="alignnone wp-image-1198 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224769ae0e1.png" width="1563" height="569" /></a></p>
隔了一會兒，舊的 containers 都成功的停掉了，這時看看右上角的服務狀態，已經從之前的 "Upgrading" 變為 "Upgraded"。這時你可以實際測試看看，是否新的服務都正常運行?

接下來你有兩個選擇:
<ol>
 	<li><strong>Finish Upgrade
</strong>如果升級過後，你的服務一切正常，你就可以選擇 "Finish Upgrade"，告訴 Rancher 服務升級成功。它會替你回收舊的資源，也就是前面步驟被停掉的 containers.</li>
 	<li><strong>Rollback</strong>
當然升級也有可能失敗，一旦失敗的話，你可以選擇 Rollback，Rancher 會立刻幫你還原成升級前的樣子 (簡單的說，就是把新的 containers 停掉並且刪除，把原有的 containers 啟動)</li>
</ol>
&nbsp;

這邊我就不抓 Rollback 的畫面了，給各位看一下 Finish Upgrade 之後會有什麼事情發生:

<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572248b74e84a.png"><img class="alignnone wp-image-1199 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_572248b74e84a.png" width="1559" height="568" /></a>

&nbsp;

右上角的服務狀態，變成 "Finishing Upgrade"，而經過 user 的確認之後，原有的 containers 就變成 Removing 的狀態，Rancher 開始替你刪除回收這些資源...

<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722490655b73.png"><img class="alignnone wp-image-1200 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_5722490655b73.png" width="1552" height="549" /></a>

&nbsp;

一切都完成後，服務狀態又回到正常的 "Active"，原有的 container 也已被移除，如果你畫面還沒刷新，那它會標示 "Removed"，如果你重新整理畫面，就會發現原有的 containers 完全消失了。

<a href="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224961c4cab.png"><img class="alignnone wp-image-1201 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/04/img_57224961c4cab.png" width="1556" height="460" /></a>

&nbsp;

整個 Upgrade 程序，到這裡告一段落。這是我覺得最有用的部分，因為它大大解決了日常維運最常碰到的困擾啊... 其實整個流程並不難理解，但是過去同樣的動作，我都得自己下一堆指令... 下指令不是什麼難事，難就難在只要是人就醫訂有機會犯錯... 尤其在線上運作時，這些錯誤更難以接受... 這個功能就真的幫上大忙了!

回到前面說到 upgrade 的三個重要參數，就是告訴 Rancher 該用甚麼樣的 process 來替你執行升級的過程。看過這整個程序，在回過頭來看這三個參數，大概就不難理解它的意義了吧?
<ol>
 	<li><strong>Batch Size</strong>:
批次執行的數量。以上例來說，Batch Size = 1 代表一次只處理一個 container, 整個服務 scale 設為 3，代表你有 3 個 container 要處理，一次處理一個，完成了再進行下一個...。這部分要留意，如果你很在意線上服務不能中斷的話，切記這個數值不能太大，必須小於你的 scale 數值。否則升級的過程中可能某個關鍵服務的 containers 全部被你停掉了，或是留下可運作的 containers 數量太小，無法乘載升級期間的用量..</li>
 	<li><strong>Batch Interval (sec)</strong>:
顧名思義，批次處理過程中要間隔多久? 視你的服務需要多少時間 init 而定。</li>
 	<li><strong>Start Before Stopping</strong>:
新的 container 要先啟動? 還是原有的 container 要先停用? 有些服務你不希望新舊同時運作，有些服務你希望能不間斷的接軌... 是你需要而定。</li>
</ol>
&nbsp;

整個 Rancher 管理介面，就這個功能最得我心... 當年一頭跳入 Azure 就是因為 Azure 的 Cloud Service 的升級程序做的實在太讚了。跟 Azure 的升級機制比起來，Rancher 小輸了一點... 就是:
<p style="padding-left: 30px;"><em>Upgrade 版本上線前，沒有地方讓我先測試啊...</em></p>
這點用過 Azure 的就知道我在講什麼，只能讚嘆 Microsoft Azure 的 architect 實在太厲害，在六七年前 Azure 就能推出這樣等級的服務，當年 Azure Cloud Service 就已經有 Production / Staging Environment 的設計, 不用正式上線你就可以先行測試。測試滿意後只要 switch，一瞬間就切換上線了。不滿意再 switch 就 rollback ，這動作可以不斷的重複。進化到現在，Azure WebAPP 甚至可以讓你建立多組環境，不限於 Production / Staging 這兩套... 這點對服務中斷的程度，做的比 Rancher 還要徹底... Rancher 沒做到這個地步，算是有點小遺憾... 這是美中不足的地方。

最後，補一下 Rancher 官方的<a href="http://docs.rancher.com/rancher/rancher-compose/upgrading/">說明文件</a> (<a href="http://docs.rancher.com/rancher/rancher-compose/upgrading/">Upgrading Services with Rancher Compose</a>)。雖然是搭配命令列操作的說明 (不是 GUI)，不過很多參數跟觀念說明的很清楚，有興趣可以參考。

&nbsp;
<h1>Summary</h1>
又是一篇不小心就寫太長的文章。這篇沒講到甚麼大道理，就是介紹我體驗 Rancher 的心得。為了想重現當年初次使用 Azure 的感動，特地用一樣的案例演練一次。重點在 Rancher 能替我解決那些問題，是否值得繼續使用?

希望這篇能幫助到有需要的人，要是你覺得這篇文章有幫到你的話，那就替我的粉絲專頁按個讚吧 :D

&nbsp;

安德魯的部落格
<a href="https://www.facebook.com/andrew.blog.0928">https://www.facebook.com/andrew.blog.0928</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date><![CDATA[2016-04-29 16:22:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-29 08:22:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rancher-on-azure-lab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[AZURE]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2137af9221e0cd296875b27b8d84666f]]></wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote data-secret="0f6QtC6M1j" class="wp-embedded-content"><a href="http://rancher.com/rancher-support-for-docker-swarm-and-machine/">Rancher support for Docker Swarm and Machine</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://rancher.com/rancher-support-for-docker-swarm-and-machine/embed/#?secret=0f6QtC6M1j" data-secret="0f6QtC6M1j" width="600" height="338" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_2137af9221e0cd296875b27b8d84666f]]></wp:meta_key>
			<wp:meta_value><![CDATA[1461856787]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_17eb19e9477e7ec79e4ab8b782b59d47]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_59b1146f53d199bfd5e1161d026e63e9]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1204]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[架構師觀點] .NET 開發人員該如何看待 Open Source Solutions?</title>
		<link>http://columns.chicken-house.net/2016/05/05/archview-net-open-source/</link>
		<pubDate>Wed, 04 May 2016 17:05:31 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1218</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

開始之前，先來看一個實際的案例... StackOverflow (<a href="http://www.stackoverflow.com">stackoverflow.com</a>)， 開發人員很愛用的網站，每隔幾年都會在官方的部落格上面公布他的系統架構。來看看 2016 版的架構演進成什麼樣子 (原文: <a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/">Stack Overflow: The Architecture - 2016 Edition</a>)
<p id="AbCyeWE"><img class="alignnone size-full wp-image-1233 " src="http://columns.chicken-house.net/wp-content/uploads/2016/05/img_572b734171d80.png" alt="" /></p>
為何我特地拿 stackoverflow 網站的架構當作例子? 其實這個例子蠻特別的，導致我幾年前第一次看到就留下深刻的印象。這網站核心的部分，其實都是用 .NET 開發的，包含 Web Tier 跟 Service Tier 都是。理所當然的，資料庫也用 Microsoft SQL Server。但是這麼大規模的網站，也混搭了不少的 Linux Server, 負責 Search (Elastic) 跟 Cache (Redis), 前端的 Load Balancers 也沒有用 Microsoft ARR, 而是採用了 Linux + HAProxy..

令我好奇的是，這種混搭的架構，一定會讓它的複雜度提高。我相信他考量的絕對不是 Windows Server 比較貴這種層次的理由 (畢竟他為了這架構，連管理用的 AD 都包進去了，還會搭配 Linux 一起使用一定有更強烈的動機)。複雜度的問題，包含系統架構層面，開發人員的能力經驗層面，網站維運層面都是如此。那麼，這樣真的是個好的設計嗎? 什麼情況下我們需要這樣的設計? 這樣的設計會有甚麼困難跟挑戰?

<!--more-->

過去講到 .NET v.s. Java, 或是 Windows v.s. Linux, 總是會變成像藍綠對決一樣... 所以我總是避免談論這類話題，免得被捲入意識形態之爭，尤其是在 Microsoft 是 <a href="https://en.wikipedia.org/wiki/Steve_Ballmer">Steve Ballmer</a> 當家的那個年代。換上 <a href="https://en.wikipedia.org/wiki/Satya_Nadella">Staya Nadella</a> 上任之後，果然能精準地抓住開發人員在想什麼，一瞬間 Microsoft 什麼東西都跟 Open Source / Linux 這兩個領域靠了...。

從 .NET Open Source, .NET Core 開始可以在 Linux / MacOS 執行；VS 可以開發各種平台的應用程式；VSCode 可以跨平台；到現在連 SQL Server 都要推出 Linux 版本了..

這時我常被問到的問題就是，過去都抱著 .NET + Windows 的這些族群，要如何才能跟上 Microsoft 規劃的 Roadmap ? 以下就是我自己個人對這個問題的看法，純個人觀點...

&nbsp;
<h1>STEP #1, 看懂 Microsoft 的定位及策略</h1>
其實我也不知道 Microsoft 這些策略背後的目的，不過有一點是很明確的，就是 Microsoft 希望抓住開發人員，不論你是甚麼平台的開發者，你通通都要用 Microsoft 的產品及服務就對了。這點還不難理解，我舉幾個例子:

&nbsp;
<h3>1. 用 Visual Studio 開發所有平台的 APP</h3>
舉凡 //Build/2015 發布的 <a href="https://developer.microsoft.com/en-us/windows/bridges">UWP + 四大 Bridge Projects</a> (雖然 Astoria - Android 子系統 project 已經掛掉了)，不過 Microsoft 仍然致力於用 Visual Studio 就可以讓你把別的平台寫好的 APP 直接轉成 UWP，在 Windows 10 上面執行。

反過來看也一樣，用 Visual Studio 寫一次就能發行到各大平台的支援也沒少過，包含 Visual Studio 內建支援 Cordova (HTML5 + CSS3 + JavaScript 開發跨平台 APP)，已及 //Build/2016 才宣布 Visual Studio 將內建 Xmarian, 用 Native 的方式跨平台開發 APP。

另外，<a href="https://blogs.msdn.microsoft.com/vcblog/2016/03/30/visual-c-for-linux-development/">上週才看到的消息</a>，Visual Studio 也開始支援開發及編譯出 Linux 能執行的 Code 了...

&nbsp;
<h3>2. 用 .NET Core 開發所有平台的 Server Side Application</h3>
Microsoft 除了開發工具要搶占市場之外，開發的平台及語言也沒閒著 (.NET Core / C#)。一樣在 //Build/2015 才大動作發表的 .NET Core, 現在已經 RC2 了。

包括 Runtime, 編譯器, BCL (Basic Class Library), 通通都 Open Source。不再需要靠第三方的 Mono Project，直接靠官方支援就已經可以直接在 Windows / Linux / MacOS 上執行 ASP.NET...

&nbsp;
<h3>3. 用 Visual Studio Code 當作所有平台的 IDE 第一選擇</h3>
除了 Windows 平台上面的 Visual Studio 之外，Microsoft 也極力發展跨平台的 IDE: Visual Studio Code, 如果你有必要在其他平台 (非 Windows) 上面寫 Code, 那就是 VSCode 了，雖然才剛 1.0 release, 不過反應還不錯，再過一兩年應該大有可為

&nbsp;
<h3>4. 用 Windows 10 / 2016 當作所有平台的開發環境</h3>
排除行動裝置，SERVER 端的執行環境就兩大派: Windows / Linux。封裝佈署方式現在最當紅的就是 Container (Docker)，這些也全都在 Microsoft 規劃的支援範圍內，你用 Windows 通通可以搞定..

Container, Windows 2016 開始支援 Windows Container, 以後 Windows Application 也可以開始用 DockerFile 來 Build Container Image, 用 Docker 的方式快速的佈署。對於 Linux Kernel 的 Container 支援也沒漏掉，Microsoft 與 Docker 也密切合作，Docker for Windows 也有大改版 (Beta Now, 無奈我一直都排不到 beta tester @@)，原生支援 Hyper-V 當作底層的虛擬化環境，為了讓使用體驗更好，Hyper-V 也開始加入了 Nested Hypervisor Support。

另外一個值得注意的趨勢是: Windows 10 將會內建 Linux Shell, 可以原生的執行 Linux ELF 格式的執行檔 ( under user mode only) 而不需要重新編譯。這部分我腦補一下，如果再發展下去，也許以後 Windows Container 也能執行 Linux 版本的 Container Image 也說不定...

&nbsp;
<h3>5. 用 Microsoft Azure 當作所有服務執行的平台</h3>
最後輪到雲端了，Azure 已經不向當年 2009 剛推出時的狀況，只支援 .NET 而已... 現在不僅可以直接 Create Linux VM, 甚至你需要各種 Linux / Open Source 的服務，都有整理好樣板給你使用，只要點幾下滑鼠，服務就已經佈署好等你使用..Azure 平台不再是只提供 Microsoft Solution, 而是你需要什麼上面都提供，只要你 Hosting 在 Azure 上面就好。

看到這邊，我開始了解 Staya 講的 "Mobile First, Cloud First" 是指什麼意思了。過去 Microsoft 都在把所有東西綁進自家的 "Platform"，但是現在更像是提供 "Applications &amp; Services"，因此 Microsoft 的策略，講的更白話一點應該是這樣:

從過去的 "Mobile (Platform) First, Cloud (Platform) First", 轉移到 "Mobile (Application &amp; Services) First, Cloud (Application &amp; Service) First" 才對。

&nbsp;

&nbsp;
<h1>STEP #2, 個人該如何轉變?</h1>
這真是個大哉問，你得先知到目標在哪裡，才能知道你還欠缺什麼，也才能知道你該改變什麼，以及如何轉變...。我就先大膽假設一下好了。假設將來的環境，已經不再有 Windows / Linux 的隔閡，你可以盡你所能的挑選最棒的元件，用最適合的架構來規劃你的 service 時，你會怎麼做?

沒錯，這就是我一開始舉 StackOverflow 當作範例的原因。StackOverflow 很明顯的就是挑選他需要的領域內最棒的 Solution，來搭建他的服務。不過這樣的混搭設計，不論在開發、維運、測試及除錯等等的門檻都提高不少，有些規模或能力較差的團隊往往會望而卻步。

不過，如果 Microsoft 的策略成功，那麼以後像 StackOverflow 這樣的架構就是垂手可得的，不再有現在的高門檻...。不需要大規模佈署 (只有一台 Server 也行)，不用投入大量資源，開發團隊及維運團隊也不需要橫跨兩大陣營來打造服務 (只要熟悉 .NET Core 就行)。佈署及管理都可以在彈指之間完成... (只需要熟 Docker 就行)。

我就用我理想中的技術及架構，來重現同樣的組態吧:
<p id="NpLuZkd"><img class="alignnone size-full wp-image-1224 " src="http://columns.chicken-house.net/wp-content/uploads/2016/05/img_5728e4415f238.png" alt="" /></p>
如果你正好看過我前一篇文章 (<a href="http://columns.chicken-house.net/2016/04/29/rancher-on-azure-lab/">Rancher – 管理內部及外部 (Azure) Docker Cluster 的好工具</a>) 的話，就會知道這環境非常容易就可以架設起來，這樣的架構是非常容易達成的。這其中有幾個關鍵技術，我個人非常推薦過去是 Microsoft 陣營的開發人員現在就去學習，包括 .NET Core、Open Source 常見的主流元件、以及容器化技術 Docker 。這三項分別代表了開發、主流元件、服務佈署三大領域。

&nbsp;

以下我就分別從開發、IT架構、以及人員能力養成三個角度來探討:

&nbsp;
<h3>DEV: 開發架構上的考量 - 盡早轉移到 .NET Core</h3>
我挑選 StackOverflow 當例子，很大的原因是他 WEB 採用的是 C# / .NET 的 solution. 雖然目前 Open Source 都還是以 LAMP Stack 為大宗，開發語言 PHP 的能見度最高。不過單就 Language 來看，我覺得 C# / Java 才具備大型或是複雜的架構發展，主要原因就在於語言本身給你多大的發揮空間。然而 C# / Java 又受限於背後的老大: Microsoft / Oracle 投入多少資源去發展他。

既然我會在這邊寫這篇，我當然是看好 C# 語言本身的發展 (否則我也不會寫這篇了: <a href="http://columns.chicken-house.net/2016/04/09/build2016_csharp7_preview/">//build/2016 – The Future of C#</a>)。有 Andres 大神在背後支撐，加上地表最強的 IDE: Visual Studio，實在沒有不用的理由。為了後面的 IT 佈署考量，戰略上升級到 .NET Core 是絕對值得的，一來進可攻，你有機會直接佈署到 Linux 或是 Docker 的環境；二來退可守，你要留再 Windows Platform 也是很好的選擇。至少你的開發團隊就不用為了將來佈署的問題傷透腦筋。過去我看過太多例子，為了佈署問題而遷就不是最佳的開發技術。

架構中其他的服務，如 Cache (Redis, Memory Cached ... )、Reverse Proxy (Apache, Nginx, HA Proxy ...) 等等，對於開發人員來說，不熟 Linux 及 Redis 安裝設定也不再是個問題了，因為 Docker 已經幫你從安裝設定的地獄中解放出來，你只要挑選官方或是高手預先包裝好的 Container 就一切搞定。Redis 在此架構中是用來提高效能的服務，而非自己開發的服務。採用 Container 是最簡單的取得方式。

有了 Microsoft .NET Core 的背書，加上 SQL Server 也即將在 2017 推出 Linux 版本，這整個架構到底要挑選 Windows or Linux，突然間就單純的是需求問題，而不是政治問題了。你可以放心的使用 C# 來開發你的應用程式，佈署階段則可完全以維運為主要考量來評估。不論你選擇哪個平台，都會有對應的 Container 容器化的技術供你使用。

這段的最後補充一下參考資訊，StackOverflow 有三篇文章值得一看:
<ol>
 	<li>系統架構設計 (<a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/">Stack Overflow: The Architecture - 2016 Edition</a>)</li>
 	<li>硬體設備 (<a href="https://nickcraver.com/blog/2016/03/29/stack-overflow-the-hardware-2016-edition/">Stack Overflow: The Hardware - 2016 Edition</a>)</li>
 	<li>開發流程 CI 作法 (<a href="https://nickcraver.com/blog/2016/05/03/stack-overflow-how-we-do-deployment-2016-edition/">Stack Overflow: How We Do Deployment - 2016 Edition</a>)</li>
</ol>
&nbsp;
<h3>IT: 架構設計上的考量 - 盡早採納容器化的佈署管理方式 (Docker)</h3>
前面看的出來，開發已經跟佈署脫鉤了，關鍵技術就是 Container (Docker)。因此在系統開發階段，只要確保每個服務都能夠容器化，包裝成 Docker Container 後，就萬事具備了! 接下來 IT 規劃就只要靠 Docker Swarm 來建立整套的 Docker Cluster，去承載這些 Containers。如果不敷使用，還有更進階的 Mesos，甚至是 DC/OS (Data Center OS) 可以使用。不想自己養機器? 這些服務也在 Microsoft Azure 上有現成的 Azure Container Service, 直接替你準備好環境。

至於這些 Containers 之間的關係，還有 Scale 等等組態，交給 Docker Compose 就可以了，有興趣的人用這關鍵字就可以知道詳細用法，我就不多說。這些都是縣在現有垂手可得的資源，不是遙不可及的技術。如果你需要的規模不大，也許實體的 Server (Docker Swarm Node) 只要兩三台就能搞定。如果你的資源足夠，也有大流量的需求，這規模擴大到上百台 Server 也不是問題。甚至你要擴充到上千台或是上萬台，用更進階的 DC/OS 也同樣的能滿足你的需求。

目前 Windows Server 2016 還尚未 Release, 截至目前為止也才 Tech Preview 5 而已，離正式發行還好一段時間。雖然 這版已經開始支援 Windows Container 的技術，也支援標準的 Docker API。雖然目前版本還有很多限制，Windows / Linux Container Image 也都還無法互相混用，不過上面的架構也已經開始有能力用 Windows 環境架設出來了，我相信在 Microsoft 未來的 Roadmap 裡一定會有更好的互通性，來進一步簡化這樣的架構建立及維護門檻。

上述架構的說明，我都是以 Docker 官方的技術為主 (Docker Swarm, Docker Compose) 來說明。如果你採用我上篇介紹的 Rancher，那麼整個架構跟組態就更容易了。有內建的 Load Balancer Service 可以使用，Scale Out 也只要在介面上直接按下你要的個數就結束。

&nbsp;
<h3>IDP: 個人的學習及發展計畫 - 趕緊熟悉這一切</h3>
看到這些技術整合起來的威力了嗎? 沒錯... 這些就是我在半年前初次接觸 Docker 時就看到的未來，也是因為看到這樣的威力，我才願意花時間去學習我原本一竅不通的 Linux ，學習怎麼使用 Docker，熟悉這個生態裡常用的 Apache / Nginx / HA Proxy / .... 等等服務，為的就是這一刻啊...

也是因為這樣，我思考了很久，我的目的並不是去跟 Linux 很強的人來競爭，我的目的是用最快最有效率的方式來進入這個領域。只要了解每個服務的特色及使用時機，我就有足夠的知識來調配最佳的架構。對於原本就是 Microsoft Solution 的人們，要跨入這樣混搭的最佳途徑就是熟悉這三件事:
<ol>
 	<li>熟悉 Docker 容器技術 (不論將來你是用 Windows / MacOS / Linux 的 Docker Engine)</li>
 	<li>熟悉 Open Source 架構的幾個重要服務 (如 Nginx, HA Proxy, MySQL, Redis ... 等等)</li>
 	<li>盡快的將你的開發技能及開發平台，移轉到 .NET Core</li>
</ol>
&nbsp;
<h1>結論</h1>
寫了這堆，難得沒貼到 Screen Capture，也沒貼到 Code .. 算是把過去半年我為何極力的轉換領域的原因做個整理，寫下來的心得。我想跟大家分享的是，過去這半年我不是漫無目的趕流行才研究 Docker 跟 .NET Core 的，而是看到未來的轉變，有計畫的進行。

其實我分享的這些內容，對我自身來說我也是初學者，所以論深度及廣度應該都比不上早在 Linux + Open Source 打滾多年的前輩。所以我鎖定的對象，是跟我一樣過去都是以 Microsoft 陣營為主的開發人員為主。我想我們會碰到的問題跟障礙都差不多，希望我的分享會對你們有幫助 :D]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1218</wp:post_id>
		<wp:post_date><![CDATA[2016-05-05 01:05:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-04 17:05:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[archview-net-open-source]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="net-core"><![CDATA[.Net Core]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_fd32c8976c6566daf408f5ea16b83f78]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6a7cb959a254e3ff7589e5b171caefd6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1229]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>專為 Windows 量身訂做的 Docker for Windows (Beta) !</title>
		<link>http://columns.chicken-house.net/2016/06/11/docker-for-window-beta-evaluate/</link>
		<pubDate>Sat, 11 Jun 2016 06:51:37 +0000</pubDate>
		<dc:creator><![CDATA[chicken]]></dc:creator>
		<guid isPermaLink="false">http://columns.chicken-house.net/?p=1238</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter" src="https://pbs.twimg.com/media/CjNVIX9UgAA0Z8L.jpg" />

總算輪到我了!! 排隊等 Docker Beta Program Token 等好久了~  4 月初登記，5 月中才排到名額... 前陣子忙，一直到現在才有空研究 @@。這版是 Docker 在三歲生日時一起公布的 beta test program, 為 Windows / Mac 開發的新板 Docker, 企圖改善在非 Linux 平台上的 Docker 使用體驗。既然到手了，當然要體驗看看 :D

&nbsp;

<!--more-->
<h1>Docker for Windows Beta, 操作體驗大躍進!</h1>
開始 step by step 之前，先講一下我對這版的感想。不想聽這段心得的話，可以直接跳到後面看如何在 VM 裡面體驗這次大改版的 Docker for Windows beta... 要在 VM 裡面跑這個有些小地雷要閃過，我就順手整理在後面了。

做這些基礎建設的公司，真的都要掌握自己的虛擬化技術才玩得起來，不然就是要密切的跟掌握這些技術的公司合作才行。這次 Docker for Windows 我想背後 Microsoft 應該幫了不少忙吧? 不但跟 Hyper-V 整合的天衣無縫，同時 Windows Container 的幾個關鍵 Feature 也開始看的到跡象了，背後雙方應該合作了很久，現在開始端出成果出來了。我就被之前 Virtual Box 搞到完全不想在 Windows 上面跑 Docker, 索性忘掉 Docker Toolbox for Windows, 直接自己開 Linux 的 VM，不然就是直接找獨立的機器裝 Linux + Docker Engine, 用 SSH 連進去玩。完全跟我自己的 Host OS (Windows 10 Ent) 沒有直接的關聯，自然也沒甚麼整合性可言。換句話說，你不會 Linux 就不用玩了...。

畢竟，現在的 Container 都還是以 Linux 為主，未來兩三年內年應該還是脫離不了得附掛 Linux VM 才能執行 Docker 的狀況。很尷尬的一點就是，Container 就是為了脫離 VM 才設計出來的輕量化架構，而現在 Windows 上要跑 Linux 的 Container 又非得使用 VM 不可，這些整合的問題就浮現出來了。Mac 雖然也是 Unix 系列的 OS，不過她畢竟也不是 Linux, 也有類似問題存在。如何在虛擬化技術及整合上做到完美，就是這次改版主要的訴求了。

Mac 版的我沒有研究，有很多前輩分享過這部份了，我就不班門弄斧了，我就針對 for windows 版本的來研究。這次在架構上，官網講到有<a href="https://beta.docker.com/docs/features-overview/">幾項主要的改進</a>，對我而言有感的改變有這幾個 (紅字):

<em>Docker for Mac and Docker for Windows are faster, more reliable alternatives to Docker Toolbox for running Docker on these platforms. Here are some highlights of the new products.</em>
<ul>
 	<li><em><strong>Faster and more reliable</strong> - <span style="color: #ff0000;">No more VirtualBox!</span> On Mac, the Docker Engine runs in an <a href="https://github.com/mist64/xhyve/" target="_blank">xhyve</a> Virtual Machine (VM) on top of an Alpine Linux distribution. The VM is managed by the native Docker application. On Windows, the Docker Engine is running in a <a href="http://www.microsoft.com/en-us/server-cloud/solutions/virtualization.aspx" target="_blank">Hyper-V</a> VM. You do not need Docker Machine (<code>docker-machine</code>) to run Docker for Mac and Docker for Windows.</em></li>
 	<li><em><strong>Native apps for better tools integration</strong> - <span style="color: #ff0000;">Docker for Mac and Docker for Windows are native applications, including native user interfaces and the ability to stay updated automatically</span>. The Docker tools are bundled with these apps, including the Docker command line interface (CLI), Docker Compose, and Docker Machine.</em></li>
 	<li><em><strong>Use with Docker Toolbox and Docker Machine</strong> - Docker for Mac and Docker for Windows can be used at the same time as Docker Toolbox on the same machine. Docker for Mac and Docker for Windows do not include Kitematic yet. So, for now, the only reason you would still need both Toolbox and Docker for Mac or Windows is to run Kitematic. (See <a href="https://beta.docker.com/docs/mac/docker-toolbox/">Docker for Mac vs. Docker Toolbox</a> in the Mac documentation. A Windows-specific version is coming soon.)</em></li>
 	<li><em><span style="color: #ff0000;"><strong>Volume mounting for your code and data</strong></span> - Volume data access is fast and works correctly.</em></li>
 	<li><em><strong>Support for multiple architectures out-of-the-box</strong> - Docker for Mac and Windows lets you build and run Docker images for Linux x86 and ARM. (See <a href="https://beta.docker.com/docs/mac/multi-arch/">Leveraging Multi-Architecture Support</a> in the Mac documentation. <span style="color: #ff0000;">A Windows-specific version is coming soon</span>.)</em></li>
</ul>
&nbsp;

補充一下這些改善，對我而言最有感的，就是終於拿掉 Oracle Virtual Box, 而改用 Microsoft 自家的 Hyper-V。Hypervisor 的應用是獨佔的，我沒辦法同時在一台機器上用 Hyper-V 又同時用 Virtual Box, 過去往往我都得自己手工改造，把 Virtual Box 換成 Hyper-V，現在已經變成內建預設的支援模式了 :D

另外，還有些官網沒提到的小改變，也是很有感... 值得提出來，例如 Docker 也換掉了原本搭配的 Boot2Docker ISO, 改用 <a href="http://www.alpinelinux.org/about/">Apline Linux</a> + <a href="https://www.busybox.net/about.html">Busybox</a>。Docker 也開始提供原生的管理介面，設定或更新都更簡單了，同時 Docker Engine + 配合的 VM，也統一由 Docker Service 管理，開機會自動運行，大大提高整合度。

不得不說 Docker 這次做的真不錯，把在 Mac / Windows 上面使用 Docker 的障礙降到最低了。實際上線時，應該不會有人在 Mac / Windows 上面跑 Linux VM 來執行 Docker，應該會直接用原生的 Linux Docker Engine 搭配 Docker Cluster 管理工具來運行，但是開發環境就不一樣了，Windows / Mac 這類 Desktop OS 是主流。因此這段能做好的話對於 Docker 的推廣絕對是一大助力。

Docker 在併購及整合技術的挑選上，都很有眼光。精準的建構整個 Docker 生態系，是他成功的主要原因。從 Docker Engine 容器技術本身，到 Docker Hub 統一的 Registry，併購了 TumTum (Docker Cloud 前身)，加上這次跟 Mac / Windows 徹底整合，把整段從開發到上線的 DevOps 開發流程都串起來了。不知 <a href="https://www.docker.com/docker-news-and-press/docker-acquires-unikernel-systems-extend-breadth-docker-platform">Docker 併購的 UniKernel</a>，將來又會有甚麼樣的改革? 真是令人期待 :D

&nbsp;
<h1>Tips: 如何在 VM 裡面體驗 Docker for Windows?</h1>
感想先寫到這邊，接下來我就把我在 VM 裡面測試 Docker for Windows beta 的過程簡單紀錄一下。這邊有些技巧要留意，這是官網沒有講的。因為 Docker Engine 還是得依靠 Linux, 因此背後藏一台 Linux VM 仍然是必要的作法。既然我要在 VM 裡測試 Docker for Windows beta, 那麼 VM 裡面要再開 VM 就是閃不了的議題了。還好之前這篇已經先演練過 Nested Hyper-V 了，架構上的問題 Microsoft 已經解決了，剩下就是規劃跟實作。這次我要示範的架構圖如下:
<p id="opBhRON"><img class="alignnone size-full wp-image-1246 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af1cebe972.png" alt="" /></p>
由於太多層 VM 了，不先講清楚架構的話，會像 Inception 一樣搞不清楚你做了幾層夢境? 最後醒不過來就糟糕了 XD。這次的演練案例，只有最外層是我的實體 PC (CHICKEN-PC), 我在裡面開了台 VM (WIN10) 來跑 Docker for Windows beta, Docker 要求我啟用 Hyper-V feature 後，會自動建立一台 Linux VM (MobyLinuxVM), 在裡面跑 Apline Linux, 並且執行 Docker Engine。

&nbsp;
<h2>STEP #1, 準備好支援 Nested Hyper-V 的 VM</h2>
這部分可以參考之前的文章 (<a href="http://columns.chicken-house.net/2016/04/03/docker-toolbox-under-vm/">如何在 VM 裡使用 Docker ToolBox ?</a>)，或是直接參考 Microsoft 的<a href="https://blogs.technet.microsoft.com/virtualization/2015/10/13/windows-insider-preview-nested-virtualization/">官方說明</a>即可。這部分難在 Hyper-V Nested Support 還只是 preview 階段，可能你連想都沒想到能這樣解決，或是根本還不知道有這功能...。另外，Preview 階段的東西文件也不足，也還沒有 GUI 可以用，只能透過 PowerShell Script 來啟用他。同時啟用 Nested Hyper-V 的 VM，也有一些規格限制要留意。這些細節突破後就過關了。以下是操作步驟:

第一件事，按照上圖施工，當然是在 Host PC 上 (CHICKEN-PC) 先準備好你要執行 Docker for Windows beta 的 VM (WIN10)。CHICKEN-PC 必須符合 Nested Virtualization 的需求，按照 Microsoft 的說法，OS 必須是 Windows 10 Pro or Enterprise / Windows Server 2016 Build 10565 以上的版本。Windows 10 Home 因為不支援 Hyper-V, 直接淘汰出局...。

至於 WIN10 VM 跑的 OS 要能夠執行這版 Docker for Windows beta 的系統需求，又有點不同，<a href="https://www.docker.com/docker-news-and-press/docker-released-native-mac-and-windows-apps-optimize-developer-experience">官網</a>寫的是:
<p style="padding-left: 30px;"><em>System Requirements for Docker for Windows</em>
<em>Windows 10 Pro (1511 November update, Build 10586) and above, with <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/quick_start/walkthrough_install">Hyper-V package installed.</a></em></p>
不過，我實際上用 Windows 10 Enterprise 也是 OK 的，Windows Server 2016 沒在列表上，我沒試過... 總之，我在 CHICKEN-PC 跟 WIN10 這兩個 Host 用的都是 Windows 10 Enterprise 10586 這版本，這組合是可以正確無誤的執行的。

同時，用到 Nested Virtualization 技術的 VM，會有這些限制，<a href="https://blogs.technet.microsoft.com/virtualization/2015/10/13/windows-insider-preview-nested-virtualization/">官方列了十幾條</a>，這邊特別要留意的我標紅字:
<ul>
 	<li><strong><span style="color: #ff0000;">Both hypervisors need to be the latest versions of Hyper-V.</span> Other hypervisors will not work. Windows Server 2012R2, or even builds prior to 10565 will not work.</strong></li>
 	<li>Once nested virtualization is enabled in a VM, the following features are no longer compatible with that VM. These actions will either fail, or cause the virtual machine not to start if it is hosting other virtual machines:</li>
</ul>
<ul>
 	<li><span style="color: #ff0000;">Dynamic memory must be OFF</span>. This will prevent the VM from booting.</li>
 	<li>Runtime memory resize will fail.</li>
 	<li><span style="color: #ff0000;">Applying checkpoints to a running VM will fail</span>.</li>
 	<li>Live migration will fail — in other words, a VM which hosts other VMs cannot be live migrated.</li>
 	<li><span style="color: #ff0000;">Save/restore will fail</span>.<b>Note:</b> these features still work in the “innermost” guest VM. The restrictions only apply to the first layer VM.</li>
</ul>
<ul>
 	<li>Once nested virtualization is enabled in a VM, MAC spoofing must be enabled for networking to work in its guests.</li>
 	<li>Hosts with Device Guard enabled cannot expose virtualization extensions to guests. You must first disable VBS in order to preview nested virtualization.</li>
 	<li>Hosts with Virtualization Based Security (VBS) enabled cannot expose virtualization extensions to guests. You must first disable VBS in order to preview nested virtualization.</li>
 	<li><span style="color: #ff0000;">This feature is currently Intel-only</span>. Intel VT-x is required.</li>
 	<li>Beware: nested virtualization requires a good amount of memory. I managed to <span style="color: #ff0000;">run a VM in a VM with 4 GB of host RAM</span>, but things were tight.</li>
</ul>
&nbsp;

順序是你先用 Hyper-V 建立好要安裝 Docker 的 VM (我取的名字是 WIN10)，然後再用 PowerShell Script 啟用 Nested Virtualization。畫面如下:
<p id="UkOeKQO"><img class="alignnone size-full wp-image-1243 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575ac7c6e166c.png" alt="" /></p>
詳細步驟可以參考<a href="https://blogs.technet.microsoft.com/virtualization/2015/10/13/windows-insider-preview-nested-virtualization/">官方說明</a>的這個段落: How to enable nested virtualization

&nbsp;

接著就是建立 WIN10 這台 VM，同時安裝 Windows 10 Enterprise, 這個我就不多說，要留意 VM 的規格，必須停用 Dynamic Memory, 同時至少配置 4GB 以上的 RAM 就可以了。其他隨意... 以下是我自己測試環境的配置，給大家參考。用紅筆畫起來的地方請留意上述的限制:

&nbsp;
<p id="caguQQY"><img class="alignnone size-full wp-image-1272 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bac318bc22.png" alt="" /></p>
&nbsp;

&nbsp;
<h2>STEP #2, 在 VM 內安裝設定 Docker for Windows Beta</h2>
接下來的動作，通通都轉移到 VM: WIN10 裡面進行了。如果你有申請 Beta Program, 你應該會收到下載網址，以及測試用的 Token.. 這段過程很無腦，下載安裝包 (MSI package), 下一步下一步按完就 OK 了:

<img class="alignnone size-full wp-image-1248 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af80225e5d.png" alt="" />

&nbsp;

不過，如果你沒事先在 WIN10 裡面啟用 Hyper-V 的話，第一次執行 Docker for Windows 的話會出現這警告，按下 [Install &amp; Restart] 後會自動幫你補安裝 + 重新開機:
<p id="HVwFznn"><img class="alignnone size-full wp-image-1250 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af8c46977b.png" alt="" /></p>
&nbsp;

重新啟動後，如果看到要你輸入 Token 的話，那就對了:
<p id="MYTUpzQ"><img class="alignnone size-full wp-image-1251 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af908356cf.png" alt="" /></p>
&nbsp;

這邊要留意一下，如果你 STEP #1 的部分沒做，或是動作不正確的話，接下來會看到 Docker 的警告訊息，說 MobyLinuxVM 無法啟動... 那個訊息閃太快我來不及抓到畫面。不過我自己手動到 Hyper-V 管理員去啟動 VM 也會看到一樣的訊息:
<p id="COIEunl"><img class="alignnone size-full wp-image-1252 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575af99d5c5ec.png" alt="" /></p>
&nbsp;

Nested Virtualization 沒正確設定好，就會造成 WIN10 這台 VM 裡面沒辦法再往下開一層 Linux VM .. 這時不要傻傻的重新安裝 Docker for Windows, 檢查上層的 CHICKEN-PC 是否正確設定比較重要。最簡單的驗證方法，就是在 WIN10 裡面另外手動建立第二台 VM，看看能否啟動就知道了。

&nbsp;
<p id="mlDdoXC"><img class="alignnone size-full wp-image-1253 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575afea2eb1ff.png" alt="" /></p>
如果一切順利的話，開機後過一兩分鐘後，待 Docker VM 啟動完成之後，會看到這個訊息。同時右下角的 Tray Icon 也會有個 Docker 的 Icon 在那邊。

&nbsp;
<p id="gaZXnBz"><img class="alignnone size-full wp-image-1254 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575aff4482e69.png" alt="" /></p>
Docker Settings 也有統一的介面了。Dashboard 的部分這版還沒提供，不過調整設定的部分已經好了，VM 的規格可以在這邊調整，其實他只是代替你去調整 Hyper-V 配置給 VM 的 CPU 跟 MEMORY 資源而已。其他細節就各位自己摸索，總知道這個步驟，Docker for Windows 的安裝設定動作就告一段落。可以進行到下一步，開始 Pull Image 回來執行了。

&nbsp;
<h2>STEP #3, 執行 Docker Container: Hello-World</h2>
這邊測試我就簡單扼要的進行就好。我會測試兩個 container, 一個就是 hello-world, 證明這樣的架構是可運作的，第二個就是直接開 shell, 來驗證 mount local volume 的機制是否會運作。

若你順利的進行完前述 STEP #1 及 #2 的步驟的話，這步驟就再簡單不過了，唯一的差別是，過去需要自己 SSH 連到 Linux VM 內執行 Docker CLI, 現在可以直接在 Windows 下，透過 DOS Command Prompt / PowerShell 來執行 Docker CLI 指令，省了一層轉換，好處是你可以更密切的跟原生的 Windows 批次檔做整合，去運用及操控這些 Docker 的資源。

延續前述的環境，在 WIN10 VM 環境下，開啟 DOS 命令提示字元，執行 docker run 指令:
<pre class="lang:sh decode:true ">docker run --rm hello-world</pre>
<p id="JoPfvne"><img class="alignnone size-full wp-image-1256 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b089b8c29b.png" alt="" /></p>
&nbsp;

完全不意外的執行結果，當然是有顯示出 hello-world 這個 container 的輸出。別小看這些訊息，他的背後可是累積了多少資源才能執行成功的 @@

這個步驟完成的話，恭喜你，你已經能順利的開始用 VM 來體驗 Docker for Windows 帶來的好處了，不用再擔心你在工作機上面安裝 Beta 版的工具 (尤其是這種會影響 infrastructure 的東西) 是否會搞壞你的工作環境了 :D

&nbsp;
<h2>STEP #4, 掛載 Windows Folder, 給 Container 使用</h2>
接下來的案例，是這篇的最後一個 DEMO，也是本篇的重頭戲: 要展示 Local Volume Mount 的機制。過去要嘛就是直接掛載 Linux VM 內的 volume, 需要溝通的話就開 SAMBA ，讓 Windows 透過網芳來存取。或是反過來 Windows 開分享，讓 Linux VM 用 CIFS mount 起來用。不管是哪一個方法，明明都在本機的 DISK，還要透過網路繞一圈 (雖然沒有真正繞出去啦) 實在是很蠢...

&nbsp;

Docker for Windows 開始有專屬的設定方式可以解決這個問題了，在 Settings 畫面中，[Share Drivers] 就可以讓你勾選那些 DISK 能夠允許 Docker Engine 來使用，這應該是透過 <a href="https://docs.docker.com/engine/extend/plugins_volume/">Docker Volume Driver </a>來實現的。設定很簡單，Local Disk 有勾起來的，將來就能用在 Docker Volume 上面。

不過，前面的 "蠢" 方法講太快... Docker for Windows 一樣是透過網路繞了一圈，只是他把動作做到最精簡而已。我做了個小實驗，我的 WIN10 VM 有兩顆硬碟，分別是 C:\ 跟 D:\:

&nbsp;

只勾選 C，結果 windows 就多了 C 這個分享目錄:
<p id="HZRjniz"><img class="alignnone size-full wp-image-1258 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0bc5070d2.png" alt="" /></p>
&nbsp;

是不是只是個巧合? 那我再把 D 勾起來看看:
<p id="TqJNVgI"><img class="alignnone size-full wp-image-1257 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0b396d834.png" alt="" /></p>
&nbsp;

結果真的多了 D 這個 share .. 沒關係，瑕不掩瑜，至少它解決了過去棘手的大麻煩。這次我換成 apline linux 的 image, 直接掛載一個 volume 來驗證看看效果。

首先，我在 C:\Users\chicken\Docker\apline-data 目錄下，放置了 readme.txt 這個檔案，之後我移除所有的 Share Drives 設定，沒有勾選任何 DISK 的情況下，執行這個指令，將 C:\Users\chicken\Docker\apline-data 目錄掛到 Container 內的 /data ，啟動 apline linux, 並且進入 shell:
<pre class="lang:sh decode:true">docker run -it --rm -v C:\Users\chicken\Docker\apline-data:/data apline /bin/ash</pre>
<p id="SLyzIrP"><a href="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0e501d7a1.png"><img class="alignnone wp-image-1261 size-full" src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0e501d7a1.png" width="1362" height="375" /></a></p>
沒有啟動 C:\ shared drivers 的情況下，並不會出錯，不過 container 內的確也看不到我預先放的 readme.txt 檔...

反過來測試看看，我在 apline linux 的 shell 下執行這段指令:
<pre class="lang:sh decode:true">cp /proc/version /data/aplinux-version.txt</pre>
<p id="tOjpguz"><img class="alignnone size-full wp-image-1262 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b0f6f7001d.png" alt="" /></p>
很遺憾，左邊 Windows 檔案總管果然看不到這新增的檔案，但是在 Linux shell 內 cat 的到內容...

&nbsp;

OK，離開這個 container, 刪除 image 後重新再 create 新的 container, 發現剛才的檔案還在，代表 volume 只是沒被正確的掛在 Local DISK，但是 Docker Engine 仍然有找個地方準備 Volume 讓 Container 掛起來用...
<p id="JkKFBoy"><img class="alignnone size-full wp-image-1263 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b105bea9e7.png" alt="" /></p>
&nbsp;

同樣的實驗再做一次，唯一的差別，在於第二次我事先打開 C:\ 的 Shared Drives 設定:
<p id="sYYKfwh"><img class="alignnone size-full wp-image-1264 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b10ad9bf2c.png" alt="" /></p>
&nbsp;

同樣用這道指令，進入 Apline Linux shell:
<pre class="lang:sh decode:true ">docker run -it --rm -v c:\Users\chicken\Docker\apline-data:/data apline /bin/ash</pre>
<p id="mVJdeaN"><img class="alignnone size-full wp-image-1266 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11002573f.png" alt="" /></p>
這次果然順利 mount 到我只定的 Local DISK 了。同樣的，我在 Linux shell 內產生一個檔案:
<pre class="lang:sh decode:true ">cp /proc/version /data/aplinux-version.txt

cat /data/aplinux-version.txt</pre>
<p id="MCDIKHs"><img class="alignnone size-full wp-image-1267 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b114157a49.png" alt="" /></p>
回到檔案總管看看，果然檔案有寫進來:
<p id="nqEgHon"><img class="alignnone size-full wp-image-1268 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11959e3c8.png" alt="" /></p>
&nbsp;

同樣的，離開 &amp; 刪除 container 後，重建一次，前面對檔案的異動都有保留下來:
<p id="wRPxdvD"><img class="alignnone size-full wp-image-1269 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575b11cc48af7.png" alt="" /></p>
大功告成! 實驗順利結束 :D

&nbsp;

&nbsp;
<h1>後記: Container Isolation Technonlgy</h1>
最後一個還沒機會測試的功能，也是我很感興趣的:
<p style="padding-left: 30px;"><em><strong>Support for multiple architectures out-of-the-box</strong> - Docker for Mac and Windows lets you build and run Docker images for Linux x86 and ARM. (See <a href="https://beta.docker.com/docs/mac/multi-arch/">Leveraging Multi-Architecture Support</a> in the Mac documentation. <span style="color: #ff0000;">A Windows-specific version is coming soon</span>.)</em></p>
&nbsp;

Linux x86 這次就已經能執行了，ARM 我手邊則還沒有東西可以測試...。我比較有機會用到的是 Windows Container, 看來也在將來的支援範圍內。這只能從文件跟這次的 release 找出一些蛛絲馬跡了。

舉個例子，Microsoft 在 MSDN 曾經提到，Windows Container 的架構為了 Docker 的弱項 "isolation" 做了加強，除了常看到用 namespace 做隔離之外 (process isolation)，Microsoft 也提供了更高隔離層級的 hyper-v container (kernel isolation)。簡介可以參考<a href="https://blogs.msdn.microsoft.com/jcorioland/2016/05/31/create-and-run-hyper-v-containers-using-docker-on-windows-10-desktop/">這篇 MSDN BLOG</a>:
<p style="padding-left: 30px;"><em>There are two different kind of containers on Windows : Windows Container and Hyper-V Container. They work in the same way, instead of that Hyper-V containers are more isolated than Windows Container because they are running in a very lightweight virtual machine that provides kernel isolation and not just process isolation.</em></p>
<p style="padding-left: 30px;"><em>For more information about Hyper-V containers, check the official documentation on MSDN:<a title="https://msdn.microsoft.com/en-us/virtualization/windowscontainers/management/hyperv_container" href="https://msdn.microsoft.com/en-us/virtualization/windowscontainers/management/hyperv_container">https://msdn.microsoft.com/en-us/virtualization/windowscontainers/management/hyperv_container</a></em></p>
&nbsp;

看來 Microsoft 跟 Docker 的合作很密切啊，這版的 Docker CLI 就已經看的到這 options:
<pre class="lang:sh decode:true ">docker run --help</pre>
<p id="XzOqIyc"><img class="alignnone size-full wp-image-1273 " src="http://columns.chicken-house.net/wp-content/uploads/2016/06/img_575bb0070b9c4.png" alt="" /></p>
查了一下，這是 Windows Container 專用的參數啊 (就算你用 Docker for Windows 也沒用喔，是要 Windows Container)。找到正式說明這參數的文件，有兩份:
<h3>Docker Command Line Reference: <a href="https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container-isolation">run / --isolation</a></h3>
<h3 id="specify-isolation-technology-for-container-isolation" style="padding-left: 30px;"><em>Specify isolation technology for container (--isolation)</em></h3>
<p style="padding-left: 30px;"><em>This option is useful in situations where you are running Docker containers on Microsoft Windows. The <code>--isolation &lt;value&gt;</code>option sets a container’s isolation technology. On Linux, the only supported is the <code>default</code> option which uses Linux namespaces. These two commands are equivalent on Linux:</em></p>

<pre class="lang:c# decode:true ">$ docker run -d busybox top
$ docker run -d --isolation default busybox top</pre>
<p style="padding-left: 30px;"><em>On Microsoft Windows, can take any of these values:</em></p>

<table style="padding-left: 30px;">
<thead style="padding-left: 30px;">
<tr style="padding-left: 30px;">
<th style="padding-left: 30px;"><em>Value</em></th>
<th style="padding-left: 30px;"><em>Description</em></th>
</tr>
</thead>
<tbody style="padding-left: 30px;">
<tr style="padding-left: 30px;">
<td style="padding-left: 30px;"><em><code>default</code></em></td>
<td style="padding-left: 30px;"><em>Use the value specified by the Docker daemon’s<code>--exec-opt</code> . If the <code>daemon</code> does not specify an isolation technology, Microsoft Windows uses <code>process</code>as its default value.</em></td>
</tr>
<tr style="padding-left: 30px;">
<td style="padding-left: 30px;"><em><code>process</code></em></td>
<td style="padding-left: 30px;"><em>Namespace isolation only.</em></td>
</tr>
<tr style="padding-left: 30px;">
<td style="padding-left: 30px;"><em><code>hyperv</code></em></td>
<td style="padding-left: 30px;"><em>Hyper-V hypervisor partition-based isolation.</em></td>
</tr>
</tbody>
</table>
&nbsp;

&nbsp;

另外一份，則是 Microsoft 在 MSDN <a href="https://msdn.microsoft.com/en-us/virtualization/windowscontainers/management/hyperv_container">說明 Hyper-V Containers 的官方文件</a>:
<h3 id="hyper-v-container">Hyper-V container</h3>
<h3 id="create-container" style="padding-left: 30px;"><em>Create container</em></h3>
<p style="padding-left: 30px;"><em>Managing Hyper-V containers with Docker is almost identical to managing Windows Server containers. When creating a Hyper-V container with Docker, the <code>--isolation=hyperv</code> parameter is used.</em></p>

<pre class="lang:c# decode:true ">docker run -it --isolation=hyperv nanoserver cmd</pre>
<h3 style="padding-left: 30px;"></h3>
<h3 id="isolation-explanation" style="padding-left: 30px;"></h3>
<h1>總結</h1>
寫到這邊，總算把我這幾天研究成果寫完，可以告一段落了。落落長的寫了一堆，實際操作的細節，可能在將來 release 推出時都還會異動，各位其實不大需要去記這些細節。

不過更重要的，是透過 beta 搶先了解有那些問題會在將來的版本被解決掉? 還有官方的發展趨勢是什麼? 像這次就看到 Docker 跟兩大主流 Desktop OS 的無縫整合越做越好了，目的我想就是要改善 DevOps 流程的前段 (Development)。

另一個主軸就是 Docker 跟 Microsoft 的合作越來越密切了，這其實是件好事，對我而言這代表:
<ol>
 	<li>Microsoft 的 Windows Container 將會跟 Docker 有很好的相容性，不論是在架構上，工具上，甚至 API 都是。</li>
 	<li>Windows Container 除了 OS 的不同之外，Docker 在架構及流程上的好處都可以繼續沿用。</li>
 	<li>Docker Hub 官方公開的 Registration 也率先支援了 Windows Container, 更確保將來 Deployment 的機制是一致且可以共用的。</li>
</ol>
所以，雖然 Windows Server 2016 到現在還在 Tech <span style="color: #ff0000;"><strong>Preview</strong></span>，等到正式出來不知道等到啥時，不過他帶來的效益，是可以預期的。開發團隊盡早熟悉這個生態，絕對是件值得的投資~

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1238</wp:post_id>
		<wp:post_date><![CDATA[2016-06-11 14:51:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-11 06:51:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-for-window-beta-evaluate]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="msdn"><![CDATA[MSDN]]></category>
		<category domain="category" nicename="os"><![CDATA[作業系統]]></category>
		<category domain="category" nicename="columns"><![CDATA[專欄]]></category>
		<category domain="category" nicename="writing"><![CDATA[技術隨筆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1241]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%b0%88%e7%82%ba-windows-%e9%87%8f%e8%ba%ab%e8%a8%82%e5%81%9a%e7%9a%84-docker-for-windows-beta]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
