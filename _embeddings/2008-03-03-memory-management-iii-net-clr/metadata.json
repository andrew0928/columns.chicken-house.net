{
  "title": "Memory Management (III) - .NET CLR ?",
  "published": true,
  "categories": [
    "\u7CFB\u5217\u6587\u7AE0: Memory Management"
  ],
  "tags": [
    ".NET",
    "\u4F5C\u696D\u7CFB\u7D71",
    "\u6280\u8853\u96A8\u7B46"
  ],
  "tech-stacks": [
    ".NET CLR",
    ".NET 2.0 (x86)",
    "C#",
    "C",
    "Java",
    "Java VM",
    "Windows Vista x86",
    "Garbage Collection (GC)",
    "Server GC",
    "Workstation GC",
    "gcServer",
    "gcConcurrent",
    "IDisposable",
    "Reflector",
    "XML \u8A2D\u5B9A\u6A94"
  ],
  "keywords": [
    "Memory Management",
    ".NET",
    "CLR",
    "GC",
    "Garbage Collection",
    "generation",
    "IDisposable",
    "Heap",
    "memory fragment",
    "\u8A18\u61B6\u9AD4\u788E\u7247",
    "pointer",
    "\u6307\u6A19",
    "reference",
    "relocation",
    "compact collection",
    "Java",
    "C#",
    "JavaVM",
    "OutOfMemoryException",
    "Vista x86",
    "gcConcurrent",
    "gcServer",
    "workstation gc",
    "server gc",
    "Reflector",
    "native code",
    "byte[]",
    "List\u003Cbyte[]\u003E",
    "64MB",
    "72MB",
    "Program.cs",
    "configuration file"
  ],
  "generator": "BlogIndex.SyncPost v0.3.0.0, gpt-5",
  "references": [
    "/post/Memory-Management-(II)---Test-Result.aspx",
    "/post/Memory-Management---(I)-Fragment-.aspx",
    "http://www.microsoft.com/taiwan/msdn/columns/DoNet/garbage_collection.htm",
    "/images/2008-03-03-memory-management-iii-net-clr/image_3.png",
    "/images/2008-03-03-memory-management-iii-net-clr/image_5.png",
    "/images/2008-03-03-memory-management-iii-net-clr/image_7.png",
    "/images/2008-03-03-memory-management-iii-net-clr/image_9.png"
  ],
  "summary": "\u672C\u6587\u5EF6\u7E8C\u524D\u5169\u7BC7\u8A18\u61B6\u9AD4\u7BA1\u7406\u4E3B\u984C\uFF0C\u63A2\u8A0E\u5728 .NET \u74B0\u5883\u4E2D\u662F\u5426\u80FD\u4EE5 GC \u89E3\u6C7A\u8A18\u61B6\u9AD4\u788E\u7247\u554F\u984C\u3002\u4F5C\u8005\u6307\u51FA C \u8A9E\u8A00\u56E0\u53EF\u53D6\u5F97\u6307\u6A19\u8207\u5BE6\u9AD4\u4F4D\u5740\uFF0C\u7121\u6CD5\u5728\u57F7\u884C\u4E2D\u5B89\u5168\u642C\u79FB\u8A18\u61B6\u9AD4\uFF0C\u5C0E\u81F4\u788E\u7247\u96E3\u4EE5\u7531\u7CFB\u7D71\u5C64\u9762\u8655\u7406\uFF1B\u800C Java/C# \u79FB\u9664 pointer\u3001\u53EA\u4FDD\u7559 reference\uFF0C\u8B93 CLR/JavaVM \u5F97\u4EE5\u5728\u56DE\u6536\u6642\u9032\u884C\u91CD\u65B0\u5B9A\u5740\u8207\u58D3\u7E2E(compact collection)\u3002\u4F5C\u8005\u4EE5 .NET 2.0 x86 \u5728 Vista x86 \u6E2C\u8A66\uFF1A\u5148\u5927\u91CF\u914D\u7F6E 64MB byte[] \u76F4\u5230 OOM\uFF0C\u518D\u91CB\u653E\u90E8\u5206\u3001\u5617\u8A66\u914D\u7F6E 72MB \u5340\u584A\u3002\u50C5\u4F9D\u8CF4\u9810\u8A2D GC \u6216\u624B\u52D5 GC.Collect(MaxGeneration) \u6548\u679C\u4E0D\u4F73\uFF0C\u91CB\u653E\u7684\u7A7A\u9593\u7121\u6CD5\u6709\u6548\u518D\u5229\u7528\u3002\u63A5\u8457\u6E2C\u8A66 runtime \u8A2D\u5B9A\uFF1A\u95DC\u9589 gcConcurrent \u7121\u52A9\u65BC\u7D50\u679C\uFF1B\u555F\u7528 gcServer \u5247\u660E\u986F\u6539\u5584\uFF0C\u5148\u524D\u91CB\u653E\u7684\u6578\u767E MB \u7A7A\u9593\u5F97\u4EE5\u91CD\u65B0\u914D\u7F6E\uFF0C\u986F\u793A\u555F\u7528 Server GC \u6703\u9032\u884C\u6709\u6548\u7684 compact collection\uFF0C\u986F\u8457\u964D\u4F4E\u788E\u7247\u5F71\u97FF\u3002\u6587\u4EF6\u8207\u641C\u5C0B\u7D50\u679C\u591A\u50C5\u63CF\u8FF0 Server GC \u9069\u7528\u60C5\u5883\uFF0C\u672A\u660E\u8A00\u5176\u6703\u505A\u58D3\u7E2E\u56DE\u6536\uFF1B\u4EE5 Reflector \u8FFD\u67E5\u4E5F\u56E0\u9032\u5165 native \u5C64\u800C\u7121\u6CD5\u770B\u7D30\u7BC0\u3002\u7D50\u8AD6\u662F\uFF1A\u5728\u555F\u7528 gcServer \u6642\uFF0CCLR \u7684 GC \u6703\u505A compact collection\uFF0C\u53EF\u5F9E\u6839\u672C\u7DE9\u89E3\u6B64\u4F8B\u7684\u8A18\u61B6\u9AD4\u788E\u7247\u554F\u984C\u3002\u6587\u672B\u63D0\u4F9B\u5B8C\u6574 C# \u7BC4\u4F8B\u8207\u5C0D\u61C9\u7684 XML \u8A2D\u5B9A\uFF0C\u8B80\u8005\u53EF\u65BC\u4E0D\u540C\u5E73\u53F0\u91CD\u73FE\u6E2C\u8A66\u3002"
}