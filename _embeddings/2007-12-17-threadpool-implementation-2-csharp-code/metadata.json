{
  "title": "ThreadPool \u5BE6\u4F5C #2. \u7A0B\u5F0F\u78BC (C#)",
  "published": true,
  "categories": [
    "\u7CFB\u5217\u6587\u7AE0: Thread Pool \u5BE6\u4F5C"
  ],
  "tags": [
    ".NET",
    "\u4F5C\u696D\u7CFB\u7D71",
    "\u591A\u57F7\u884C\u7DD2",
    "\u6280\u8853\u96A8\u7B46"
  ],
  "tech-stacks": [
    "C#",
    ".NET",
    "System.Threading",
    "Thread",
    "ThreadPool",
    "ManualResetEvent",
    "WaitHandle",
    "ThreadPriority",
    "Queue",
    "List",
    "Windows OS"
  ],
  "keywords": [
    "ThreadPool",
    "SimpleThreadPool",
    "worker thread",
    "job queue",
    "QueueUserWorkItem",
    "WaitCallback",
    "WorkItem",
    "DoWorkerThread",
    "CreateWorkerThread",
    "WaitHandle.WaitOne",
    "ManualResetEvent",
    "enqueueNotify",
    "idle timeout",
    "thread idle timeout",
    "thread priority",
    "worker thread \u4E0A\u9650",
    "job queue \u5B89\u5168\u7BC4\u570D",
    "EndPool",
    "CancelPool",
    "blocked",
    "dequeue",
    "enqueue",
    "OS \u6392\u7A0B",
    "\u52D5\u614B\u5EFA\u7ACB thread",
    "\u56DE\u6536 thread",
    "\u540C\u6B65\u6A5F\u5236"
  ],
  "generator": "BlogIndex.SyncPost v0.3.0.0, gpt-5",
  "references": [
    "/2007/12/17/threadpool-\u5BE6\u4F5C-2-\u7A0B\u5F0F\u78BC-c/",
    "/columns/post/2007/12/17/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx/",
    "/post/2007/12/17/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx/",
    "/post/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx/",
    "/columns/2007/12/17/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx/",
    "/columns/ThreadPool-e5afa6e4bd9c-2-e7a88be5bc8fe7a2bc-(C).aspx/",
    "/blogs/chicken/archive/2007/12/17/2893.aspx/"
  ],
  "summary": "\u672C\u6587\u5EF6\u7E8C\u524D\u7BC7\u7684 pseudo code\uFF0C\u5BE6\u4F5C\u4E00\u500B\u53EF\u8A2D\u5B9A\u7684 SimpleThreadPool\u3002\u4F5C\u8005\u5148\u5B9A\u7FA9\u76EE\u6A19\uFF1A\u53EF\u7531\u4F7F\u7528\u8005\u63A7\u5236 worker thread \u4E0A\u9650\u3001\u512A\u5148\u6B0A\u3001idle timeout\uFF0C\u4EE5\u53CA job queue \u5B89\u5168\u7BC4\u570D\uFF1B\u7576\u4F47\u5217\u8D85\u904E\u5B89\u5168\u7BC4\u570D\u6642\u53EF\u52D5\u614B\u5EFA\u7ACB\u65B0 thread\uFF1B\u8D85\u6642\u7684 worker \u6703\u88AB\u56DE\u6536\uFF1B\u63D0\u4F9B\u7B49\u5F85\u5168\u90E8\u4EFB\u52D9\u5B8C\u6210\u7684\u540C\u6B65\u6A5F\u5236\uFF1B\u591A\u500B worker \u722D\u6436\u540C\u4E00\u5DE5\u4F5C\u6642\u4EA4\u7531\u4F5C\u696D\u7CFB\u7D71\u6C7A\u5B9A\u3002\u4ECB\u9762\u5305\u542B\u5EFA\u69CB\u5B50\u3001QueueUserWorkItem \u591A\u8F09\u3001EndPool/CancelPool \u8207 IDisposable\u3002\u4F7F\u7528\u7BC4\u4F8B\u793A\u7BC4\u5EFA\u7ACB 2 \u689D\u4F4E\u65BC\u4E00\u822C\u512A\u5148\u6B0A\u7684 thread\uFF0C\u6279\u6B21\u6392\u5165 25 \u500B\u5DE5\u4F5C\u4E26\u5728\u7D50\u675F\u524D\u547C\u53EB EndPool \u7B49\u5F85\u6E05\u7A7A\u3002\u6838\u5FC3\u5728 DoWorkerThread\uFF1A\u6BCF\u500B worker \u9032\u5165\u8FF4\u5708\uFF0C\u4E0D\u65B7\u5F9E\u4F47\u5217\u53D6\u51FA WorkItem \u57F7\u884C\uFF1B\u82E5\u53D6\u6D88\u65D7\u6A19\u70BA\u771F\u6216\u505C\u6B62\u5247\u96E2\u958B\uFF1B\u7576\u4F47\u5217\u6E05\u7A7A\u5F8C\uFF0C\u547C\u53EB WaitHandle.WaitOne \u9032\u5165\u7761\u7720\uFF0C\u82E5\u5728 idle timeout \u5167\u88AB enqueue \u901A\u77E5\u559A\u9192\u5247\u7E7C\u7E8C\u5DE5\u4F5C\uFF0C\u5426\u5247\u903E\u6642\u96E2\u958B\u4EE5\u56DE\u6536 worker\u3002\u52A0\u5165\u5DE5\u4F5C\u6642\uFF0C\u7576\u4F47\u5217\u5DF2\u6709\u7B49\u5F85\u4E14\u7576\u524D worker \u6578\u672A\u9054\u4E0A\u9650\u5373\u52D5\u614B CreateWorkerThread \u589E\u63F4\uFF0C\u4E26\u5728\u5165\u5217\u5F8C\u7528 ManualResetEvent.Set \u559A\u9192\u7B49\u5F85\u4E2D\u7684 worker\u3002\u6587\u672B\u8AAA\u660E\u70BA\u4F55\u9078 ManualResetEvent \u7684\u8A2D\u8A08\u8003\u91CF\u5C07\u7559\u5F85\u4E0B\u4E00\u7BC7\u8A73\u8FF0\u3002"
}